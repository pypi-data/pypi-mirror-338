# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'BlkioConfigArgs',
    'BlkioConfigArgsDict',
    'BuildConfigArgs',
    'BuildConfigArgsDict',
    'ConfigObjConfigArgs',
    'ConfigObjConfigArgsDict',
    'CredentialSpecConfigArgs',
    'CredentialSpecConfigArgsDict',
    'DeployConfigArgs',
    'DeployConfigArgsDict',
    'DevelopConfigArgs',
    'DevelopConfigArgsDict',
    'DeviceMappingArgs',
    'DeviceMappingArgsDict',
    'DeviceRequestArgs',
    'DeviceRequestArgsDict',
    'DiscreteGenericResourceArgs',
    'DiscreteGenericResourceArgsDict',
    'EnvFileArgs',
    'EnvFileArgsDict',
    'ExtendsConfigArgs',
    'ExtendsConfigArgsDict',
    'GenericResourceArgs',
    'GenericResourceArgsDict',
    'HealthCheckConfigArgs',
    'HealthCheckConfigArgsDict',
    'IPAMConfigArgs',
    'IPAMConfigArgsDict',
    'IPAMPoolArgs',
    'IPAMPoolArgsDict',
    'LoggingConfigArgs',
    'LoggingConfigArgsDict',
    'NetworkConfigArgs',
    'NetworkConfigArgsDict',
    'PlacementPreferencesArgs',
    'PlacementPreferencesArgsDict',
    'PlacementArgs',
    'PlacementArgsDict',
    'ResourcesArgs',
    'ResourcesArgsDict',
    'ResourceArgs',
    'ResourceArgsDict',
    'RestartPolicyArgs',
    'RestartPolicyArgsDict',
    'SSHKeyArgs',
    'SSHKeyArgsDict',
    'SecretConfigArgs',
    'SecretConfigArgsDict',
    'ServiceConfigObjConfigArgs',
    'ServiceConfigObjConfigArgsDict',
    'ServiceConfigArgs',
    'ServiceConfigArgsDict',
    'ServiceDependencyArgs',
    'ServiceDependencyArgsDict',
    'ServiceHookArgs',
    'ServiceHookArgsDict',
    'ServiceNetworkConfigArgs',
    'ServiceNetworkConfigArgsDict',
    'ServicePortConfigArgs',
    'ServicePortConfigArgsDict',
    'ServiceSecretConfigArgs',
    'ServiceSecretConfigArgsDict',
    'ServiceVolumeBindArgs',
    'ServiceVolumeBindArgsDict',
    'ServiceVolumeConfigArgs',
    'ServiceVolumeConfigArgsDict',
    'ServiceVolumeTmpfsArgs',
    'ServiceVolumeTmpfsArgsDict',
    'ServiceVolumeVolumeArgs',
    'ServiceVolumeVolumeArgsDict',
    'ThrottleDeviceArgs',
    'ThrottleDeviceArgsDict',
    'TriggerArgs',
    'TriggerArgsDict',
    'UlimitsConfigArgs',
    'UlimitsConfigArgsDict',
    'UpdateConfigArgs',
    'UpdateConfigArgsDict',
    'VolumeConfigArgs',
    'VolumeConfigArgsDict',
    'WeightDeviceArgs',
    'WeightDeviceArgsDict',
]

MYPY = False

if not MYPY:
    class BlkioConfigArgsDict(TypedDict):
        device_read_bps: pulumi.Input[Sequence[pulumi.Input['ThrottleDeviceArgsDict']]]
        device_read_iops: pulumi.Input[Sequence[pulumi.Input['ThrottleDeviceArgsDict']]]
        device_write_bps: pulumi.Input[Sequence[pulumi.Input['ThrottleDeviceArgsDict']]]
        device_write_iops: pulumi.Input[Sequence[pulumi.Input['ThrottleDeviceArgsDict']]]
        weight: pulumi.Input[builtins.int]
        weight_device: pulumi.Input[Sequence[pulumi.Input['WeightDeviceArgsDict']]]
elif False:
    BlkioConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlkioConfigArgs:
    def __init__(__self__, *,
                 device_read_bps: pulumi.Input[Sequence[pulumi.Input['ThrottleDeviceArgs']]],
                 device_read_iops: pulumi.Input[Sequence[pulumi.Input['ThrottleDeviceArgs']]],
                 device_write_bps: pulumi.Input[Sequence[pulumi.Input['ThrottleDeviceArgs']]],
                 device_write_iops: pulumi.Input[Sequence[pulumi.Input['ThrottleDeviceArgs']]],
                 weight: pulumi.Input[builtins.int],
                 weight_device: pulumi.Input[Sequence[pulumi.Input['WeightDeviceArgs']]]):
        pulumi.set(__self__, "device_read_bps", device_read_bps)
        pulumi.set(__self__, "device_read_iops", device_read_iops)
        pulumi.set(__self__, "device_write_bps", device_write_bps)
        pulumi.set(__self__, "device_write_iops", device_write_iops)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "weight_device", weight_device)

    @property
    @pulumi.getter
    def device_read_bps(self) -> pulumi.Input[Sequence[pulumi.Input['ThrottleDeviceArgs']]]:
        return pulumi.get(self, "device_read_bps")

    @device_read_bps.setter
    def device_read_bps(self, value: pulumi.Input[Sequence[pulumi.Input['ThrottleDeviceArgs']]]):
        pulumi.set(self, "device_read_bps", value)

    @property
    @pulumi.getter
    def device_read_iops(self) -> pulumi.Input[Sequence[pulumi.Input['ThrottleDeviceArgs']]]:
        return pulumi.get(self, "device_read_iops")

    @device_read_iops.setter
    def device_read_iops(self, value: pulumi.Input[Sequence[pulumi.Input['ThrottleDeviceArgs']]]):
        pulumi.set(self, "device_read_iops", value)

    @property
    @pulumi.getter
    def device_write_bps(self) -> pulumi.Input[Sequence[pulumi.Input['ThrottleDeviceArgs']]]:
        return pulumi.get(self, "device_write_bps")

    @device_write_bps.setter
    def device_write_bps(self, value: pulumi.Input[Sequence[pulumi.Input['ThrottleDeviceArgs']]]):
        pulumi.set(self, "device_write_bps", value)

    @property
    @pulumi.getter
    def device_write_iops(self) -> pulumi.Input[Sequence[pulumi.Input['ThrottleDeviceArgs']]]:
        return pulumi.get(self, "device_write_iops")

    @device_write_iops.setter
    def device_write_iops(self, value: pulumi.Input[Sequence[pulumi.Input['ThrottleDeviceArgs']]]):
        pulumi.set(self, "device_write_iops", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "weight", value)

    @property
    @pulumi.getter
    def weight_device(self) -> pulumi.Input[Sequence[pulumi.Input['WeightDeviceArgs']]]:
        return pulumi.get(self, "weight_device")

    @weight_device.setter
    def weight_device(self, value: pulumi.Input[Sequence[pulumi.Input['WeightDeviceArgs']]]):
        pulumi.set(self, "weight_device", value)


if not MYPY:
    class BuildConfigArgsDict(TypedDict):
        additional_contexts: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        args: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        cache_from: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        cache_to: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        context: pulumi.Input[builtins.str]
        dockerfile: pulumi.Input[builtins.str]
        dockerfile_inline: pulumi.Input[builtins.str]
        entitlements: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        extra_hosts: pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]]
        isolation: pulumi.Input[builtins.str]
        labels: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        network: pulumi.Input[builtins.str]
        no_cache: pulumi.Input[builtins.bool]
        platforms: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        privileged: pulumi.Input[builtins.bool]
        pull: pulumi.Input[builtins.bool]
        secrets: pulumi.Input[Sequence[pulumi.Input['ServiceSecretConfigArgsDict']]]
        shm_size: pulumi.Input[builtins.int]
        ssh: pulumi.Input[Sequence[pulumi.Input['SSHKeyArgsDict']]]
        tags: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        target: pulumi.Input[builtins.str]
        ulimits: pulumi.Input[Mapping[str, pulumi.Input['UlimitsConfigArgsDict']]]
elif False:
    BuildConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BuildConfigArgs:
    def __init__(__self__, *,
                 additional_contexts: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 args: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 cache_from: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 cache_to: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 context: pulumi.Input[builtins.str],
                 dockerfile: pulumi.Input[builtins.str],
                 dockerfile_inline: pulumi.Input[builtins.str],
                 entitlements: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 extra_hosts: pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]],
                 isolation: pulumi.Input[builtins.str],
                 labels: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 network: pulumi.Input[builtins.str],
                 no_cache: pulumi.Input[builtins.bool],
                 platforms: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 privileged: pulumi.Input[builtins.bool],
                 pull: pulumi.Input[builtins.bool],
                 secrets: pulumi.Input[Sequence[pulumi.Input['ServiceSecretConfigArgs']]],
                 shm_size: pulumi.Input[builtins.int],
                 ssh: pulumi.Input[Sequence[pulumi.Input['SSHKeyArgs']]],
                 tags: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 target: pulumi.Input[builtins.str],
                 ulimits: pulumi.Input[Mapping[str, pulumi.Input['UlimitsConfigArgs']]]):
        pulumi.set(__self__, "additional_contexts", additional_contexts)
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "cache_from", cache_from)
        pulumi.set(__self__, "cache_to", cache_to)
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "dockerfile", dockerfile)
        pulumi.set(__self__, "dockerfile_inline", dockerfile_inline)
        pulumi.set(__self__, "entitlements", entitlements)
        pulumi.set(__self__, "extra_hosts", extra_hosts)
        pulumi.set(__self__, "isolation", isolation)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "no_cache", no_cache)
        pulumi.set(__self__, "platforms", platforms)
        pulumi.set(__self__, "privileged", privileged)
        pulumi.set(__self__, "pull", pull)
        pulumi.set(__self__, "secrets", secrets)
        pulumi.set(__self__, "shm_size", shm_size)
        pulumi.set(__self__, "ssh", ssh)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "ulimits", ulimits)

    @property
    @pulumi.getter
    def additional_contexts(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "additional_contexts")

    @additional_contexts.setter
    def additional_contexts(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "additional_contexts", value)

    @property
    @pulumi.getter
    def args(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def cache_from(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "cache_from")

    @cache_from.setter
    def cache_from(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "cache_from", value)

    @property
    @pulumi.getter
    def cache_to(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "cache_to")

    @cache_to.setter
    def cache_to(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "cache_to", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def dockerfile(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "dockerfile")

    @dockerfile.setter
    def dockerfile(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "dockerfile", value)

    @property
    @pulumi.getter
    def dockerfile_inline(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "dockerfile_inline")

    @dockerfile_inline.setter
    def dockerfile_inline(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "dockerfile_inline", value)

    @property
    @pulumi.getter
    def entitlements(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "entitlements")

    @entitlements.setter
    def entitlements(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "entitlements", value)

    @property
    @pulumi.getter
    def extra_hosts(self) -> pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]]:
        return pulumi.get(self, "extra_hosts")

    @extra_hosts.setter
    def extra_hosts(self, value: pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]]):
        pulumi.set(self, "extra_hosts", value)

    @property
    @pulumi.getter
    def isolation(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "isolation")

    @isolation.setter
    def isolation(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "isolation", value)

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def no_cache(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "no_cache")

    @no_cache.setter
    def no_cache(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "no_cache", value)

    @property
    @pulumi.getter
    def platforms(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "platforms")

    @platforms.setter
    def platforms(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "platforms", value)

    @property
    @pulumi.getter
    def privileged(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "privileged")

    @privileged.setter
    def privileged(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "privileged", value)

    @property
    @pulumi.getter
    def pull(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "pull")

    @pull.setter
    def pull(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "pull", value)

    @property
    @pulumi.getter
    def secrets(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceSecretConfigArgs']]]:
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceSecretConfigArgs']]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter
    def shm_size(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "shm_size")

    @shm_size.setter
    def shm_size(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "shm_size", value)

    @property
    @pulumi.getter
    def ssh(self) -> pulumi.Input[Sequence[pulumi.Input['SSHKeyArgs']]]:
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: pulumi.Input[Sequence[pulumi.Input['SSHKeyArgs']]]):
        pulumi.set(self, "ssh", value)

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def ulimits(self) -> pulumi.Input[Mapping[str, pulumi.Input['UlimitsConfigArgs']]]:
        return pulumi.get(self, "ulimits")

    @ulimits.setter
    def ulimits(self, value: pulumi.Input[Mapping[str, pulumi.Input['UlimitsConfigArgs']]]):
        pulumi.set(self, "ulimits", value)


if not MYPY:
    class ConfigObjConfigArgsDict(TypedDict):
        content: pulumi.Input[builtins.str]
        driver: pulumi.Input[builtins.str]
        driver_opts: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        environment: pulumi.Input[builtins.str]
        external: pulumi.Input[builtins.bool]
        file: pulumi.Input[builtins.str]
        labels: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        name: pulumi.Input[builtins.str]
        template_driver: pulumi.Input[builtins.str]
elif False:
    ConfigObjConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigObjConfigArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[builtins.str],
                 driver: pulumi.Input[builtins.str],
                 driver_opts: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 environment: pulumi.Input[builtins.str],
                 external: pulumi.Input[builtins.bool],
                 file: pulumi.Input[builtins.str],
                 labels: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 name: pulumi.Input[builtins.str],
                 template_driver: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "driver", driver)
        pulumi.set(__self__, "driver_opts", driver_opts)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "external", external)
        pulumi.set(__self__, "file", file)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "template_driver", template_driver)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter
    def driver_opts(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "driver_opts")

    @driver_opts.setter
    def driver_opts(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "driver_opts", value)

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def external(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter
    def file(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def template_driver(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "template_driver")

    @template_driver.setter
    def template_driver(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "template_driver", value)


if not MYPY:
    class CredentialSpecConfigArgsDict(TypedDict):
        config: pulumi.Input[builtins.str]
        file: pulumi.Input[builtins.str]
        registry: pulumi.Input[builtins.str]
elif False:
    CredentialSpecConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialSpecConfigArgs:
    def __init__(__self__, *,
                 config: pulumi.Input[builtins.str],
                 file: pulumi.Input[builtins.str],
                 registry: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "file", file)
        pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def file(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def registry(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "registry", value)


if not MYPY:
    class DeployConfigArgsDict(TypedDict):
        endpoint_mode: pulumi.Input[builtins.str]
        labels: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        mode: pulumi.Input[builtins.str]
        placement: pulumi.Input['PlacementArgsDict']
        replicas: pulumi.Input[builtins.int]
        resources: pulumi.Input['ResourcesArgsDict']
        restart_policy: pulumi.Input['RestartPolicyArgsDict']
        rollback_config: pulumi.Input['UpdateConfigArgsDict']
        update_config: pulumi.Input['UpdateConfigArgsDict']
elif False:
    DeployConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeployConfigArgs:
    def __init__(__self__, *,
                 endpoint_mode: pulumi.Input[builtins.str],
                 labels: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 mode: pulumi.Input[builtins.str],
                 placement: pulumi.Input['PlacementArgs'],
                 replicas: pulumi.Input[builtins.int],
                 resources: pulumi.Input['ResourcesArgs'],
                 restart_policy: pulumi.Input['RestartPolicyArgs'],
                 rollback_config: pulumi.Input['UpdateConfigArgs'],
                 update_config: pulumi.Input['UpdateConfigArgs']):
        pulumi.set(__self__, "endpoint_mode", endpoint_mode)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "placement", placement)
        pulumi.set(__self__, "replicas", replicas)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "restart_policy", restart_policy)
        pulumi.set(__self__, "rollback_config", rollback_config)
        pulumi.set(__self__, "update_config", update_config)

    @property
    @pulumi.getter
    def endpoint_mode(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "endpoint_mode")

    @endpoint_mode.setter
    def endpoint_mode(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "endpoint_mode", value)

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def placement(self) -> pulumi.Input['PlacementArgs']:
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: pulumi.Input['PlacementArgs']):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter
    def replicas(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input['ResourcesArgs']:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input['ResourcesArgs']):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def restart_policy(self) -> pulumi.Input['RestartPolicyArgs']:
        return pulumi.get(self, "restart_policy")

    @restart_policy.setter
    def restart_policy(self, value: pulumi.Input['RestartPolicyArgs']):
        pulumi.set(self, "restart_policy", value)

    @property
    @pulumi.getter
    def rollback_config(self) -> pulumi.Input['UpdateConfigArgs']:
        return pulumi.get(self, "rollback_config")

    @rollback_config.setter
    def rollback_config(self, value: pulumi.Input['UpdateConfigArgs']):
        pulumi.set(self, "rollback_config", value)

    @property
    @pulumi.getter
    def update_config(self) -> pulumi.Input['UpdateConfigArgs']:
        return pulumi.get(self, "update_config")

    @update_config.setter
    def update_config(self, value: pulumi.Input['UpdateConfigArgs']):
        pulumi.set(self, "update_config", value)


if not MYPY:
    class DevelopConfigArgsDict(TypedDict):
        watch: pulumi.Input[Sequence[pulumi.Input['TriggerArgsDict']]]
elif False:
    DevelopConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DevelopConfigArgs:
    def __init__(__self__, *,
                 watch: pulumi.Input[Sequence[pulumi.Input['TriggerArgs']]]):
        pulumi.set(__self__, "watch", watch)

    @property
    @pulumi.getter
    def watch(self) -> pulumi.Input[Sequence[pulumi.Input['TriggerArgs']]]:
        return pulumi.get(self, "watch")

    @watch.setter
    def watch(self, value: pulumi.Input[Sequence[pulumi.Input['TriggerArgs']]]):
        pulumi.set(self, "watch", value)


if not MYPY:
    class DeviceMappingArgsDict(TypedDict):
        permissions: pulumi.Input[builtins.str]
        source: pulumi.Input[builtins.str]
        target: pulumi.Input[builtins.str]
elif False:
    DeviceMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeviceMappingArgs:
    def __init__(__self__, *,
                 permissions: pulumi.Input[builtins.str],
                 source: pulumi.Input[builtins.str],
                 target: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "target", value)


if not MYPY:
    class DeviceRequestArgsDict(TypedDict):
        capabilities: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        count: pulumi.Input[builtins.int]
        device_ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        driver: pulumi.Input[builtins.str]
        options: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
elif False:
    DeviceRequestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeviceRequestArgs:
    def __init__(__self__, *,
                 capabilities: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 count: pulumi.Input[builtins.int],
                 device_ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 driver: pulumi.Input[builtins.str],
                 options: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "device_ids", device_ids)
        pulumi.set(__self__, "driver", driver)
        pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter
    def capabilities(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "capabilities")

    @capabilities.setter
    def capabilities(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "capabilities", value)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def device_ids(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "device_ids")

    @device_ids.setter
    def device_ids(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "device_ids", value)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter
    def options(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "options", value)


if not MYPY:
    class DiscreteGenericResourceArgsDict(TypedDict):
        kind: pulumi.Input[builtins.str]
        value: pulumi.Input[builtins.int]
elif False:
    DiscreteGenericResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DiscreteGenericResourceArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.int]):
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "value", value)


if not MYPY:
    class EnvFileArgsDict(TypedDict):
        format: pulumi.Input[builtins.str]
        path: pulumi.Input[builtins.str]
        required: pulumi.Input[builtins.bool]
elif False:
    EnvFileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnvFileArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[builtins.str],
                 path: pulumi.Input[builtins.str],
                 required: pulumi.Input[builtins.bool]):
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def required(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "required", value)


if not MYPY:
    class ExtendsConfigArgsDict(TypedDict):
        file: pulumi.Input[builtins.str]
        service: pulumi.Input[builtins.str]
elif False:
    ExtendsConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExtendsConfigArgs:
    def __init__(__self__, *,
                 file: pulumi.Input[builtins.str],
                 service: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "file", file)
        pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def file(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "service", value)


if not MYPY:
    class GenericResourceArgsDict(TypedDict):
        discrete_resource_spec: pulumi.Input['DiscreteGenericResourceArgsDict']
elif False:
    GenericResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GenericResourceArgs:
    def __init__(__self__, *,
                 discrete_resource_spec: pulumi.Input['DiscreteGenericResourceArgs']):
        pulumi.set(__self__, "discrete_resource_spec", discrete_resource_spec)

    @property
    @pulumi.getter
    def discrete_resource_spec(self) -> pulumi.Input['DiscreteGenericResourceArgs']:
        return pulumi.get(self, "discrete_resource_spec")

    @discrete_resource_spec.setter
    def discrete_resource_spec(self, value: pulumi.Input['DiscreteGenericResourceArgs']):
        pulumi.set(self, "discrete_resource_spec", value)


if not MYPY:
    class HealthCheckConfigArgsDict(TypedDict):
        disable: pulumi.Input[builtins.bool]
        interval: pulumi.Input[builtins.int]
        retries: pulumi.Input[builtins.int]
        start_interval: pulumi.Input[builtins.int]
        start_period: pulumi.Input[builtins.int]
        test: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        timeout: pulumi.Input[builtins.int]
elif False:
    HealthCheckConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HealthCheckConfigArgs:
    def __init__(__self__, *,
                 disable: pulumi.Input[builtins.bool],
                 interval: pulumi.Input[builtins.int],
                 retries: pulumi.Input[builtins.int],
                 start_interval: pulumi.Input[builtins.int],
                 start_period: pulumi.Input[builtins.int],
                 test: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 timeout: pulumi.Input[builtins.int]):
        pulumi.set(__self__, "disable", disable)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "retries", retries)
        pulumi.set(__self__, "start_interval", start_interval)
        pulumi.set(__self__, "start_period", start_period)
        pulumi.set(__self__, "test", test)
        pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def disable(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "disable")

    @disable.setter
    def disable(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "disable", value)

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def retries(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter
    def start_interval(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "start_interval")

    @start_interval.setter
    def start_interval(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "start_interval", value)

    @property
    @pulumi.getter
    def start_period(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "start_period")

    @start_period.setter
    def start_period(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "start_period", value)

    @property
    @pulumi.getter
    def test(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "test")

    @test.setter
    def test(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "test", value)

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "timeout", value)


if not MYPY:
    class IPAMConfigArgsDict(TypedDict):
        config: pulumi.Input[Sequence[pulumi.Input['IPAMPoolArgsDict']]]
        driver: pulumi.Input[builtins.str]
elif False:
    IPAMConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IPAMConfigArgs:
    def __init__(__self__, *,
                 config: pulumi.Input[Sequence[pulumi.Input['IPAMPoolArgs']]],
                 driver: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "driver", driver)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Input[Sequence[pulumi.Input['IPAMPoolArgs']]]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: pulumi.Input[Sequence[pulumi.Input['IPAMPoolArgs']]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "driver", value)


if not MYPY:
    class IPAMPoolArgsDict(TypedDict):
        aux_addresses: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        gateway: pulumi.Input[builtins.str]
        ip_range: pulumi.Input[builtins.str]
        subnet: pulumi.Input[builtins.str]
elif False:
    IPAMPoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IPAMPoolArgs:
    def __init__(__self__, *,
                 aux_addresses: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 gateway: pulumi.Input[builtins.str],
                 ip_range: pulumi.Input[builtins.str],
                 subnet: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "aux_addresses", aux_addresses)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "ip_range", ip_range)
        pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def aux_addresses(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "aux_addresses")

    @aux_addresses.setter
    def aux_addresses(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "aux_addresses", value)

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def ip_range(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "ip_range")

    @ip_range.setter
    def ip_range(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "ip_range", value)

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "subnet", value)


if not MYPY:
    class LoggingConfigArgsDict(TypedDict):
        driver: pulumi.Input[builtins.str]
        options: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
elif False:
    LoggingConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoggingConfigArgs:
    def __init__(__self__, *,
                 driver: pulumi.Input[builtins.str],
                 options: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(__self__, "driver", driver)
        pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter
    def options(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "options", value)


if not MYPY:
    class NetworkConfigArgsDict(TypedDict):
        attachable: pulumi.Input[builtins.bool]
        driver: pulumi.Input[builtins.str]
        driver_opts: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        enable_ipv6: pulumi.Input[builtins.bool]
        external: pulumi.Input[builtins.bool]
        internal: pulumi.Input[builtins.bool]
        ipam: pulumi.Input['IPAMConfigArgsDict']
        labels: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        name: pulumi.Input[builtins.str]
elif False:
    NetworkConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkConfigArgs:
    def __init__(__self__, *,
                 attachable: pulumi.Input[builtins.bool],
                 driver: pulumi.Input[builtins.str],
                 driver_opts: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 enable_ipv6: pulumi.Input[builtins.bool],
                 external: pulumi.Input[builtins.bool],
                 internal: pulumi.Input[builtins.bool],
                 ipam: pulumi.Input['IPAMConfigArgs'],
                 labels: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 name: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "attachable", attachable)
        pulumi.set(__self__, "driver", driver)
        pulumi.set(__self__, "driver_opts", driver_opts)
        pulumi.set(__self__, "enable_ipv6", enable_ipv6)
        pulumi.set(__self__, "external", external)
        pulumi.set(__self__, "internal", internal)
        pulumi.set(__self__, "ipam", ipam)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def attachable(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "attachable")

    @attachable.setter
    def attachable(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "attachable", value)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter
    def driver_opts(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "driver_opts")

    @driver_opts.setter
    def driver_opts(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "driver_opts", value)

    @property
    @pulumi.getter
    def enable_ipv6(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "enable_ipv6")

    @enable_ipv6.setter
    def enable_ipv6(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enable_ipv6", value)

    @property
    @pulumi.getter
    def external(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter
    def internal(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "internal")

    @internal.setter
    def internal(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "internal", value)

    @property
    @pulumi.getter
    def ipam(self) -> pulumi.Input['IPAMConfigArgs']:
        return pulumi.get(self, "ipam")

    @ipam.setter
    def ipam(self, value: pulumi.Input['IPAMConfigArgs']):
        pulumi.set(self, "ipam", value)

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class PlacementPreferencesArgsDict(TypedDict):
        spread: pulumi.Input[builtins.str]
elif False:
    PlacementPreferencesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PlacementPreferencesArgs:
    def __init__(__self__, *,
                 spread: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "spread", spread)

    @property
    @pulumi.getter
    def spread(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "spread")

    @spread.setter
    def spread(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "spread", value)


if not MYPY:
    class PlacementArgsDict(TypedDict):
        constraints: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        max_replicas_per_node: pulumi.Input[builtins.int]
        preferences: pulumi.Input[Sequence[pulumi.Input['PlacementPreferencesArgsDict']]]
elif False:
    PlacementArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PlacementArgs:
    def __init__(__self__, *,
                 constraints: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 max_replicas_per_node: pulumi.Input[builtins.int],
                 preferences: pulumi.Input[Sequence[pulumi.Input['PlacementPreferencesArgs']]]):
        pulumi.set(__self__, "constraints", constraints)
        pulumi.set(__self__, "max_replicas_per_node", max_replicas_per_node)
        pulumi.set(__self__, "preferences", preferences)

    @property
    @pulumi.getter
    def constraints(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "constraints", value)

    @property
    @pulumi.getter
    def max_replicas_per_node(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "max_replicas_per_node")

    @max_replicas_per_node.setter
    def max_replicas_per_node(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "max_replicas_per_node", value)

    @property
    @pulumi.getter
    def preferences(self) -> pulumi.Input[Sequence[pulumi.Input['PlacementPreferencesArgs']]]:
        return pulumi.get(self, "preferences")

    @preferences.setter
    def preferences(self, value: pulumi.Input[Sequence[pulumi.Input['PlacementPreferencesArgs']]]):
        pulumi.set(self, "preferences", value)


if not MYPY:
    class ResourcesArgsDict(TypedDict):
        limits: pulumi.Input['ResourceArgsDict']
        reservations: pulumi.Input['ResourceArgsDict']
elif False:
    ResourcesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourcesArgs:
    def __init__(__self__, *,
                 limits: pulumi.Input['ResourceArgs'],
                 reservations: pulumi.Input['ResourceArgs']):
        pulumi.set(__self__, "limits", limits)
        pulumi.set(__self__, "reservations", reservations)

    @property
    @pulumi.getter
    def limits(self) -> pulumi.Input['ResourceArgs']:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: pulumi.Input['ResourceArgs']):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def reservations(self) -> pulumi.Input['ResourceArgs']:
        return pulumi.get(self, "reservations")

    @reservations.setter
    def reservations(self, value: pulumi.Input['ResourceArgs']):
        pulumi.set(self, "reservations", value)


if not MYPY:
    class ResourceArgsDict(TypedDict):
        cpus: pulumi.Input[builtins.float]
        devices: pulumi.Input[Sequence[pulumi.Input['DeviceRequestArgsDict']]]
        generic_resources: pulumi.Input[Sequence[pulumi.Input['GenericResourceArgsDict']]]
        memory: pulumi.Input[builtins.int]
        pids: pulumi.Input[builtins.int]
elif False:
    ResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceArgs:
    def __init__(__self__, *,
                 cpus: pulumi.Input[builtins.float],
                 devices: pulumi.Input[Sequence[pulumi.Input['DeviceRequestArgs']]],
                 generic_resources: pulumi.Input[Sequence[pulumi.Input['GenericResourceArgs']]],
                 memory: pulumi.Input[builtins.int],
                 pids: pulumi.Input[builtins.int]):
        pulumi.set(__self__, "cpus", cpus)
        pulumi.set(__self__, "devices", devices)
        pulumi.set(__self__, "generic_resources", generic_resources)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "pids", pids)

    @property
    @pulumi.getter
    def cpus(self) -> pulumi.Input[builtins.float]:
        return pulumi.get(self, "cpus")

    @cpus.setter
    def cpus(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "cpus", value)

    @property
    @pulumi.getter
    def devices(self) -> pulumi.Input[Sequence[pulumi.Input['DeviceRequestArgs']]]:
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: pulumi.Input[Sequence[pulumi.Input['DeviceRequestArgs']]]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter
    def generic_resources(self) -> pulumi.Input[Sequence[pulumi.Input['GenericResourceArgs']]]:
        return pulumi.get(self, "generic_resources")

    @generic_resources.setter
    def generic_resources(self, value: pulumi.Input[Sequence[pulumi.Input['GenericResourceArgs']]]):
        pulumi.set(self, "generic_resources", value)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def pids(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "pids")

    @pids.setter
    def pids(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "pids", value)


if not MYPY:
    class RestartPolicyArgsDict(TypedDict):
        condition: pulumi.Input[builtins.str]
        delay: pulumi.Input[builtins.int]
        max_attempts: pulumi.Input[builtins.int]
        window: pulumi.Input[builtins.int]
elif False:
    RestartPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RestartPolicyArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input[builtins.str],
                 delay: pulumi.Input[builtins.int],
                 max_attempts: pulumi.Input[builtins.int],
                 window: pulumi.Input[builtins.int]):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "delay", delay)
        pulumi.set(__self__, "max_attempts", max_attempts)
        pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def delay(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter
    def max_attempts(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "max_attempts")

    @max_attempts.setter
    def max_attempts(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "max_attempts", value)

    @property
    @pulumi.getter
    def window(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "window", value)


if not MYPY:
    class SSHKeyArgsDict(TypedDict):
        id: pulumi.Input[builtins.str]
        path: pulumi.Input[builtins.str]
elif False:
    SSHKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SSHKeyArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[builtins.str],
                 path: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "path", value)


if not MYPY:
    class SecretConfigArgsDict(TypedDict):
        content: pulumi.Input[builtins.str]
        driver: pulumi.Input[builtins.str]
        driver_opts: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        environment: pulumi.Input[builtins.str]
        external: pulumi.Input[builtins.bool]
        file: pulumi.Input[builtins.str]
        labels: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        name: pulumi.Input[builtins.str]
        template_driver: pulumi.Input[builtins.str]
elif False:
    SecretConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretConfigArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[builtins.str],
                 driver: pulumi.Input[builtins.str],
                 driver_opts: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 environment: pulumi.Input[builtins.str],
                 external: pulumi.Input[builtins.bool],
                 file: pulumi.Input[builtins.str],
                 labels: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 name: pulumi.Input[builtins.str],
                 template_driver: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "driver", driver)
        pulumi.set(__self__, "driver_opts", driver_opts)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "external", external)
        pulumi.set(__self__, "file", file)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "template_driver", template_driver)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter
    def driver_opts(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "driver_opts")

    @driver_opts.setter
    def driver_opts(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "driver_opts", value)

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def external(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter
    def file(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def template_driver(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "template_driver")

    @template_driver.setter
    def template_driver(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "template_driver", value)


if not MYPY:
    class ServiceConfigObjConfigArgsDict(TypedDict):
        gid: pulumi.Input[builtins.str]
        mode: pulumi.Input[builtins.int]
        source: pulumi.Input[builtins.str]
        target: pulumi.Input[builtins.str]
        uid: pulumi.Input[builtins.str]
elif False:
    ServiceConfigObjConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceConfigObjConfigArgs:
    def __init__(__self__, *,
                 gid: pulumi.Input[builtins.str],
                 mode: pulumi.Input[builtins.int],
                 source: pulumi.Input[builtins.str],
                 target: pulumi.Input[builtins.str],
                 uid: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "gid", gid)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def gid(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "gid")

    @gid.setter
    def gid(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "gid", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "uid", value)


if not MYPY:
    class ServiceConfigArgsDict(TypedDict):
        annotations: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        attach: pulumi.Input[builtins.bool]
        blkio_config: pulumi.Input['BlkioConfigArgsDict']
        build: pulumi.Input['BuildConfigArgsDict']
        cap_add: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        cap_drop: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        cgroup: pulumi.Input[builtins.str]
        cgroup_parent: pulumi.Input[builtins.str]
        command: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        configs: pulumi.Input[Sequence[pulumi.Input['ServiceConfigObjConfigArgsDict']]]
        container_name: pulumi.Input[builtins.str]
        cpu_count: pulumi.Input[builtins.int]
        cpu_percent: pulumi.Input[builtins.float]
        cpu_period: pulumi.Input[builtins.int]
        cpu_quota: pulumi.Input[builtins.int]
        cpu_rt_period: pulumi.Input[builtins.int]
        cpu_rt_runtime: pulumi.Input[builtins.int]
        cpu_shares: pulumi.Input[builtins.int]
        cpus: pulumi.Input[builtins.float]
        cpuset: pulumi.Input[builtins.str]
        credential_spec: pulumi.Input['CredentialSpecConfigArgsDict']
        depends_on: pulumi.Input[Mapping[str, pulumi.Input['ServiceDependencyArgsDict']]]
        deploy: pulumi.Input['DeployConfigArgsDict']
        develop: pulumi.Input['DevelopConfigArgsDict']
        device_cgroup_rules: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        devices: pulumi.Input[Sequence[pulumi.Input['DeviceMappingArgsDict']]]
        dns: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        dns_opt: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        dns_search: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        dockerfile: pulumi.Input[builtins.str]
        domainname: pulumi.Input[builtins.str]
        entrypoint: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        env_file: pulumi.Input[Sequence[pulumi.Input['EnvFileArgsDict']]]
        environment: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        expose: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        extends: pulumi.Input['ExtendsConfigArgsDict']
        external_links: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        extra_hosts: pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]]
        gpus: pulumi.Input[Sequence[pulumi.Input['DeviceRequestArgsDict']]]
        group_add: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        healthcheck: pulumi.Input['HealthCheckConfigArgsDict']
        hostname: pulumi.Input[builtins.str]
        image: pulumi.Input[builtins.str]
        init: pulumi.Input[builtins.bool]
        ipc: pulumi.Input[builtins.str]
        isolation: pulumi.Input[builtins.str]
        labels: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        links: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        log_driver: pulumi.Input[builtins.str]
        log_opt: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        logging: pulumi.Input['LoggingConfigArgsDict']
        mac_address: pulumi.Input[builtins.str]
        mem_limit: pulumi.Input[builtins.int]
        mem_reservation: pulumi.Input[builtins.int]
        mem_swappiness: pulumi.Input[builtins.int]
        memswap_limit: pulumi.Input[builtins.int]
        net: pulumi.Input[builtins.str]
        network_mode: pulumi.Input[builtins.str]
        networks: pulumi.Input[Mapping[str, pulumi.Input['ServiceNetworkConfigArgsDict']]]
        oom_kill_disable: pulumi.Input[builtins.bool]
        oom_score_adj: pulumi.Input[builtins.int]
        pid: pulumi.Input[builtins.str]
        pids_limit: pulumi.Input[builtins.int]
        platform: pulumi.Input[builtins.str]
        ports: pulumi.Input[Sequence[pulumi.Input['ServicePortConfigArgsDict']]]
        post_start: pulumi.Input[Sequence[pulumi.Input['ServiceHookArgsDict']]]
        pre_stop: pulumi.Input[Sequence[pulumi.Input['ServiceHookArgsDict']]]
        privileged: pulumi.Input[builtins.bool]
        profiles: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        pull_policy: pulumi.Input[builtins.str]
        read_only: pulumi.Input[builtins.bool]
        restart: pulumi.Input[builtins.str]
        runtime: pulumi.Input[builtins.str]
        scale: pulumi.Input[builtins.int]
        secrets: pulumi.Input[Sequence[pulumi.Input['ServiceSecretConfigArgsDict']]]
        security_opt: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        shm_size: pulumi.Input[builtins.int]
        stdin_open: pulumi.Input[builtins.bool]
        stop_grace_period: pulumi.Input[builtins.int]
        stop_signal: pulumi.Input[builtins.str]
        storage_opt: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        sysctls: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        tmpfs: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        tty: pulumi.Input[builtins.bool]
        ulimits: pulumi.Input[Mapping[str, pulumi.Input['UlimitsConfigArgsDict']]]
        user: pulumi.Input[builtins.str]
        userns_mode: pulumi.Input[builtins.str]
        uts: pulumi.Input[builtins.str]
        volume_driver: pulumi.Input[builtins.str]
        volumes: pulumi.Input[Sequence[pulumi.Input['ServiceVolumeConfigArgsDict']]]
        volumes_from: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        working_dir: pulumi.Input[builtins.str]
elif False:
    ServiceConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceConfigArgs:
    def __init__(__self__, *,
                 annotations: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 attach: pulumi.Input[builtins.bool],
                 blkio_config: pulumi.Input['BlkioConfigArgs'],
                 build: pulumi.Input['BuildConfigArgs'],
                 cap_add: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 cap_drop: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 cgroup: pulumi.Input[builtins.str],
                 cgroup_parent: pulumi.Input[builtins.str],
                 command: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 configs: pulumi.Input[Sequence[pulumi.Input['ServiceConfigObjConfigArgs']]],
                 container_name: pulumi.Input[builtins.str],
                 cpu_count: pulumi.Input[builtins.int],
                 cpu_percent: pulumi.Input[builtins.float],
                 cpu_period: pulumi.Input[builtins.int],
                 cpu_quota: pulumi.Input[builtins.int],
                 cpu_rt_period: pulumi.Input[builtins.int],
                 cpu_rt_runtime: pulumi.Input[builtins.int],
                 cpu_shares: pulumi.Input[builtins.int],
                 cpus: pulumi.Input[builtins.float],
                 cpuset: pulumi.Input[builtins.str],
                 credential_spec: pulumi.Input['CredentialSpecConfigArgs'],
                 depends_on: pulumi.Input[Mapping[str, pulumi.Input['ServiceDependencyArgs']]],
                 deploy: pulumi.Input['DeployConfigArgs'],
                 develop: pulumi.Input['DevelopConfigArgs'],
                 device_cgroup_rules: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 devices: pulumi.Input[Sequence[pulumi.Input['DeviceMappingArgs']]],
                 dns: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 dns_opt: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 dns_search: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 dockerfile: pulumi.Input[builtins.str],
                 domainname: pulumi.Input[builtins.str],
                 entrypoint: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 env_file: pulumi.Input[Sequence[pulumi.Input['EnvFileArgs']]],
                 environment: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 expose: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 extends: pulumi.Input['ExtendsConfigArgs'],
                 external_links: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 extra_hosts: pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]],
                 gpus: pulumi.Input[Sequence[pulumi.Input['DeviceRequestArgs']]],
                 group_add: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 healthcheck: pulumi.Input['HealthCheckConfigArgs'],
                 hostname: pulumi.Input[builtins.str],
                 image: pulumi.Input[builtins.str],
                 init: pulumi.Input[builtins.bool],
                 ipc: pulumi.Input[builtins.str],
                 isolation: pulumi.Input[builtins.str],
                 labels: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 links: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 log_driver: pulumi.Input[builtins.str],
                 log_opt: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 logging: pulumi.Input['LoggingConfigArgs'],
                 mac_address: pulumi.Input[builtins.str],
                 mem_limit: pulumi.Input[builtins.int],
                 mem_reservation: pulumi.Input[builtins.int],
                 mem_swappiness: pulumi.Input[builtins.int],
                 memswap_limit: pulumi.Input[builtins.int],
                 net: pulumi.Input[builtins.str],
                 network_mode: pulumi.Input[builtins.str],
                 networks: pulumi.Input[Mapping[str, pulumi.Input['ServiceNetworkConfigArgs']]],
                 oom_kill_disable: pulumi.Input[builtins.bool],
                 oom_score_adj: pulumi.Input[builtins.int],
                 pid: pulumi.Input[builtins.str],
                 pids_limit: pulumi.Input[builtins.int],
                 platform: pulumi.Input[builtins.str],
                 ports: pulumi.Input[Sequence[pulumi.Input['ServicePortConfigArgs']]],
                 post_start: pulumi.Input[Sequence[pulumi.Input['ServiceHookArgs']]],
                 pre_stop: pulumi.Input[Sequence[pulumi.Input['ServiceHookArgs']]],
                 privileged: pulumi.Input[builtins.bool],
                 profiles: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 pull_policy: pulumi.Input[builtins.str],
                 read_only: pulumi.Input[builtins.bool],
                 restart: pulumi.Input[builtins.str],
                 runtime: pulumi.Input[builtins.str],
                 scale: pulumi.Input[builtins.int],
                 secrets: pulumi.Input[Sequence[pulumi.Input['ServiceSecretConfigArgs']]],
                 security_opt: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 shm_size: pulumi.Input[builtins.int],
                 stdin_open: pulumi.Input[builtins.bool],
                 stop_grace_period: pulumi.Input[builtins.int],
                 stop_signal: pulumi.Input[builtins.str],
                 storage_opt: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 sysctls: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 tmpfs: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 tty: pulumi.Input[builtins.bool],
                 ulimits: pulumi.Input[Mapping[str, pulumi.Input['UlimitsConfigArgs']]],
                 user: pulumi.Input[builtins.str],
                 userns_mode: pulumi.Input[builtins.str],
                 uts: pulumi.Input[builtins.str],
                 volume_driver: pulumi.Input[builtins.str],
                 volumes: pulumi.Input[Sequence[pulumi.Input['ServiceVolumeConfigArgs']]],
                 volumes_from: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 working_dir: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "attach", attach)
        pulumi.set(__self__, "blkio_config", blkio_config)
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "cap_add", cap_add)
        pulumi.set(__self__, "cap_drop", cap_drop)
        pulumi.set(__self__, "cgroup", cgroup)
        pulumi.set(__self__, "cgroup_parent", cgroup_parent)
        pulumi.set(__self__, "command", command)
        pulumi.set(__self__, "configs", configs)
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "cpu_count", cpu_count)
        pulumi.set(__self__, "cpu_percent", cpu_percent)
        pulumi.set(__self__, "cpu_period", cpu_period)
        pulumi.set(__self__, "cpu_quota", cpu_quota)
        pulumi.set(__self__, "cpu_rt_period", cpu_rt_period)
        pulumi.set(__self__, "cpu_rt_runtime", cpu_rt_runtime)
        pulumi.set(__self__, "cpu_shares", cpu_shares)
        pulumi.set(__self__, "cpus", cpus)
        pulumi.set(__self__, "cpuset", cpuset)
        pulumi.set(__self__, "credential_spec", credential_spec)
        pulumi.set(__self__, "depends_on", depends_on)
        pulumi.set(__self__, "deploy", deploy)
        pulumi.set(__self__, "develop", develop)
        pulumi.set(__self__, "device_cgroup_rules", device_cgroup_rules)
        pulumi.set(__self__, "devices", devices)
        pulumi.set(__self__, "dns", dns)
        pulumi.set(__self__, "dns_opt", dns_opt)
        pulumi.set(__self__, "dns_search", dns_search)
        pulumi.set(__self__, "dockerfile", dockerfile)
        pulumi.set(__self__, "domainname", domainname)
        pulumi.set(__self__, "entrypoint", entrypoint)
        pulumi.set(__self__, "env_file", env_file)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "expose", expose)
        pulumi.set(__self__, "extends", extends)
        pulumi.set(__self__, "external_links", external_links)
        pulumi.set(__self__, "extra_hosts", extra_hosts)
        pulumi.set(__self__, "gpus", gpus)
        pulumi.set(__self__, "group_add", group_add)
        pulumi.set(__self__, "healthcheck", healthcheck)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "init", init)
        pulumi.set(__self__, "ipc", ipc)
        pulumi.set(__self__, "isolation", isolation)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "links", links)
        pulumi.set(__self__, "log_driver", log_driver)
        pulumi.set(__self__, "log_opt", log_opt)
        pulumi.set(__self__, "logging", logging)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "mem_limit", mem_limit)
        pulumi.set(__self__, "mem_reservation", mem_reservation)
        pulumi.set(__self__, "mem_swappiness", mem_swappiness)
        pulumi.set(__self__, "memswap_limit", memswap_limit)
        pulumi.set(__self__, "net", net)
        pulumi.set(__self__, "network_mode", network_mode)
        pulumi.set(__self__, "networks", networks)
        pulumi.set(__self__, "oom_kill_disable", oom_kill_disable)
        pulumi.set(__self__, "oom_score_adj", oom_score_adj)
        pulumi.set(__self__, "pid", pid)
        pulumi.set(__self__, "pids_limit", pids_limit)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "post_start", post_start)
        pulumi.set(__self__, "pre_stop", pre_stop)
        pulumi.set(__self__, "privileged", privileged)
        pulumi.set(__self__, "profiles", profiles)
        pulumi.set(__self__, "pull_policy", pull_policy)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "restart", restart)
        pulumi.set(__self__, "runtime", runtime)
        pulumi.set(__self__, "scale", scale)
        pulumi.set(__self__, "secrets", secrets)
        pulumi.set(__self__, "security_opt", security_opt)
        pulumi.set(__self__, "shm_size", shm_size)
        pulumi.set(__self__, "stdin_open", stdin_open)
        pulumi.set(__self__, "stop_grace_period", stop_grace_period)
        pulumi.set(__self__, "stop_signal", stop_signal)
        pulumi.set(__self__, "storage_opt", storage_opt)
        pulumi.set(__self__, "sysctls", sysctls)
        pulumi.set(__self__, "tmpfs", tmpfs)
        pulumi.set(__self__, "tty", tty)
        pulumi.set(__self__, "ulimits", ulimits)
        pulumi.set(__self__, "user", user)
        pulumi.set(__self__, "userns_mode", userns_mode)
        pulumi.set(__self__, "uts", uts)
        pulumi.set(__self__, "volume_driver", volume_driver)
        pulumi.set(__self__, "volumes", volumes)
        pulumi.set(__self__, "volumes_from", volumes_from)
        pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def attach(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "attach")

    @attach.setter
    def attach(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "attach", value)

    @property
    @pulumi.getter
    def blkio_config(self) -> pulumi.Input['BlkioConfigArgs']:
        return pulumi.get(self, "blkio_config")

    @blkio_config.setter
    def blkio_config(self, value: pulumi.Input['BlkioConfigArgs']):
        pulumi.set(self, "blkio_config", value)

    @property
    @pulumi.getter
    def build(self) -> pulumi.Input['BuildConfigArgs']:
        return pulumi.get(self, "build")

    @build.setter
    def build(self, value: pulumi.Input['BuildConfigArgs']):
        pulumi.set(self, "build", value)

    @property
    @pulumi.getter
    def cap_add(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "cap_add")

    @cap_add.setter
    def cap_add(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "cap_add", value)

    @property
    @pulumi.getter
    def cap_drop(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "cap_drop")

    @cap_drop.setter
    def cap_drop(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "cap_drop", value)

    @property
    @pulumi.getter
    def cgroup(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "cgroup")

    @cgroup.setter
    def cgroup(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cgroup", value)

    @property
    @pulumi.getter
    def cgroup_parent(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "cgroup_parent")

    @cgroup_parent.setter
    def cgroup_parent(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cgroup_parent", value)

    @property
    @pulumi.getter
    def command(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def configs(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceConfigObjConfigArgs']]]:
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceConfigObjConfigArgs']]]):
        pulumi.set(self, "configs", value)

    @property
    @pulumi.getter
    def container_name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def cpu_count(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "cpu_count")

    @cpu_count.setter
    def cpu_count(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "cpu_count", value)

    @property
    @pulumi.getter
    def cpu_percent(self) -> pulumi.Input[builtins.float]:
        return pulumi.get(self, "cpu_percent")

    @cpu_percent.setter
    def cpu_percent(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "cpu_percent", value)

    @property
    @pulumi.getter
    def cpu_period(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "cpu_period")

    @cpu_period.setter
    def cpu_period(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "cpu_period", value)

    @property
    @pulumi.getter
    def cpu_quota(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "cpu_quota")

    @cpu_quota.setter
    def cpu_quota(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "cpu_quota", value)

    @property
    @pulumi.getter
    def cpu_rt_period(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "cpu_rt_period")

    @cpu_rt_period.setter
    def cpu_rt_period(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "cpu_rt_period", value)

    @property
    @pulumi.getter
    def cpu_rt_runtime(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "cpu_rt_runtime")

    @cpu_rt_runtime.setter
    def cpu_rt_runtime(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "cpu_rt_runtime", value)

    @property
    @pulumi.getter
    def cpu_shares(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "cpu_shares")

    @cpu_shares.setter
    def cpu_shares(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "cpu_shares", value)

    @property
    @pulumi.getter
    def cpus(self) -> pulumi.Input[builtins.float]:
        return pulumi.get(self, "cpus")

    @cpus.setter
    def cpus(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "cpus", value)

    @property
    @pulumi.getter
    def cpuset(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "cpuset")

    @cpuset.setter
    def cpuset(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cpuset", value)

    @property
    @pulumi.getter
    def credential_spec(self) -> pulumi.Input['CredentialSpecConfigArgs']:
        return pulumi.get(self, "credential_spec")

    @credential_spec.setter
    def credential_spec(self, value: pulumi.Input['CredentialSpecConfigArgs']):
        pulumi.set(self, "credential_spec", value)

    @property
    @pulumi.getter
    def depends_on(self) -> pulumi.Input[Mapping[str, pulumi.Input['ServiceDependencyArgs']]]:
        return pulumi.get(self, "depends_on")

    @depends_on.setter
    def depends_on(self, value: pulumi.Input[Mapping[str, pulumi.Input['ServiceDependencyArgs']]]):
        pulumi.set(self, "depends_on", value)

    @property
    @pulumi.getter
    def deploy(self) -> pulumi.Input['DeployConfigArgs']:
        return pulumi.get(self, "deploy")

    @deploy.setter
    def deploy(self, value: pulumi.Input['DeployConfigArgs']):
        pulumi.set(self, "deploy", value)

    @property
    @pulumi.getter
    def develop(self) -> pulumi.Input['DevelopConfigArgs']:
        return pulumi.get(self, "develop")

    @develop.setter
    def develop(self, value: pulumi.Input['DevelopConfigArgs']):
        pulumi.set(self, "develop", value)

    @property
    @pulumi.getter
    def device_cgroup_rules(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "device_cgroup_rules")

    @device_cgroup_rules.setter
    def device_cgroup_rules(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "device_cgroup_rules", value)

    @property
    @pulumi.getter
    def devices(self) -> pulumi.Input[Sequence[pulumi.Input['DeviceMappingArgs']]]:
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: pulumi.Input[Sequence[pulumi.Input['DeviceMappingArgs']]]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter
    def dns(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter
    def dns_opt(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "dns_opt")

    @dns_opt.setter
    def dns_opt(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "dns_opt", value)

    @property
    @pulumi.getter
    def dns_search(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "dns_search")

    @dns_search.setter
    def dns_search(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "dns_search", value)

    @property
    @pulumi.getter
    def dockerfile(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "dockerfile")

    @dockerfile.setter
    def dockerfile(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "dockerfile", value)

    @property
    @pulumi.getter
    def domainname(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "domainname")

    @domainname.setter
    def domainname(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "domainname", value)

    @property
    @pulumi.getter
    def entrypoint(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "entrypoint")

    @entrypoint.setter
    def entrypoint(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "entrypoint", value)

    @property
    @pulumi.getter
    def env_file(self) -> pulumi.Input[Sequence[pulumi.Input['EnvFileArgs']]]:
        return pulumi.get(self, "env_file")

    @env_file.setter
    def env_file(self, value: pulumi.Input[Sequence[pulumi.Input['EnvFileArgs']]]):
        pulumi.set(self, "env_file", value)

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def expose(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "expose")

    @expose.setter
    def expose(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "expose", value)

    @property
    @pulumi.getter
    def extends(self) -> pulumi.Input['ExtendsConfigArgs']:
        return pulumi.get(self, "extends")

    @extends.setter
    def extends(self, value: pulumi.Input['ExtendsConfigArgs']):
        pulumi.set(self, "extends", value)

    @property
    @pulumi.getter
    def external_links(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "external_links")

    @external_links.setter
    def external_links(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "external_links", value)

    @property
    @pulumi.getter
    def extra_hosts(self) -> pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]]:
        return pulumi.get(self, "extra_hosts")

    @extra_hosts.setter
    def extra_hosts(self, value: pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]]):
        pulumi.set(self, "extra_hosts", value)

    @property
    @pulumi.getter
    def gpus(self) -> pulumi.Input[Sequence[pulumi.Input['DeviceRequestArgs']]]:
        return pulumi.get(self, "gpus")

    @gpus.setter
    def gpus(self, value: pulumi.Input[Sequence[pulumi.Input['DeviceRequestArgs']]]):
        pulumi.set(self, "gpus", value)

    @property
    @pulumi.getter
    def group_add(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "group_add")

    @group_add.setter
    def group_add(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "group_add", value)

    @property
    @pulumi.getter
    def healthcheck(self) -> pulumi.Input['HealthCheckConfigArgs']:
        return pulumi.get(self, "healthcheck")

    @healthcheck.setter
    def healthcheck(self, value: pulumi.Input['HealthCheckConfigArgs']):
        pulumi.set(self, "healthcheck", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def init(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "init")

    @init.setter
    def init(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "init", value)

    @property
    @pulumi.getter
    def ipc(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "ipc")

    @ipc.setter
    def ipc(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "ipc", value)

    @property
    @pulumi.getter
    def isolation(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "isolation")

    @isolation.setter
    def isolation(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "isolation", value)

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def links(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter
    def log_driver(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "log_driver")

    @log_driver.setter
    def log_driver(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "log_driver", value)

    @property
    @pulumi.getter
    def log_opt(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "log_opt")

    @log_opt.setter
    def log_opt(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "log_opt", value)

    @property
    @pulumi.getter
    def logging(self) -> pulumi.Input['LoggingConfigArgs']:
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: pulumi.Input['LoggingConfigArgs']):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter
    def mac_address(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter
    def mem_limit(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "mem_limit")

    @mem_limit.setter
    def mem_limit(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "mem_limit", value)

    @property
    @pulumi.getter
    def mem_reservation(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "mem_reservation")

    @mem_reservation.setter
    def mem_reservation(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "mem_reservation", value)

    @property
    @pulumi.getter
    def mem_swappiness(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "mem_swappiness")

    @mem_swappiness.setter
    def mem_swappiness(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "mem_swappiness", value)

    @property
    @pulumi.getter
    def memswap_limit(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "memswap_limit")

    @memswap_limit.setter
    def memswap_limit(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "memswap_limit", value)

    @property
    @pulumi.getter
    def net(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "net")

    @net.setter
    def net(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "net", value)

    @property
    @pulumi.getter
    def network_mode(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "network_mode")

    @network_mode.setter
    def network_mode(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "network_mode", value)

    @property
    @pulumi.getter
    def networks(self) -> pulumi.Input[Mapping[str, pulumi.Input['ServiceNetworkConfigArgs']]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: pulumi.Input[Mapping[str, pulumi.Input['ServiceNetworkConfigArgs']]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def oom_kill_disable(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "oom_kill_disable")

    @oom_kill_disable.setter
    def oom_kill_disable(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "oom_kill_disable", value)

    @property
    @pulumi.getter
    def oom_score_adj(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "oom_score_adj")

    @oom_score_adj.setter
    def oom_score_adj(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "oom_score_adj", value)

    @property
    @pulumi.getter
    def pid(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "pid")

    @pid.setter
    def pid(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "pid", value)

    @property
    @pulumi.getter
    def pids_limit(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "pids_limit")

    @pids_limit.setter
    def pids_limit(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "pids_limit", value)

    @property
    @pulumi.getter
    def platform(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "platform", value)

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Input[Sequence[pulumi.Input['ServicePortConfigArgs']]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: pulumi.Input[Sequence[pulumi.Input['ServicePortConfigArgs']]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def post_start(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceHookArgs']]]:
        return pulumi.get(self, "post_start")

    @post_start.setter
    def post_start(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceHookArgs']]]):
        pulumi.set(self, "post_start", value)

    @property
    @pulumi.getter
    def pre_stop(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceHookArgs']]]:
        return pulumi.get(self, "pre_stop")

    @pre_stop.setter
    def pre_stop(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceHookArgs']]]):
        pulumi.set(self, "pre_stop", value)

    @property
    @pulumi.getter
    def privileged(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "privileged")

    @privileged.setter
    def privileged(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "privileged", value)

    @property
    @pulumi.getter
    def profiles(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "profiles", value)

    @property
    @pulumi.getter
    def pull_policy(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def read_only(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter
    def restart(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "restart")

    @restart.setter
    def restart(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "restart", value)

    @property
    @pulumi.getter
    def runtime(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter
    def scale(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "scale", value)

    @property
    @pulumi.getter
    def secrets(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceSecretConfigArgs']]]:
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceSecretConfigArgs']]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter
    def security_opt(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "security_opt")

    @security_opt.setter
    def security_opt(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "security_opt", value)

    @property
    @pulumi.getter
    def shm_size(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "shm_size")

    @shm_size.setter
    def shm_size(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "shm_size", value)

    @property
    @pulumi.getter
    def stdin_open(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "stdin_open")

    @stdin_open.setter
    def stdin_open(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "stdin_open", value)

    @property
    @pulumi.getter
    def stop_grace_period(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "stop_grace_period")

    @stop_grace_period.setter
    def stop_grace_period(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "stop_grace_period", value)

    @property
    @pulumi.getter
    def stop_signal(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "stop_signal")

    @stop_signal.setter
    def stop_signal(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "stop_signal", value)

    @property
    @pulumi.getter
    def storage_opt(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "storage_opt")

    @storage_opt.setter
    def storage_opt(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "storage_opt", value)

    @property
    @pulumi.getter
    def sysctls(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "sysctls", value)

    @property
    @pulumi.getter
    def tmpfs(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "tmpfs")

    @tmpfs.setter
    def tmpfs(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "tmpfs", value)

    @property
    @pulumi.getter
    def tty(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "tty")

    @tty.setter
    def tty(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "tty", value)

    @property
    @pulumi.getter
    def ulimits(self) -> pulumi.Input[Mapping[str, pulumi.Input['UlimitsConfigArgs']]]:
        return pulumi.get(self, "ulimits")

    @ulimits.setter
    def ulimits(self, value: pulumi.Input[Mapping[str, pulumi.Input['UlimitsConfigArgs']]]):
        pulumi.set(self, "ulimits", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def userns_mode(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "userns_mode")

    @userns_mode.setter
    def userns_mode(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "userns_mode", value)

    @property
    @pulumi.getter
    def uts(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "uts")

    @uts.setter
    def uts(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "uts", value)

    @property
    @pulumi.getter
    def volume_driver(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "volume_driver")

    @volume_driver.setter
    def volume_driver(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "volume_driver", value)

    @property
    @pulumi.getter
    def volumes(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceVolumeConfigArgs']]]:
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceVolumeConfigArgs']]]):
        pulumi.set(self, "volumes", value)

    @property
    @pulumi.getter
    def volumes_from(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "volumes_from")

    @volumes_from.setter
    def volumes_from(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "volumes_from", value)

    @property
    @pulumi.getter
    def working_dir(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "working_dir")

    @working_dir.setter
    def working_dir(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "working_dir", value)


if not MYPY:
    class ServiceDependencyArgsDict(TypedDict):
        condition: pulumi.Input[builtins.str]
        required: pulumi.Input[builtins.bool]
        restart: pulumi.Input[builtins.bool]
elif False:
    ServiceDependencyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceDependencyArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input[builtins.str],
                 required: pulumi.Input[builtins.bool],
                 restart: pulumi.Input[builtins.bool]):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "restart", restart)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def required(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def restart(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "restart")

    @restart.setter
    def restart(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "restart", value)


if not MYPY:
    class ServiceHookArgsDict(TypedDict):
        command: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        environment: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        privileged: pulumi.Input[builtins.bool]
        user: pulumi.Input[builtins.str]
        working_dir: pulumi.Input[builtins.str]
elif False:
    ServiceHookArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceHookArgs:
    def __init__(__self__, *,
                 command: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 environment: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 privileged: pulumi.Input[builtins.bool],
                 user: pulumi.Input[builtins.str],
                 working_dir: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "command", command)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "privileged", privileged)
        pulumi.set(__self__, "user", user)
        pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def command(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def privileged(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "privileged")

    @privileged.setter
    def privileged(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "privileged", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def working_dir(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "working_dir")

    @working_dir.setter
    def working_dir(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "working_dir", value)


if not MYPY:
    class ServiceNetworkConfigArgsDict(TypedDict):
        aliases: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        driver_opts: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        ipv4_address: pulumi.Input[builtins.str]
        ipv6_address: pulumi.Input[builtins.str]
        link_local_ips: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        mac_address: pulumi.Input[builtins.str]
        priority: pulumi.Input[builtins.int]
elif False:
    ServiceNetworkConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceNetworkConfigArgs:
    def __init__(__self__, *,
                 aliases: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 driver_opts: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 ipv4_address: pulumi.Input[builtins.str],
                 ipv6_address: pulumi.Input[builtins.str],
                 link_local_ips: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 mac_address: pulumi.Input[builtins.str],
                 priority: pulumi.Input[builtins.int]):
        pulumi.set(__self__, "aliases", aliases)
        pulumi.set(__self__, "driver_opts", driver_opts)
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        pulumi.set(__self__, "link_local_ips", link_local_ips)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def aliases(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "aliases")

    @aliases.setter
    def aliases(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "aliases", value)

    @property
    @pulumi.getter
    def driver_opts(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "driver_opts")

    @driver_opts.setter
    def driver_opts(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "driver_opts", value)

    @property
    @pulumi.getter
    def ipv4_address(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "ipv4_address", value)

    @property
    @pulumi.getter
    def ipv6_address(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "ipv6_address")

    @ipv6_address.setter
    def ipv6_address(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "ipv6_address", value)

    @property
    @pulumi.getter
    def link_local_ips(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "link_local_ips")

    @link_local_ips.setter
    def link_local_ips(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "link_local_ips", value)

    @property
    @pulumi.getter
    def mac_address(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "priority", value)


if not MYPY:
    class ServicePortConfigArgsDict(TypedDict):
        app_protocol: pulumi.Input[builtins.str]
        host_ip: pulumi.Input[builtins.str]
        mode: pulumi.Input[builtins.str]
        name: pulumi.Input[builtins.str]
        protocol: pulumi.Input[builtins.str]
        published: pulumi.Input[builtins.str]
        target: pulumi.Input[builtins.int]
elif False:
    ServicePortConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServicePortConfigArgs:
    def __init__(__self__, *,
                 app_protocol: pulumi.Input[builtins.str],
                 host_ip: pulumi.Input[builtins.str],
                 mode: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str],
                 protocol: pulumi.Input[builtins.str],
                 published: pulumi.Input[builtins.str],
                 target: pulumi.Input[builtins.int]):
        pulumi.set(__self__, "app_protocol", app_protocol)
        pulumi.set(__self__, "host_ip", host_ip)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "published", published)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def app_protocol(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "app_protocol")

    @app_protocol.setter
    def app_protocol(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "app_protocol", value)

    @property
    @pulumi.getter
    def host_ip(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "host_ip")

    @host_ip.setter
    def host_ip(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "host_ip", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def published(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "published")

    @published.setter
    def published(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "published", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "target", value)


if not MYPY:
    class ServiceSecretConfigArgsDict(TypedDict):
        gid: pulumi.Input[builtins.str]
        mode: pulumi.Input[builtins.int]
        source: pulumi.Input[builtins.str]
        target: pulumi.Input[builtins.str]
        uid: pulumi.Input[builtins.str]
elif False:
    ServiceSecretConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceSecretConfigArgs:
    def __init__(__self__, *,
                 gid: pulumi.Input[builtins.str],
                 mode: pulumi.Input[builtins.int],
                 source: pulumi.Input[builtins.str],
                 target: pulumi.Input[builtins.str],
                 uid: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "gid", gid)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def gid(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "gid")

    @gid.setter
    def gid(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "gid", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "uid", value)


if not MYPY:
    class ServiceVolumeBindArgsDict(TypedDict):
        create_host_path: pulumi.Input[builtins.bool]
        propagation: pulumi.Input[builtins.str]
        recursive: pulumi.Input[builtins.str]
        selinux: pulumi.Input[builtins.str]
elif False:
    ServiceVolumeBindArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceVolumeBindArgs:
    def __init__(__self__, *,
                 create_host_path: pulumi.Input[builtins.bool],
                 propagation: pulumi.Input[builtins.str],
                 recursive: pulumi.Input[builtins.str],
                 selinux: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "create_host_path", create_host_path)
        pulumi.set(__self__, "propagation", propagation)
        pulumi.set(__self__, "recursive", recursive)
        pulumi.set(__self__, "selinux", selinux)

    @property
    @pulumi.getter
    def create_host_path(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "create_host_path")

    @create_host_path.setter
    def create_host_path(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "create_host_path", value)

    @property
    @pulumi.getter
    def propagation(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "propagation")

    @propagation.setter
    def propagation(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "propagation", value)

    @property
    @pulumi.getter
    def recursive(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "recursive")

    @recursive.setter
    def recursive(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "recursive", value)

    @property
    @pulumi.getter
    def selinux(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "selinux")

    @selinux.setter
    def selinux(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "selinux", value)


if not MYPY:
    class ServiceVolumeConfigArgsDict(TypedDict):
        bind: pulumi.Input['ServiceVolumeBindArgsDict']
        consistency: pulumi.Input[builtins.str]
        read_only: pulumi.Input[builtins.bool]
        source: pulumi.Input[builtins.str]
        target: pulumi.Input[builtins.str]
        tmpfs: pulumi.Input['ServiceVolumeTmpfsArgsDict']
        type: pulumi.Input[builtins.str]
        volume: pulumi.Input['ServiceVolumeVolumeArgsDict']
elif False:
    ServiceVolumeConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceVolumeConfigArgs:
    def __init__(__self__, *,
                 bind: pulumi.Input['ServiceVolumeBindArgs'],
                 consistency: pulumi.Input[builtins.str],
                 read_only: pulumi.Input[builtins.bool],
                 source: pulumi.Input[builtins.str],
                 target: pulumi.Input[builtins.str],
                 tmpfs: pulumi.Input['ServiceVolumeTmpfsArgs'],
                 type: pulumi.Input[builtins.str],
                 volume: pulumi.Input['ServiceVolumeVolumeArgs']):
        pulumi.set(__self__, "bind", bind)
        pulumi.set(__self__, "consistency", consistency)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "tmpfs", tmpfs)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter
    def bind(self) -> pulumi.Input['ServiceVolumeBindArgs']:
        return pulumi.get(self, "bind")

    @bind.setter
    def bind(self, value: pulumi.Input['ServiceVolumeBindArgs']):
        pulumi.set(self, "bind", value)

    @property
    @pulumi.getter
    def consistency(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "consistency")

    @consistency.setter
    def consistency(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "consistency", value)

    @property
    @pulumi.getter
    def read_only(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def tmpfs(self) -> pulumi.Input['ServiceVolumeTmpfsArgs']:
        return pulumi.get(self, "tmpfs")

    @tmpfs.setter
    def tmpfs(self, value: pulumi.Input['ServiceVolumeTmpfsArgs']):
        pulumi.set(self, "tmpfs", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def volume(self) -> pulumi.Input['ServiceVolumeVolumeArgs']:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: pulumi.Input['ServiceVolumeVolumeArgs']):
        pulumi.set(self, "volume", value)


if not MYPY:
    class ServiceVolumeTmpfsArgsDict(TypedDict):
        mode: pulumi.Input[builtins.int]
        size: pulumi.Input[builtins.int]
elif False:
    ServiceVolumeTmpfsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceVolumeTmpfsArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[builtins.int],
                 size: pulumi.Input[builtins.int]):
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "size", value)


if not MYPY:
    class ServiceVolumeVolumeArgsDict(TypedDict):
        nocopy: pulumi.Input[builtins.bool]
        subpath: pulumi.Input[builtins.str]
elif False:
    ServiceVolumeVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceVolumeVolumeArgs:
    def __init__(__self__, *,
                 nocopy: pulumi.Input[builtins.bool],
                 subpath: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "nocopy", nocopy)
        pulumi.set(__self__, "subpath", subpath)

    @property
    @pulumi.getter
    def nocopy(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "nocopy")

    @nocopy.setter
    def nocopy(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "nocopy", value)

    @property
    @pulumi.getter
    def subpath(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "subpath")

    @subpath.setter
    def subpath(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "subpath", value)


if not MYPY:
    class ThrottleDeviceArgsDict(TypedDict):
        pass
elif False:
    ThrottleDeviceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThrottleDeviceArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class TriggerArgsDict(TypedDict):
        action: pulumi.Input[builtins.str]
        ignore: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        path: pulumi.Input[builtins.str]
        target: pulumi.Input[builtins.str]
elif False:
    TriggerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TriggerArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[builtins.str],
                 ignore: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 path: pulumi.Input[builtins.str],
                 target: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "ignore", ignore)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def ignore(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "ignore")

    @ignore.setter
    def ignore(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "ignore", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "target", value)


if not MYPY:
    class UlimitsConfigArgsDict(TypedDict):
        hard: pulumi.Input[builtins.int]
        single: pulumi.Input[builtins.int]
        soft: pulumi.Input[builtins.int]
elif False:
    UlimitsConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UlimitsConfigArgs:
    def __init__(__self__, *,
                 hard: pulumi.Input[builtins.int],
                 single: pulumi.Input[builtins.int],
                 soft: pulumi.Input[builtins.int]):
        pulumi.set(__self__, "hard", hard)
        pulumi.set(__self__, "single", single)
        pulumi.set(__self__, "soft", soft)

    @property
    @pulumi.getter
    def hard(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "hard")

    @hard.setter
    def hard(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "hard", value)

    @property
    @pulumi.getter
    def single(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "single")

    @single.setter
    def single(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "single", value)

    @property
    @pulumi.getter
    def soft(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "soft")

    @soft.setter
    def soft(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "soft", value)


if not MYPY:
    class UpdateConfigArgsDict(TypedDict):
        delay: pulumi.Input[builtins.int]
        failure_action: pulumi.Input[builtins.str]
        max_failure_ratio: pulumi.Input[builtins.float]
        monitor: pulumi.Input[builtins.int]
        order: pulumi.Input[builtins.str]
        parallelism: pulumi.Input[builtins.int]
elif False:
    UpdateConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UpdateConfigArgs:
    def __init__(__self__, *,
                 delay: pulumi.Input[builtins.int],
                 failure_action: pulumi.Input[builtins.str],
                 max_failure_ratio: pulumi.Input[builtins.float],
                 monitor: pulumi.Input[builtins.int],
                 order: pulumi.Input[builtins.str],
                 parallelism: pulumi.Input[builtins.int]):
        pulumi.set(__self__, "delay", delay)
        pulumi.set(__self__, "failure_action", failure_action)
        pulumi.set(__self__, "max_failure_ratio", max_failure_ratio)
        pulumi.set(__self__, "monitor", monitor)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "parallelism", parallelism)

    @property
    @pulumi.getter
    def delay(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter
    def failure_action(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "failure_action")

    @failure_action.setter
    def failure_action(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "failure_action", value)

    @property
    @pulumi.getter
    def max_failure_ratio(self) -> pulumi.Input[builtins.float]:
        return pulumi.get(self, "max_failure_ratio")

    @max_failure_ratio.setter
    def max_failure_ratio(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "max_failure_ratio", value)

    @property
    @pulumi.getter
    def monitor(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def parallelism(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "parallelism")

    @parallelism.setter
    def parallelism(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "parallelism", value)


if not MYPY:
    class VolumeConfigArgsDict(TypedDict):
        driver: pulumi.Input[builtins.str]
        driver_opts: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        external: pulumi.Input[builtins.bool]
        labels: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        name: pulumi.Input[builtins.str]
elif False:
    VolumeConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VolumeConfigArgs:
    def __init__(__self__, *,
                 driver: pulumi.Input[builtins.str],
                 driver_opts: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 external: pulumi.Input[builtins.bool],
                 labels: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]],
                 name: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "driver", driver)
        pulumi.set(__self__, "driver_opts", driver_opts)
        pulumi.set(__self__, "external", external)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter
    def driver_opts(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "driver_opts")

    @driver_opts.setter
    def driver_opts(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "driver_opts", value)

    @property
    @pulumi.getter
    def external(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class WeightDeviceArgsDict(TypedDict):
        pass
elif False:
    WeightDeviceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WeightDeviceArgs:
    def __init__(__self__):
        pass


