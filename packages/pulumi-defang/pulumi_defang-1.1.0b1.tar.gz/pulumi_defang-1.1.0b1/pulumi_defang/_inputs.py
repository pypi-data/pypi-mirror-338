# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import types as _types

__all__ = [
    'ProjectConfigArgs',
    'ProjectConfigArgsDict',
]

MYPY = False

if not MYPY:
    class ProjectConfigArgsDict(TypedDict):
        configs: pulumi.Input[Mapping[str, pulumi.Input['_types.ConfigObjConfigArgsDict']]]
        name: pulumi.Input[builtins.str]
        networks: pulumi.Input[Mapping[str, pulumi.Input['_types.NetworkConfigArgsDict']]]
        secrets: pulumi.Input[Mapping[str, pulumi.Input['_types.SecretConfigArgsDict']]]
        services: pulumi.Input[Mapping[str, pulumi.Input['_types.ServiceConfigArgsDict']]]
        volumes: pulumi.Input[Mapping[str, pulumi.Input['_types.VolumeConfigArgsDict']]]
elif False:
    ProjectConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectConfigArgs:
    def __init__(__self__, *,
                 configs: pulumi.Input[Mapping[str, pulumi.Input['_types.ConfigObjConfigArgs']]],
                 name: pulumi.Input[builtins.str],
                 networks: pulumi.Input[Mapping[str, pulumi.Input['_types.NetworkConfigArgs']]],
                 secrets: pulumi.Input[Mapping[str, pulumi.Input['_types.SecretConfigArgs']]],
                 services: pulumi.Input[Mapping[str, pulumi.Input['_types.ServiceConfigArgs']]],
                 volumes: pulumi.Input[Mapping[str, pulumi.Input['_types.VolumeConfigArgs']]]):
        pulumi.set(__self__, "configs", configs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "networks", networks)
        pulumi.set(__self__, "secrets", secrets)
        pulumi.set(__self__, "services", services)
        pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def configs(self) -> pulumi.Input[Mapping[str, pulumi.Input['_types.ConfigObjConfigArgs']]]:
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: pulumi.Input[Mapping[str, pulumi.Input['_types.ConfigObjConfigArgs']]]):
        pulumi.set(self, "configs", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def networks(self) -> pulumi.Input[Mapping[str, pulumi.Input['_types.NetworkConfigArgs']]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: pulumi.Input[Mapping[str, pulumi.Input['_types.NetworkConfigArgs']]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def secrets(self) -> pulumi.Input[Mapping[str, pulumi.Input['_types.SecretConfigArgs']]]:
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: pulumi.Input[Mapping[str, pulumi.Input['_types.SecretConfigArgs']]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter
    def services(self) -> pulumi.Input[Mapping[str, pulumi.Input['_types.ServiceConfigArgs']]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: pulumi.Input[Mapping[str, pulumi.Input['_types.ServiceConfigArgs']]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def volumes(self) -> pulumi.Input[Mapping[str, pulumi.Input['_types.VolumeConfigArgs']]]:
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: pulumi.Input[Mapping[str, pulumi.Input['_types.VolumeConfigArgs']]]):
        pulumi.set(self, "volumes", value)


