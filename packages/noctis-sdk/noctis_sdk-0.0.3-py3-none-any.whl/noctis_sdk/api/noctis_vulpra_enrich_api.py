# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from noctis_sdk.models.vulpra_enrich_response import VulpraEnrichResponse

from noctis_sdk.api_client import ApiClient, RequestSerialized
from noctis_sdk.api_response import ApiResponse
from noctis_sdk.rest import RESTResponseType


class NoctisVulpraEnrichApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def enrich_get(
        self,
        domain: Annotated[StrictStr, Field(description="Domain or comma-separated list of domains to enrich.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VulpraEnrichResponse:
        """Vulpra Enrich Query (GET)

        Provides key domain attributes for one or more domains, optimized for high query volumes.

        :param domain: Domain or comma-separated list of domains to enrich. (required)
        :type domain: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._enrich_get_serialize(
            domain=domain,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraEnrichResponse",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def enrich_get_with_http_info(
        self,
        domain: Annotated[StrictStr, Field(description="Domain or comma-separated list of domains to enrich.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VulpraEnrichResponse]:
        """Vulpra Enrich Query (GET)

        Provides key domain attributes for one or more domains, optimized for high query volumes.

        :param domain: Domain or comma-separated list of domains to enrich. (required)
        :type domain: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._enrich_get_serialize(
            domain=domain,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraEnrichResponse",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def enrich_get_without_preload_content(
        self,
        domain: Annotated[StrictStr, Field(description="Domain or comma-separated list of domains to enrich.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Vulpra Enrich Query (GET)

        Provides key domain attributes for one or more domains, optimized for high query volumes.

        :param domain: Domain or comma-separated list of domains to enrich. (required)
        :type domain: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._enrich_get_serialize(
            domain=domain,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraEnrichResponse",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _enrich_get_serialize(
        self,
        domain,
        app_partner,
        app_name,
        app_version,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if domain is not None:
            
            _query_params.append(('domain', domain))
            
        if app_partner is not None:
            
            _query_params.append(('app_partner', app_partner))
            
        if app_name is not None:
            
            _query_params.append(('app_name', app_name))
            
        if app_version is not None:
            
            _query_params.append(('app_version', app_version))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/noctis/v1/vulpra/enrich/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def enrich_post(
        self,
        domain: Annotated[StrictStr, Field(description="Domain or comma-separated list of domains to enrich.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VulpraEnrichResponse:
        """Vulpra Enrich Query (POST)

        Provides key domain attributes using POST with form parameters.

        :param domain: Domain or comma-separated list of domains to enrich. (required)
        :type domain: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._enrich_post_serialize(
            domain=domain,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraEnrichResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def enrich_post_with_http_info(
        self,
        domain: Annotated[StrictStr, Field(description="Domain or comma-separated list of domains to enrich.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VulpraEnrichResponse]:
        """Vulpra Enrich Query (POST)

        Provides key domain attributes using POST with form parameters.

        :param domain: Domain or comma-separated list of domains to enrich. (required)
        :type domain: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._enrich_post_serialize(
            domain=domain,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraEnrichResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def enrich_post_without_preload_content(
        self,
        domain: Annotated[StrictStr, Field(description="Domain or comma-separated list of domains to enrich.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Vulpra Enrich Query (POST)

        Provides key domain attributes using POST with form parameters.

        :param domain: Domain or comma-separated list of domains to enrich. (required)
        :type domain: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._enrich_post_serialize(
            domain=domain,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraEnrichResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _enrich_post_serialize(
        self,
        domain,
        app_partner,
        app_name,
        app_version,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if domain is not None:
            _form_params.append(('domain', domain))
        if app_partner is not None:
            _form_params.append(('app_partner', app_partner))
        if app_name is not None:
            _form_params.append(('app_name', app_name))
        if app_version is not None:
            _form_params.append(('app_version', app_version))
        if format is not None:
            _form_params.append(('format', format))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/noctis/v1/vulpra/enrich/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


