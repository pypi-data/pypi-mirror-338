# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from noctis_sdk.models.brand_monitor_response import BrandMonitorResponse
from noctis_sdk.models.ip_monitor_response import IpMonitorResponse
from noctis_sdk.models.ip_registrant_monitor_response import IpRegistrantMonitorResponse
from noctis_sdk.models.name_server_monitor_response import NameServerMonitorResponse
from noctis_sdk.models.registrant_monitor_response import RegistrantMonitorResponse

from noctis_sdk.api_client import ApiClient, RequestSerialized
from noctis_sdk.api_response import ApiResponse
from noctis_sdk.rest import RESTResponseType


class NoctisClassicMonitorsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_brand_monitor_alerts(
        self,
        query: Annotated[StrictStr, Field(description="Keywords to monitor (use '|' for AND).")],
        exclude: Annotated[Optional[StrictStr], Field(description="Keywords to exclude (use '|' for AND).")] = None,
        domain_status: Annotated[Optional[StrictStr], Field(description="Filter by domain status.")] = None,
        days_back: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Look back N days (1-6).")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BrandMonitorResponse:
        """Brand Monitor

        Monitor new domain registrations matching specific keywords.

        :param query: Keywords to monitor (use '|' for AND). (required)
        :type query: str
        :param exclude: Keywords to exclude (use '|' for AND).
        :type exclude: str
        :param domain_status: Filter by domain status.
        :type domain_status: str
        :param days_back: Look back N days (1-6).
        :type days_back: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_brand_monitor_alerts_serialize(
            query=query,
            exclude=exclude,
            domain_status=domain_status,
            days_back=days_back,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrandMonitorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_brand_monitor_alerts_with_http_info(
        self,
        query: Annotated[StrictStr, Field(description="Keywords to monitor (use '|' for AND).")],
        exclude: Annotated[Optional[StrictStr], Field(description="Keywords to exclude (use '|' for AND).")] = None,
        domain_status: Annotated[Optional[StrictStr], Field(description="Filter by domain status.")] = None,
        days_back: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Look back N days (1-6).")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BrandMonitorResponse]:
        """Brand Monitor

        Monitor new domain registrations matching specific keywords.

        :param query: Keywords to monitor (use '|' for AND). (required)
        :type query: str
        :param exclude: Keywords to exclude (use '|' for AND).
        :type exclude: str
        :param domain_status: Filter by domain status.
        :type domain_status: str
        :param days_back: Look back N days (1-6).
        :type days_back: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_brand_monitor_alerts_serialize(
            query=query,
            exclude=exclude,
            domain_status=domain_status,
            days_back=days_back,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrandMonitorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_brand_monitor_alerts_without_preload_content(
        self,
        query: Annotated[StrictStr, Field(description="Keywords to monitor (use '|' for AND).")],
        exclude: Annotated[Optional[StrictStr], Field(description="Keywords to exclude (use '|' for AND).")] = None,
        domain_status: Annotated[Optional[StrictStr], Field(description="Filter by domain status.")] = None,
        days_back: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Look back N days (1-6).")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Brand Monitor

        Monitor new domain registrations matching specific keywords.

        :param query: Keywords to monitor (use '|' for AND). (required)
        :type query: str
        :param exclude: Keywords to exclude (use '|' for AND).
        :type exclude: str
        :param domain_status: Filter by domain status.
        :type domain_status: str
        :param days_back: Look back N days (1-6).
        :type days_back: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_brand_monitor_alerts_serialize(
            query=query,
            exclude=exclude,
            domain_status=domain_status,
            days_back=days_back,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrandMonitorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_brand_monitor_alerts_serialize(
        self,
        query,
        exclude,
        domain_status,
        days_back,
        app_partner,
        app_name,
        app_version,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if domain_status is not None:
            
            _query_params.append(('domain_status', domain_status))
            
        if days_back is not None:
            
            _query_params.append(('days_back', days_back))
            
        if app_partner is not None:
            
            _query_params.append(('app_partner', app_partner))
            
        if app_name is not None:
            
            _query_params.append(('app_name', app_name))
            
        if app_version is not None:
            
            _query_params.append(('app_version', app_version))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/noctis/v1/monitor/brand',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_ip_monitor_alerts(
        self,
        query: Annotated[StrictStr, Field(description="IP Address to monitor.")],
        days_back: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Look back N days (1-6).")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Pagination page number.")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IpMonitorResponse:
        """IP Monitor

        Receive alerts for new/deleted domains on a specific IP Address.

        :param query: IP Address to monitor. (required)
        :type query: str
        :param days_back: Look back N days (1-6).
        :type days_back: str
        :param page: Pagination page number.
        :type page: int
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ip_monitor_alerts_serialize(
            query=query,
            days_back=days_back,
            page=page,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IpMonitorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_ip_monitor_alerts_with_http_info(
        self,
        query: Annotated[StrictStr, Field(description="IP Address to monitor.")],
        days_back: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Look back N days (1-6).")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Pagination page number.")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IpMonitorResponse]:
        """IP Monitor

        Receive alerts for new/deleted domains on a specific IP Address.

        :param query: IP Address to monitor. (required)
        :type query: str
        :param days_back: Look back N days (1-6).
        :type days_back: str
        :param page: Pagination page number.
        :type page: int
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ip_monitor_alerts_serialize(
            query=query,
            days_back=days_back,
            page=page,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IpMonitorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_ip_monitor_alerts_without_preload_content(
        self,
        query: Annotated[StrictStr, Field(description="IP Address to monitor.")],
        days_back: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Look back N days (1-6).")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Pagination page number.")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """IP Monitor

        Receive alerts for new/deleted domains on a specific IP Address.

        :param query: IP Address to monitor. (required)
        :type query: str
        :param days_back: Look back N days (1-6).
        :type days_back: str
        :param page: Pagination page number.
        :type page: int
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ip_monitor_alerts_serialize(
            query=query,
            days_back=days_back,
            page=page,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IpMonitorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_ip_monitor_alerts_serialize(
        self,
        query,
        days_back,
        page,
        app_partner,
        app_name,
        app_version,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if days_back is not None:
            
            _query_params.append(('days_back', days_back))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if app_partner is not None:
            
            _query_params.append(('app_partner', app_partner))
            
        if app_name is not None:
            
            _query_params.append(('app_name', app_name))
            
        if app_version is not None:
            
            _query_params.append(('app_version', app_version))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/noctis/v1/monitor/ip',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_ip_registrant_monitor_alerts(
        self,
        query: Annotated[StrictStr, Field(description="Search terms for registrant/organization (space-separated, supports +, -, *).")],
        country: Annotated[Optional[StrictStr], Field(description="Filter by country code (ISO 3166-1 alpha-2).")] = None,
        server: Annotated[Optional[StrictStr], Field(description="Filter by RIR Whois server.")] = None,
        include_total_count: Annotated[Optional[StrictBool], Field(description="Include total result count (potentially slow).")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Pagination page number.")] = None,
        search_type: Annotated[Optional[StrictStr], Field(description="Type of changes to return.")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IpRegistrantMonitorResponse:
        """IP Registrant Monitor

        Receive alerts when specific organizations are allocated/de-allocated IP ranges.

        :param query: Search terms for registrant/organization (space-separated, supports +, -, *). (required)
        :type query: str
        :param country: Filter by country code (ISO 3166-1 alpha-2).
        :type country: str
        :param server: Filter by RIR Whois server.
        :type server: str
        :param include_total_count: Include total result count (potentially slow).
        :type include_total_count: bool
        :param page: Pagination page number.
        :type page: int
        :param search_type: Type of changes to return.
        :type search_type: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ip_registrant_monitor_alerts_serialize(
            query=query,
            country=country,
            server=server,
            include_total_count=include_total_count,
            page=page,
            search_type=search_type,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IpRegistrantMonitorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_ip_registrant_monitor_alerts_with_http_info(
        self,
        query: Annotated[StrictStr, Field(description="Search terms for registrant/organization (space-separated, supports +, -, *).")],
        country: Annotated[Optional[StrictStr], Field(description="Filter by country code (ISO 3166-1 alpha-2).")] = None,
        server: Annotated[Optional[StrictStr], Field(description="Filter by RIR Whois server.")] = None,
        include_total_count: Annotated[Optional[StrictBool], Field(description="Include total result count (potentially slow).")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Pagination page number.")] = None,
        search_type: Annotated[Optional[StrictStr], Field(description="Type of changes to return.")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IpRegistrantMonitorResponse]:
        """IP Registrant Monitor

        Receive alerts when specific organizations are allocated/de-allocated IP ranges.

        :param query: Search terms for registrant/organization (space-separated, supports +, -, *). (required)
        :type query: str
        :param country: Filter by country code (ISO 3166-1 alpha-2).
        :type country: str
        :param server: Filter by RIR Whois server.
        :type server: str
        :param include_total_count: Include total result count (potentially slow).
        :type include_total_count: bool
        :param page: Pagination page number.
        :type page: int
        :param search_type: Type of changes to return.
        :type search_type: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ip_registrant_monitor_alerts_serialize(
            query=query,
            country=country,
            server=server,
            include_total_count=include_total_count,
            page=page,
            search_type=search_type,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IpRegistrantMonitorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_ip_registrant_monitor_alerts_without_preload_content(
        self,
        query: Annotated[StrictStr, Field(description="Search terms for registrant/organization (space-separated, supports +, -, *).")],
        country: Annotated[Optional[StrictStr], Field(description="Filter by country code (ISO 3166-1 alpha-2).")] = None,
        server: Annotated[Optional[StrictStr], Field(description="Filter by RIR Whois server.")] = None,
        include_total_count: Annotated[Optional[StrictBool], Field(description="Include total result count (potentially slow).")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Pagination page number.")] = None,
        search_type: Annotated[Optional[StrictStr], Field(description="Type of changes to return.")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """IP Registrant Monitor

        Receive alerts when specific organizations are allocated/de-allocated IP ranges.

        :param query: Search terms for registrant/organization (space-separated, supports +, -, *). (required)
        :type query: str
        :param country: Filter by country code (ISO 3166-1 alpha-2).
        :type country: str
        :param server: Filter by RIR Whois server.
        :type server: str
        :param include_total_count: Include total result count (potentially slow).
        :type include_total_count: bool
        :param page: Pagination page number.
        :type page: int
        :param search_type: Type of changes to return.
        :type search_type: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ip_registrant_monitor_alerts_serialize(
            query=query,
            country=country,
            server=server,
            include_total_count=include_total_count,
            page=page,
            search_type=search_type,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IpRegistrantMonitorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_ip_registrant_monitor_alerts_serialize(
        self,
        query,
        country,
        server,
        include_total_count,
        page,
        search_type,
        app_partner,
        app_name,
        app_version,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if server is not None:
            
            _query_params.append(('server', server))
            
        if include_total_count is not None:
            
            _query_params.append(('include_total_count', include_total_count))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if search_type is not None:
            
            _query_params.append(('search_type', search_type))
            
        if app_partner is not None:
            
            _query_params.append(('app_partner', app_partner))
            
        if app_name is not None:
            
            _query_params.append(('app_name', app_name))
            
        if app_version is not None:
            
            _query_params.append(('app_version', app_version))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/noctis/v1/monitor/ip-registrant',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_name_server_monitor_alerts(
        self,
        domain: Annotated[StrictStr, Field(description="Name Server hostname to monitor.")],
        days_back: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Look back N days (1-6).")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Pagination page number.")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NameServerMonitorResponse:
        """Name Server Monitor

        Receive alerts for new/deleted domains on a specific Name Server.

        :param domain: Name Server hostname to monitor. (required)
        :type domain: str
        :param days_back: Look back N days (1-6).
        :type days_back: str
        :param page: Pagination page number.
        :type page: int
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_name_server_monitor_alerts_serialize(
            domain=domain,
            days_back=days_back,
            page=page,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NameServerMonitorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_name_server_monitor_alerts_with_http_info(
        self,
        domain: Annotated[StrictStr, Field(description="Name Server hostname to monitor.")],
        days_back: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Look back N days (1-6).")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Pagination page number.")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NameServerMonitorResponse]:
        """Name Server Monitor

        Receive alerts for new/deleted domains on a specific Name Server.

        :param domain: Name Server hostname to monitor. (required)
        :type domain: str
        :param days_back: Look back N days (1-6).
        :type days_back: str
        :param page: Pagination page number.
        :type page: int
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_name_server_monitor_alerts_serialize(
            domain=domain,
            days_back=days_back,
            page=page,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NameServerMonitorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_name_server_monitor_alerts_without_preload_content(
        self,
        domain: Annotated[StrictStr, Field(description="Name Server hostname to monitor.")],
        days_back: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Look back N days (1-6).")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Pagination page number.")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Name Server Monitor

        Receive alerts for new/deleted domains on a specific Name Server.

        :param domain: Name Server hostname to monitor. (required)
        :type domain: str
        :param days_back: Look back N days (1-6).
        :type days_back: str
        :param page: Pagination page number.
        :type page: int
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_name_server_monitor_alerts_serialize(
            domain=domain,
            days_back=days_back,
            page=page,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NameServerMonitorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_name_server_monitor_alerts_serialize(
        self,
        domain,
        days_back,
        page,
        app_partner,
        app_name,
        app_version,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if domain is not None:
            
            _query_params.append(('domain', domain))
            
        if days_back is not None:
            
            _query_params.append(('days_back', days_back))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if app_partner is not None:
            
            _query_params.append(('app_partner', app_partner))
            
        if app_name is not None:
            
            _query_params.append(('app_name', app_name))
            
        if app_version is not None:
            
            _query_params.append(('app_version', app_version))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/noctis/v1/monitor/name-server',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_registrant_monitor_alerts(
        self,
        query: Annotated[StrictStr, Field(description="Registrant name/org keywords to monitor (use '|' for AND).")],
        exclude: Annotated[Optional[StrictStr], Field(description="Keywords to exclude from domain names (use '|' for AND).")] = None,
        days_back: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Look back N days (1-6).")] = None,
        limit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Limit number of results (1-100).")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RegistrantMonitorResponse:
        """Registrant Monitor

        Receive alerts when specific people/orgs register, renew, or delete domains.

        :param query: Registrant name/org keywords to monitor (use '|' for AND). (required)
        :type query: str
        :param exclude: Keywords to exclude from domain names (use '|' for AND).
        :type exclude: str
        :param days_back: Look back N days (1-6).
        :type days_back: str
        :param limit: Limit number of results (1-100).
        :type limit: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registrant_monitor_alerts_serialize(
            query=query,
            exclude=exclude,
            days_back=days_back,
            limit=limit,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RegistrantMonitorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_registrant_monitor_alerts_with_http_info(
        self,
        query: Annotated[StrictStr, Field(description="Registrant name/org keywords to monitor (use '|' for AND).")],
        exclude: Annotated[Optional[StrictStr], Field(description="Keywords to exclude from domain names (use '|' for AND).")] = None,
        days_back: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Look back N days (1-6).")] = None,
        limit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Limit number of results (1-100).")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RegistrantMonitorResponse]:
        """Registrant Monitor

        Receive alerts when specific people/orgs register, renew, or delete domains.

        :param query: Registrant name/org keywords to monitor (use '|' for AND). (required)
        :type query: str
        :param exclude: Keywords to exclude from domain names (use '|' for AND).
        :type exclude: str
        :param days_back: Look back N days (1-6).
        :type days_back: str
        :param limit: Limit number of results (1-100).
        :type limit: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registrant_monitor_alerts_serialize(
            query=query,
            exclude=exclude,
            days_back=days_back,
            limit=limit,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RegistrantMonitorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_registrant_monitor_alerts_without_preload_content(
        self,
        query: Annotated[StrictStr, Field(description="Registrant name/org keywords to monitor (use '|' for AND).")],
        exclude: Annotated[Optional[StrictStr], Field(description="Keywords to exclude from domain names (use '|' for AND).")] = None,
        days_back: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Look back N days (1-6).")] = None,
        limit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Limit number of results (1-100).")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Registrant Monitor

        Receive alerts when specific people/orgs register, renew, or delete domains.

        :param query: Registrant name/org keywords to monitor (use '|' for AND). (required)
        :type query: str
        :param exclude: Keywords to exclude from domain names (use '|' for AND).
        :type exclude: str
        :param days_back: Look back N days (1-6).
        :type days_back: str
        :param limit: Limit number of results (1-100).
        :type limit: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registrant_monitor_alerts_serialize(
            query=query,
            exclude=exclude,
            days_back=days_back,
            limit=limit,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RegistrantMonitorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_registrant_monitor_alerts_serialize(
        self,
        query,
        exclude,
        days_back,
        limit,
        app_partner,
        app_name,
        app_version,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if days_back is not None:
            
            _query_params.append(('days_back', days_back))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if app_partner is not None:
            
            _query_params.append(('app_partner', app_partner))
            
        if app_name is not None:
            
            _query_params.append(('app_name', app_name))
            
        if app_version is not None:
            
            _query_params.append(('app_version', app_version))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/noctis/v1/monitor/registrant',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


