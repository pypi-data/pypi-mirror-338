# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from noctis_sdk.models.vulpra_investigate_response import VulpraInvestigateResponse

from noctis_sdk.api_client import ApiClient, RequestSerialized
from noctis_sdk.api_response import ApiResponse
from noctis_sdk.rest import RESTResponseType


class NoctisVulpraInvestigateApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def investigate_get(
        self,
        domain: Annotated[Optional[StrictStr], Field(description="Domain(s) to investigate (comma-separated).")] = None,
        ip: Annotated[Optional[StrictStr], Field(description="IP address.")] = None,
        email: Annotated[Optional[StrictStr], Field(description="Email address (Whois, SOA, SSL).")] = None,
        email_domain: Annotated[Optional[StrictStr], Field(description="Domain part of email.")] = None,
        nameserver_host: Annotated[Optional[StrictStr], Field(description="Nameserver hostname.")] = None,
        nameserver_domain: Annotated[Optional[StrictStr], Field(description="Nameserver domain part.")] = None,
        nameserver_ip: Annotated[Optional[StrictStr], Field(description="Nameserver IP address.")] = None,
        registrar: Annotated[Optional[StrictStr], Field(description="Registrar name (exact match).")] = None,
        registrant: Annotated[Optional[StrictStr], Field(description="Registrant name (exact match).")] = None,
        registrant_org: Annotated[Optional[StrictStr], Field(description="Registrant organization (exact match).")] = None,
        mailserver_host: Annotated[Optional[StrictStr], Field(description="Mailserver hostname.")] = None,
        mailserver_domain: Annotated[Optional[StrictStr], Field(description="Mailserver domain part.")] = None,
        mailserver_ip: Annotated[Optional[StrictStr], Field(description="Mailserver IP address.")] = None,
        ssl_hash: Annotated[Optional[StrictStr], Field(description="SSL Certificate SHA-1 hash.")] = None,
        ssl_org: Annotated[Optional[StrictStr], Field(description="SSL Organization (exact match).")] = None,
        ssl_subject: Annotated[Optional[StrictStr], Field(description="SSL Subject.")] = None,
        ssl_email: Annotated[Optional[StrictStr], Field(description="SSL Email.")] = None,
        google_analytics: Annotated[Optional[StrictStr], Field(description="Google Analytics code.")] = None,
        adsense: Annotated[Optional[StrictStr], Field(description="AdSense code.")] = None,
        tagged_with_any: Annotated[Optional[StrictStr], Field(description="Vulpra tags (match any, comma-separated).")] = None,
        tagged_with_all: Annotated[Optional[StrictStr], Field(description="Vulpra tags (match all, comma-separated).")] = None,
        not_tagged_with_any: Annotated[Optional[StrictStr], Field(description="Exclude domains with any of these tags.")] = None,
        not_tagged_with_all: Annotated[Optional[StrictStr], Field(description="Exclude domains with all of these tags.")] = None,
        active: Annotated[Optional[StrictBool], Field(description="Filter by domain activity status.")] = None,
        tld: Annotated[Optional[StrictStr], Field(description="Filter by TLD.")] = None,
        create_date: Annotated[Optional[StrictStr], Field(description="Filter by creation date (YYYY-MM-DD, supports >, >=, <, <= prefixes).")] = None,
        create_date_within: Annotated[Optional[StrictInt], Field(description="Filter domains created within the last N days.")] = None,
        first_seen_within: Annotated[Optional[StrictInt], Field(description="Filter domains first seen within the last N seconds.")] = None,
        first_seen_since: Annotated[Optional[StrictStr], Field(description="Filter domains first seen since timestamp (YYYY-MM-DDTHH:mm:ssZ).")] = None,
        expiration_date: Annotated[Optional[StrictStr], Field(description="Filter by expiration date (YYYY-MM-DD).")] = None,
        website_title: Annotated[Optional[StrictStr], Field(description="Filter by website title content.")] = None,
        position: Annotated[Optional[StrictStr], Field(description="Pagination marker from previous response.")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VulpraInvestigateResponse:
        """Vulpra Investigate Query (GET)

        Performs investigations based on various indicators like domain, IP, email, nameserver, registrant, SSL hash, etc. Delivers comprehensive attributes for analysis.

        :param domain: Domain(s) to investigate (comma-separated).
        :type domain: str
        :param ip: IP address.
        :type ip: str
        :param email: Email address (Whois, SOA, SSL).
        :type email: str
        :param email_domain: Domain part of email.
        :type email_domain: str
        :param nameserver_host: Nameserver hostname.
        :type nameserver_host: str
        :param nameserver_domain: Nameserver domain part.
        :type nameserver_domain: str
        :param nameserver_ip: Nameserver IP address.
        :type nameserver_ip: str
        :param registrar: Registrar name (exact match).
        :type registrar: str
        :param registrant: Registrant name (exact match).
        :type registrant: str
        :param registrant_org: Registrant organization (exact match).
        :type registrant_org: str
        :param mailserver_host: Mailserver hostname.
        :type mailserver_host: str
        :param mailserver_domain: Mailserver domain part.
        :type mailserver_domain: str
        :param mailserver_ip: Mailserver IP address.
        :type mailserver_ip: str
        :param ssl_hash: SSL Certificate SHA-1 hash.
        :type ssl_hash: str
        :param ssl_org: SSL Organization (exact match).
        :type ssl_org: str
        :param ssl_subject: SSL Subject.
        :type ssl_subject: str
        :param ssl_email: SSL Email.
        :type ssl_email: str
        :param google_analytics: Google Analytics code.
        :type google_analytics: str
        :param adsense: AdSense code.
        :type adsense: str
        :param tagged_with_any: Vulpra tags (match any, comma-separated).
        :type tagged_with_any: str
        :param tagged_with_all: Vulpra tags (match all, comma-separated).
        :type tagged_with_all: str
        :param not_tagged_with_any: Exclude domains with any of these tags.
        :type not_tagged_with_any: str
        :param not_tagged_with_all: Exclude domains with all of these tags.
        :type not_tagged_with_all: str
        :param active: Filter by domain activity status.
        :type active: bool
        :param tld: Filter by TLD.
        :type tld: str
        :param create_date: Filter by creation date (YYYY-MM-DD, supports >, >=, <, <= prefixes).
        :type create_date: str
        :param create_date_within: Filter domains created within the last N days.
        :type create_date_within: int
        :param first_seen_within: Filter domains first seen within the last N seconds.
        :type first_seen_within: int
        :param first_seen_since: Filter domains first seen since timestamp (YYYY-MM-DDTHH:mm:ssZ).
        :type first_seen_since: str
        :param expiration_date: Filter by expiration date (YYYY-MM-DD).
        :type expiration_date: str
        :param website_title: Filter by website title content.
        :type website_title: str
        :param position: Pagination marker from previous response.
        :type position: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._investigate_get_serialize(
            domain=domain,
            ip=ip,
            email=email,
            email_domain=email_domain,
            nameserver_host=nameserver_host,
            nameserver_domain=nameserver_domain,
            nameserver_ip=nameserver_ip,
            registrar=registrar,
            registrant=registrant,
            registrant_org=registrant_org,
            mailserver_host=mailserver_host,
            mailserver_domain=mailserver_domain,
            mailserver_ip=mailserver_ip,
            ssl_hash=ssl_hash,
            ssl_org=ssl_org,
            ssl_subject=ssl_subject,
            ssl_email=ssl_email,
            google_analytics=google_analytics,
            adsense=adsense,
            tagged_with_any=tagged_with_any,
            tagged_with_all=tagged_with_all,
            not_tagged_with_any=not_tagged_with_any,
            not_tagged_with_all=not_tagged_with_all,
            active=active,
            tld=tld,
            create_date=create_date,
            create_date_within=create_date_within,
            first_seen_within=first_seen_within,
            first_seen_since=first_seen_since,
            expiration_date=expiration_date,
            website_title=website_title,
            position=position,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraInvestigateResponse",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def investigate_get_with_http_info(
        self,
        domain: Annotated[Optional[StrictStr], Field(description="Domain(s) to investigate (comma-separated).")] = None,
        ip: Annotated[Optional[StrictStr], Field(description="IP address.")] = None,
        email: Annotated[Optional[StrictStr], Field(description="Email address (Whois, SOA, SSL).")] = None,
        email_domain: Annotated[Optional[StrictStr], Field(description="Domain part of email.")] = None,
        nameserver_host: Annotated[Optional[StrictStr], Field(description="Nameserver hostname.")] = None,
        nameserver_domain: Annotated[Optional[StrictStr], Field(description="Nameserver domain part.")] = None,
        nameserver_ip: Annotated[Optional[StrictStr], Field(description="Nameserver IP address.")] = None,
        registrar: Annotated[Optional[StrictStr], Field(description="Registrar name (exact match).")] = None,
        registrant: Annotated[Optional[StrictStr], Field(description="Registrant name (exact match).")] = None,
        registrant_org: Annotated[Optional[StrictStr], Field(description="Registrant organization (exact match).")] = None,
        mailserver_host: Annotated[Optional[StrictStr], Field(description="Mailserver hostname.")] = None,
        mailserver_domain: Annotated[Optional[StrictStr], Field(description="Mailserver domain part.")] = None,
        mailserver_ip: Annotated[Optional[StrictStr], Field(description="Mailserver IP address.")] = None,
        ssl_hash: Annotated[Optional[StrictStr], Field(description="SSL Certificate SHA-1 hash.")] = None,
        ssl_org: Annotated[Optional[StrictStr], Field(description="SSL Organization (exact match).")] = None,
        ssl_subject: Annotated[Optional[StrictStr], Field(description="SSL Subject.")] = None,
        ssl_email: Annotated[Optional[StrictStr], Field(description="SSL Email.")] = None,
        google_analytics: Annotated[Optional[StrictStr], Field(description="Google Analytics code.")] = None,
        adsense: Annotated[Optional[StrictStr], Field(description="AdSense code.")] = None,
        tagged_with_any: Annotated[Optional[StrictStr], Field(description="Vulpra tags (match any, comma-separated).")] = None,
        tagged_with_all: Annotated[Optional[StrictStr], Field(description="Vulpra tags (match all, comma-separated).")] = None,
        not_tagged_with_any: Annotated[Optional[StrictStr], Field(description="Exclude domains with any of these tags.")] = None,
        not_tagged_with_all: Annotated[Optional[StrictStr], Field(description="Exclude domains with all of these tags.")] = None,
        active: Annotated[Optional[StrictBool], Field(description="Filter by domain activity status.")] = None,
        tld: Annotated[Optional[StrictStr], Field(description="Filter by TLD.")] = None,
        create_date: Annotated[Optional[StrictStr], Field(description="Filter by creation date (YYYY-MM-DD, supports >, >=, <, <= prefixes).")] = None,
        create_date_within: Annotated[Optional[StrictInt], Field(description="Filter domains created within the last N days.")] = None,
        first_seen_within: Annotated[Optional[StrictInt], Field(description="Filter domains first seen within the last N seconds.")] = None,
        first_seen_since: Annotated[Optional[StrictStr], Field(description="Filter domains first seen since timestamp (YYYY-MM-DDTHH:mm:ssZ).")] = None,
        expiration_date: Annotated[Optional[StrictStr], Field(description="Filter by expiration date (YYYY-MM-DD).")] = None,
        website_title: Annotated[Optional[StrictStr], Field(description="Filter by website title content.")] = None,
        position: Annotated[Optional[StrictStr], Field(description="Pagination marker from previous response.")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VulpraInvestigateResponse]:
        """Vulpra Investigate Query (GET)

        Performs investigations based on various indicators like domain, IP, email, nameserver, registrant, SSL hash, etc. Delivers comprehensive attributes for analysis.

        :param domain: Domain(s) to investigate (comma-separated).
        :type domain: str
        :param ip: IP address.
        :type ip: str
        :param email: Email address (Whois, SOA, SSL).
        :type email: str
        :param email_domain: Domain part of email.
        :type email_domain: str
        :param nameserver_host: Nameserver hostname.
        :type nameserver_host: str
        :param nameserver_domain: Nameserver domain part.
        :type nameserver_domain: str
        :param nameserver_ip: Nameserver IP address.
        :type nameserver_ip: str
        :param registrar: Registrar name (exact match).
        :type registrar: str
        :param registrant: Registrant name (exact match).
        :type registrant: str
        :param registrant_org: Registrant organization (exact match).
        :type registrant_org: str
        :param mailserver_host: Mailserver hostname.
        :type mailserver_host: str
        :param mailserver_domain: Mailserver domain part.
        :type mailserver_domain: str
        :param mailserver_ip: Mailserver IP address.
        :type mailserver_ip: str
        :param ssl_hash: SSL Certificate SHA-1 hash.
        :type ssl_hash: str
        :param ssl_org: SSL Organization (exact match).
        :type ssl_org: str
        :param ssl_subject: SSL Subject.
        :type ssl_subject: str
        :param ssl_email: SSL Email.
        :type ssl_email: str
        :param google_analytics: Google Analytics code.
        :type google_analytics: str
        :param adsense: AdSense code.
        :type adsense: str
        :param tagged_with_any: Vulpra tags (match any, comma-separated).
        :type tagged_with_any: str
        :param tagged_with_all: Vulpra tags (match all, comma-separated).
        :type tagged_with_all: str
        :param not_tagged_with_any: Exclude domains with any of these tags.
        :type not_tagged_with_any: str
        :param not_tagged_with_all: Exclude domains with all of these tags.
        :type not_tagged_with_all: str
        :param active: Filter by domain activity status.
        :type active: bool
        :param tld: Filter by TLD.
        :type tld: str
        :param create_date: Filter by creation date (YYYY-MM-DD, supports >, >=, <, <= prefixes).
        :type create_date: str
        :param create_date_within: Filter domains created within the last N days.
        :type create_date_within: int
        :param first_seen_within: Filter domains first seen within the last N seconds.
        :type first_seen_within: int
        :param first_seen_since: Filter domains first seen since timestamp (YYYY-MM-DDTHH:mm:ssZ).
        :type first_seen_since: str
        :param expiration_date: Filter by expiration date (YYYY-MM-DD).
        :type expiration_date: str
        :param website_title: Filter by website title content.
        :type website_title: str
        :param position: Pagination marker from previous response.
        :type position: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._investigate_get_serialize(
            domain=domain,
            ip=ip,
            email=email,
            email_domain=email_domain,
            nameserver_host=nameserver_host,
            nameserver_domain=nameserver_domain,
            nameserver_ip=nameserver_ip,
            registrar=registrar,
            registrant=registrant,
            registrant_org=registrant_org,
            mailserver_host=mailserver_host,
            mailserver_domain=mailserver_domain,
            mailserver_ip=mailserver_ip,
            ssl_hash=ssl_hash,
            ssl_org=ssl_org,
            ssl_subject=ssl_subject,
            ssl_email=ssl_email,
            google_analytics=google_analytics,
            adsense=adsense,
            tagged_with_any=tagged_with_any,
            tagged_with_all=tagged_with_all,
            not_tagged_with_any=not_tagged_with_any,
            not_tagged_with_all=not_tagged_with_all,
            active=active,
            tld=tld,
            create_date=create_date,
            create_date_within=create_date_within,
            first_seen_within=first_seen_within,
            first_seen_since=first_seen_since,
            expiration_date=expiration_date,
            website_title=website_title,
            position=position,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraInvestigateResponse",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def investigate_get_without_preload_content(
        self,
        domain: Annotated[Optional[StrictStr], Field(description="Domain(s) to investigate (comma-separated).")] = None,
        ip: Annotated[Optional[StrictStr], Field(description="IP address.")] = None,
        email: Annotated[Optional[StrictStr], Field(description="Email address (Whois, SOA, SSL).")] = None,
        email_domain: Annotated[Optional[StrictStr], Field(description="Domain part of email.")] = None,
        nameserver_host: Annotated[Optional[StrictStr], Field(description="Nameserver hostname.")] = None,
        nameserver_domain: Annotated[Optional[StrictStr], Field(description="Nameserver domain part.")] = None,
        nameserver_ip: Annotated[Optional[StrictStr], Field(description="Nameserver IP address.")] = None,
        registrar: Annotated[Optional[StrictStr], Field(description="Registrar name (exact match).")] = None,
        registrant: Annotated[Optional[StrictStr], Field(description="Registrant name (exact match).")] = None,
        registrant_org: Annotated[Optional[StrictStr], Field(description="Registrant organization (exact match).")] = None,
        mailserver_host: Annotated[Optional[StrictStr], Field(description="Mailserver hostname.")] = None,
        mailserver_domain: Annotated[Optional[StrictStr], Field(description="Mailserver domain part.")] = None,
        mailserver_ip: Annotated[Optional[StrictStr], Field(description="Mailserver IP address.")] = None,
        ssl_hash: Annotated[Optional[StrictStr], Field(description="SSL Certificate SHA-1 hash.")] = None,
        ssl_org: Annotated[Optional[StrictStr], Field(description="SSL Organization (exact match).")] = None,
        ssl_subject: Annotated[Optional[StrictStr], Field(description="SSL Subject.")] = None,
        ssl_email: Annotated[Optional[StrictStr], Field(description="SSL Email.")] = None,
        google_analytics: Annotated[Optional[StrictStr], Field(description="Google Analytics code.")] = None,
        adsense: Annotated[Optional[StrictStr], Field(description="AdSense code.")] = None,
        tagged_with_any: Annotated[Optional[StrictStr], Field(description="Vulpra tags (match any, comma-separated).")] = None,
        tagged_with_all: Annotated[Optional[StrictStr], Field(description="Vulpra tags (match all, comma-separated).")] = None,
        not_tagged_with_any: Annotated[Optional[StrictStr], Field(description="Exclude domains with any of these tags.")] = None,
        not_tagged_with_all: Annotated[Optional[StrictStr], Field(description="Exclude domains with all of these tags.")] = None,
        active: Annotated[Optional[StrictBool], Field(description="Filter by domain activity status.")] = None,
        tld: Annotated[Optional[StrictStr], Field(description="Filter by TLD.")] = None,
        create_date: Annotated[Optional[StrictStr], Field(description="Filter by creation date (YYYY-MM-DD, supports >, >=, <, <= prefixes).")] = None,
        create_date_within: Annotated[Optional[StrictInt], Field(description="Filter domains created within the last N days.")] = None,
        first_seen_within: Annotated[Optional[StrictInt], Field(description="Filter domains first seen within the last N seconds.")] = None,
        first_seen_since: Annotated[Optional[StrictStr], Field(description="Filter domains first seen since timestamp (YYYY-MM-DDTHH:mm:ssZ).")] = None,
        expiration_date: Annotated[Optional[StrictStr], Field(description="Filter by expiration date (YYYY-MM-DD).")] = None,
        website_title: Annotated[Optional[StrictStr], Field(description="Filter by website title content.")] = None,
        position: Annotated[Optional[StrictStr], Field(description="Pagination marker from previous response.")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Vulpra Investigate Query (GET)

        Performs investigations based on various indicators like domain, IP, email, nameserver, registrant, SSL hash, etc. Delivers comprehensive attributes for analysis.

        :param domain: Domain(s) to investigate (comma-separated).
        :type domain: str
        :param ip: IP address.
        :type ip: str
        :param email: Email address (Whois, SOA, SSL).
        :type email: str
        :param email_domain: Domain part of email.
        :type email_domain: str
        :param nameserver_host: Nameserver hostname.
        :type nameserver_host: str
        :param nameserver_domain: Nameserver domain part.
        :type nameserver_domain: str
        :param nameserver_ip: Nameserver IP address.
        :type nameserver_ip: str
        :param registrar: Registrar name (exact match).
        :type registrar: str
        :param registrant: Registrant name (exact match).
        :type registrant: str
        :param registrant_org: Registrant organization (exact match).
        :type registrant_org: str
        :param mailserver_host: Mailserver hostname.
        :type mailserver_host: str
        :param mailserver_domain: Mailserver domain part.
        :type mailserver_domain: str
        :param mailserver_ip: Mailserver IP address.
        :type mailserver_ip: str
        :param ssl_hash: SSL Certificate SHA-1 hash.
        :type ssl_hash: str
        :param ssl_org: SSL Organization (exact match).
        :type ssl_org: str
        :param ssl_subject: SSL Subject.
        :type ssl_subject: str
        :param ssl_email: SSL Email.
        :type ssl_email: str
        :param google_analytics: Google Analytics code.
        :type google_analytics: str
        :param adsense: AdSense code.
        :type adsense: str
        :param tagged_with_any: Vulpra tags (match any, comma-separated).
        :type tagged_with_any: str
        :param tagged_with_all: Vulpra tags (match all, comma-separated).
        :type tagged_with_all: str
        :param not_tagged_with_any: Exclude domains with any of these tags.
        :type not_tagged_with_any: str
        :param not_tagged_with_all: Exclude domains with all of these tags.
        :type not_tagged_with_all: str
        :param active: Filter by domain activity status.
        :type active: bool
        :param tld: Filter by TLD.
        :type tld: str
        :param create_date: Filter by creation date (YYYY-MM-DD, supports >, >=, <, <= prefixes).
        :type create_date: str
        :param create_date_within: Filter domains created within the last N days.
        :type create_date_within: int
        :param first_seen_within: Filter domains first seen within the last N seconds.
        :type first_seen_within: int
        :param first_seen_since: Filter domains first seen since timestamp (YYYY-MM-DDTHH:mm:ssZ).
        :type first_seen_since: str
        :param expiration_date: Filter by expiration date (YYYY-MM-DD).
        :type expiration_date: str
        :param website_title: Filter by website title content.
        :type website_title: str
        :param position: Pagination marker from previous response.
        :type position: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._investigate_get_serialize(
            domain=domain,
            ip=ip,
            email=email,
            email_domain=email_domain,
            nameserver_host=nameserver_host,
            nameserver_domain=nameserver_domain,
            nameserver_ip=nameserver_ip,
            registrar=registrar,
            registrant=registrant,
            registrant_org=registrant_org,
            mailserver_host=mailserver_host,
            mailserver_domain=mailserver_domain,
            mailserver_ip=mailserver_ip,
            ssl_hash=ssl_hash,
            ssl_org=ssl_org,
            ssl_subject=ssl_subject,
            ssl_email=ssl_email,
            google_analytics=google_analytics,
            adsense=adsense,
            tagged_with_any=tagged_with_any,
            tagged_with_all=tagged_with_all,
            not_tagged_with_any=not_tagged_with_any,
            not_tagged_with_all=not_tagged_with_all,
            active=active,
            tld=tld,
            create_date=create_date,
            create_date_within=create_date_within,
            first_seen_within=first_seen_within,
            first_seen_since=first_seen_since,
            expiration_date=expiration_date,
            website_title=website_title,
            position=position,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraInvestigateResponse",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _investigate_get_serialize(
        self,
        domain,
        ip,
        email,
        email_domain,
        nameserver_host,
        nameserver_domain,
        nameserver_ip,
        registrar,
        registrant,
        registrant_org,
        mailserver_host,
        mailserver_domain,
        mailserver_ip,
        ssl_hash,
        ssl_org,
        ssl_subject,
        ssl_email,
        google_analytics,
        adsense,
        tagged_with_any,
        tagged_with_all,
        not_tagged_with_any,
        not_tagged_with_all,
        active,
        tld,
        create_date,
        create_date_within,
        first_seen_within,
        first_seen_since,
        expiration_date,
        website_title,
        position,
        app_partner,
        app_name,
        app_version,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if domain is not None:
            
            _query_params.append(('domain', domain))
            
        if ip is not None:
            
            _query_params.append(('ip', ip))
            
        if email is not None:
            
            _query_params.append(('email', email))
            
        if email_domain is not None:
            
            _query_params.append(('email_domain', email_domain))
            
        if nameserver_host is not None:
            
            _query_params.append(('nameserver_host', nameserver_host))
            
        if nameserver_domain is not None:
            
            _query_params.append(('nameserver_domain', nameserver_domain))
            
        if nameserver_ip is not None:
            
            _query_params.append(('nameserver_ip', nameserver_ip))
            
        if registrar is not None:
            
            _query_params.append(('registrar', registrar))
            
        if registrant is not None:
            
            _query_params.append(('registrant', registrant))
            
        if registrant_org is not None:
            
            _query_params.append(('registrant_org', registrant_org))
            
        if mailserver_host is not None:
            
            _query_params.append(('mailserver_host', mailserver_host))
            
        if mailserver_domain is not None:
            
            _query_params.append(('mailserver_domain', mailserver_domain))
            
        if mailserver_ip is not None:
            
            _query_params.append(('mailserver_ip', mailserver_ip))
            
        if ssl_hash is not None:
            
            _query_params.append(('ssl_hash', ssl_hash))
            
        if ssl_org is not None:
            
            _query_params.append(('ssl_org', ssl_org))
            
        if ssl_subject is not None:
            
            _query_params.append(('ssl_subject', ssl_subject))
            
        if ssl_email is not None:
            
            _query_params.append(('ssl_email', ssl_email))
            
        if google_analytics is not None:
            
            _query_params.append(('google_analytics', google_analytics))
            
        if adsense is not None:
            
            _query_params.append(('adsense', adsense))
            
        if tagged_with_any is not None:
            
            _query_params.append(('tagged_with_any', tagged_with_any))
            
        if tagged_with_all is not None:
            
            _query_params.append(('tagged_with_all', tagged_with_all))
            
        if not_tagged_with_any is not None:
            
            _query_params.append(('not_tagged_with_any', not_tagged_with_any))
            
        if not_tagged_with_all is not None:
            
            _query_params.append(('not_tagged_with_all', not_tagged_with_all))
            
        if active is not None:
            
            _query_params.append(('active', active))
            
        if tld is not None:
            
            _query_params.append(('tld', tld))
            
        if create_date is not None:
            
            _query_params.append(('create_date', create_date))
            
        if create_date_within is not None:
            
            _query_params.append(('create_date_within', create_date_within))
            
        if first_seen_within is not None:
            
            _query_params.append(('first_seen_within', first_seen_within))
            
        if first_seen_since is not None:
            
            _query_params.append(('first_seen_since', first_seen_since))
            
        if expiration_date is not None:
            
            _query_params.append(('expiration_date', expiration_date))
            
        if website_title is not None:
            
            _query_params.append(('website_title', website_title))
            
        if position is not None:
            
            _query_params.append(('position', position))
            
        if app_partner is not None:
            
            _query_params.append(('app_partner', app_partner))
            
        if app_name is not None:
            
            _query_params.append(('app_name', app_name))
            
        if app_version is not None:
            
            _query_params.append(('app_version', app_version))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/noctis/v1/vulpra/investigate/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def investigate_post(
        self,
        domain: Annotated[Optional[StrictStr], Field(description="Domain(s) to investigate (comma-separated).")] = None,
        ip: Annotated[Optional[StrictStr], Field(description="IP address.")] = None,
        email: Annotated[Optional[StrictStr], Field(description="Email address (Whois, SOA, SSL).")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VulpraInvestigateResponse:
        """Vulpra Investigate Query (POST)

        Performs investigations using POST with form parameters. Functionally similar to the GET endpoint.

        :param domain: Domain(s) to investigate (comma-separated).
        :type domain: str
        :param ip: IP address.
        :type ip: str
        :param email: Email address (Whois, SOA, SSL).
        :type email: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._investigate_post_serialize(
            domain=domain,
            ip=ip,
            email=email,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraInvestigateResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def investigate_post_with_http_info(
        self,
        domain: Annotated[Optional[StrictStr], Field(description="Domain(s) to investigate (comma-separated).")] = None,
        ip: Annotated[Optional[StrictStr], Field(description="IP address.")] = None,
        email: Annotated[Optional[StrictStr], Field(description="Email address (Whois, SOA, SSL).")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VulpraInvestigateResponse]:
        """Vulpra Investigate Query (POST)

        Performs investigations using POST with form parameters. Functionally similar to the GET endpoint.

        :param domain: Domain(s) to investigate (comma-separated).
        :type domain: str
        :param ip: IP address.
        :type ip: str
        :param email: Email address (Whois, SOA, SSL).
        :type email: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._investigate_post_serialize(
            domain=domain,
            ip=ip,
            email=email,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraInvestigateResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def investigate_post_without_preload_content(
        self,
        domain: Annotated[Optional[StrictStr], Field(description="Domain(s) to investigate (comma-separated).")] = None,
        ip: Annotated[Optional[StrictStr], Field(description="IP address.")] = None,
        email: Annotated[Optional[StrictStr], Field(description="Email address (Whois, SOA, SSL).")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Vulpra Investigate Query (POST)

        Performs investigations using POST with form parameters. Functionally similar to the GET endpoint.

        :param domain: Domain(s) to investigate (comma-separated).
        :type domain: str
        :param ip: IP address.
        :type ip: str
        :param email: Email address (Whois, SOA, SSL).
        :type email: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._investigate_post_serialize(
            domain=domain,
            ip=ip,
            email=email,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraInvestigateResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _investigate_post_serialize(
        self,
        domain,
        ip,
        email,
        app_partner,
        app_name,
        app_version,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if domain is not None:
            _form_params.append(('domain', domain))
        if ip is not None:
            _form_params.append(('ip', ip))
        if email is not None:
            _form_params.append(('email', email))
        if app_partner is not None:
            _form_params.append(('app_partner', app_partner))
        if app_name is not None:
            _form_params.append(('app_name', app_name))
        if app_version is not None:
            _form_params.append(('app_version', app_version))
        if format is not None:
            _form_params.append(('format', format))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/noctis/v1/vulpra/investigate/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


