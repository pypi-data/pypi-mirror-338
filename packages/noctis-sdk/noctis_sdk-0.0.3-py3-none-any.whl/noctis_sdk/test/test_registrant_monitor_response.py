# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from noctis_sdk.models.registrant_monitor_response import RegistrantMonitorResponse

class TestRegistrantMonitorResponse(unittest.TestCase):
    """RegistrantMonitorResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RegistrantMonitorResponse:
        """Test RegistrantMonitorResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RegistrantMonitorResponse`
        """
        model = RegistrantMonitorResponse()
        if include_optional:
            return RegistrantMonitorResponse(
                response = noctis_sdk.models.registrant_monitor_data.RegistrantMonitorData(
                    query = '', 
                    limit = 56, 
                    total = 56, 
                    date = 'YYYY-MM-DD', 
                    alerts = [
                        noctis_sdk.models.registrant_alert.RegistrantAlert(
                            domain = '', 
                            match_type = '', 
                            current_owner = '', 
                            created = 'YYYY-MM-DD', 
                            modified = 'YYYY-MM-DD', 
                            last_owner = '', )
                        ], )
            )
        else:
            return RegistrantMonitorResponse(
        )
        """

    def testRegistrantMonitorResponse(self):
        """Test RegistrantMonitorResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
