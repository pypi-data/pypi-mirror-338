# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from noctis_sdk.models.vulpra_investigate_result_dto import VulpraInvestigateResultDTO

class TestVulpraInvestigateResultDTO(unittest.TestCase):
    """VulpraInvestigateResultDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VulpraInvestigateResultDTO:
        """Test VulpraInvestigateResultDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VulpraInvestigateResultDTO`
        """
        model = VulpraInvestigateResultDTO()
        if include_optional:
            return VulpraInvestigateResultDTO(
                domain = 'noctis.yourdomain.com',
                whois_url = '',
                adsense = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                    value = '', 
                    count = 56, ),
                alexa = '',
                active = True,
                google_analytics = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                    value = '', 
                    count = 56, ),
                ga4 = [
                    noctis_sdk.models.tracker_info_dto.TrackerInfoDTO(
                        value = 'G-XXXXXXXXXX', 
                        count = 56, )
                    ],
                gtm_codes = [
                    noctis_sdk.models.tracker_info_dto.TrackerInfoDTO(
                        value = 'G-XXXXXXXXXX', 
                        count = 56, )
                    ],
                admin_contact = noctis_sdk.models.contact_dto.ContactDTO(
                    name = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                        value = '', 
                        count = 56, ), 
                    org = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                        value = '', 
                        count = 56, ), 
                    street = , 
                    city = , 
                    state = , 
                    postal = , 
                    country = , 
                    phone = , 
                    fax = , 
                    email = [
                        
                        ], ),
                billing_contact = noctis_sdk.models.contact_dto.ContactDTO(
                    name = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                        value = '', 
                        count = 56, ), 
                    org = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                        value = '', 
                        count = 56, ), 
                    street = , 
                    city = , 
                    state = , 
                    postal = , 
                    country = , 
                    phone = , 
                    fax = , 
                    email = [
                        
                        ], ),
                registrant_contact = noctis_sdk.models.contact_dto.ContactDTO(
                    name = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                        value = '', 
                        count = 56, ), 
                    org = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                        value = '', 
                        count = 56, ), 
                    street = , 
                    city = , 
                    state = , 
                    postal = , 
                    country = , 
                    phone = , 
                    fax = , 
                    email = [
                        
                        ], ),
                technical_contact = noctis_sdk.models.contact_dto.ContactDTO(
                    name = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                        value = '', 
                        count = 56, ), 
                    org = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                        value = '', 
                        count = 56, ), 
                    street = , 
                    city = , 
                    state = , 
                    postal = , 
                    country = , 
                    phone = , 
                    fax = , 
                    email = [
                        
                        ], ),
                create_date = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                    value = '', 
                    count = 56, ),
                expiration_date = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                    value = '', 
                    count = 56, ),
                email_domain = [
                    noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                        value = '', 
                        count = 56, )
                    ],
                soa_email = [
                    noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                        value = '', 
                        count = 56, )
                    ],
                ssl_email = [
                    noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                        value = '', 
                        count = 56, )
                    ],
                additional_whois_email = [
                    noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                        value = '', 
                        count = 56, )
                    ],
                ip = [
                    noctis_sdk.models.ip_info_with_asn_dto.IpInfoWithAsnDTO(
                        address = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                            value = '', 
                            count = 56, ), 
                        asn = [
                            noctis_sdk.models.generic_value_dto_integer.GenericValueDTOInteger(
                                value = 56, 
                                count = 56, )
                            ], 
                        country_code = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                            value = '', 
                            count = 56, ), 
                        isp = , )
                    ],
                mx = [
                    noctis_sdk.models.mx_info_dto.MxInfoDTO(
                        host = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                            value = '', 
                            count = 56, ), 
                        domain = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                            value = '', 
                            count = 56, ), 
                        ip = [
                            
                            ], 
                        priority = 56, )
                    ],
                name_server = [
                    noctis_sdk.models.name_server_info_dto.NameServerInfoDTO(
                        host = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                            value = '', 
                            count = 56, ), 
                        domain = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                            value = '', 
                            count = 56, ), 
                        ip = [
                            
                            ], )
                    ],
                domain_risk = noctis_sdk.models.domain_risk_dto.DomainRiskDTO(
                    risk_score = 85, 
                    components = [
                        noctis_sdk.models.risk_component_score.RiskComponentScore(
                            name = 'proximity', 
                            risk_score = 70, )
                        ], ),
                redirect = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                    value = '', 
                    count = 56, ),
                redirect_domain = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                    value = '', 
                    count = 56, ),
                registrant_name = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                    value = '', 
                    count = 56, ),
                registrant_org = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                    value = '', 
                    count = 56, ),
                registrar = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                    value = '', 
                    count = 56, ),
                registrar_status = [
                    ''
                    ],
                spf_info = '',
                ssl_info = [
                    noctis_sdk.models.ssl_info_dto.SslInfoDTO(
                        hash = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                            value = '', 
                            count = 56, ), 
                        subject = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                            value = '', 
                            count = 56, ), 
                        organization = , 
                        email = [
                            ''
                            ], 
                        alt_names = [
                            
                            ], 
                        sources = noctis_sdk.models.ssl_source_info.SslSourceInfo(
                            active = 56, ), 
                        common_name = , 
                        issuer_common_name = , 
                        not_after = noctis_sdk.models.generic_value_dto_long.GenericValueDTOLong(
                            value = 56, 
                            count = 56, ), 
                        not_before = noctis_sdk.models.generic_value_dto_long.GenericValueDTOLong(
                            value = 56, 
                            count = 56, ), 
                        duration = , )
                    ],
                tld = 'com',
                website_response = 200,
                data_updated_timestamp = 'YYYY-MM-DDTHH:mm:ssZ',
                website_title = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                    value = '', 
                    count = 56, ),
                server_type = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                    value = '', 
                    count = 56, ),
                first_seen = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                    value = '', 
                    count = 56, ),
                tags = [
                    noctis_sdk.models.tag_info_dto.TagInfoDTO(
                        label = 'malware-campaign-xyz', 
                        scope = 'user', 
                        tagged_at = 'YYYY-MM-DDTHH:mm:ssZ', )
                    ]
            )
        else:
            return VulpraInvestigateResultDTO(
        )
        """

    def testVulpraInvestigateResultDTO(self):
        """Test VulpraInvestigateResultDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
