# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from noctis_sdk.models.generic_value_enrich_dto import GenericValueEnrichDTO
from typing import Optional, Set
from typing_extensions import Self

class IpInfoEnrichDTO(BaseModel):
    """
    IP address information for enrich results.
    """ # noqa: E501
    ip_address: Optional[StrictStr] = Field(default=None, description="The IP address.", alias="ipAddress")
    country: Optional[GenericValueEnrichDTO] = Field(default=None, description="Country where the IP is located.")
    asn: Optional[GenericValueEnrichDTO] = Field(default=None, description="ASN associated with the IP.")
    ip_type: Optional[GenericValueEnrichDTO] = Field(default=None, description="Type of the IP (e.g., 'IPv4', 'IPv6').", alias="ipType")
    isp: Optional[GenericValueEnrichDTO] = Field(default=None, description="ISP associated with the IP.")
    __properties: ClassVar[List[str]] = ["ipAddress", "country", "asn", "ipType", "isp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IpInfoEnrichDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['country'] = self.country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of asn
        if self.asn:
            _dict['asn'] = self.asn.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ip_type
        if self.ip_type:
            _dict['ipType'] = self.ip_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of isp
        if self.isp:
            _dict['isp'] = self.isp.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IpInfoEnrichDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ipAddress": obj.get("ipAddress"),
            "country": GenericValueEnrichDTO.from_dict(obj["country"]) if obj.get("country") is not None else None,
            "asn": GenericValueEnrichDTO.from_dict(obj["asn"]) if obj.get("asn") is not None else None,
            "ipType": GenericValueEnrichDTO.from_dict(obj["ipType"]) if obj.get("ipType") is not None else None,
            "isp": GenericValueEnrichDTO.from_dict(obj["isp"]) if obj.get("isp") is not None else None
        })
        return _obj


