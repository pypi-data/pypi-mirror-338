# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from noctis_sdk.models.generic_value_enrich_dto import GenericValueEnrichDTO
from typing import Optional, Set
from typing_extensions import Self

class SslInfoEnrichDTO(BaseModel):
    """
    SSL certificate information for enrich results.
    """ # noqa: E501
    issuer: Optional[GenericValueEnrichDTO] = Field(default=None, description="SSL certificate issuer.")
    subject: Optional[GenericValueEnrichDTO] = Field(default=None, description="SSL certificate subject.")
    valid_from: Optional[GenericValueEnrichDTO] = Field(default=None, description="Start date of the SSL certificate validity.", alias="validFrom")
    valid_to: Optional[GenericValueEnrichDTO] = Field(default=None, description="End date of the SSL certificate validity.", alias="validTo")
    serial_number: Optional[GenericValueEnrichDTO] = Field(default=None, description="SSL certificate serial number.", alias="serialNumber")
    signature_algorithm: Optional[GenericValueEnrichDTO] = Field(default=None, description="SSL certificate signature algorithm.", alias="signatureAlgorithm")
    valid: Optional[StrictBool] = Field(default=None, description="Whether the SSL certificate is currently valid.")
    __properties: ClassVar[List[str]] = ["issuer", "subject", "validFrom", "validTo", "serialNumber", "signatureAlgorithm", "valid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SslInfoEnrichDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of issuer
        if self.issuer:
            _dict['issuer'] = self.issuer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subject
        if self.subject:
            _dict['subject'] = self.subject.to_dict()
        # override the default output from pydantic by calling `to_dict()` of valid_from
        if self.valid_from:
            _dict['validFrom'] = self.valid_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of valid_to
        if self.valid_to:
            _dict['validTo'] = self.valid_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of serial_number
        if self.serial_number:
            _dict['serialNumber'] = self.serial_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of signature_algorithm
        if self.signature_algorithm:
            _dict['signatureAlgorithm'] = self.signature_algorithm.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SslInfoEnrichDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "issuer": GenericValueEnrichDTO.from_dict(obj["issuer"]) if obj.get("issuer") is not None else None,
            "subject": GenericValueEnrichDTO.from_dict(obj["subject"]) if obj.get("subject") is not None else None,
            "validFrom": GenericValueEnrichDTO.from_dict(obj["validFrom"]) if obj.get("validFrom") is not None else None,
            "validTo": GenericValueEnrichDTO.from_dict(obj["validTo"]) if obj.get("validTo") is not None else None,
            "serialNumber": GenericValueEnrichDTO.from_dict(obj["serialNumber"]) if obj.get("serialNumber") is not None else None,
            "signatureAlgorithm": GenericValueEnrichDTO.from_dict(obj["signatureAlgorithm"]) if obj.get("signatureAlgorithm") is not None else None,
            "valid": obj.get("valid")
        })
        return _obj


