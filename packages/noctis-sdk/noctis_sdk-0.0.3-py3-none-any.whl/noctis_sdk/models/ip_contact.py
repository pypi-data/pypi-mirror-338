# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IpContact(BaseModel):
    """
    IpContact
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Contact handle/ID.")
    type: Optional[StrictStr] = Field(default=None, description="Contact type (Person, Role, Group).")
    name: Optional[StrictStr] = Field(default=None, description="Contact name.")
    address: Optional[List[StrictStr]] = Field(default=None, description="Postal address lines.")
    country: Optional[StrictStr] = Field(default=None, description="Country code.")
    phone: Optional[List[StrictStr]] = Field(default=None, description="Phone numbers.")
    fax: Optional[List[StrictStr]] = Field(default=None, description="Fax numbers.")
    email: Optional[List[StrictStr]] = Field(default=None, description="Email addresses.")
    descr: Optional[List[StrictStr]] = Field(default=None, description="Description lines.")
    contact_keys: Optional[Dict[str, List[StrictStr]]] = Field(default=None, description="Referenced contact keys/handles.", alias="contactKeys")
    remarks: Optional[List[StrictStr]] = Field(default=None, description="Remarks.")
    notify_email: Optional[List[StrictStr]] = Field(default=None, description="Notification email addresses.", alias="notifyEmail")
    abuse_mailbox: Optional[List[StrictStr]] = Field(default=None, description="Abuse mailbox email.", alias="abuseMailbox")
    mnt_keys: Optional[Dict[str, List[StrictStr]]] = Field(default=None, description="Maintainer keys/handles.", alias="mntKeys")
    created_date: Optional[StrictStr] = Field(default=None, description="Creation date.", alias="createdDate")
    updated_date: Optional[StrictStr] = Field(default=None, description="Last updated date.", alias="updatedDate")
    changed_by: Optional[List[StrictStr]] = Field(default=None, description="Emails/handles of who changed the record.", alias="changedBy")
    source: Optional[StrictStr] = Field(default=None, description="Data source (RIR).")
    ref: Optional[StrictStr] = Field(default=None, description="Reference URL.")
    other: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Other contact properties.")
    __properties: ClassVar[List[str]] = ["id", "type", "name", "address", "country", "phone", "fax", "email", "descr", "contactKeys", "remarks", "notifyEmail", "abuseMailbox", "mntKeys", "createdDate", "updatedDate", "changedBy", "source", "ref", "other"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IpContact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IpContact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "name": obj.get("name"),
            "address": obj.get("address"),
            "country": obj.get("country"),
            "phone": obj.get("phone"),
            "fax": obj.get("fax"),
            "email": obj.get("email"),
            "descr": obj.get("descr"),
            "contactKeys": obj.get("contactKeys"),
            "remarks": obj.get("remarks"),
            "notifyEmail": obj.get("notifyEmail"),
            "abuseMailbox": obj.get("abuseMailbox"),
            "mntKeys": obj.get("mntKeys"),
            "createdDate": obj.get("createdDate"),
            "updatedDate": obj.get("updatedDate"),
            "changedBy": obj.get("changedBy"),
            "source": obj.get("source"),
            "ref": obj.get("ref"),
            "other": obj.get("other")
        })
        return _obj


