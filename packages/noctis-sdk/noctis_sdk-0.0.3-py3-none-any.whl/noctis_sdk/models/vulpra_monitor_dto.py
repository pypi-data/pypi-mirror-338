# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from noctis_sdk.models.monitor_domain_counts_dto import MonitorDomainCountsDTO
from typing import Optional, Set
from typing_extensions import Self

class VulpraMonitorDTO(BaseModel):
    """
    Details of a single Vulpra Detect monitor.
    """ # noqa: E501
    term: Optional[StrictStr] = Field(default=None, description="The term being monitored.")
    match_substring_variations: Optional[StrictBool] = Field(default=None, description="Whether substring variations of the term are matched.", alias="matchSubstringVariations")
    nameserver_exclusions: Optional[List[StrictStr]] = Field(default=None, description="List of nameserver hostnames to exclude from results.", alias="nameserverExclusions")
    text_exclusions: Optional[List[StrictStr]] = Field(default=None, description="List of text strings to exclude if found in the domain name.", alias="textExclusions")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for this monitor.")
    created_date: Optional[StrictStr] = Field(default=None, description="Timestamp when the monitor was created.", alias="createdDate")
    updated_date: Optional[StrictStr] = Field(default=None, description="Timestamp when the monitor was last updated.", alias="updatedDate")
    state: Optional[StrictStr] = Field(default=None, description="Current state of the monitor.")
    status: Optional[StrictStr] = Field(default=None, description="Operational status of the monitor (e.g., 'running', 'paused', 'error').")
    domain_counts: Optional[MonitorDomainCountsDTO] = Field(default=None, description="Counts of domains in different states associated with this monitor (present if requested).", alias="domainCounts")
    created_by: Optional[StrictStr] = Field(default=None, description="Identifier of the user/system that created the monitor.", alias="createdBy")
    __properties: ClassVar[List[str]] = ["term", "matchSubstringVariations", "nameserverExclusions", "textExclusions", "id", "createdDate", "updatedDate", "state", "status", "domainCounts", "createdBy"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active', 'inactive']):
            raise ValueError("must be one of enum values ('active', 'inactive')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VulpraMonitorDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of domain_counts
        if self.domain_counts:
            _dict['domainCounts'] = self.domain_counts.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VulpraMonitorDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "term": obj.get("term"),
            "matchSubstringVariations": obj.get("matchSubstringVariations"),
            "nameserverExclusions": obj.get("nameserverExclusions"),
            "textExclusions": obj.get("textExclusions"),
            "id": obj.get("id"),
            "createdDate": obj.get("createdDate"),
            "updatedDate": obj.get("updatedDate"),
            "state": obj.get("state"),
            "status": obj.get("status"),
            "domainCounts": MonitorDomainCountsDTO.from_dict(obj["domainCounts"]) if obj.get("domainCounts") is not None else None,
            "createdBy": obj.get("createdBy")
        })
        return _obj


