# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from noctis_sdk.models.escalation_info_dto import EscalationInfoDTO
from noctis_sdk.models.ip_basic_dto import IpBasicDTO
from noctis_sdk.models.name_server_basic_dto import NameServerBasicDTO
from noctis_sdk.models.risk_score_components_dto import RiskScoreComponentsDTO
from typing import Optional, Set
from typing_extensions import Self

class VulpraDetectDomainDTO(BaseModel):
    """
    Details of a single domain within a Vulpra Detect list.
    """ # noqa: E501
    state: Optional[StrictStr] = Field(default=None, description="Current state of the domain in Vulpra Detect (e.g., 'new', 'watched', 'ignored').")
    domain: Optional[StrictStr] = Field(default=None, description="The domain name.")
    status: Optional[StrictStr] = Field(default=None, description="Current status of the domain (active/inactive based on DNS/registration).")
    discovered_date: Optional[StrictStr] = Field(default=None, description="Timestamp when the domain was first discovered by the monitor(s).", alias="discoveredDate")
    changed_date: Optional[StrictStr] = Field(default=None, description="Timestamp when the domain's DNS or Whois details last changed.", alias="changedDate")
    risk_score: Optional[StrictInt] = Field(default=None, description="Noctis Risk Score (0-100).", alias="riskScore")
    risk_score_status: Optional[StrictStr] = Field(default=None, description="Status of the risk score calculation (e.g., 'calculated', 'pending').", alias="riskScoreStatus")
    risk_score_components: Optional[RiskScoreComponentsDTO] = Field(default=None, description="Breakdown of risk score components.", alias="riskScoreComponents")
    mx_exists: Optional[StrictBool] = Field(default=None, description="Indicates if the domain has an MX record.", alias="mxExists")
    tld: Optional[StrictStr] = Field(default=None, description="Top-Level Domain (TLD).")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for this domain entry within Vulpra Detect.")
    escalations: Optional[List[EscalationInfoDTO]] = Field(default=None, description="Details of any escalations applied to this domain.")
    monitor_ids: Optional[List[StrictStr]] = Field(default=None, description="IDs of the monitors that discovered this domain.", alias="monitorIds")
    name_server: Optional[List[NameServerBasicDTO]] = Field(default=None, description="Name servers associated with the domain (if requested).", alias="nameServer")
    registrant_contact_email: Optional[List[StrictStr]] = Field(default=None, description="Registrant contact email(s) from Whois (if requested).", alias="registrantContactEmail")
    registrar: Optional[StrictStr] = Field(default=None, description="Registrar name from Whois (if requested).")
    create_date: Optional[StrictStr] = Field(default=None, description="Domain creation date from Whois (if requested).", alias="createDate")
    ip: Optional[List[IpBasicDTO]] = Field(default=None, description="IP address details (if requested).")
    mx: Optional[List[NameServerBasicDTO]] = Field(default=None, description="MX record hostnames (if requested).")
    __properties: ClassVar[List[str]] = ["state", "domain", "status", "discoveredDate", "changedDate", "riskScore", "riskScoreStatus", "riskScoreComponents", "mxExists", "tld", "id", "escalations", "monitorIds", "nameServer", "registrantContactEmail", "registrar", "createDate", "ip", "mx"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active', 'inactive']):
            raise ValueError("must be one of enum values ('active', 'inactive')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VulpraDetectDomainDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of risk_score_components
        if self.risk_score_components:
            _dict['riskScoreComponents'] = self.risk_score_components.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in escalations (list)
        _items = []
        if self.escalations:
            for _item_escalations in self.escalations:
                if _item_escalations:
                    _items.append(_item_escalations.to_dict())
            _dict['escalations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in name_server (list)
        _items = []
        if self.name_server:
            for _item_name_server in self.name_server:
                if _item_name_server:
                    _items.append(_item_name_server.to_dict())
            _dict['nameServer'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ip (list)
        _items = []
        if self.ip:
            for _item_ip in self.ip:
                if _item_ip:
                    _items.append(_item_ip.to_dict())
            _dict['ip'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mx (list)
        _items = []
        if self.mx:
            for _item_mx in self.mx:
                if _item_mx:
                    _items.append(_item_mx.to_dict())
            _dict['mx'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VulpraDetectDomainDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "state": obj.get("state"),
            "domain": obj.get("domain"),
            "status": obj.get("status"),
            "discoveredDate": obj.get("discoveredDate"),
            "changedDate": obj.get("changedDate"),
            "riskScore": obj.get("riskScore"),
            "riskScoreStatus": obj.get("riskScoreStatus"),
            "riskScoreComponents": RiskScoreComponentsDTO.from_dict(obj["riskScoreComponents"]) if obj.get("riskScoreComponents") is not None else None,
            "mxExists": obj.get("mxExists"),
            "tld": obj.get("tld"),
            "id": obj.get("id"),
            "escalations": [EscalationInfoDTO.from_dict(_item) for _item in obj["escalations"]] if obj.get("escalations") is not None else None,
            "monitorIds": obj.get("monitorIds"),
            "nameServer": [NameServerBasicDTO.from_dict(_item) for _item in obj["nameServer"]] if obj.get("nameServer") is not None else None,
            "registrantContactEmail": obj.get("registrantContactEmail"),
            "registrar": obj.get("registrar"),
            "createDate": obj.get("createDate"),
            "ip": [IpBasicDTO.from_dict(_item) for _item in obj["ip"]] if obj.get("ip") is not None else None,
            "mx": [NameServerBasicDTO.from_dict(_item) for _item in obj["mx"]] if obj.get("mx") is not None else None
        })
        return _obj


