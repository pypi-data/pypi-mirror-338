# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from noctis_sdk.models.parsed_domain_whois_details import ParsedDomainWhoisDetails
from noctis_sdk.models.registration_info import RegistrationInfo
from noctis_sdk.models.whois_record import WhoisRecord
from typing import Optional, Set
from typing_extensions import Self

class DomainWhoisData(BaseModel):
    """
    DomainWhoisData
    """ # noqa: E501
    registrant: Optional[StrictStr] = Field(default=None, description="Registrant name from the Whois record (often privacy protected).")
    registration: Optional[RegistrationInfo] = Field(default=None, description="Domain registration details.")
    name_servers: Optional[List[StrictStr]] = Field(default=None, description="List of name servers found in the Whois record.", alias="nameServers")
    parsed_whois: Optional[ParsedDomainWhoisDetails] = Field(default=None, description="Detailed parsed Whois fields.", alias="parsedWhois")
    whois: Optional[WhoisRecord] = Field(default=None, description="Raw Whois record information.")
    __properties: ClassVar[List[str]] = ["registrant", "registration", "nameServers", "parsedWhois", "whois"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DomainWhoisData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of registration
        if self.registration:
            _dict['registration'] = self.registration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parsed_whois
        if self.parsed_whois:
            _dict['parsedWhois'] = self.parsed_whois.to_dict()
        # override the default output from pydantic by calling `to_dict()` of whois
        if self.whois:
            _dict['whois'] = self.whois.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DomainWhoisData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "registrant": obj.get("registrant"),
            "registration": RegistrationInfo.from_dict(obj["registration"]) if obj.get("registration") is not None else None,
            "nameServers": obj.get("nameServers"),
            "parsedWhois": ParsedDomainWhoisDetails.from_dict(obj["parsedWhois"]) if obj.get("parsedWhois") is not None else None,
            "whois": WhoisRecord.from_dict(obj["whois"]) if obj.get("whois") is not None else None
        })
        return _obj


