# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from noctis_sdk.models.generic_value_dto_long import GenericValueDTOLong
from noctis_sdk.models.generic_value_dto_string import GenericValueDTOString
from noctis_sdk.models.ssl_source_info import SslSourceInfo
from typing import Optional, Set
from typing_extensions import Self

class SslInfoDTO(BaseModel):
    """
    Details of an SSL certificate associated with the domain.
    """ # noqa: E501
    hash: Optional[GenericValueDTOString] = Field(default=None, description="SHA-1 hash of the certificate.")
    subject: Optional[GenericValueDTOString] = Field(default=None, description="Subject field of the certificate.")
    organization: Optional[GenericValueDTOString] = Field(default=None, description="Organization field from the certificate subject.")
    email: Optional[List[StrictStr]] = Field(default=None, description="Email addresses found within the certificate.")
    alt_names: Optional[List[GenericValueDTOString]] = Field(default=None, description="Subject Alternative Names (SANs).", alias="altNames")
    sources: Optional[SslSourceInfo] = Field(default=None, description="Source information (e.g., count of active sources).")
    common_name: Optional[GenericValueDTOString] = Field(default=None, description="Common Name (CN) from the certificate subject.", alias="commonName")
    issuer_common_name: Optional[GenericValueDTOString] = Field(default=None, description="Issuer's Common Name.", alias="issuerCommonName")
    not_after: Optional[GenericValueDTOLong] = Field(default=None, description="Certificate validity end date ('Not After').", alias="notAfter")
    not_before: Optional[GenericValueDTOLong] = Field(default=None, description="Certificate validity start date ('Not Before').", alias="notBefore")
    duration: Optional[GenericValueDTOLong] = Field(default=None, description="Calculated duration of the certificate's validity in seconds/days.")
    __properties: ClassVar[List[str]] = ["hash", "subject", "organization", "email", "altNames", "sources", "commonName", "issuerCommonName", "notAfter", "notBefore", "duration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SslInfoDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hash
        if self.hash:
            _dict['hash'] = self.hash.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subject
        if self.subject:
            _dict['subject'] = self.subject.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in alt_names (list)
        _items = []
        if self.alt_names:
            for _item_alt_names in self.alt_names:
                if _item_alt_names:
                    _items.append(_item_alt_names.to_dict())
            _dict['altNames'] = _items
        # override the default output from pydantic by calling `to_dict()` of sources
        if self.sources:
            _dict['sources'] = self.sources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of common_name
        if self.common_name:
            _dict['commonName'] = self.common_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of issuer_common_name
        if self.issuer_common_name:
            _dict['issuerCommonName'] = self.issuer_common_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of not_after
        if self.not_after:
            _dict['notAfter'] = self.not_after.to_dict()
        # override the default output from pydantic by calling `to_dict()` of not_before
        if self.not_before:
            _dict['notBefore'] = self.not_before.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duration
        if self.duration:
            _dict['duration'] = self.duration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SslInfoDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hash": GenericValueDTOString.from_dict(obj["hash"]) if obj.get("hash") is not None else None,
            "subject": GenericValueDTOString.from_dict(obj["subject"]) if obj.get("subject") is not None else None,
            "organization": GenericValueDTOString.from_dict(obj["organization"]) if obj.get("organization") is not None else None,
            "email": obj.get("email"),
            "altNames": [GenericValueDTOString.from_dict(_item) for _item in obj["altNames"]] if obj.get("altNames") is not None else None,
            "sources": SslSourceInfo.from_dict(obj["sources"]) if obj.get("sources") is not None else None,
            "commonName": GenericValueDTOString.from_dict(obj["commonName"]) if obj.get("commonName") is not None else None,
            "issuerCommonName": GenericValueDTOString.from_dict(obj["issuerCommonName"]) if obj.get("issuerCommonName") is not None else None,
            "notAfter": GenericValueDTOLong.from_dict(obj["notAfter"]) if obj.get("notAfter") is not None else None,
            "notBefore": GenericValueDTOLong.from_dict(obj["notBefore"]) if obj.get("notBefore") is not None else None,
            "duration": GenericValueDTOLong.from_dict(obj["duration"]) if obj.get("duration") is not None else None
        })
        return _obj


