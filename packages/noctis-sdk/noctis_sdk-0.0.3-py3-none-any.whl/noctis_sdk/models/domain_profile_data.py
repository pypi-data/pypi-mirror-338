# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from noctis_sdk.models.history_summary import HistorySummary
from noctis_sdk.models.name_server_info import NameServerInfo
from noctis_sdk.models.registrant_info import RegistrantInfo
from noctis_sdk.models.registration_info import RegistrationInfo
from noctis_sdk.models.seo_info import SeoInfo
from noctis_sdk.models.server_info import ServerInfo
from noctis_sdk.models.website_data import WebsiteData
from typing import Optional, Set
from typing_extensions import Self

class DomainProfileData(BaseModel):
    """
    Detailed information about a domain's profile.
    """ # noqa: E501
    registrant: Optional[RegistrantInfo] = Field(default=None, description="Information about the registrant.")
    server: Optional[ServerInfo] = Field(default=None, description="Information about the hosting server.")
    registration: Optional[RegistrationInfo] = Field(default=None, description="Registration details (dates, registrar).")
    name_servers: Optional[List[NameServerInfo]] = Field(default=None, description="List of name servers associated with the domain.", alias="nameServers")
    history: Optional[HistorySummary] = Field(default=None, description="Summary of historical data availability.")
    seo: Optional[SeoInfo] = Field(default=None, description="SEO related information preview.")
    website_data: Optional[WebsiteData] = Field(default=None, description="Data obtained from crawling the website.", alias="websiteData")
    __properties: ClassVar[List[str]] = ["registrant", "server", "registration", "nameServers", "history", "seo", "websiteData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DomainProfileData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of registrant
        if self.registrant:
            _dict['registrant'] = self.registrant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of server
        if self.server:
            _dict['server'] = self.server.to_dict()
        # override the default output from pydantic by calling `to_dict()` of registration
        if self.registration:
            _dict['registration'] = self.registration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in name_servers (list)
        _items = []
        if self.name_servers:
            for _item_name_servers in self.name_servers:
                if _item_name_servers:
                    _items.append(_item_name_servers.to_dict())
            _dict['nameServers'] = _items
        # override the default output from pydantic by calling `to_dict()` of history
        if self.history:
            _dict['history'] = self.history.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seo
        if self.seo:
            _dict['seo'] = self.seo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of website_data
        if self.website_data:
            _dict['websiteData'] = self.website_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DomainProfileData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "registrant": RegistrantInfo.from_dict(obj["registrant"]) if obj.get("registrant") is not None else None,
            "server": ServerInfo.from_dict(obj["server"]) if obj.get("server") is not None else None,
            "registration": RegistrationInfo.from_dict(obj["registration"]) if obj.get("registration") is not None else None,
            "nameServers": [NameServerInfo.from_dict(_item) for _item in obj["nameServers"]] if obj.get("nameServers") is not None else None,
            "history": HistorySummary.from_dict(obj["history"]) if obj.get("history") is not None else None,
            "seo": SeoInfo.from_dict(obj["seo"]) if obj.get("seo") is not None else None,
            "websiteData": WebsiteData.from_dict(obj["websiteData"]) if obj.get("websiteData") is not None else None
        })
        return _obj


