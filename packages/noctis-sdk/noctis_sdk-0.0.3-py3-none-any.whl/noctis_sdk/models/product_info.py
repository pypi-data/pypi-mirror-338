# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from noctis_sdk.models.usage_stats import UsageStats
from typing import Optional, Set
from typing_extensions import Self

class ProductInfo(BaseModel):
    """
    Details of a specific API product subscription.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Identifier of the product.")
    per_month_limit: Optional[StrictStr] = Field(default=None, description="Monthly query limit for this product ('unlimited' if no limit).", alias="perMonthLimit")
    per_minute_limit: Optional[StrictStr] = Field(default=None, description="Per-minute query limit for this product ('unlimited' if no limit).", alias="perMinuteLimit")
    absolute_limit: Optional[StrictStr] = Field(default=None, description="Absolute query limit (if applicable).", alias="absoluteLimit")
    usage: Optional[UsageStats] = Field(default=None, description="Usage statistics for this product.")
    expiration_date: Optional[StrictStr] = Field(default=None, description="Expiration date of the subscription (if applicable).", alias="expirationDate")
    __properties: ClassVar[List[str]] = ["id", "perMonthLimit", "perMinuteLimit", "absoluteLimit", "usage", "expirationDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "perMonthLimit": obj.get("perMonthLimit"),
            "perMinuteLimit": obj.get("perMinuteLimit"),
            "absoluteLimit": obj.get("absoluteLimit"),
            "usage": UsageStats.from_dict(obj["usage"]) if obj.get("usage") is not None else None,
            "expirationDate": obj.get("expirationDate")
        })
        return _obj


