# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from noctis_sdk.models.registrar_info import RegistrarInfo
from noctis_sdk.models.whois_contacts import WhoisContacts
from typing import Optional, Set
from typing_extensions import Self

class ParsedDomainWhoisDetails(BaseModel):
    """
    ParsedDomainWhoisDetails
    """ # noqa: E501
    domain: Optional[StrictStr] = Field(default=None, description="Domain name.")
    created_date: Optional[StrictStr] = Field(default=None, description="Creation date.", alias="createdDate")
    updated_date: Optional[StrictStr] = Field(default=None, description="Last updated date.", alias="updatedDate")
    expired_date: Optional[StrictStr] = Field(default=None, description="Expiration date.", alias="expiredDate")
    statuses: Optional[List[StrictStr]] = Field(default=None, description="Domain status codes.")
    name_servers: Optional[List[StrictStr]] = Field(default=None, description="Registered name servers.", alias="nameServers")
    registrar: Optional[RegistrarInfo] = Field(default=None, description="Registrar details.")
    contacts: Optional[WhoisContacts] = Field(default=None, description="Contact details (Registrant, Admin, Tech, Billing).")
    other_properties: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Any other unclassified properties found.", alias="otherProperties")
    __properties: ClassVar[List[str]] = ["domain", "createdDate", "updatedDate", "expiredDate", "statuses", "nameServers", "registrar", "contacts", "otherProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParsedDomainWhoisDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of registrar
        if self.registrar:
            _dict['registrar'] = self.registrar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contacts
        if self.contacts:
            _dict['contacts'] = self.contacts.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParsedDomainWhoisDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domain": obj.get("domain"),
            "createdDate": obj.get("createdDate"),
            "updatedDate": obj.get("updatedDate"),
            "expiredDate": obj.get("expiredDate"),
            "statuses": obj.get("statuses"),
            "nameServers": obj.get("nameServers"),
            "registrar": RegistrarInfo.from_dict(obj["registrar"]) if obj.get("registrar") is not None else None,
            "contacts": WhoisContacts.from_dict(obj["contacts"]) if obj.get("contacts") is not None else None,
            "otherProperties": obj.get("otherProperties")
        })
        return _obj


