# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from noctis_sdk.models.generic_value_enrich_dto import GenericValueEnrichDTO
from typing import Optional, Set
from typing_extensions import Self

class ContactEnrichDTO(BaseModel):
    """
    Contact details for enrich results.
    """ # noqa: E501
    name: Optional[GenericValueEnrichDTO] = None
    org: Optional[GenericValueEnrichDTO] = None
    street: Optional[GenericValueEnrichDTO] = None
    city: Optional[GenericValueEnrichDTO] = None
    state: Optional[GenericValueEnrichDTO] = None
    postal: Optional[GenericValueEnrichDTO] = None
    country: Optional[GenericValueEnrichDTO] = None
    phone: Optional[GenericValueEnrichDTO] = None
    fax: Optional[GenericValueEnrichDTO] = None
    email: Optional[List[GenericValueEnrichDTO]] = None
    __properties: ClassVar[List[str]] = ["name", "org", "street", "city", "state", "postal", "country", "phone", "fax", "email"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContactEnrichDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of org
        if self.org:
            _dict['org'] = self.org.to_dict()
        # override the default output from pydantic by calling `to_dict()` of street
        if self.street:
            _dict['street'] = self.street.to_dict()
        # override the default output from pydantic by calling `to_dict()` of city
        if self.city:
            _dict['city'] = self.city.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of postal
        if self.postal:
            _dict['postal'] = self.postal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['country'] = self.country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phone
        if self.phone:
            _dict['phone'] = self.phone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fax
        if self.fax:
            _dict['fax'] = self.fax.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in email (list)
        _items = []
        if self.email:
            for _item_email in self.email:
                if _item_email:
                    _items.append(_item_email.to_dict())
            _dict['email'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContactEnrichDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": GenericValueEnrichDTO.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "org": GenericValueEnrichDTO.from_dict(obj["org"]) if obj.get("org") is not None else None,
            "street": GenericValueEnrichDTO.from_dict(obj["street"]) if obj.get("street") is not None else None,
            "city": GenericValueEnrichDTO.from_dict(obj["city"]) if obj.get("city") is not None else None,
            "state": GenericValueEnrichDTO.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "postal": GenericValueEnrichDTO.from_dict(obj["postal"]) if obj.get("postal") is not None else None,
            "country": GenericValueEnrichDTO.from_dict(obj["country"]) if obj.get("country") is not None else None,
            "phone": GenericValueEnrichDTO.from_dict(obj["phone"]) if obj.get("phone") is not None else None,
            "fax": GenericValueEnrichDTO.from_dict(obj["fax"]) if obj.get("fax") is not None else None,
            "email": [GenericValueEnrichDTO.from_dict(_item) for _item in obj["email"]] if obj.get("email") is not None else None
        })
        return _obj


