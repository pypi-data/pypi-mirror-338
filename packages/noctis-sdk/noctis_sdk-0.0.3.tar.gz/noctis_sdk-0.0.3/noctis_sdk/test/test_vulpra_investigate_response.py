# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from noctis_sdk.models.vulpra_investigate_response import VulpraInvestigateResponse

class TestVulpraInvestigateResponse(unittest.TestCase):
    """VulpraInvestigateResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VulpraInvestigateResponse:
        """Test VulpraInvestigateResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VulpraInvestigateResponse`
        """
        model = VulpraInvestigateResponse()
        if include_optional:
            return VulpraInvestigateResponse(
                response = noctis_sdk.models.investigate_response_data.InvestigateResponseData(
                    limit_exceeded = True, 
                    has_more_results = True, 
                    message = '', 
                    results_count = 56, 
                    total_count = 56, 
                    results = [
                        noctis_sdk.models.vulpra_investigate_result_dto.VulpraInvestigateResultDTO(
                            domain = 'noctis.yourdomain.com', 
                            whois_url = '', 
                            adsense = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                                value = '', 
                                count = 56, ), 
                            alexa = '', 
                            active = True, 
                            google_analytics = noctis_sdk.models.generic_value_dto_string.GenericValueDTOString(
                                value = '', 
                                count = 56, ), 
                            ga4 = [
                                noctis_sdk.models.tracker_info_dto.TrackerInfoDTO(
                                    value = 'G-XXXXXXXXXX', 
                                    count = 56, )
                                ], 
                            gtm_codes = [
                                noctis_sdk.models.tracker_info_dto.TrackerInfoDTO(
                                    value = 'G-XXXXXXXXXX', 
                                    count = 56, )
                                ], 
                            admin_contact = noctis_sdk.models.contact_dto.ContactDTO(
                                name = , 
                                org = , 
                                street = , 
                                city = , 
                                state = , 
                                postal = , 
                                country = , 
                                phone = , 
                                fax = , 
                                email = [
                                    
                                    ], ), 
                            billing_contact = noctis_sdk.models.contact_dto.ContactDTO(), 
                            registrant_contact = , 
                            technical_contact = , 
                            create_date = , 
                            expiration_date = , 
                            email_domain = [
                                
                                ], 
                            soa_email = [
                                
                                ], 
                            ssl_email = [
                                
                                ], 
                            additional_whois_email = [
                                
                                ], 
                            ip = [
                                noctis_sdk.models.ip_info_with_asn_dto.IpInfoWithAsnDTO(
                                    address = , 
                                    asn = [
                                        noctis_sdk.models.generic_value_dto_integer.GenericValueDTOInteger(
                                            value = 56, 
                                            count = 56, )
                                        ], 
                                    country_code = , 
                                    isp = , )
                                ], 
                            mx = [
                                noctis_sdk.models.mx_info_dto.MxInfoDTO(
                                    host = , 
                                    domain = , 
                                    priority = 56, )
                                ], 
                            name_server = [
                                noctis_sdk.models.name_server_info_dto.NameServerInfoDTO()
                                ], 
                            domain_risk = noctis_sdk.models.domain_risk_dto.DomainRiskDTO(
                                risk_score = 85, 
                                components = [
                                    noctis_sdk.models.risk_component_score.RiskComponentScore(
                                        risk_score = 70, )
                                    ], ), 
                            redirect = , 
                            redirect_domain = , 
                            registrant_name = , 
                            registrant_org = , 
                            registrar = , 
                            registrar_status = [
                                ''
                                ], 
                            spf_info = '', 
                            ssl_info = [
                                noctis_sdk.models.ssl_info_dto.SslInfoDTO(
                                    hash = , 
                                    subject = , 
                                    organization = , 
                                    alt_names = [
                                        
                                        ], 
                                    sources = noctis_sdk.models.ssl_source_info.SslSourceInfo(
                                        active = 56, ), 
                                    common_name = , 
                                    issuer_common_name = , 
                                    not_after = noctis_sdk.models.generic_value_dto_long.GenericValueDTOLong(
                                        value = 56, 
                                        count = 56, ), 
                                    not_before = noctis_sdk.models.generic_value_dto_long.GenericValueDTOLong(
                                        value = 56, 
                                        count = 56, ), 
                                    duration = , )
                                ], 
                            tld = 'com', 
                            website_response = 200, 
                            data_updated_timestamp = 'YYYY-MM-DDTHH:mm:ssZ', 
                            website_title = , 
                            server_type = , 
                            first_seen = , 
                            tags = [
                                noctis_sdk.models.tag_info_dto.TagInfoDTO(
                                    label = 'malware-campaign-xyz', 
                                    scope = 'user', 
                                    tagged_at = 'YYYY-MM-DDTHH:mm:ssZ', )
                                ], )
                        ], 
                    missing_domains = [
                        ''
                        ], 
                    position = '', )
            )
        else:
            return VulpraInvestigateResponse(
        )
        """

    def testVulpraInvestigateResponse(self):
        """Test VulpraInvestigateResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
