# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from noctis_sdk.models.vulpra_detect_domain_list_response import VulpraDetectDomainListResponse
from noctis_sdk.models.vulpra_detect_domains_update_request import VulpraDetectDomainsUpdateRequest
from noctis_sdk.models.vulpra_detect_escalation_update_response import VulpraDetectEscalationUpdateResponse
from noctis_sdk.models.vulpra_detect_escalations_request import VulpraDetectEscalationsRequest
from noctis_sdk.models.vulpra_detect_monitor_list_response import VulpraDetectMonitorListResponse
from noctis_sdk.models.vulpra_detect_watchlist_update_response import VulpraDetectWatchlistUpdateResponse

from noctis_sdk.api_client import ApiClient, RequestSerialized
from noctis_sdk.api_response import ApiResponse
from noctis_sdk.rest import RESTResponseType


class NoctisVulpraDetectApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def escalate_domains(
        self,
        vulpra_detect_escalations_request: VulpraDetectEscalationsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VulpraDetectEscalationUpdateResponse:
        """Escalate Domains

        Mark domains for internal blocking or escalate to external partners (e.g., Google Safe Browsing - if applicable).

        :param vulpra_detect_escalations_request: (required)
        :type vulpra_detect_escalations_request: VulpraDetectEscalationsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._escalate_domains_serialize(
            vulpra_detect_escalations_request=vulpra_detect_escalations_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraDetectEscalationUpdateResponse",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def escalate_domains_with_http_info(
        self,
        vulpra_detect_escalations_request: VulpraDetectEscalationsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VulpraDetectEscalationUpdateResponse]:
        """Escalate Domains

        Mark domains for internal blocking or escalate to external partners (e.g., Google Safe Browsing - if applicable).

        :param vulpra_detect_escalations_request: (required)
        :type vulpra_detect_escalations_request: VulpraDetectEscalationsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._escalate_domains_serialize(
            vulpra_detect_escalations_request=vulpra_detect_escalations_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraDetectEscalationUpdateResponse",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def escalate_domains_without_preload_content(
        self,
        vulpra_detect_escalations_request: VulpraDetectEscalationsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Escalate Domains

        Mark domains for internal blocking or escalate to external partners (e.g., Google Safe Browsing - if applicable).

        :param vulpra_detect_escalations_request: (required)
        :type vulpra_detect_escalations_request: VulpraDetectEscalationsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._escalate_domains_serialize(
            vulpra_detect_escalations_request=vulpra_detect_escalations_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraDetectEscalationUpdateResponse",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _escalate_domains_serialize(
        self,
        vulpra_detect_escalations_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if vulpra_detect_escalations_request is not None:
            _body_params = vulpra_detect_escalations_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/noctis/v1/vulpra/detect/escalations/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_ignored_domains(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VulpraDetectDomainListResponse:
        """Ignored Domains

        Retrieve domains marked as ignored in Vulpra Detect.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ignored_domains_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraDetectDomainListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_ignored_domains_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VulpraDetectDomainListResponse]:
        """Ignored Domains

        Retrieve domains marked as ignored in Vulpra Detect.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ignored_domains_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraDetectDomainListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_ignored_domains_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Ignored Domains

        Retrieve domains marked as ignored in Vulpra Detect.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ignored_domains_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraDetectDomainListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_ignored_domains_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/noctis/v1/vulpra/detect/domains/ignored/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_new_domains(
        self,
        monitor_id: Annotated[Optional[StrictStr], Field(description="Filter by specific Monitor ID.")] = None,
        tlds: Annotated[Optional[List[StrictStr]], Field(description="Filter by specific TLDs.")] = None,
        risk_score_ranges: Annotated[Optional[List[StrictStr]], Field(description="Filter by risk score ranges.")] = None,
        mx_exists: Annotated[Optional[StrictBool], Field(description="Filter by MX record existence.")] = None,
        discovered_since: Annotated[Optional[StrictStr], Field(description="Return domains discovered since this ISO-8601 date/time.")] = None,
        discovered_before: Annotated[Optional[StrictStr], Field(description="Return domains discovered before this ISO-8601 date/time.")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Search term contained within the domain name.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Sort results.")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Sort order.")] = None,
        include_domain_data: Annotated[Optional[StrictBool], Field(description="Include detailed DNS and Whois data (reduces limit).")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Pagination offset.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Pagination limit (max 50 if include_domain_data=true, otherwise higher).")] = None,
        preview: Annotated[Optional[StrictBool], Field(description="Preview mode for testing (limits results, bypasses hourly limits).")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VulpraDetectDomainListResponse:
        """Newly Discovered Domains

        Retrieve newly discovered domains for active Vulpra Detect monitors in the account.

        :param monitor_id: Filter by specific Monitor ID.
        :type monitor_id: str
        :param tlds: Filter by specific TLDs.
        :type tlds: List[str]
        :param risk_score_ranges: Filter by risk score ranges.
        :type risk_score_ranges: List[str]
        :param mx_exists: Filter by MX record existence.
        :type mx_exists: bool
        :param discovered_since: Return domains discovered since this ISO-8601 date/time.
        :type discovered_since: str
        :param discovered_before: Return domains discovered before this ISO-8601 date/time.
        :type discovered_before: str
        :param search: Search term contained within the domain name.
        :type search: str
        :param sort: Sort results.
        :type sort: List[str]
        :param order: Sort order.
        :type order: str
        :param include_domain_data: Include detailed DNS and Whois data (reduces limit).
        :type include_domain_data: bool
        :param offset: Pagination offset.
        :type offset: int
        :param limit: Pagination limit (max 50 if include_domain_data=true, otherwise higher).
        :type limit: int
        :param preview: Preview mode for testing (limits results, bypasses hourly limits).
        :type preview: bool
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_new_domains_serialize(
            monitor_id=monitor_id,
            tlds=tlds,
            risk_score_ranges=risk_score_ranges,
            mx_exists=mx_exists,
            discovered_since=discovered_since,
            discovered_before=discovered_before,
            search=search,
            sort=sort,
            order=order,
            include_domain_data=include_domain_data,
            offset=offset,
            limit=limit,
            preview=preview,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraDetectDomainListResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_new_domains_with_http_info(
        self,
        monitor_id: Annotated[Optional[StrictStr], Field(description="Filter by specific Monitor ID.")] = None,
        tlds: Annotated[Optional[List[StrictStr]], Field(description="Filter by specific TLDs.")] = None,
        risk_score_ranges: Annotated[Optional[List[StrictStr]], Field(description="Filter by risk score ranges.")] = None,
        mx_exists: Annotated[Optional[StrictBool], Field(description="Filter by MX record existence.")] = None,
        discovered_since: Annotated[Optional[StrictStr], Field(description="Return domains discovered since this ISO-8601 date/time.")] = None,
        discovered_before: Annotated[Optional[StrictStr], Field(description="Return domains discovered before this ISO-8601 date/time.")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Search term contained within the domain name.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Sort results.")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Sort order.")] = None,
        include_domain_data: Annotated[Optional[StrictBool], Field(description="Include detailed DNS and Whois data (reduces limit).")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Pagination offset.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Pagination limit (max 50 if include_domain_data=true, otherwise higher).")] = None,
        preview: Annotated[Optional[StrictBool], Field(description="Preview mode for testing (limits results, bypasses hourly limits).")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VulpraDetectDomainListResponse]:
        """Newly Discovered Domains

        Retrieve newly discovered domains for active Vulpra Detect monitors in the account.

        :param monitor_id: Filter by specific Monitor ID.
        :type monitor_id: str
        :param tlds: Filter by specific TLDs.
        :type tlds: List[str]
        :param risk_score_ranges: Filter by risk score ranges.
        :type risk_score_ranges: List[str]
        :param mx_exists: Filter by MX record existence.
        :type mx_exists: bool
        :param discovered_since: Return domains discovered since this ISO-8601 date/time.
        :type discovered_since: str
        :param discovered_before: Return domains discovered before this ISO-8601 date/time.
        :type discovered_before: str
        :param search: Search term contained within the domain name.
        :type search: str
        :param sort: Sort results.
        :type sort: List[str]
        :param order: Sort order.
        :type order: str
        :param include_domain_data: Include detailed DNS and Whois data (reduces limit).
        :type include_domain_data: bool
        :param offset: Pagination offset.
        :type offset: int
        :param limit: Pagination limit (max 50 if include_domain_data=true, otherwise higher).
        :type limit: int
        :param preview: Preview mode for testing (limits results, bypasses hourly limits).
        :type preview: bool
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_new_domains_serialize(
            monitor_id=monitor_id,
            tlds=tlds,
            risk_score_ranges=risk_score_ranges,
            mx_exists=mx_exists,
            discovered_since=discovered_since,
            discovered_before=discovered_before,
            search=search,
            sort=sort,
            order=order,
            include_domain_data=include_domain_data,
            offset=offset,
            limit=limit,
            preview=preview,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraDetectDomainListResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_new_domains_without_preload_content(
        self,
        monitor_id: Annotated[Optional[StrictStr], Field(description="Filter by specific Monitor ID.")] = None,
        tlds: Annotated[Optional[List[StrictStr]], Field(description="Filter by specific TLDs.")] = None,
        risk_score_ranges: Annotated[Optional[List[StrictStr]], Field(description="Filter by risk score ranges.")] = None,
        mx_exists: Annotated[Optional[StrictBool], Field(description="Filter by MX record existence.")] = None,
        discovered_since: Annotated[Optional[StrictStr], Field(description="Return domains discovered since this ISO-8601 date/time.")] = None,
        discovered_before: Annotated[Optional[StrictStr], Field(description="Return domains discovered before this ISO-8601 date/time.")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Search term contained within the domain name.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Sort results.")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Sort order.")] = None,
        include_domain_data: Annotated[Optional[StrictBool], Field(description="Include detailed DNS and Whois data (reduces limit).")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Pagination offset.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Pagination limit (max 50 if include_domain_data=true, otherwise higher).")] = None,
        preview: Annotated[Optional[StrictBool], Field(description="Preview mode for testing (limits results, bypasses hourly limits).")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Newly Discovered Domains

        Retrieve newly discovered domains for active Vulpra Detect monitors in the account.

        :param monitor_id: Filter by specific Monitor ID.
        :type monitor_id: str
        :param tlds: Filter by specific TLDs.
        :type tlds: List[str]
        :param risk_score_ranges: Filter by risk score ranges.
        :type risk_score_ranges: List[str]
        :param mx_exists: Filter by MX record existence.
        :type mx_exists: bool
        :param discovered_since: Return domains discovered since this ISO-8601 date/time.
        :type discovered_since: str
        :param discovered_before: Return domains discovered before this ISO-8601 date/time.
        :type discovered_before: str
        :param search: Search term contained within the domain name.
        :type search: str
        :param sort: Sort results.
        :type sort: List[str]
        :param order: Sort order.
        :type order: str
        :param include_domain_data: Include detailed DNS and Whois data (reduces limit).
        :type include_domain_data: bool
        :param offset: Pagination offset.
        :type offset: int
        :param limit: Pagination limit (max 50 if include_domain_data=true, otherwise higher).
        :type limit: int
        :param preview: Preview mode for testing (limits results, bypasses hourly limits).
        :type preview: bool
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_new_domains_serialize(
            monitor_id=monitor_id,
            tlds=tlds,
            risk_score_ranges=risk_score_ranges,
            mx_exists=mx_exists,
            discovered_since=discovered_since,
            discovered_before=discovered_before,
            search=search,
            sort=sort,
            order=order,
            include_domain_data=include_domain_data,
            offset=offset,
            limit=limit,
            preview=preview,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraDetectDomainListResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_new_domains_serialize(
        self,
        monitor_id,
        tlds,
        risk_score_ranges,
        mx_exists,
        discovered_since,
        discovered_before,
        search,
        sort,
        order,
        include_domain_data,
        offset,
        limit,
        preview,
        app_partner,
        app_name,
        app_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tlds[]': 'multi',
            'risk_score_ranges[]': 'multi',
            'sort[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if monitor_id is not None:
            
            _query_params.append(('monitor_id', monitor_id))
            
        if tlds is not None:
            
            _query_params.append(('tlds[]', tlds))
            
        if risk_score_ranges is not None:
            
            _query_params.append(('risk_score_ranges[]', risk_score_ranges))
            
        if mx_exists is not None:
            
            _query_params.append(('mx_exists', mx_exists))
            
        if discovered_since is not None:
            
            _query_params.append(('discovered_since', discovered_since))
            
        if discovered_before is not None:
            
            _query_params.append(('discovered_before', discovered_before))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        if sort is not None:
            
            _query_params.append(('sort[]', sort))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        if include_domain_data is not None:
            
            _query_params.append(('include_domain_data', include_domain_data))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if preview is not None:
            
            _query_params.append(('preview', preview))
            
        if app_partner is not None:
            
            _query_params.append(('app_partner', app_partner))
            
        if app_name is not None:
            
            _query_params.append(('app_name', app_name))
            
        if app_version is not None:
            
            _query_params.append(('app_version', app_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/noctis/v1/vulpra/detect/domains/new/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_watched_domains(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VulpraDetectDomainListResponse:
        """Watched Domains (Changed/Escalated)

        Retrieve recently changed or escalated domains from Vulpra Detect monitors.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_watched_domains_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraDetectDomainListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_watched_domains_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VulpraDetectDomainListResponse]:
        """Watched Domains (Changed/Escalated)

        Retrieve recently changed or escalated domains from Vulpra Detect monitors.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_watched_domains_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraDetectDomainListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_watched_domains_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Watched Domains (Changed/Escalated)

        Retrieve recently changed or escalated domains from Vulpra Detect monitors.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_watched_domains_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraDetectDomainListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_watched_domains_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/noctis/v1/vulpra/detect/domains/watched/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_monitors(
        self,
        datetime_counts_since: Annotated[Optional[StrictStr], Field(description="Include counts since this ISO-8601 date/time (required if include_counts=true).")] = None,
        include_counts: Annotated[Optional[StrictBool], Field(description="Include counts for new, watched, changed, escalated domains per monitor.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Sort monitor list by specified field(s).")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Sort order.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Pagination offset.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Pagination limit (max 100 if include_counts=true).")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VulpraDetectMonitorListResponse:
        """Monitor List

        Retrieve the Vulpra Detect monitors and respective IDs for your account.

        :param datetime_counts_since: Include counts since this ISO-8601 date/time (required if include_counts=true).
        :type datetime_counts_since: str
        :param include_counts: Include counts for new, watched, changed, escalated domains per monitor.
        :type include_counts: bool
        :param sort: Sort monitor list by specified field(s).
        :type sort: List[str]
        :param order: Sort order.
        :type order: str
        :param offset: Pagination offset.
        :type offset: int
        :param limit: Pagination limit (max 100 if include_counts=true).
        :type limit: int
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_monitors_serialize(
            datetime_counts_since=datetime_counts_since,
            include_counts=include_counts,
            sort=sort,
            order=order,
            offset=offset,
            limit=limit,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraDetectMonitorListResponse",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_monitors_with_http_info(
        self,
        datetime_counts_since: Annotated[Optional[StrictStr], Field(description="Include counts since this ISO-8601 date/time (required if include_counts=true).")] = None,
        include_counts: Annotated[Optional[StrictBool], Field(description="Include counts for new, watched, changed, escalated domains per monitor.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Sort monitor list by specified field(s).")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Sort order.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Pagination offset.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Pagination limit (max 100 if include_counts=true).")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VulpraDetectMonitorListResponse]:
        """Monitor List

        Retrieve the Vulpra Detect monitors and respective IDs for your account.

        :param datetime_counts_since: Include counts since this ISO-8601 date/time (required if include_counts=true).
        :type datetime_counts_since: str
        :param include_counts: Include counts for new, watched, changed, escalated domains per monitor.
        :type include_counts: bool
        :param sort: Sort monitor list by specified field(s).
        :type sort: List[str]
        :param order: Sort order.
        :type order: str
        :param offset: Pagination offset.
        :type offset: int
        :param limit: Pagination limit (max 100 if include_counts=true).
        :type limit: int
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_monitors_serialize(
            datetime_counts_since=datetime_counts_since,
            include_counts=include_counts,
            sort=sort,
            order=order,
            offset=offset,
            limit=limit,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraDetectMonitorListResponse",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_monitors_without_preload_content(
        self,
        datetime_counts_since: Annotated[Optional[StrictStr], Field(description="Include counts since this ISO-8601 date/time (required if include_counts=true).")] = None,
        include_counts: Annotated[Optional[StrictBool], Field(description="Include counts for new, watched, changed, escalated domains per monitor.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Sort monitor list by specified field(s).")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Sort order.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Pagination offset.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Pagination limit (max 100 if include_counts=true).")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Monitor List

        Retrieve the Vulpra Detect monitors and respective IDs for your account.

        :param datetime_counts_since: Include counts since this ISO-8601 date/time (required if include_counts=true).
        :type datetime_counts_since: str
        :param include_counts: Include counts for new, watched, changed, escalated domains per monitor.
        :type include_counts: bool
        :param sort: Sort monitor list by specified field(s).
        :type sort: List[str]
        :param order: Sort order.
        :type order: str
        :param offset: Pagination offset.
        :type offset: int
        :param limit: Pagination limit (max 100 if include_counts=true).
        :type limit: int
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_monitors_serialize(
            datetime_counts_since=datetime_counts_since,
            include_counts=include_counts,
            sort=sort,
            order=order,
            offset=offset,
            limit=limit,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraDetectMonitorListResponse",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_monitors_serialize(
        self,
        datetime_counts_since,
        include_counts,
        sort,
        order,
        offset,
        limit,
        app_partner,
        app_name,
        app_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if datetime_counts_since is not None:
            
            _query_params.append(('datetime_counts_since', datetime_counts_since))
            
        if include_counts is not None:
            
            _query_params.append(('include_counts', include_counts))
            
        if sort is not None:
            
            _query_params.append(('sort[]', sort))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if app_partner is not None:
            
            _query_params.append(('app_partner', app_partner))
            
        if app_name is not None:
            
            _query_params.append(('app_name', app_name))
            
        if app_version is not None:
            
            _query_params.append(('app_version', app_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/noctis/v1/vulpra/detect/monitors/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_domain_state(
        self,
        vulpra_detect_domains_update_request: VulpraDetectDomainsUpdateRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VulpraDetectWatchlistUpdateResponse:
        """Update Domain State (Watch/Ignore)

        Move Vulpra Detect domains between the 'new', 'watched', and 'ignored' states.

        :param vulpra_detect_domains_update_request: (required)
        :type vulpra_detect_domains_update_request: VulpraDetectDomainsUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_domain_state_serialize(
            vulpra_detect_domains_update_request=vulpra_detect_domains_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraDetectWatchlistUpdateResponse",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_domain_state_with_http_info(
        self,
        vulpra_detect_domains_update_request: VulpraDetectDomainsUpdateRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VulpraDetectWatchlistUpdateResponse]:
        """Update Domain State (Watch/Ignore)

        Move Vulpra Detect domains between the 'new', 'watched', and 'ignored' states.

        :param vulpra_detect_domains_update_request: (required)
        :type vulpra_detect_domains_update_request: VulpraDetectDomainsUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_domain_state_serialize(
            vulpra_detect_domains_update_request=vulpra_detect_domains_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraDetectWatchlistUpdateResponse",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_domain_state_without_preload_content(
        self,
        vulpra_detect_domains_update_request: VulpraDetectDomainsUpdateRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update Domain State (Watch/Ignore)

        Move Vulpra Detect domains between the 'new', 'watched', and 'ignored' states.

        :param vulpra_detect_domains_update_request: (required)
        :type vulpra_detect_domains_update_request: VulpraDetectDomainsUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_domain_state_serialize(
            vulpra_detect_domains_update_request=vulpra_detect_domains_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VulpraDetectWatchlistUpdateResponse",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_domain_state_serialize(
        self,
        vulpra_detect_domains_update_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if vulpra_detect_domains_update_request is not None:
            _body_params = vulpra_detect_domains_update_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/noctis/v1/vulpra/detect/domains/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


