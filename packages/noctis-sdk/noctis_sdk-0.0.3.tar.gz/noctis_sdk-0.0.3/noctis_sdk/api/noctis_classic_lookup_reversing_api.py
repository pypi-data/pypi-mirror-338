# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from noctis_sdk.models.domain_profile_response import DomainProfileResponse
from noctis_sdk.models.domain_risk_score_evidence_response import DomainRiskScoreEvidenceResponse
from noctis_sdk.models.domain_risk_score_response import DomainRiskScoreResponse
from noctis_sdk.models.whois_history_response import WhoisHistoryResponse
from noctis_sdk.models.whois_lookup_response import WhoisLookupResponse

from noctis_sdk.api_client import ApiClient, RequestSerialized
from noctis_sdk.api_response import ApiResponse
from noctis_sdk.rest import RESTResponseType


class NoctisClassicLookupReversingApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_domain_profile(
        self,
        query: Annotated[StrictStr, Field(description="Domain name to query.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DomainProfileResponse:
        """Domain Profile

        Basic registrant, server, and registration data for a domain name, plus preview data for other products.

        :param query: Domain name to query. (required)
        :type query: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domain_profile_serialize(
            query=query,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DomainProfileResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_domain_profile_with_http_info(
        self,
        query: Annotated[StrictStr, Field(description="Domain name to query.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DomainProfileResponse]:
        """Domain Profile

        Basic registrant, server, and registration data for a domain name, plus preview data for other products.

        :param query: Domain name to query. (required)
        :type query: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domain_profile_serialize(
            query=query,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DomainProfileResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_domain_profile_without_preload_content(
        self,
        query: Annotated[StrictStr, Field(description="Domain name to query.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Domain Profile

        Basic registrant, server, and registration data for a domain name, plus preview data for other products.

        :param query: Domain name to query. (required)
        :type query: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domain_profile_serialize(
            query=query,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DomainProfileResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_domain_profile_serialize(
        self,
        query,
        app_partner,
        app_name,
        app_version,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if query is not None:
            _path_params['query'] = query
        # process the query parameters
        if app_partner is not None:
            
            _query_params.append(('app_partner', app_partner))
            
        if app_name is not None:
            
            _query_params.append(('app_name', app_name))
            
        if app_version is not None:
            
            _query_params.append(('app_version', app_version))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/noctis/v1/{query}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_domain_risk_score(
        self,
        domain: Annotated[StrictStr, Field(description="Domain name to score.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DomainRiskScoreResponse:
        """Domain Risk Score

        Provides Noctis risk scores based on proximity and threat profile algorithms.

        :param domain: Domain name to score. (required)
        :type domain: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domain_risk_score_serialize(
            domain=domain,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DomainRiskScoreResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_domain_risk_score_with_http_info(
        self,
        domain: Annotated[StrictStr, Field(description="Domain name to score.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DomainRiskScoreResponse]:
        """Domain Risk Score

        Provides Noctis risk scores based on proximity and threat profile algorithms.

        :param domain: Domain name to score. (required)
        :type domain: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domain_risk_score_serialize(
            domain=domain,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DomainRiskScoreResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_domain_risk_score_without_preload_content(
        self,
        domain: Annotated[StrictStr, Field(description="Domain name to score.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Domain Risk Score

        Provides Noctis risk scores based on proximity and threat profile algorithms.

        :param domain: Domain name to score. (required)
        :type domain: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domain_risk_score_serialize(
            domain=domain,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DomainRiskScoreResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_domain_risk_score_serialize(
        self,
        domain,
        app_partner,
        app_name,
        app_version,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if domain is not None:
            
            _query_params.append(('domain', domain))
            
        if app_partner is not None:
            
            _query_params.append(('app_partner', app_partner))
            
        if app_name is not None:
            
            _query_params.append(('app_name', app_name))
            
        if app_version is not None:
            
            _query_params.append(('app_version', app_version))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/noctis/v1/risk/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_domain_risk_score_evidence(
        self,
        domain: Annotated[StrictStr, Field(description="Domain name to get evidence for.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DomainRiskScoreEvidenceResponse:
        """Domain Risk Score Evidence

        Provides evidence (reasons) contributing to the Noctis risk score.

        :param domain: Domain name to get evidence for. (required)
        :type domain: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domain_risk_score_evidence_serialize(
            domain=domain,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DomainRiskScoreEvidenceResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_domain_risk_score_evidence_with_http_info(
        self,
        domain: Annotated[StrictStr, Field(description="Domain name to get evidence for.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DomainRiskScoreEvidenceResponse]:
        """Domain Risk Score Evidence

        Provides evidence (reasons) contributing to the Noctis risk score.

        :param domain: Domain name to get evidence for. (required)
        :type domain: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domain_risk_score_evidence_serialize(
            domain=domain,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DomainRiskScoreEvidenceResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_domain_risk_score_evidence_without_preload_content(
        self,
        domain: Annotated[StrictStr, Field(description="Domain name to get evidence for.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Domain Risk Score Evidence

        Provides evidence (reasons) contributing to the Noctis risk score.

        :param domain: Domain name to get evidence for. (required)
        :type domain: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domain_risk_score_evidence_serialize(
            domain=domain,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DomainRiskScoreEvidenceResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_domain_risk_score_evidence_serialize(
        self,
        domain,
        app_partner,
        app_name,
        app_version,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if domain is not None:
            
            _query_params.append(('domain', domain))
            
        if app_partner is not None:
            
            _query_params.append(('app_partner', app_partner))
            
        if app_name is not None:
            
            _query_params.append(('app_name', app_name))
            
        if app_version is not None:
            
            _query_params.append(('app_version', app_version))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/noctis/v1/risk/evidence/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_parsed_whois(
        self,
        query: Annotated[StrictStr, Field(description="Domain name or IP address to query.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Parsed Whois

        Provides parsed Whois records for domain names and IP addresses.

        :param query: Domain name or IP address to query. (required)
        :type query: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_parsed_whois_serialize(
            query=query,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_parsed_whois_with_http_info(
        self,
        query: Annotated[StrictStr, Field(description="Domain name or IP address to query.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Parsed Whois

        Provides parsed Whois records for domain names and IP addresses.

        :param query: Domain name or IP address to query. (required)
        :type query: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_parsed_whois_serialize(
            query=query,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_parsed_whois_without_preload_content(
        self,
        query: Annotated[StrictStr, Field(description="Domain name or IP address to query.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Parsed Whois

        Provides parsed Whois records for domain names and IP addresses.

        :param query: Domain name or IP address to query. (required)
        :type query: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_parsed_whois_serialize(
            query=query,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_parsed_whois_serialize(
        self,
        query,
        app_partner,
        app_name,
        app_version,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if query is not None:
            _path_params['query'] = query
        # process the query parameters
        if app_partner is not None:
            
            _query_params.append(('app_partner', app_partner))
            
        if app_name is not None:
            
            _query_params.append(('app_name', app_name))
            
        if app_version is not None:
            
            _query_params.append(('app_version', app_version))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/noctis/v1/{query}/whois/parsed',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_whois_history(
        self,
        query: Annotated[StrictStr, Field(description="Domain name to query history for.")],
        sort: Annotated[Optional[StrictStr], Field(description="Sort order for records.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Maximum number of history records to return (1-100).")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for pagination (use with limit).")] = None,
        mode: Annotated[Optional[StrictStr], Field(description="Operation mode.")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WhoisHistoryResponse:
        """Whois History

        Retrieve historical Whois records for a given domain name.

        :param query: Domain name to query history for. (required)
        :type query: str
        :param sort: Sort order for records.
        :type sort: str
        :param limit: Maximum number of history records to return (1-100).
        :type limit: int
        :param offset: Offset for pagination (use with limit).
        :type offset: int
        :param mode: Operation mode.
        :type mode: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_whois_history_serialize(
            query=query,
            sort=sort,
            limit=limit,
            offset=offset,
            mode=mode,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WhoisHistoryResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_whois_history_with_http_info(
        self,
        query: Annotated[StrictStr, Field(description="Domain name to query history for.")],
        sort: Annotated[Optional[StrictStr], Field(description="Sort order for records.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Maximum number of history records to return (1-100).")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for pagination (use with limit).")] = None,
        mode: Annotated[Optional[StrictStr], Field(description="Operation mode.")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WhoisHistoryResponse]:
        """Whois History

        Retrieve historical Whois records for a given domain name.

        :param query: Domain name to query history for. (required)
        :type query: str
        :param sort: Sort order for records.
        :type sort: str
        :param limit: Maximum number of history records to return (1-100).
        :type limit: int
        :param offset: Offset for pagination (use with limit).
        :type offset: int
        :param mode: Operation mode.
        :type mode: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_whois_history_serialize(
            query=query,
            sort=sort,
            limit=limit,
            offset=offset,
            mode=mode,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WhoisHistoryResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_whois_history_without_preload_content(
        self,
        query: Annotated[StrictStr, Field(description="Domain name to query history for.")],
        sort: Annotated[Optional[StrictStr], Field(description="Sort order for records.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Maximum number of history records to return (1-100).")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for pagination (use with limit).")] = None,
        mode: Annotated[Optional[StrictStr], Field(description="Operation mode.")] = None,
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Whois History

        Retrieve historical Whois records for a given domain name.

        :param query: Domain name to query history for. (required)
        :type query: str
        :param sort: Sort order for records.
        :type sort: str
        :param limit: Maximum number of history records to return (1-100).
        :type limit: int
        :param offset: Offset for pagination (use with limit).
        :type offset: int
        :param mode: Operation mode.
        :type mode: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_whois_history_serialize(
            query=query,
            sort=sort,
            limit=limit,
            offset=offset,
            mode=mode,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WhoisHistoryResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_whois_history_serialize(
        self,
        query,
        sort,
        limit,
        offset,
        mode,
        app_partner,
        app_name,
        app_version,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if query is not None:
            _path_params['query'] = query
        # process the query parameters
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if mode is not None:
            
            _query_params.append(('mode', mode))
            
        if app_partner is not None:
            
            _query_params.append(('app_partner', app_partner))
            
        if app_name is not None:
            
            _query_params.append(('app_name', app_name))
            
        if app_version is not None:
            
            _query_params.append(('app_version', app_version))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/noctis/v1/{query}/whois/history/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_whois_lookup(
        self,
        query: Annotated[StrictStr, Field(description="Domain name or IP address to query.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WhoisLookupResponse:
        """Whois Lookup

        Raw Whois records for domain names and IP addresses.

        :param query: Domain name or IP address to query. (required)
        :type query: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_whois_lookup_serialize(
            query=query,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WhoisLookupResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_whois_lookup_with_http_info(
        self,
        query: Annotated[StrictStr, Field(description="Domain name or IP address to query.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WhoisLookupResponse]:
        """Whois Lookup

        Raw Whois records for domain names and IP addresses.

        :param query: Domain name or IP address to query. (required)
        :type query: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_whois_lookup_serialize(
            query=query,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WhoisLookupResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_whois_lookup_without_preload_content(
        self,
        query: Annotated[StrictStr, Field(description="Domain name or IP address to query.")],
        app_partner: Annotated[Optional[StrictStr], Field(description="Your Product Name.")] = None,
        app_name: Annotated[Optional[StrictStr], Field(description="Appliance/Module Name.")] = None,
        app_version: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Integration version.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Response format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Whois Lookup

        Raw Whois records for domain names and IP addresses.

        :param query: Domain name or IP address to query. (required)
        :type query: str
        :param app_partner: Your Product Name.
        :type app_partner: str
        :param app_name: Appliance/Module Name.
        :type app_name: str
        :param app_version: Integration version.
        :type app_version: float
        :param format: Response format.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_whois_lookup_serialize(
            query=query,
            app_partner=app_partner,
            app_name=app_name,
            app_version=app_version,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WhoisLookupResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_whois_lookup_serialize(
        self,
        query,
        app_partner,
        app_name,
        app_version,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if query is not None:
            _path_params['query'] = query
        # process the query parameters
        if app_partner is not None:
            
            _query_params.append(('app_partner', app_partner))
            
        if app_name is not None:
            
            _query_params.append(('app_name', app_name))
            
        if app_version is not None:
            
            _query_params.append(('app_version', app_version))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/noctis/v1/{query}/whois/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


