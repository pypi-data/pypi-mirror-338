# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from noctis_sdk.models.contact_dto import ContactDTO
from noctis_sdk.models.domain_risk_dto import DomainRiskDTO
from noctis_sdk.models.generic_value_dto_string import GenericValueDTOString
from noctis_sdk.models.ip_info_with_asn_dto import IpInfoWithAsnDTO
from noctis_sdk.models.mx_info_dto import MxInfoDTO
from noctis_sdk.models.name_server_info_dto import NameServerInfoDTO
from noctis_sdk.models.ssl_info_dto import SslInfoDTO
from noctis_sdk.models.tag_info_dto import TagInfoDTO
from noctis_sdk.models.tracker_info_dto import TrackerInfoDTO
from typing import Optional, Set
from typing_extensions import Self

class VulpraInvestigateResultDTO(BaseModel):
    """
    Detailed data points for a single domain from Vulpra Investigate.
    """ # noqa: E501
    domain: Optional[StrictStr] = Field(default=None, description="The domain name.")
    whois_url: Optional[StrictStr] = Field(default=None, description="URL to view the raw Whois record for this domain.", alias="whoisUrl")
    adsense: Optional[GenericValueDTOString] = Field(default=None, description="AdSense tracking code information.")
    alexa: Optional[StrictStr] = Field(default=None, description="Alexa rank (legacy).")
    active: Optional[StrictBool] = Field(default=None, description="Indicates if the domain is considered active (resolves DNS or registered).")
    google_analytics: Optional[GenericValueDTOString] = Field(default=None, description="Google Analytics (UA) tracking code information.", alias="googleAnalytics")
    ga4: Optional[List[TrackerInfoDTO]] = Field(default=None, description="Google Analytics 4 tracking codes.")
    gtm_codes: Optional[List[TrackerInfoDTO]] = Field(default=None, description="Google Tag Manager codes.", alias="gtmCodes")
    admin_contact: Optional[ContactDTO] = Field(default=None, description="Administrative contact details from Whois.", alias="adminContact")
    billing_contact: Optional[ContactDTO] = Field(default=None, description="Billing contact details from Whois.", alias="billingContact")
    registrant_contact: Optional[ContactDTO] = Field(default=None, description="Registrant contact details from Whois.", alias="registrantContact")
    technical_contact: Optional[ContactDTO] = Field(default=None, description="Technical contact details from Whois.", alias="technicalContact")
    create_date: Optional[GenericValueDTOString] = Field(default=None, description="Domain creation date information.", alias="createDate")
    expiration_date: Optional[GenericValueDTOString] = Field(default=None, description="Domain expiration date information.", alias="expirationDate")
    email_domain: Optional[List[GenericValueDTOString]] = Field(default=None, description="Domains extracted from Whois/SOA email addresses.", alias="emailDomain")
    soa_email: Optional[List[GenericValueDTOString]] = Field(default=None, description="Email addresses found in DNS SOA records.", alias="soaEmail")
    ssl_email: Optional[List[GenericValueDTOString]] = Field(default=None, description="Email addresses found in SSL certificates.", alias="sslEmail")
    additional_whois_email: Optional[List[GenericValueDTOString]] = Field(default=None, description="Other email addresses found in Whois.", alias="additionalWhoisEmail")
    ip: Optional[List[IpInfoWithAsnDTO]] = Field(default=None, description="IP address information associated with the domain.")
    mx: Optional[List[MxInfoDTO]] = Field(default=None, description="Mail Exchanger (MX) record information.")
    name_server: Optional[List[NameServerInfoDTO]] = Field(default=None, description="Name Server (NS) record information.", alias="nameServer")
    domain_risk: Optional[DomainRiskDTO] = Field(default=None, description="Noctis domain risk score details.", alias="domainRisk")
    redirect: Optional[GenericValueDTOString] = Field(default=None, description="HTTP redirect target URL, if observed.")
    redirect_domain: Optional[GenericValueDTOString] = Field(default=None, description="Domain part of the redirect target.", alias="redirectDomain")
    registrant_name: Optional[GenericValueDTOString] = Field(default=None, description="Registrant name information.", alias="registrantName")
    registrant_org: Optional[GenericValueDTOString] = Field(default=None, description="Registrant organization information.", alias="registrantOrg")
    registrar: Optional[GenericValueDTOString] = Field(default=None, description="Registrar information.")
    registrar_status: Optional[List[StrictStr]] = Field(default=None, description="Registrar status codes (e.g., 'clientTransferProhibited').", alias="registrarStatus")
    spf_info: Optional[StrictStr] = Field(default=None, description="SPF record information.", alias="spfInfo")
    ssl_info: Optional[List[SslInfoDTO]] = Field(default=None, description="SSL certificate information.", alias="sslInfo")
    tld: Optional[StrictStr] = Field(default=None, description="Top-Level Domain (TLD).")
    website_response: Optional[StrictInt] = Field(default=None, description="HTTP response code observed when crawling the website.", alias="websiteResponse")
    data_updated_timestamp: Optional[StrictStr] = Field(default=None, description="Timestamp when the data for this domain was last updated.", alias="dataUpdatedTimestamp")
    website_title: Optional[GenericValueDTOString] = Field(default=None, description="Title tag from the website's HTML.", alias="websiteTitle")
    server_type: Optional[GenericValueDTOString] = Field(default=None, description="Server type identified (e.g., 'Apache', 'nginx').", alias="serverType")
    first_seen: Optional[GenericValueDTOString] = Field(default=None, description="Timestamp when this domain was first seen by Noctis.", alias="firstSeen")
    tags: Optional[List[TagInfoDTO]] = Field(default=None, description="Tags applied to this domain within Noctis Vulpra Investigate.")
    __properties: ClassVar[List[str]] = ["domain", "whoisUrl", "adsense", "alexa", "active", "googleAnalytics", "ga4", "gtmCodes", "adminContact", "billingContact", "registrantContact", "technicalContact", "createDate", "expirationDate", "emailDomain", "soaEmail", "sslEmail", "additionalWhoisEmail", "ip", "mx", "nameServer", "domainRisk", "redirect", "redirectDomain", "registrantName", "registrantOrg", "registrar", "registrarStatus", "spfInfo", "sslInfo", "tld", "websiteResponse", "dataUpdatedTimestamp", "websiteTitle", "serverType", "firstSeen", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VulpraInvestigateResultDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of adsense
        if self.adsense:
            _dict['adsense'] = self.adsense.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google_analytics
        if self.google_analytics:
            _dict['googleAnalytics'] = self.google_analytics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ga4 (list)
        _items = []
        if self.ga4:
            for _item_ga4 in self.ga4:
                if _item_ga4:
                    _items.append(_item_ga4.to_dict())
            _dict['ga4'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in gtm_codes (list)
        _items = []
        if self.gtm_codes:
            for _item_gtm_codes in self.gtm_codes:
                if _item_gtm_codes:
                    _items.append(_item_gtm_codes.to_dict())
            _dict['gtmCodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of admin_contact
        if self.admin_contact:
            _dict['adminContact'] = self.admin_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_contact
        if self.billing_contact:
            _dict['billingContact'] = self.billing_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of registrant_contact
        if self.registrant_contact:
            _dict['registrantContact'] = self.registrant_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of technical_contact
        if self.technical_contact:
            _dict['technicalContact'] = self.technical_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_date
        if self.create_date:
            _dict['createDate'] = self.create_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expiration_date
        if self.expiration_date:
            _dict['expirationDate'] = self.expiration_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in email_domain (list)
        _items = []
        if self.email_domain:
            for _item_email_domain in self.email_domain:
                if _item_email_domain:
                    _items.append(_item_email_domain.to_dict())
            _dict['emailDomain'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in soa_email (list)
        _items = []
        if self.soa_email:
            for _item_soa_email in self.soa_email:
                if _item_soa_email:
                    _items.append(_item_soa_email.to_dict())
            _dict['soaEmail'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ssl_email (list)
        _items = []
        if self.ssl_email:
            for _item_ssl_email in self.ssl_email:
                if _item_ssl_email:
                    _items.append(_item_ssl_email.to_dict())
            _dict['sslEmail'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in additional_whois_email (list)
        _items = []
        if self.additional_whois_email:
            for _item_additional_whois_email in self.additional_whois_email:
                if _item_additional_whois_email:
                    _items.append(_item_additional_whois_email.to_dict())
            _dict['additionalWhoisEmail'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ip (list)
        _items = []
        if self.ip:
            for _item_ip in self.ip:
                if _item_ip:
                    _items.append(_item_ip.to_dict())
            _dict['ip'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mx (list)
        _items = []
        if self.mx:
            for _item_mx in self.mx:
                if _item_mx:
                    _items.append(_item_mx.to_dict())
            _dict['mx'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in name_server (list)
        _items = []
        if self.name_server:
            for _item_name_server in self.name_server:
                if _item_name_server:
                    _items.append(_item_name_server.to_dict())
            _dict['nameServer'] = _items
        # override the default output from pydantic by calling `to_dict()` of domain_risk
        if self.domain_risk:
            _dict['domainRisk'] = self.domain_risk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of redirect
        if self.redirect:
            _dict['redirect'] = self.redirect.to_dict()
        # override the default output from pydantic by calling `to_dict()` of redirect_domain
        if self.redirect_domain:
            _dict['redirectDomain'] = self.redirect_domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of registrant_name
        if self.registrant_name:
            _dict['registrantName'] = self.registrant_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of registrant_org
        if self.registrant_org:
            _dict['registrantOrg'] = self.registrant_org.to_dict()
        # override the default output from pydantic by calling `to_dict()` of registrar
        if self.registrar:
            _dict['registrar'] = self.registrar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ssl_info (list)
        _items = []
        if self.ssl_info:
            for _item_ssl_info in self.ssl_info:
                if _item_ssl_info:
                    _items.append(_item_ssl_info.to_dict())
            _dict['sslInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of website_title
        if self.website_title:
            _dict['websiteTitle'] = self.website_title.to_dict()
        # override the default output from pydantic by calling `to_dict()` of server_type
        if self.server_type:
            _dict['serverType'] = self.server_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of first_seen
        if self.first_seen:
            _dict['firstSeen'] = self.first_seen.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VulpraInvestigateResultDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domain": obj.get("domain"),
            "whoisUrl": obj.get("whoisUrl"),
            "adsense": GenericValueDTOString.from_dict(obj["adsense"]) if obj.get("adsense") is not None else None,
            "alexa": obj.get("alexa"),
            "active": obj.get("active"),
            "googleAnalytics": GenericValueDTOString.from_dict(obj["googleAnalytics"]) if obj.get("googleAnalytics") is not None else None,
            "ga4": [TrackerInfoDTO.from_dict(_item) for _item in obj["ga4"]] if obj.get("ga4") is not None else None,
            "gtmCodes": [TrackerInfoDTO.from_dict(_item) for _item in obj["gtmCodes"]] if obj.get("gtmCodes") is not None else None,
            "adminContact": ContactDTO.from_dict(obj["adminContact"]) if obj.get("adminContact") is not None else None,
            "billingContact": ContactDTO.from_dict(obj["billingContact"]) if obj.get("billingContact") is not None else None,
            "registrantContact": ContactDTO.from_dict(obj["registrantContact"]) if obj.get("registrantContact") is not None else None,
            "technicalContact": ContactDTO.from_dict(obj["technicalContact"]) if obj.get("technicalContact") is not None else None,
            "createDate": GenericValueDTOString.from_dict(obj["createDate"]) if obj.get("createDate") is not None else None,
            "expirationDate": GenericValueDTOString.from_dict(obj["expirationDate"]) if obj.get("expirationDate") is not None else None,
            "emailDomain": [GenericValueDTOString.from_dict(_item) for _item in obj["emailDomain"]] if obj.get("emailDomain") is not None else None,
            "soaEmail": [GenericValueDTOString.from_dict(_item) for _item in obj["soaEmail"]] if obj.get("soaEmail") is not None else None,
            "sslEmail": [GenericValueDTOString.from_dict(_item) for _item in obj["sslEmail"]] if obj.get("sslEmail") is not None else None,
            "additionalWhoisEmail": [GenericValueDTOString.from_dict(_item) for _item in obj["additionalWhoisEmail"]] if obj.get("additionalWhoisEmail") is not None else None,
            "ip": [IpInfoWithAsnDTO.from_dict(_item) for _item in obj["ip"]] if obj.get("ip") is not None else None,
            "mx": [MxInfoDTO.from_dict(_item) for _item in obj["mx"]] if obj.get("mx") is not None else None,
            "nameServer": [NameServerInfoDTO.from_dict(_item) for _item in obj["nameServer"]] if obj.get("nameServer") is not None else None,
            "domainRisk": DomainRiskDTO.from_dict(obj["domainRisk"]) if obj.get("domainRisk") is not None else None,
            "redirect": GenericValueDTOString.from_dict(obj["redirect"]) if obj.get("redirect") is not None else None,
            "redirectDomain": GenericValueDTOString.from_dict(obj["redirectDomain"]) if obj.get("redirectDomain") is not None else None,
            "registrantName": GenericValueDTOString.from_dict(obj["registrantName"]) if obj.get("registrantName") is not None else None,
            "registrantOrg": GenericValueDTOString.from_dict(obj["registrantOrg"]) if obj.get("registrantOrg") is not None else None,
            "registrar": GenericValueDTOString.from_dict(obj["registrar"]) if obj.get("registrar") is not None else None,
            "registrarStatus": obj.get("registrarStatus"),
            "spfInfo": obj.get("spfInfo"),
            "sslInfo": [SslInfoDTO.from_dict(_item) for _item in obj["sslInfo"]] if obj.get("sslInfo") is not None else None,
            "tld": obj.get("tld"),
            "websiteResponse": obj.get("websiteResponse"),
            "dataUpdatedTimestamp": obj.get("dataUpdatedTimestamp"),
            "websiteTitle": GenericValueDTOString.from_dict(obj["websiteTitle"]) if obj.get("websiteTitle") is not None else None,
            "serverType": GenericValueDTOString.from_dict(obj["serverType"]) if obj.get("serverType") is not None else None,
            "firstSeen": GenericValueDTOString.from_dict(obj["firstSeen"]) if obj.get("firstSeen") is not None else None,
            "tags": [TagInfoDTO.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None
        })
        return _obj


