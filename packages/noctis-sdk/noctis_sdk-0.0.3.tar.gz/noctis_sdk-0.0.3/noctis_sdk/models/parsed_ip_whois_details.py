# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from noctis_sdk.models.ip_contact import IpContact
from noctis_sdk.models.ip_network import IpNetwork
from typing import Optional, Set
from typing_extensions import Self

class ParsedIpWhoisDetails(BaseModel):
    """
    ParsedIpWhoisDetails
    """ # noqa: E501
    networks: Optional[List[IpNetwork]] = Field(default=None, description="Network blocks described in the record.")
    contacts: Optional[List[IpContact]] = Field(default=None, description="Contact entities (persons, roles, groups) referenced in the record.")
    routes: Optional[List[Dict[str, Any]]] = Field(default=None, description="Routing information.")
    referral_servers: Optional[List[StrictStr]] = Field(default=None, description="Referral Whois servers.", alias="referralServers")
    other_properties: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Any other unclassified properties found.", alias="otherProperties")
    __properties: ClassVar[List[str]] = ["networks", "contacts", "routes", "referralServers", "otherProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParsedIpWhoisDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in networks (list)
        _items = []
        if self.networks:
            for _item_networks in self.networks:
                if _item_networks:
                    _items.append(_item_networks.to_dict())
            _dict['networks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in contacts (list)
        _items = []
        if self.contacts:
            for _item_contacts in self.contacts:
                if _item_contacts:
                    _items.append(_item_contacts.to_dict())
            _dict['contacts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParsedIpWhoisDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "networks": [IpNetwork.from_dict(_item) for _item in obj["networks"]] if obj.get("networks") is not None else None,
            "contacts": [IpContact.from_dict(_item) for _item in obj["contacts"]] if obj.get("contacts") is not None else None,
            "routes": obj.get("routes"),
            "referralServers": obj.get("referralServers"),
            "otherProperties": obj.get("otherProperties")
        })
        return _obj


