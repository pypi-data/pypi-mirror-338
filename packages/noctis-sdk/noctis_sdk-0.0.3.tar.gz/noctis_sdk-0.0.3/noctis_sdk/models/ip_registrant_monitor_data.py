# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from noctis_sdk.models.ip_range_change import IpRangeChange
from typing import Optional, Set
from typing_extensions import Self

class IpRegistrantMonitorData(BaseModel):
    """
    Results of an IP Registrant monitoring query.
    """ # noqa: E501
    record_count: Optional[StrictInt] = Field(default=None, description="Total number of records found (only if include_total_count=true).", alias="recordCount")
    modified: Optional[List[Dict[str, Any]]] = Field(default=None, description="List of IP ranges that were modified (structure not fully defined in spec).")
    page: Optional[StrictInt] = Field(default=None, description="Current page number.")
    added: Optional[List[IpRangeChange]] = Field(default=None, description="List of IP ranges added for the monitored registrant(s).")
    removed: Optional[List[IpRangeChange]] = Field(default=None, description="List of IP ranges removed for the monitored registrant(s).")
    has_more_pages: Optional[StrictStr] = Field(default=None, description="Indicates if more pages are available ('true'/'false' string in spec).", alias="hasMorePages")
    var_date: Optional[StrictStr] = Field(default=None, description="Date the monitor report was generated for.", alias="date")
    query: Optional[StrictStr] = Field(default=None, description="The original query term(s).")
    __properties: ClassVar[List[str]] = ["recordCount", "modified", "page", "added", "removed", "hasMorePages", "date", "query"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IpRegistrantMonitorData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in added (list)
        _items = []
        if self.added:
            for _item_added in self.added:
                if _item_added:
                    _items.append(_item_added.to_dict())
            _dict['added'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in removed (list)
        _items = []
        if self.removed:
            for _item_removed in self.removed:
                if _item_removed:
                    _items.append(_item_removed.to_dict())
            _dict['removed'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IpRegistrantMonitorData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "recordCount": obj.get("recordCount"),
            "modified": obj.get("modified"),
            "page": obj.get("page"),
            "added": [IpRangeChange.from_dict(_item) for _item in obj["added"]] if obj.get("added") is not None else None,
            "removed": [IpRangeChange.from_dict(_item) for _item in obj["removed"]] if obj.get("removed") is not None else None,
            "hasMorePages": obj.get("hasMorePages"),
            "date": obj.get("date"),
            "query": obj.get("query")
        })
        return _obj


