# coding: utf-8

"""
    NoctisNet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from noctis_sdk.models.generic_value_dto_string import GenericValueDTOString
from typing import Optional, Set
from typing_extensions import Self

class MxInfoDTO(BaseModel):
    """
    Mail Exchanger (MX) record details.
    """ # noqa: E501
    host: Optional[GenericValueDTOString] = Field(default=None, description="Hostname of the mail server.")
    domain: Optional[GenericValueDTOString] = Field(default=None, description="Domain part of the mail server hostname.")
    ip: Optional[List[GenericValueDTOString]] = Field(default=None, description="IP addresses associated with the mail server hostname.")
    priority: Optional[StrictInt] = Field(default=None, description="Priority value of the MX record.")
    __properties: ClassVar[List[str]] = ["host", "domain", "ip", "priority"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MxInfoDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of host
        if self.host:
            _dict['host'] = self.host.to_dict()
        # override the default output from pydantic by calling `to_dict()` of domain
        if self.domain:
            _dict['domain'] = self.domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ip (list)
        _items = []
        if self.ip:
            for _item_ip in self.ip:
                if _item_ip:
                    _items.append(_item_ip.to_dict())
            _dict['ip'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MxInfoDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "host": GenericValueDTOString.from_dict(obj["host"]) if obj.get("host") is not None else None,
            "domain": GenericValueDTOString.from_dict(obj["domain"]) if obj.get("domain") is not None else None,
            "ip": [GenericValueDTOString.from_dict(_item) for _item in obj["ip"]] if obj.get("ip") is not None else None,
            "priority": obj.get("priority")
        })
        return _obj


