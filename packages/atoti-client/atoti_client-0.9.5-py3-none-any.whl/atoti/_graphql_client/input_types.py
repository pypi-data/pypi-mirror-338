# Generated by ariadne-codegen
# Source: python/atoti-client/graphql/schema.gql

from typing import List, Optional

from pydantic import Field

from .._constant import Constant
from .base_model import BaseModel
from .enums import (
    CubeRestrictionIsInConditionOperator,
    CubeRestrictionRelationalConditionOperator,
    DataType,
    FileSystemFileType,
    RelationshipOptionality,
)


class ColumnDataTypeInput(BaseModel):
    column_name: str = Field(serialization_alias="columnName")
    data_type: DataType = Field(serialization_alias="dataType")


class ColumnDefaultValueInput(BaseModel):
    column_name: str = Field(serialization_alias="columnName")
    value: Optional[Constant] = None


class ColumnIdentifierInput(BaseModel):
    column_name: str = Field(serialization_alias="columnName")
    table_identifier: "TableIdentifierInput" = Field(
        serialization_alias="tableIdentifier"
    )


class CreateCubeAutoCreate(BaseModel):
    hierarchies: bool = False
    measures: bool = False


class CreateCubeInput(BaseModel):
    application_name: Optional[str] = Field(
        serialization_alias="applicationName", default=None
    )
    auto_create: "CreateCubeAutoCreate" = Field(
        serialization_alias="autoCreate",
        default_factory=lambda: globals()["CreateCubeAutoCreate"].model_validate(
            {"hierarchies": False, "measures": False}
        ),
    )
    catalog_names: List[str] = Field(serialization_alias="catalogNames")
    cube_identifier: Optional["CubeIdentifierInput"] = Field(
        serialization_alias="cubeIdentifier", default=None
    )
    data_model_transaction: Optional["DataModelTransactionInput"] = Field(
        serialization_alias="dataModelTransaction", default=None
    )
    fact_table_identifier: "TableIdentifierInput" = Field(
        serialization_alias="factTableIdentifier"
    )


class CreateJoinInput(BaseModel):
    data_model_transaction: Optional["DataModelTransactionInput"] = Field(
        serialization_alias="dataModelTransaction", default=None
    )
    mapping_items: Optional[List["CreateJoinMappingItem"]] = Field(
        serialization_alias="mappingItems", default=None
    )
    name: str
    source_table_identifier: "TableIdentifierInput" = Field(
        serialization_alias="sourceTableIdentifier"
    )
    target_optionality: RelationshipOptionality = Field(
        serialization_alias="targetOptionality",
        default=RelationshipOptionality.OPTIONAL,
    )
    target_table_identifier: "TableIdentifierInput" = Field(
        serialization_alias="targetTableIdentifier"
    )


class CreateJoinMappingItem(BaseModel):
    source_column_name: str = Field(serialization_alias="sourceColumnName")
    target_column_name: str = Field(serialization_alias="targetColumnName")


class CreateTableInput(BaseModel):
    data_load: Optional["DataLoadInput"] = Field(
        serialization_alias="dataLoad", default=None
    )
    data_model_transaction: Optional["DataModelTransactionInput"] = Field(
        serialization_alias="dataModelTransaction", default=None
    )
    data_types: List["ColumnDataTypeInput"] = Field(
        serialization_alias="dataTypes", default_factory=lambda: []
    )
    default_values: List["ColumnDefaultValueInput"] = Field(
        serialization_alias="defaultValues", default_factory=lambda: []
    )
    is_parameter_table: bool = Field(
        serialization_alias="isParameterTable", default=False
    )
    partitioning: Optional[str] = None
    primary_index: List[str] = Field(
        serialization_alias="primaryIndex", default_factory=lambda: []
    )
    table_identifier: "TableIdentifierInput" = Field(
        serialization_alias="tableIdentifier"
    )


class CubeIdentifierInput(BaseModel):
    cube_name: str = Field(serialization_alias="cubeName")


class CubeRestrictionIsInConditionInput(BaseModel):
    elements: List[Constant]
    operator: CubeRestrictionIsInConditionOperator
    subject: "LevelIdentifierInput"


class CubeRestrictionLeafConditionInput(BaseModel):
    is_in: Optional["CubeRestrictionIsInConditionInput"] = Field(
        serialization_alias="isIn", default=None
    )
    relational: Optional["CubeRestrictionRelationalConditionInput"] = None


class CubeRestrictionRelationalConditionInput(BaseModel):
    operator: CubeRestrictionRelationalConditionOperator
    subject: "LevelIdentifierInput"
    target: Constant


class DataLoadInput(BaseModel):
    data_source: Optional["IdentifiedDataSourceLoadInput"] = Field(
        serialization_alias="dataSource", default=None
    )


class DataModelTransactionInput(BaseModel):
    id: str


class DataSourceIdentifierInput(BaseModel):
    data_source_name: str = Field(serialization_alias="dataSourceName")


class DataSourceLoadInput(BaseModel):
    file_system: Optional["FileSystemDataSourceLoadInput"] = Field(
        serialization_alias="fileSystem", default=None
    )
    jdbc: Optional["JdbcDataSourceLoadInput"] = None


class DeleteCubeRestrictionsInput(BaseModel):
    cube_identifier: "CubeIdentifierInput" = Field(serialization_alias="cubeIdentifier")
    role_names: List[str] = Field(serialization_alias="roleNames")


class DeleteJoinInput(BaseModel):
    data_model_transaction: Optional["DataModelTransactionInput"] = Field(
        serialization_alias="dataModelTransaction", default=None
    )
    join_identifier: "JoinIdentifierInput" = Field(serialization_alias="joinIdentifier")


class DeleteTableInput(BaseModel):
    data_model_transaction: Optional["DataModelTransactionInput"] = Field(
        serialization_alias="dataModelTransaction", default=None
    )
    table_identifier: "TableIdentifierInput" = Field(
        serialization_alias="tableIdentifier"
    )


class FileSystemDataSourceLoadInput(BaseModel):
    glob: str
    type: FileSystemFileType


class HierarchyIdentifierInput(BaseModel):
    dimension_name: str = Field(serialization_alias="dimensionName")
    hierarchy_name: str = Field(serialization_alias="hierarchyName")


class IdentifiedDataSourceLoadInput(BaseModel):
    data_source_identifier: "DataSourceIdentifierInput" = Field(
        serialization_alias="dataSourceIdentifier"
    )
    data_source_load: "DataSourceLoadInput" = Field(
        serialization_alias="dataSourceLoad"
    )


class JdbcDataSourceLoadInput(BaseModel):
    parameters: List["ParameterInput"] = Field(default_factory=lambda: [])
    query: str


class JoinIdentifierInput(BaseModel):
    join_name: str = Field(serialization_alias="joinName")
    source_table_identifier: "TableIdentifierInput" = Field(
        serialization_alias="sourceTableIdentifier"
    )


class LevelIdentifierInput(BaseModel):
    dimension_name: str = Field(serialization_alias="dimensionName")
    hierarchy_name: str = Field(serialization_alias="hierarchyName")
    level_name: str = Field(serialization_alias="levelName")


class MeasureIdentifierInput(BaseModel):
    measure_name: str = Field(serialization_alias="measureName")


class ParameterInput(BaseModel):
    name: Optional[str] = None
    value: Constant


class SetAggregateCacheCapacity(BaseModel):
    capacity: int


class SetAggregateCacheMeasures(BaseModel):
    measure_identifiers: Optional[List["MeasureIdentifierInput"]] = Field(
        serialization_alias="measureIdentifiers", default=None
    )


class SetColumnDefaultValue(BaseModel):
    value: Optional[Constant] = None


class SetHierarchyAreMembersIndexedByName(BaseModel):
    value: bool


class SetHierarchyIsVisible(BaseModel):
    value: bool


class TableIdentifierInput(BaseModel):
    table_name: str = Field(serialization_alias="tableName")


class UpdateAggregateCacheAction(BaseModel):
    set_capacity: Optional["SetAggregateCacheCapacity"] = Field(
        serialization_alias="setCapacity", default=None
    )
    set_measures: Optional["SetAggregateCacheMeasures"] = Field(
        serialization_alias="setMeasures", default=None
    )


class UpdateAggregateCacheInput(BaseModel):
    actions: List["UpdateAggregateCacheAction"]
    cube_identifier: "CubeIdentifierInput" = Field(serialization_alias="cubeIdentifier")
    data_model_transaction: Optional["DataModelTransactionInput"] = Field(
        serialization_alias="dataModelTransaction", default=None
    )


class UpdateColumnAction(BaseModel):
    set_default_value: Optional["SetColumnDefaultValue"] = Field(
        serialization_alias="setDefaultValue", default=None
    )


class UpdateColumnInput(BaseModel):
    actions: List["UpdateColumnAction"]
    column_identifier: "ColumnIdentifierInput" = Field(
        serialization_alias="columnIdentifier"
    )
    data_model_transaction_id: Optional[str] = Field(
        serialization_alias="dataModelTransactionId", default=None
    )


class UpdateCubeRestrictionsInput(BaseModel):
    cube_identifier: "CubeIdentifierInput" = Field(serialization_alias="cubeIdentifier")
    mapping_items: List["UpdateCubeRestrictionsMappingItem"] = Field(
        serialization_alias="mappingItems"
    )


class UpdateCubeRestrictionsMappingItem(BaseModel):
    condition: List[List["CubeRestrictionLeafConditionInput"]]
    role_name: str = Field(serialization_alias="roleName")


class UpdateDatabaseInput(BaseModel):
    data_model_transaction: Optional["DataModelTransactionInput"] = Field(
        serialization_alias="dataModelTransaction", default=None
    )
    owners: Optional[List[str]] = None
    readers: Optional[List[str]] = None


class UpdateHierarchyAction(BaseModel):
    set_are_members_indexed_by_name: Optional["SetHierarchyAreMembersIndexedByName"] = (
        Field(serialization_alias="setAreMembersIndexedByName", default=None)
    )
    set_is_visible: Optional["SetHierarchyIsVisible"] = Field(
        serialization_alias="setIsVisible", default=None
    )


class UpdateHierarchyInput(BaseModel):
    actions: List["UpdateHierarchyAction"]
    cube_identifier: "CubeIdentifierInput" = Field(serialization_alias="cubeIdentifier")
    data_model_transaction: Optional["DataModelTransactionInput"] = Field(
        serialization_alias="dataModelTransaction", default=None
    )
    hierarchy_identifier: "HierarchyIdentifierInput" = Field(
        serialization_alias="hierarchyIdentifier"
    )


class UpdateUpdatableCellsInput(BaseModel):
    cube_identifier: "CubeIdentifierInput" = Field(serialization_alias="cubeIdentifier")
    hierarchies: List["HierarchyIdentifierInput"]
    levels: List["LevelIdentifierInput"]
    roles: List[str]


ColumnIdentifierInput.model_rebuild()
CreateCubeInput.model_rebuild()
CreateJoinInput.model_rebuild()
CreateTableInput.model_rebuild()
CubeRestrictionIsInConditionInput.model_rebuild()
CubeRestrictionLeafConditionInput.model_rebuild()
CubeRestrictionRelationalConditionInput.model_rebuild()
DataLoadInput.model_rebuild()
DataSourceLoadInput.model_rebuild()
DeleteCubeRestrictionsInput.model_rebuild()
DeleteJoinInput.model_rebuild()
DeleteTableInput.model_rebuild()
IdentifiedDataSourceLoadInput.model_rebuild()
JdbcDataSourceLoadInput.model_rebuild()
JoinIdentifierInput.model_rebuild()
SetAggregateCacheMeasures.model_rebuild()
UpdateAggregateCacheAction.model_rebuild()
UpdateAggregateCacheInput.model_rebuild()
UpdateColumnAction.model_rebuild()
UpdateColumnInput.model_rebuild()
UpdateCubeRestrictionsInput.model_rebuild()
UpdateCubeRestrictionsMappingItem.model_rebuild()
UpdateDatabaseInput.model_rebuild()
UpdateHierarchyAction.model_rebuild()
UpdateHierarchyInput.model_rebuild()
UpdateUpdatableCellsInput.model_rebuild()
