# Generated by ariadne-codegen

from .base_operation import GraphQLField


class AggregateCacheGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "AggregateCacheGraphQLField":
        self._alias = alias
        return self


class ClusterGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ClusterGraphQLField":
        self._alias = alias
        return self


class ClusterNodeGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ClusterNodeGraphQLField":
        self._alias = alias
        return self


class ColumnGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ColumnGraphQLField":
        self._alias = alias
        return self


class CreateCubeOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateCubeOutputGraphQLField":
        self._alias = alias
        return self


class CreateJoinOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateJoinOutputGraphQLField":
        self._alias = alias
        return self


class CreateTableOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateTableOutputGraphQLField":
        self._alias = alias
        return self


class CubeGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CubeGraphQLField":
        self._alias = alias
        return self


class CubeRestrictionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CubeRestrictionGraphQLField":
        self._alias = alias
        return self


class CubeRestrictionIsInConditionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CubeRestrictionIsInConditionGraphQLField":
        self._alias = alias
        return self


class CubeRestrictionLeafConditionUnion(GraphQLField):
    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "CubeRestrictionLeafConditionUnion":
        self._inline_fragments[type_name] = subfields
        return self

    def alias(self, alias: str) -> "CubeRestrictionLeafConditionUnion":
        self._alias = alias
        return self


class CubeRestrictionRelationalConditionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CubeRestrictionRelationalConditionGraphQLField":
        self._alias = alias
        return self


class DataLoadUnion(GraphQLField):
    def on(self, type_name: str, *subfields: GraphQLField) -> "DataLoadUnion":
        self._inline_fragments[type_name] = subfields
        return self

    def alias(self, alias: str) -> "DataLoadUnion":
        self._alias = alias
        return self


class DataModelGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DataModelGraphQLField":
        self._alias = alias
        return self


class DataSourceGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DataSourceGraphQLField":
        self._alias = alias
        return self


class DataSourceDataModelUnion(GraphQLField):
    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "DataSourceDataModelUnion":
        self._inline_fragments[type_name] = subfields
        return self

    def alias(self, alias: str) -> "DataSourceDataModelUnion":
        self._alias = alias
        return self


class DataSourceIdentifierGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DataSourceIdentifierGraphQLField":
        self._alias = alias
        return self


class DataSourceLoadUnion(GraphQLField):
    def on(self, type_name: str, *subfields: GraphQLField) -> "DataSourceLoadUnion":
        self._inline_fragments[type_name] = subfields
        return self

    def alias(self, alias: str) -> "DataSourceLoadUnion":
        self._alias = alias
        return self


class DatabaseGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DatabaseGraphQLField":
        self._alias = alias
        return self


class DeleteCubeRestrictionsOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DeleteCubeRestrictionsOutputGraphQLField":
        self._alias = alias
        return self


class DeleteJoinOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DeleteJoinOutputGraphQLField":
        self._alias = alias
        return self


class DeleteTableOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DeleteTableOutputGraphQLField":
        self._alias = alias
        return self


class DimensionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DimensionGraphQLField":
        self._alias = alias
        return self


class FileSystemDataSourceDataModelGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "FileSystemDataSourceDataModelGraphQLField":
        self._alias = alias
        return self


class FileSystemDataSourceLoadGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "FileSystemDataSourceLoadGraphQLField":
        self._alias = alias
        return self


class FileSystemFileGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "FileSystemFileGraphQLField":
        self._alias = alias
        return self


class HierarchyGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "HierarchyGraphQLField":
        self._alias = alias
        return self


class IdentifiedDataSourceLoadGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "IdentifiedDataSourceLoadGraphQLField":
        self._alias = alias
        return self


class JdbcDataSourceLoadGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "JdbcDataSourceLoadGraphQLField":
        self._alias = alias
        return self


class JoinGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "JoinGraphQLField":
        self._alias = alias
        return self


class JoinMappingItemGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "JoinMappingItemGraphQLField":
        self._alias = alias
        return self


class LevelGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "LevelGraphQLField":
        self._alias = alias
        return self


class MeasureGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "MeasureGraphQLField":
        self._alias = alias
        return self


class NodeGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "NodeGraphQLField":
        self._alias = alias
        return self


class ParameterGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ParameterGraphQLField":
        self._alias = alias
        return self


class TableGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "TableGraphQLField":
        self._alias = alias
        return self


class UpdatableCellsGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "UpdatableCellsGraphQLField":
        self._alias = alias
        return self


class UpdateAggregateCacheOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "UpdateAggregateCacheOutputGraphQLField":
        self._alias = alias
        return self


class UpdateColumnOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "UpdateColumnOutputGraphQLField":
        self._alias = alias
        return self


class UpdateCubeRestrictionsOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "UpdateCubeRestrictionsOutputGraphQLField":
        self._alias = alias
        return self


class UpdateDatabaseOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "UpdateDatabaseOutputGraphQLField":
        self._alias = alias
        return self


class UpdateHierarchyOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "UpdateHierarchyOutputGraphQLField":
        self._alias = alias
        return self


class UpdateUpdatableCellsOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "UpdateUpdatableCellsOutputGraphQLField":
        self._alias = alias
        return self
