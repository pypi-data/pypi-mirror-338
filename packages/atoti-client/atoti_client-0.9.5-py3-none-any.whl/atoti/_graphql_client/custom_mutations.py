# Generated by ariadne-codegen

from typing import Any, Dict, Optional

from .custom_fields import (
    CreateCubeOutputFields,
    CreateJoinOutputFields,
    CreateTableOutputFields,
    DeleteCubeRestrictionsOutputFields,
    DeleteJoinOutputFields,
    DeleteTableOutputFields,
    UpdateAggregateCacheOutputFields,
    UpdateColumnOutputFields,
    UpdateCubeRestrictionsOutputFields,
    UpdateDatabaseOutputFields,
    UpdateHierarchyOutputFields,
    UpdateUpdatableCellsOutputFields,
)
from .input_types import (
    CreateCubeInput,
    CreateJoinInput,
    CreateTableInput,
    DeleteCubeRestrictionsInput,
    DeleteJoinInput,
    DeleteTableInput,
    UpdateAggregateCacheInput,
    UpdateColumnInput,
    UpdateCubeRestrictionsInput,
    UpdateDatabaseInput,
    UpdateHierarchyInput,
    UpdateUpdatableCellsInput,
)


class Mutation:
    @classmethod
    def create_cube(cls, input: CreateCubeInput) -> CreateCubeOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateCubeInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateCubeOutputFields(
            field_name="createCube", arguments=cleared_arguments
        )

    @classmethod
    def create_join(cls, input: CreateJoinInput) -> CreateJoinOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateJoinInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateJoinOutputFields(
            field_name="createJoin", arguments=cleared_arguments
        )

    @classmethod
    def create_table(cls, input: CreateTableInput) -> CreateTableOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateTableInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateTableOutputFields(
            field_name="createTable", arguments=cleared_arguments
        )

    @classmethod
    def delete_cube_restrictions(
        cls, input: DeleteCubeRestrictionsInput
    ) -> DeleteCubeRestrictionsOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteCubeRestrictionsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteCubeRestrictionsOutputFields(
            field_name="deleteCubeRestrictions", arguments=cleared_arguments
        )

    @classmethod
    def delete_join(cls, input: DeleteJoinInput) -> DeleteJoinOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteJoinInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteJoinOutputFields(
            field_name="deleteJoin", arguments=cleared_arguments
        )

    @classmethod
    def delete_table(cls, input: DeleteTableInput) -> DeleteTableOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteTableInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteTableOutputFields(
            field_name="deleteTable", arguments=cleared_arguments
        )

    @classmethod
    def update_aggregate_cache(
        cls, input: UpdateAggregateCacheInput
    ) -> UpdateAggregateCacheOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateAggregateCacheInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateAggregateCacheOutputFields(
            field_name="updateAggregateCache", arguments=cleared_arguments
        )

    @classmethod
    def update_column(cls, input: UpdateColumnInput) -> UpdateColumnOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateColumnInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateColumnOutputFields(
            field_name="updateColumn", arguments=cleared_arguments
        )

    @classmethod
    def update_cube_restrictions(
        cls, input: UpdateCubeRestrictionsInput
    ) -> UpdateCubeRestrictionsOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateCubeRestrictionsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateCubeRestrictionsOutputFields(
            field_name="updateCubeRestrictions", arguments=cleared_arguments
        )

    @classmethod
    def update_database(cls, input: UpdateDatabaseInput) -> UpdateDatabaseOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateDatabaseInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateDatabaseOutputFields(
            field_name="updateDatabase", arguments=cleared_arguments
        )

    @classmethod
    def update_hierarchy(
        cls, input: UpdateHierarchyInput
    ) -> UpdateHierarchyOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateHierarchyInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateHierarchyOutputFields(
            field_name="updateHierarchy", arguments=cleared_arguments
        )

    @classmethod
    def update_updatable_cells(
        cls, input: UpdateUpdatableCellsInput
    ) -> UpdateUpdatableCellsOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateUpdatableCellsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateUpdatableCellsOutputFields(
            field_name="updateUpdatableCells", arguments=cleared_arguments
        )
