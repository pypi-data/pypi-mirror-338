# coding: utf-8

"""
    Midgard Public API

    The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with MAYAChain protocol, users should query MAYANode directly.  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: devs@thorchain.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class THORNameDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affiliate_bps': 'str',
        'entries': 'list[THORNameEntry]',
        'expire': 'str',
        'owner': 'str',
        'preferred_asset': 'str',
        'registration_block': 'str',
        'sub_affiliates': 'list[THORNameSubAffiliate]'
    }

    attribute_map = {
        'affiliate_bps': 'affiliate_bps',
        'entries': 'entries',
        'expire': 'expire',
        'owner': 'owner',
        'preferred_asset': 'preferred_asset',
        'registration_block': 'registration_block',
        'sub_affiliates': 'sub_affiliates'
    }

    def __init__(self, affiliate_bps=None, entries=None, expire=None, owner=None, preferred_asset=None, registration_block=None, sub_affiliates=None):  # noqa: E501
        """THORNameDetails - a model defined in Swagger"""  # noqa: E501
        self._affiliate_bps = None
        self._entries = None
        self._expire = None
        self._owner = None
        self._preferred_asset = None
        self._registration_block = None
        self._sub_affiliates = None
        self.discriminator = None
        self.affiliate_bps = affiliate_bps
        self.entries = entries
        self.expire = expire
        self.owner = owner
        self.preferred_asset = preferred_asset
        self.registration_block = registration_block
        self.sub_affiliates = sub_affiliates

    @property
    def affiliate_bps(self):
        """Gets the affiliate_bps of this THORNameDetails.  # noqa: E501

        Int64, affiliate fee in basis points  # noqa: E501

        :return: The affiliate_bps of this THORNameDetails.  # noqa: E501
        :rtype: str
        """
        return self._affiliate_bps

    @affiliate_bps.setter
    def affiliate_bps(self, affiliate_bps):
        """Sets the affiliate_bps of this THORNameDetails.

        Int64, affiliate fee in basis points  # noqa: E501

        :param affiliate_bps: The affiliate_bps of this THORNameDetails.  # noqa: E501
        :type: str
        """
        if affiliate_bps is None:
            raise ValueError("Invalid value for `affiliate_bps`, must not be `None`")  # noqa: E501

        self._affiliate_bps = affiliate_bps

    @property
    def entries(self):
        """Gets the entries of this THORNameDetails.  # noqa: E501

        List details of all chains and their addresses for a given THORName  # noqa: E501

        :return: The entries of this THORNameDetails.  # noqa: E501
        :rtype: list[THORNameEntry]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this THORNameDetails.

        List details of all chains and their addresses for a given THORName  # noqa: E501

        :param entries: The entries of this THORNameDetails.  # noqa: E501
        :type: list[THORNameEntry]
        """
        if entries is None:
            raise ValueError("Invalid value for `entries`, must not be `None`")  # noqa: E501

        self._entries = entries

    @property
    def expire(self):
        """Gets the expire of this THORNameDetails.  # noqa: E501

        Int64, THORChain block height in which THORName expires  # noqa: E501

        :return: The expire of this THORNameDetails.  # noqa: E501
        :rtype: str
        """
        return self._expire

    @expire.setter
    def expire(self, expire):
        """Sets the expire of this THORNameDetails.

        Int64, THORChain block height in which THORName expires  # noqa: E501

        :param expire: The expire of this THORNameDetails.  # noqa: E501
        :type: str
        """
        if expire is None:
            raise ValueError("Invalid value for `expire`, must not be `None`")  # noqa: E501

        self._expire = expire

    @property
    def owner(self):
        """Gets the owner of this THORNameDetails.  # noqa: E501

        owner's THOR address  # noqa: E501

        :return: The owner of this THORNameDetails.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this THORNameDetails.

        owner's THOR address  # noqa: E501

        :param owner: The owner of this THORNameDetails.  # noqa: E501
        :type: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def preferred_asset(self):
        """Gets the preferred_asset of this THORNameDetails.  # noqa: E501

        Preferred asset for the THORName owner to receive fees in  # noqa: E501

        :return: The preferred_asset of this THORNameDetails.  # noqa: E501
        :rtype: str
        """
        return self._preferred_asset

    @preferred_asset.setter
    def preferred_asset(self, preferred_asset):
        """Sets the preferred_asset of this THORNameDetails.

        Preferred asset for the THORName owner to receive fees in  # noqa: E501

        :param preferred_asset: The preferred_asset of this THORNameDetails.  # noqa: E501
        :type: str
        """
        if preferred_asset is None:
            raise ValueError("Invalid value for `preferred_asset`, must not be `None`")  # noqa: E501

        self._preferred_asset = preferred_asset

    @property
    def registration_block(self):
        """Gets the registration_block of this THORNameDetails.  # noqa: E501

        Int64, THORChain block height in which THORName is registered  # noqa: E501

        :return: The registration_block of this THORNameDetails.  # noqa: E501
        :rtype: str
        """
        return self._registration_block

    @registration_block.setter
    def registration_block(self, registration_block):
        """Sets the registration_block of this THORNameDetails.

        Int64, THORChain block height in which THORName is registered  # noqa: E501

        :param registration_block: The registration_block of this THORNameDetails.  # noqa: E501
        :type: str
        """
        if registration_block is None:
            raise ValueError("Invalid value for `registration_block`, must not be `None`")  # noqa: E501

        self._registration_block = registration_block

    @property
    def sub_affiliates(self):
        """Gets the sub_affiliates of this THORNameDetails.  # noqa: E501

        List details of all sub affiliates for a given THORName  # noqa: E501

        :return: The sub_affiliates of this THORNameDetails.  # noqa: E501
        :rtype: list[THORNameSubAffiliate]
        """
        return self._sub_affiliates

    @sub_affiliates.setter
    def sub_affiliates(self, sub_affiliates):
        """Sets the sub_affiliates of this THORNameDetails.

        List details of all sub affiliates for a given THORName  # noqa: E501

        :param sub_affiliates: The sub_affiliates of this THORNameDetails.  # noqa: E501
        :type: list[THORNameSubAffiliate]
        """
        if sub_affiliates is None:
            raise ValueError("Invalid value for `sub_affiliates`, must not be `None`")  # noqa: E501

        self._sub_affiliates = sub_affiliates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(THORNameDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, THORNameDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
