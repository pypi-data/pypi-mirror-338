# coding: utf-8

"""
    Midgard Public API

    The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with MAYAChain protocol, users should query MAYANode directly.  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: devs@thorchain.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CACAOPoolProvider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cacao_added': 'str',
        'cacao_address': 'str',
        'cacao_deposit': 'str',
        'cacao_withdrawn': 'str',
        'date_first_added': 'str',
        'date_last_added': 'str',
        'units': 'str'
    }

    attribute_map = {
        'cacao_added': 'cacaoAdded',
        'cacao_address': 'cacaoAddress',
        'cacao_deposit': 'cacaoDeposit',
        'cacao_withdrawn': 'cacaoWithdrawn',
        'date_first_added': 'dateFirstAdded',
        'date_last_added': 'dateLastAdded',
        'units': 'units'
    }

    def __init__(self, cacao_added=None, cacao_address=None, cacao_deposit=None, cacao_withdrawn=None, date_first_added=None, date_last_added=None, units=None):  # noqa: E501
        """CACAOPoolProvider - a model defined in Swagger"""  # noqa: E501
        self._cacao_added = None
        self._cacao_address = None
        self._cacao_deposit = None
        self._cacao_withdrawn = None
        self._date_first_added = None
        self._date_last_added = None
        self._units = None
        self.discriminator = None
        self.cacao_added = cacao_added
        self.cacao_address = cacao_address
        self.cacao_deposit = cacao_deposit
        self.cacao_withdrawn = cacao_withdrawn
        self.date_first_added = date_first_added
        self.date_last_added = date_last_added
        self.units = units

    @property
    def cacao_added(self):
        """Gets the cacao_added of this CACAOPoolProvider.  # noqa: E501

        Int64(e8), total asset added in the CACAOPool by member  # noqa: E501

        :return: The cacao_added of this CACAOPoolProvider.  # noqa: E501
        :rtype: str
        """
        return self._cacao_added

    @cacao_added.setter
    def cacao_added(self, cacao_added):
        """Sets the cacao_added of this CACAOPoolProvider.

        Int64(e8), total asset added in the CACAOPool by member  # noqa: E501

        :param cacao_added: The cacao_added of this CACAOPoolProvider.  # noqa: E501
        :type: str
        """
        if cacao_added is None:
            raise ValueError("Invalid value for `cacao_added`, must not be `None`")  # noqa: E501

        self._cacao_added = cacao_added

    @property
    def cacao_address(self):
        """Gets the cacao_address of this CACAOPoolProvider.  # noqa: E501

        address used by the member  # noqa: E501

        :return: The cacao_address of this CACAOPoolProvider.  # noqa: E501
        :rtype: str
        """
        return self._cacao_address

    @cacao_address.setter
    def cacao_address(self, cacao_address):
        """Sets the cacao_address of this CACAOPoolProvider.

        address used by the member  # noqa: E501

        :param cacao_address: The cacao_address of this CACAOPoolProvider.  # noqa: E501
        :type: str
        """
        if cacao_address is None:
            raise ValueError("Invalid value for `cacao_address`, must not be `None`")  # noqa: E501

        self._cacao_address = cacao_address

    @property
    def cacao_deposit(self):
        """Gets the cacao_deposit of this CACAOPoolProvider.  # noqa: E501

        Int64(e8), total asset that is currently deposited by the member  # noqa: E501

        :return: The cacao_deposit of this CACAOPoolProvider.  # noqa: E501
        :rtype: str
        """
        return self._cacao_deposit

    @cacao_deposit.setter
    def cacao_deposit(self, cacao_deposit):
        """Sets the cacao_deposit of this CACAOPoolProvider.

        Int64(e8), total asset that is currently deposited by the member  # noqa: E501

        :param cacao_deposit: The cacao_deposit of this CACAOPoolProvider.  # noqa: E501
        :type: str
        """
        if cacao_deposit is None:
            raise ValueError("Invalid value for `cacao_deposit`, must not be `None`")  # noqa: E501

        self._cacao_deposit = cacao_deposit

    @property
    def cacao_withdrawn(self):
        """Gets the cacao_withdrawn of this CACAOPoolProvider.  # noqa: E501

        Int64(e8), total asset withdrawn from the CACAOPool by the member  # noqa: E501

        :return: The cacao_withdrawn of this CACAOPoolProvider.  # noqa: E501
        :rtype: str
        """
        return self._cacao_withdrawn

    @cacao_withdrawn.setter
    def cacao_withdrawn(self, cacao_withdrawn):
        """Sets the cacao_withdrawn of this CACAOPoolProvider.

        Int64(e8), total asset withdrawn from the CACAOPool by the member  # noqa: E501

        :param cacao_withdrawn: The cacao_withdrawn of this CACAOPoolProvider.  # noqa: E501
        :type: str
        """
        if cacao_withdrawn is None:
            raise ValueError("Invalid value for `cacao_withdrawn`, must not be `None`")  # noqa: E501

        self._cacao_withdrawn = cacao_withdrawn

    @property
    def date_first_added(self):
        """Gets the date_first_added of this CACAOPoolProvider.  # noqa: E501

        Int64, Unix timestamp for the first time member deposited into the CACAOPool  # noqa: E501

        :return: The date_first_added of this CACAOPoolProvider.  # noqa: E501
        :rtype: str
        """
        return self._date_first_added

    @date_first_added.setter
    def date_first_added(self, date_first_added):
        """Sets the date_first_added of this CACAOPoolProvider.

        Int64, Unix timestamp for the first time member deposited into the CACAOPool  # noqa: E501

        :param date_first_added: The date_first_added of this CACAOPoolProvider.  # noqa: E501
        :type: str
        """
        if date_first_added is None:
            raise ValueError("Invalid value for `date_first_added`, must not be `None`")  # noqa: E501

        self._date_first_added = date_first_added

    @property
    def date_last_added(self):
        """Gets the date_last_added of this CACAOPoolProvider.  # noqa: E501

        Int64, Unix timestamp for the last time member deposited into the CACAOPool  # noqa: E501

        :return: The date_last_added of this CACAOPoolProvider.  # noqa: E501
        :rtype: str
        """
        return self._date_last_added

    @date_last_added.setter
    def date_last_added(self, date_last_added):
        """Sets the date_last_added of this CACAOPoolProvider.

        Int64, Unix timestamp for the last time member deposited into the CACAOPool  # noqa: E501

        :param date_last_added: The date_last_added of this CACAOPoolProvider.  # noqa: E501
        :type: str
        """
        if date_last_added is None:
            raise ValueError("Invalid value for `date_last_added`, must not be `None`")  # noqa: E501

        self._date_last_added = date_last_added

    @property
    def units(self):
        """Gets the units of this CACAOPoolProvider.  # noqa: E501

        Int64, units that belong the the member  # noqa: E501

        :return: The units of this CACAOPoolProvider.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this CACAOPoolProvider.

        Int64, units that belong the the member  # noqa: E501

        :param units: The units of this CACAOPoolProvider.  # noqa: E501
        :type: str
        """
        if units is None:
            raise ValueError("Invalid value for `units`, must not be `None`")  # noqa: E501

        self._units = units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CACAOPoolProvider, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CACAOPoolProvider):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
