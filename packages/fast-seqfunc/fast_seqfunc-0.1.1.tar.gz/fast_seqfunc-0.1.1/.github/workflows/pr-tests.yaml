name: Run tests on pull requests

on:
  pull_request:
    paths:
      - 'fast_seqfunc/**/*.py'
      - 'tests/**/*.py'
      - 'pyproject.toml'
      - '.github/workflows/*.yaml'

jobs:
  run-tests:
    runs-on: ubuntu-latest
    name: Tests (${{ matrix.test-type }})
    timeout-minutes: ${{ matrix.test-type == 'slow' && 45 || 15 }}

    strategy:
      matrix:
        test-type: ['not-slow', 'slow']
      fail-fast: false # Allow other tests to continue if one fails

    # https://github.com/marketplace/actions/setup-miniconda#use-a-default-shell
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: prefix-dev/setup-pixi@v0.8.1
        with:
          cache: true
          environments: tests

      - name: Run tests
        id: run-tests
        run: |
          # Determine the pytest marker and coverage file based on the test type
          if [[ "${{ matrix.test-type }}" == "slow" ]]; then
            MARKER="slow"
            COVERAGE_FILE="coverage-slow.xml"
          else
            MARKER="not slow"
            COVERAGE_FILE="coverage-not-slow.xml"
          fi

          echo "Running tests with marker: -m \"$MARKER\""

          # Run tests and capture the output for analysis
          pixi run -e tests -- pytest -m "$MARKER" --cov --cov-report=xml:$COVERAGE_FILE --cov-report=term-missing -v | tee pytest_output.txt
          # Store the exit code of pytest
          PYTEST_EXIT_CODE=${PIPESTATUS[0]}

          # Extract test counts from the actual output format
          # Look for lines like "8 passed, 70 deselected, 18 warnings in 272.63s (0:04:32)"
          if grep -q "passed" pytest_output.txt; then
            PASSED=$(grep -o "[0-9]* passed" pytest_output.txt | tail -n1 | grep -o "[0-9]*")
          else
            PASSED=0
          fi

          if grep -q "failed" pytest_output.txt; then
            FAILED=$(grep -o "[0-9]* failed" pytest_output.txt | tail -n1 | grep -o "[0-9]*")
          else
            FAILED=0
          fi

          if grep -q "skipped" pytest_output.txt; then
            SKIPPED=$(grep -o "[0-9]* skipped" pytest_output.txt | tail -n1 | grep -o "[0-9]*")
          else
            SKIPPED=0
          fi

          if grep -q "deselected" pytest_output.txt; then
            DESELECTED=$(grep -o "[0-9]* deselected" pytest_output.txt | tail -n1 | grep -o "[0-9]*")
          else
            DESELECTED=0
          fi

          # Print counts for debugging
          echo "Found counts - Passed: $PASSED, Failed: $FAILED, Skipped: $SKIPPED, Deselected: $DESELECTED"

          # Set outputs for summary
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "skipped=$SKIPPED" >> $GITHUB_OUTPUT
          echo "deselected=$DESELECTED" >> $GITHUB_OUTPUT

          # Exit with the pytest exit code to properly indicate test failure
          exit $PYTEST_EXIT_CODE

      - name: Check for test failures
        if: steps.run-tests.outputs.failed != '0'
        run: |
          echo "::error::${{ steps.run-tests.outputs.failed }} tests failed!"
          exit 1

      - name: Create test summary
        if: always()
        run: |
          echo "## ${{ matrix.test-type }} Test Results 🧪" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Passed: ${{ steps.run-tests.outputs.passed || 0 }}" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Failed: ${{ steps.run-tests.outputs.failed || 0 }}" >> $GITHUB_STEP_SUMMARY
          echo "- ⏩ Skipped: ${{ steps.run-tests.outputs.skipped || 0 }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Deselected: ${{ steps.run-tests.outputs.deselected || 0 }}" >> $GITHUB_STEP_SUMMARY

      # https://github.com/codecov/codecov-action
      - name: Upload code coverage
        if: success() || failure() # Run this step even if tests fail
        uses: codecov/codecov-action@v2
        with:
          # flag the upload with the test type to separate them in codecov
          flags: ${{ matrix.test-type }}
          verbose: true # optional (default = false)


  # This helps us check that pyproject.toml's `project` table's `dependencies`
  # are defined completely.
  bare-install:
    runs-on: ubuntu-latest
    name: Bare installation
    timeout-minutes: 5

    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Run CLI as a smoke test.
        run: "fast-seqfunc --help"
