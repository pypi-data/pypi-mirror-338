interactions:
- request:
    body: '{"contents":[{"role":"user","parts":[{"text":"\n            Analyze the
      following coding problem or question and provide reasoning assistance.\n            \n            If
      a codebase path is provided, use the code_reader tool to examine relevant files.\n            \n            In
      your response:\n            1. Break down the problem step by step\n            2.
      Identify potential solutions or approaches\n            3. Explain your reasoning
      thoroughly\n            4. Include relevant code examples where helpful\n            \n            Problem/Question:
      How should I implement error handling in my calculator app?\n            "}]}],"system_instruction":{"role":"user","parts":[{"text":"\n        You
      are an expert software architect and technical lead with deep expertise in software
      design and development.\n        \n        You can provide several types of
      assistance:\n        1. Create Product Requirements Documents (PRDs) or High-Level
      Design Documents\n        2. Analyze code and architecture\n        3. Provide
      deep reasoning assistance and solutions for complex coding problems\n        \n        Use
      the tools strategically to gather all the information you need:\n        - code_reader:
      Read source code files from the codebase to understand the architecture\n        -
      web_search: Find relevant technical information online\n        - llm: Use external
      LLM assistance when needed\n        \n        Format your responses in markdown.
      Be concise but thorough.\n        "}]},"tools":{"function_declarations":[{"name":"code_reader","description":"<summary>Read
      and analyze source code files from the specified codebase path, combining them\ninto
      a unified code context for the agent to analyze.</summary>\n<returns>\n<description>A
      string containing the code context or error message</description>\n</returns>","parameters":{"description":"Input
      schema for the code reader tool.","properties":{"paths":{"description":"List
      of file or directory paths to read, relative to the base codebase path","items":{"type":"string"},"type":"array"},"filter_extensions":{"items":{"type":"string"},"type":"array","nullable":true},"max_files":{"type":"integer","nullable":true}},"required":["paths"],"type":"object"}},{"name":"web_search","description":"<summary>Search
      the web for information on a given query using Exa API.</summary>\n<returns>\n<description>A
      string containing the search results or error message</description>\n</returns>","parameters":{"description":"Input
      schema for the web search tool.","properties":{"query":{"description":"The search
      query to execute","type":"string"},"num_results":{"type":"integer","nullable":true}},"required":["query"],"type":"object"}},{"name":"llm","description":"<summary>Execute
      a prompt against a configured LLM using litellm.</summary>\n<returns>\n<description>The
      text response from the LLM or an error message</description>\n</returns>","parameters":{"description":"Input
      schema for the LLM tool.","properties":{"prompt":{"description":"The prompt
      to send to the LLM","type":"string"},"model":{"type":"string","nullable":true},"temperature":{"type":"number","nullable":true}},"required":["prompt"],"type":"object"}}]}}'
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3184'
      content-type:
      - application/json
      host:
      - generativelanguage.googleapis.com
      user-agent:
      - pydantic-ai/0.0.48
    method: POST
    uri: https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-exp-03-25:generateContent
  response:
    body:
      string: !!binary |
        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
        AAA=
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Tue, 01 Apr 2025 09:00:26 GMT
      Server:
      - scaffolding on HTTPServer2
      Server-Timing:
      - gfet4t7; dur=28642
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
    status:
      code: 200
      message: OK
version: 1
