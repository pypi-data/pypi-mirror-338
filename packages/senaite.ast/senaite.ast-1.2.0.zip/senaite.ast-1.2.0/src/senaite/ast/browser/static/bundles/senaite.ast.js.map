{"version":3,"file":"senaite.ast.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;;;;;ACAA,MAAM,+BAA4B;;;;;;;;;ACAlC;AAAA;;;;;AAKM,wBAAN;AAEE,sCAAa;AAAA;;;;;;;AAoBb,2DAnBF,IAmBE;;;;;;;AASA,+CA5BF,IA4BE;;;;;AAsBA,iDAlDF,IAkDE;;;;;AAiBA,6CAnEF,IAmEE;;;;;AAmBA,6CAtFF,IAsFE;;;;;AAMA,2DA5FF,IA4FE;;;;;AAMA,qDAlGF,IAkGE;;;;;AAUA;AA5GE,8BAAsB,+BAAtB;AACA,gCAAyB,yBAAzB;AACA,6BAFJ,kCAEI,CAHW;;AAMX,SAAc,KAAd,WAAc,EAAd;AAAA;;;AAEA,eAPJ,MAOI,EARW;;AAWX;AAEA,WAAO,IAAP;AAbW;;AAFf;AAAA;AAAA,WAsBE,8BAAoB;AAClB;aACA,8CAAsB,KAAtB,sBAA6C,KAA7C;AAFkB;AAtBtB;AAAA;AAAA,WA+BE,sBAAc,KAAd,EAAc;AAChB;AAAI,WAAK,CAAL;AACA;AACA,WAAK,KAAK,CAFd,aAEI,CAHY;;AAMZ,iBAAW,yBAAX;AACA,kBAAY,QAAQ,CAAC,KAArB;;AACA;AAAA;AAPJ,OADgB;;;aAWZ,mCACM;AACV,oBADU;;AAEJ,kBAAU,QAAQ,CAAR,cAAuB,KAAvB,kBAAV;AACA;AACA,gBAAQ,mBAAR;eACA,OAAO,CAAP;AANF;AAXY;AA/BhB;AAAA;AAAA,WAqDE,uBAAe,SAAf,EAAe;AACjB;AAAI;AACA,iBAAW,oCAAX;AACA,gBACE;AAAA,aAAK,yBAAL;AACA,cACE;AAAA,qBAAW;AAAX;AAFF,OADF;AAKA,qCACM;AACJ,eAAO,QAAQ,CAAR,kBAA2B,CAA3B,EAA2B,CAA3B,CAAP;AAFF;aAIA,QAAQ,CAAR;AAZa;AArDjB;AAAA;AAAA,WAsEE,uBAAa;AAAA,UAAC,OAAD;AACf;AAAI,iBAAJ,aAAI,EADW;;;AAIX,eAAO,CAAC,IAAR,GAAgB,MAAhB;;;;AACA,eAAO,CAAC,OAAR,GAAmB,IAAnB;;;;AACA,eAAO,CAAC,IAAR,GAAgB,EAAhB;;;;AACA,eAAO,CAAC,cAAR,GAA0B,+DAA1B;;;AAEA;AAEA;;AACA,aAAO;eACL;AADK,OAAP;;AAEA,aAAO,kDAAP;AAdW;AAtEf;AAAA;AAAA,WAyFE,uBAAa;AACX,aAAO,iCAAP;AADW;AAzFf;AAAA;AAAA,WA+FE,8BAAoB;AAClB,aAAO,QAAQ,CAAR,cAAuB,KAAvB,mBAAP;AADkB;AA/FtB;AAAA;AAAA,WAqGE,2BAAiB;AACnB;AAAI,iBAAW,MAAM,CAAC,QAAlB;AACA,iBAAW,QAAQ,CAAC,QAApB;AACA,aAAO,QAAQ,CAAC,IAAhB;AACA,iBAAW,QAAQ,CAAC,QAApB;AACA,uBAAO,QAAP,eAAO,IAAP,SAAO,QAAP;AALe;AArGnB;AAAA;AAAA,WA+GE,eAAO,OAAP,EAAO;aACL,OAAO,CAAP;AADK;AA/GT;;AAAA;AAAA,GAAM;;AAkHN,4DAAe,wBAAf;;ACvHA;AAEAC,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8C,YAAM;AAClDC,EAAAA,OAAO,CAACC,KAAR,CAAc,+BAAd,EADkD,CAGlD;;AACAC,EAAAA,MAAM,CAACC,gBAAP,GAA0B,IAAIN,qBAAJ,EAA1B;AAED,CAND,E;;;;;ACFA","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///external \"jQuery\"","webpack:///./components/astpanelassign.coffee","webpack:///./senaite.ast.js","webpack:///./scss/senaite.ast.scss?baa4"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = jQuery;","import $ from \"jquery\"\n\n###\nController for the assignment of an AST panel to a Sample\n###\nclass ASTPanelAssignController\n\n  constructor: ->\n    @ast_panel_selector = \"select[id=ast_panel_selector]\"\n    @ast_panel_add_button =  \"button[id=astpanel_add]\"\n    @ast_panel_listing = \"div[data-form_id='ast_analyses']\"\n\n    # Do not load this controller unless required\n    return unless @is_required()\n\n    @debug \"load\"\n\n    # Bind the event handler to the elements\n    @bind_event_handler()\n\n    return @\n\n  ###\n  Binds callbacks on elements\n  Attaches all the events to the body and refine the selector to delegate the\n  event: https://learn.jquery.com/events/event-delegation/\n  ###\n  bind_event_handler: =>\n    @debug \"bind_event_handler\"\n    $(\"body\").on \"click\", @ast_panel_add_button, @on_add_click\n\n  ###\n  Event triggered when the button \"add\" next to ast panel selector is clicked\n  System automatically adds the AST analyses to the sample based on the\n  configuration of the selected panel\n  ###\n  on_add_click: (event) =>\n    event.preventDefault()\n    @debug \"on_add_click\"\n    el = event.currentTarget\n\n    # Get the selected panel\n    selector = @get_panel_selector()\n    panel_uid = selector.value\n    return unless panel_uid\n\n    # Call the assignment endpoint\n    @add_ast_panel panel_uid\n    .done (data) ->\n      # Update the analyses listing\n      listing = document.querySelector @ast_panel_listing\n      @debug listing\n      event = new Event \"reload\"\n      listing.dispatchEvent event\n\n  ###\n  Adds the panel to current context\n  ###\n  add_ast_panel: (panel_uid) =>\n    @debug \"add_ast_panel:panel_uid:#{ panel_uid }\"\n    deferred = $.Deferred()\n    options =\n      url: @get_current_url()+\"/add_ast_panel\"\n      data:\n        panel_uid: panel_uid\n\n    @ajax_submit options\n    .done (data) ->\n      return deferred.resolveWith this, [[]]\n\n    deferred.promise()\n\n  ###\n  Ajax Submit with automatic event triggering and some sane defaults\n  ###\n  ajax_submit: (options={}) =>\n    @debug \"ajax_submit\"\n\n    # some sane option defaults\n    options.type ?= \"POST\"\n    options.context ?= this\n    options.data ?= {}\n    options._authenticator ?= $(\"input[name='_authenticator']\").val()\n\n    @debug \">>> ajax_submit::options=\", options\n\n    $(this).trigger \"ajax:submit:start\"\n    done = ->\n      $(this).trigger \"ajax:submit:end\"\n    return $.ajax(options).done done\n\n  ###\n  Returns whether this controller needs to be loaded or not\n  ###\n  is_required: =>\n    return @get_panel_selector()?\n\n  ###\n  Returns the panel selector element\n  ###\n  get_panel_selector: =>\n    return document.querySelector @ast_panel_selector\n\n  ###\n  Returns the current url\n  ###\n  get_current_url: =>\n    location = window.location\n    protocol = location.protocol\n    host = location.host\n    pathname = location.pathname\n    return \"#{protocol}//#{host}#{pathname}\"\n\n  ###\n  Prints a debug message in console with this component name prefixed\n  ###\n  debug: (message) =>\n    console.debug \"[senaite.ast]\", \"ASTPanelAssignController::#{ message }\"\n\nexport default ASTPanelAssignController\n","import ASTPanelAssignController from \"./components/astpanelassign.coffee\"\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  console.debug(\"*** SENAITE AST JS LOADED ***\");\n\n  // Initialize controllers\n  window.ast_panel_assign = new ASTPanelAssignController();\n\n});\n","// extracted by mini-css-extract-plugin\nexport {};"],"names":["ASTPanelAssignController","document","addEventListener","console","debug","window","ast_panel_assign"],"sourceRoot":""}