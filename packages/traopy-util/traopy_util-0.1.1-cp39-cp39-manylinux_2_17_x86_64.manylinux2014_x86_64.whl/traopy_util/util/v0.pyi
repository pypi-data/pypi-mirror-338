# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing
from enum import Enum, auto

class ExecStats:
    time_ms: builtins.int
    memory_kib: builtins.int
    exit_code: builtins.int

class ExecutionResult:
    status: JudgeStatus
    time: builtins.float
    memory: builtins.float
    score: builtins.int
    def __new__(cls,status:JudgeStatus, time:builtins.float, memory:builtins.float, score:builtins.int): ...

class Language:
    compile: builtins.str
    run: builtins.str

class Library:
    ...

class JudgeStatus(Enum):
    AC = auto()
    WA = auto()
    TLE = auto()
    MLE = auto()
    OLE = auto()
    RE = auto()
    CE = auto()
    WE = auto()

def build_output_envvar() -> builtins.str:
    ...

def build_source_envvar() -> builtins.str:
    ...

def build_tempdir_envvar() -> builtins.str:
    ...

def dejsonify_output(json:builtins.str) -> typing.Optional[ExecutionResult]:
    ...

def exec_job_outcome_path_envvar() -> builtins.str:
    ...

async def exec_with_stats(cmd:builtins.str, envs:typing.Mapping[builtins.str, builtins.str], time_limit_ms:builtins.int) -> typing.Optional[ExecStats]:
    r"""
    Execute a command with environment variables and a time limit
    """
    ...

def get_language_info(language_tag:builtins.str) -> Language:
    ...

def jsonify_displayable_output(status:JudgeStatus, time_ms:builtins.float, memory_kib:builtins.float, score:builtins.int, continue_next:builtins.bool, message:typing.Optional[builtins.str]) -> builtins.str:
    ...

def jsonify_hidden_output(continue_next:builtins.bool) -> builtins.str:
    ...

def merge_judge_status(statuses:typing.Sequence[JudgeStatus]) -> JudgeStatus:
    ...

