import datetime
import hashlib
import os
import subprocess
import time

from .kawa_log_manager import get_kawa_logger
from .. import min_kywy_version


class KawaPexBuilder:
    PEX_BUILT_TIMEOUT = 10 * 60
    record_of_pex_being_built = {}

    def __init__(self, pex_executable_path: str, reqs_file_path: str, pex_path: str):
        self.pex_executable_path = pex_executable_path
        self.reqs_file_path = reqs_file_path
        self.pex_path = pex_path

    @classmethod
    def record_pex_build_start(cls, key: str):
        cls.record_of_pex_being_built[key] = datetime.datetime.now()

    @classmethod
    def record_pex_build_finish(cls, key: str):
        cls.record_of_pex_being_built.pop(key)

    @classmethod
    def wait_for_pex_build_to_finish_or_timeout(cls, key: str):
        start_time = cls.record_of_pex_being_built.get(key)
        if not start_time:
            return False

        return (datetime.datetime.now() - start_time).seconds < cls.PEX_BUILT_TIMEOUT

    @staticmethod
    def sha256sum(filename):
        h = hashlib.sha256()
        b = bytearray(128 * 1024)
        mv = memoryview(b)
        with open(filename, 'rb', buffering=0) as f:
            while n := f.readinto(mv):
                h.update(mv[:n])
        return h.hexdigest()

    def build_pex_if_necessary(self, job_id) -> str:
        get_kawa_logger().info(f'Start pex generation for jobId: {job_id}')
        if not os.path.exists(self.reqs_file_path):
            key = f'0000_{min_kywy_version}'
            reqs_file = []
        else:
            reqs_file = ['-r', self.reqs_file_path]
            key = f'{self.sha256sum(self.reqs_file_path)}_{min_kywy_version}'

        current_pex_path = f'{self.pex_path}/{key}'
        pex_file_path = f'{current_pex_path}/main.pex'

        if not os.path.exists(current_pex_path):
            os.makedirs(current_pex_path)

        if os.path.exists(pex_file_path):
            get_kawa_logger().info(f'Pex file was already generated for this set of requirements for jobId: {job_id}')
            return pex_file_path

        while KawaPexBuilder.wait_for_pex_build_to_finish_or_timeout(key):
            get_kawa_logger().info(f'A pex built is currently running for the key: {key} for jobId: {job_id}')
            time.sleep(10)

        if os.path.exists(pex_file_path):
            get_kawa_logger().info(f'Pex file was correctly generated by another process for this set of requirements for jobId: {job_id}')
            return pex_file_path
        else:
            get_kawa_logger().info(f'The pex build that was running timed out, trying to generate a new one for jobId: {job_id}')

        error = ''
        try:
            get_kawa_logger().info('Building pex start')
            KawaPexBuilder.record_pex_build_start(key)

            kywy_dep = f'kywy>={min_kywy_version}'
            reqs_file.append(kywy_dep)

            pip_version = os.getenv('KW_PEX_PIP_VERSION', 'latest')
            use_pip_config = os.getenv('KW_PEX_USE_PIP_CONFIG', False)

            pex = [self.pex_executable_path, *reqs_file, '--pip-version', pip_version, '-o', pex_file_path]

            if use_pip_config:
                get_kawa_logger().info('KW_PEX_USE_PIP_CONFIG is set, will use pip configuration when building pex')
                pex.append('--use-pip-config')

            get_kawa_logger().info(f'Pex command line is: {" ".join(map(str, pex))}')

            subprocess.run(pex,
                           timeout=KawaPexBuilder.PEX_BUILT_TIMEOUT,
                           check=True,
                           capture_output=True,
                           env={**os.environ, 'PEX_VERBOSE': '3'})

            get_kawa_logger().info(f'Building pex is done for jobId: {job_id}')
        except FileNotFoundError as exc:
            error = f'Building pex failed because the executable could not be found.\n{exc}'
        except subprocess.CalledProcessError as exc:
            error = f'Building pex failed with error: \n {exc.stderr.decode("unicode_escape")}'
        except subprocess.TimeoutExpired as exc:
            error = 'Building pex timed out'
        finally:
            KawaPexBuilder.record_pex_build_finish(key)
            if error:
                get_kawa_logger().error(error)
                raise Exception(error)
        return pex_file_path
