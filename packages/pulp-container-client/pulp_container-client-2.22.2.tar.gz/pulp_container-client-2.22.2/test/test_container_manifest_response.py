# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import pulpcore.client.pulp_container
from pulpcore.client.pulp_container.models.container_manifest_response import ContainerManifestResponse  # noqa: E501
from pulpcore.client.pulp_container.rest import ApiException

class TestContainerManifestResponse(unittest.TestCase):
    """ContainerManifestResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ContainerManifestResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = pulpcore.client.pulp_container.models.container_manifest_response.ContainerManifestResponse()  # noqa: E501
        if include_optional :
            return ContainerManifestResponse(
                pulp_href = '0', 
                prn = '0', 
                pulp_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                pulp_last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                digest = '0', 
                schema_version = 56, 
                media_type = '0', 
                listed_manifests = [
                    '0'
                    ], 
                config_blob = '0', 
                blobs = [
                    '0'
                    ], 
                annotations = pulpcore.client.pulp_container.models.annotations.annotations(), 
                labels = pulpcore.client.pulp_container.models.labels.labels(), 
                is_bootable = True, 
                is_flatpak = True, 
                type = '0', 
                architecture = '0', 
                os = '0', 
                compressed_image_size = 56
            )
        else :
            return ContainerManifestResponse(
                digest = '0',
                schema_version = 56,
                media_type = '0',
                listed_manifests = [
                    '0'
                    ],
                blobs = [
                    '0'
                    ],
        )

    def testContainerManifestResponse(self):
        """Test ContainerManifestResponse"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
