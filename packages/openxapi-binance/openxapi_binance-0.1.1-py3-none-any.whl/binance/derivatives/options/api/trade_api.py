# coding: utf-8

"""
    Binance Options API

    OpenAPI specification for Binance exchange - Options API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from binance.derivatives.options.models.options_create_batch_orders_v1_req_orders_item import OptionsCreateBatchOrdersV1ReqOrdersItem
from binance.derivatives.options.models.options_create_batch_orders_v1_resp_inner import OptionsCreateBatchOrdersV1RespInner
from binance.derivatives.options.models.options_create_order_v1_resp import OptionsCreateOrderV1Resp
from binance.derivatives.options.models.options_delete_all_open_orders_by_underlying_v1_resp import OptionsDeleteAllOpenOrdersByUnderlyingV1Resp
from binance.derivatives.options.models.options_delete_all_open_orders_v1_resp import OptionsDeleteAllOpenOrdersV1Resp
from binance.derivatives.options.models.options_delete_batch_orders_v1_resp_inner import OptionsDeleteBatchOrdersV1RespInner
from binance.derivatives.options.models.options_delete_order_v1_resp import OptionsDeleteOrderV1Resp
from binance.derivatives.options.models.options_get_exercise_record_v1_resp_item import OptionsGetExerciseRecordV1RespItem
from binance.derivatives.options.models.options_get_history_orders_v1_resp_item import OptionsGetHistoryOrdersV1RespItem
from binance.derivatives.options.models.options_get_open_orders_v1_resp_item import OptionsGetOpenOrdersV1RespItem
from binance.derivatives.options.models.options_get_order_v1_resp import OptionsGetOrderV1Resp
from binance.derivatives.options.models.options_get_position_v1_resp_item import OptionsGetPositionV1RespItem
from binance.derivatives.options.models.options_get_user_trades_v1_resp_item import OptionsGetUserTradesV1RespItem

from binance.derivatives.options.api_client import ApiClient, RequestSerialized
from binance.derivatives.options.api_response import ApiResponse
from binance.derivatives.options.rest import RESTResponseType


class TradeApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def options_create_batch_orders_v1(
        self,
        orders: List[OptionsCreateBatchOrdersV1ReqOrdersItem],
        timestamp: StrictInt,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OptionsCreateBatchOrdersV1RespInner]:
        """Place Multiple Orders(TRADE)

        Send multiple option orders.

        :param orders: (required)
        :type orders: List[OptionsCreateBatchOrdersV1ReqOrdersItem]
        :param timestamp: (required)
        :type timestamp: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_create_batch_orders_v1_serialize(
            orders=orders,
            timestamp=timestamp,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsCreateBatchOrdersV1RespInner]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def options_create_batch_orders_v1_with_http_info(
        self,
        orders: List[OptionsCreateBatchOrdersV1ReqOrdersItem],
        timestamp: StrictInt,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OptionsCreateBatchOrdersV1RespInner]]:
        """Place Multiple Orders(TRADE)

        Send multiple option orders.

        :param orders: (required)
        :type orders: List[OptionsCreateBatchOrdersV1ReqOrdersItem]
        :param timestamp: (required)
        :type timestamp: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_create_batch_orders_v1_serialize(
            orders=orders,
            timestamp=timestamp,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsCreateBatchOrdersV1RespInner]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def options_create_batch_orders_v1_without_preload_content(
        self,
        orders: List[OptionsCreateBatchOrdersV1ReqOrdersItem],
        timestamp: StrictInt,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Place Multiple Orders(TRADE)

        Send multiple option orders.

        :param orders: (required)
        :type orders: List[OptionsCreateBatchOrdersV1ReqOrdersItem]
        :param timestamp: (required)
        :type timestamp: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_create_batch_orders_v1_serialize(
            orders=orders,
            timestamp=timestamp,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsCreateBatchOrdersV1RespInner]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _options_create_batch_orders_v1_serialize(
        self,
        orders,
        timestamp,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'orders': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if orders is not None:
            _form_params.append(('orders', orders))
        if recv_window is not None:
            _form_params.append(('recvWindow', recv_window))
        if timestamp is not None:
            _form_params.append(('timestamp', timestamp))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/eapi/v1/batchOrders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def options_create_order_v1(
        self,
        quantity: StrictStr,
        side: StrictStr,
        symbol: StrictStr,
        timestamp: StrictInt,
        type: StrictStr,
        client_order_id: Optional[StrictStr] = None,
        is_mmp: Optional[StrictBool] = None,
        new_order_resp_type: Optional[StrictStr] = None,
        post_only: Optional[StrictBool] = None,
        price: Optional[StrictStr] = None,
        recv_window: Optional[StrictInt] = None,
        reduce_only: Optional[StrictBool] = None,
        time_in_force: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OptionsCreateOrderV1Resp:
        """New Order (TRADE)

        Send a new order.

        :param quantity: (required)
        :type quantity: str
        :param side: (required)
        :type side: str
        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param type: (required)
        :type type: str
        :param client_order_id:
        :type client_order_id: str
        :param is_mmp:
        :type is_mmp: bool
        :param new_order_resp_type:
        :type new_order_resp_type: str
        :param post_only:
        :type post_only: bool
        :param price:
        :type price: str
        :param recv_window:
        :type recv_window: int
        :param reduce_only:
        :type reduce_only: bool
        :param time_in_force:
        :type time_in_force: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_create_order_v1_serialize(
            quantity=quantity,
            side=side,
            symbol=symbol,
            timestamp=timestamp,
            type=type,
            client_order_id=client_order_id,
            is_mmp=is_mmp,
            new_order_resp_type=new_order_resp_type,
            post_only=post_only,
            price=price,
            recv_window=recv_window,
            reduce_only=reduce_only,
            time_in_force=time_in_force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OptionsCreateOrderV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def options_create_order_v1_with_http_info(
        self,
        quantity: StrictStr,
        side: StrictStr,
        symbol: StrictStr,
        timestamp: StrictInt,
        type: StrictStr,
        client_order_id: Optional[StrictStr] = None,
        is_mmp: Optional[StrictBool] = None,
        new_order_resp_type: Optional[StrictStr] = None,
        post_only: Optional[StrictBool] = None,
        price: Optional[StrictStr] = None,
        recv_window: Optional[StrictInt] = None,
        reduce_only: Optional[StrictBool] = None,
        time_in_force: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OptionsCreateOrderV1Resp]:
        """New Order (TRADE)

        Send a new order.

        :param quantity: (required)
        :type quantity: str
        :param side: (required)
        :type side: str
        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param type: (required)
        :type type: str
        :param client_order_id:
        :type client_order_id: str
        :param is_mmp:
        :type is_mmp: bool
        :param new_order_resp_type:
        :type new_order_resp_type: str
        :param post_only:
        :type post_only: bool
        :param price:
        :type price: str
        :param recv_window:
        :type recv_window: int
        :param reduce_only:
        :type reduce_only: bool
        :param time_in_force:
        :type time_in_force: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_create_order_v1_serialize(
            quantity=quantity,
            side=side,
            symbol=symbol,
            timestamp=timestamp,
            type=type,
            client_order_id=client_order_id,
            is_mmp=is_mmp,
            new_order_resp_type=new_order_resp_type,
            post_only=post_only,
            price=price,
            recv_window=recv_window,
            reduce_only=reduce_only,
            time_in_force=time_in_force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OptionsCreateOrderV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def options_create_order_v1_without_preload_content(
        self,
        quantity: StrictStr,
        side: StrictStr,
        symbol: StrictStr,
        timestamp: StrictInt,
        type: StrictStr,
        client_order_id: Optional[StrictStr] = None,
        is_mmp: Optional[StrictBool] = None,
        new_order_resp_type: Optional[StrictStr] = None,
        post_only: Optional[StrictBool] = None,
        price: Optional[StrictStr] = None,
        recv_window: Optional[StrictInt] = None,
        reduce_only: Optional[StrictBool] = None,
        time_in_force: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """New Order (TRADE)

        Send a new order.

        :param quantity: (required)
        :type quantity: str
        :param side: (required)
        :type side: str
        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param type: (required)
        :type type: str
        :param client_order_id:
        :type client_order_id: str
        :param is_mmp:
        :type is_mmp: bool
        :param new_order_resp_type:
        :type new_order_resp_type: str
        :param post_only:
        :type post_only: bool
        :param price:
        :type price: str
        :param recv_window:
        :type recv_window: int
        :param reduce_only:
        :type reduce_only: bool
        :param time_in_force:
        :type time_in_force: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_create_order_v1_serialize(
            quantity=quantity,
            side=side,
            symbol=symbol,
            timestamp=timestamp,
            type=type,
            client_order_id=client_order_id,
            is_mmp=is_mmp,
            new_order_resp_type=new_order_resp_type,
            post_only=post_only,
            price=price,
            recv_window=recv_window,
            reduce_only=reduce_only,
            time_in_force=time_in_force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OptionsCreateOrderV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _options_create_order_v1_serialize(
        self,
        quantity,
        side,
        symbol,
        timestamp,
        type,
        client_order_id,
        is_mmp,
        new_order_resp_type,
        post_only,
        price,
        recv_window,
        reduce_only,
        time_in_force,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if client_order_id is not None:
            _form_params.append(('clientOrderId', client_order_id))
        if is_mmp is not None:
            _form_params.append(('isMmp', is_mmp))
        if new_order_resp_type is not None:
            _form_params.append(('newOrderRespType', new_order_resp_type))
        if post_only is not None:
            _form_params.append(('postOnly', post_only))
        if price is not None:
            _form_params.append(('price', price))
        if quantity is not None:
            _form_params.append(('quantity', quantity))
        if recv_window is not None:
            _form_params.append(('recvWindow', recv_window))
        if reduce_only is not None:
            _form_params.append(('reduceOnly', reduce_only))
        if side is not None:
            _form_params.append(('side', side))
        if symbol is not None:
            _form_params.append(('symbol', symbol))
        if time_in_force is not None:
            _form_params.append(('timeInForce', time_in_force))
        if timestamp is not None:
            _form_params.append(('timestamp', timestamp))
        if type is not None:
            _form_params.append(('type', type))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/eapi/v1/order',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def options_delete_all_open_orders_by_underlying_v1(
        self,
        underlying: Annotated[StrictStr, Field(description="Option underlying, e.g BTCUSDT")],
        timestamp: StrictInt,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OptionsDeleteAllOpenOrdersByUnderlyingV1Resp:
        """Cancel All Option Orders By Underlying (TRADE)

        Cancel all active orders on specified underlying.

        :param underlying: Option underlying, e.g BTCUSDT (required)
        :type underlying: str
        :param timestamp: (required)
        :type timestamp: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_delete_all_open_orders_by_underlying_v1_serialize(
            underlying=underlying,
            timestamp=timestamp,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OptionsDeleteAllOpenOrdersByUnderlyingV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def options_delete_all_open_orders_by_underlying_v1_with_http_info(
        self,
        underlying: Annotated[StrictStr, Field(description="Option underlying, e.g BTCUSDT")],
        timestamp: StrictInt,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OptionsDeleteAllOpenOrdersByUnderlyingV1Resp]:
        """Cancel All Option Orders By Underlying (TRADE)

        Cancel all active orders on specified underlying.

        :param underlying: Option underlying, e.g BTCUSDT (required)
        :type underlying: str
        :param timestamp: (required)
        :type timestamp: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_delete_all_open_orders_by_underlying_v1_serialize(
            underlying=underlying,
            timestamp=timestamp,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OptionsDeleteAllOpenOrdersByUnderlyingV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def options_delete_all_open_orders_by_underlying_v1_without_preload_content(
        self,
        underlying: Annotated[StrictStr, Field(description="Option underlying, e.g BTCUSDT")],
        timestamp: StrictInt,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancel All Option Orders By Underlying (TRADE)

        Cancel all active orders on specified underlying.

        :param underlying: Option underlying, e.g BTCUSDT (required)
        :type underlying: str
        :param timestamp: (required)
        :type timestamp: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_delete_all_open_orders_by_underlying_v1_serialize(
            underlying=underlying,
            timestamp=timestamp,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OptionsDeleteAllOpenOrdersByUnderlyingV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _options_delete_all_open_orders_by_underlying_v1_serialize(
        self,
        underlying,
        timestamp,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if underlying is not None:
            
            _query_params.append(('underlying', underlying))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/eapi/v1/allOpenOrdersByUnderlying',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def options_delete_all_open_orders_v1(
        self,
        symbol: Annotated[StrictStr, Field(description="Option trading pair, e.g BTC-200730-9000-C")],
        timestamp: StrictInt,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OptionsDeleteAllOpenOrdersV1Resp:
        """Cancel all Option orders on specific symbol (TRADE)

        Cancel all active order on a symbol.

        :param symbol: Option trading pair, e.g BTC-200730-9000-C (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_delete_all_open_orders_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OptionsDeleteAllOpenOrdersV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def options_delete_all_open_orders_v1_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Option trading pair, e.g BTC-200730-9000-C")],
        timestamp: StrictInt,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OptionsDeleteAllOpenOrdersV1Resp]:
        """Cancel all Option orders on specific symbol (TRADE)

        Cancel all active order on a symbol.

        :param symbol: Option trading pair, e.g BTC-200730-9000-C (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_delete_all_open_orders_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OptionsDeleteAllOpenOrdersV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def options_delete_all_open_orders_v1_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Option trading pair, e.g BTC-200730-9000-C")],
        timestamp: StrictInt,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancel all Option orders on specific symbol (TRADE)

        Cancel all active order on a symbol.

        :param symbol: Option trading pair, e.g BTC-200730-9000-C (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_delete_all_open_orders_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OptionsDeleteAllOpenOrdersV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _options_delete_all_open_orders_v1_serialize(
        self,
        symbol,
        timestamp,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/eapi/v1/allOpenOrders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def options_delete_batch_orders_v1(
        self,
        symbol: Annotated[StrictStr, Field(description="Option trading pair, e.g BTC-200730-9000-C")],
        timestamp: StrictInt,
        order_ids: Annotated[Optional[List[StrictInt]], Field(description="Order ID, e.g [4611875134427365377,4611875134427365378]")] = None,
        client_order_ids: Annotated[Optional[List[StrictStr]], Field(description="User-defined order ID, e.g [&#34;my_id_1&#34;,&#34;my_id_2&#34;]")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OptionsDeleteBatchOrdersV1RespInner]:
        """Cancel Multiple Option Orders (TRADE)

        Cancel multiple orders.

        :param symbol: Option trading pair, e.g BTC-200730-9000-C (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param order_ids: Order ID, e.g [4611875134427365377,4611875134427365378]
        :type order_ids: List[int]
        :param client_order_ids: User-defined order ID, e.g [&#34;my_id_1&#34;,&#34;my_id_2&#34;]
        :type client_order_ids: List[str]
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_delete_batch_orders_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            order_ids=order_ids,
            client_order_ids=client_order_ids,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsDeleteBatchOrdersV1RespInner]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def options_delete_batch_orders_v1_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Option trading pair, e.g BTC-200730-9000-C")],
        timestamp: StrictInt,
        order_ids: Annotated[Optional[List[StrictInt]], Field(description="Order ID, e.g [4611875134427365377,4611875134427365378]")] = None,
        client_order_ids: Annotated[Optional[List[StrictStr]], Field(description="User-defined order ID, e.g [&#34;my_id_1&#34;,&#34;my_id_2&#34;]")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OptionsDeleteBatchOrdersV1RespInner]]:
        """Cancel Multiple Option Orders (TRADE)

        Cancel multiple orders.

        :param symbol: Option trading pair, e.g BTC-200730-9000-C (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param order_ids: Order ID, e.g [4611875134427365377,4611875134427365378]
        :type order_ids: List[int]
        :param client_order_ids: User-defined order ID, e.g [&#34;my_id_1&#34;,&#34;my_id_2&#34;]
        :type client_order_ids: List[str]
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_delete_batch_orders_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            order_ids=order_ids,
            client_order_ids=client_order_ids,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsDeleteBatchOrdersV1RespInner]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def options_delete_batch_orders_v1_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Option trading pair, e.g BTC-200730-9000-C")],
        timestamp: StrictInt,
        order_ids: Annotated[Optional[List[StrictInt]], Field(description="Order ID, e.g [4611875134427365377,4611875134427365378]")] = None,
        client_order_ids: Annotated[Optional[List[StrictStr]], Field(description="User-defined order ID, e.g [&#34;my_id_1&#34;,&#34;my_id_2&#34;]")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancel Multiple Option Orders (TRADE)

        Cancel multiple orders.

        :param symbol: Option trading pair, e.g BTC-200730-9000-C (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param order_ids: Order ID, e.g [4611875134427365377,4611875134427365378]
        :type order_ids: List[int]
        :param client_order_ids: User-defined order ID, e.g [&#34;my_id_1&#34;,&#34;my_id_2&#34;]
        :type client_order_ids: List[str]
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_delete_batch_orders_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            order_ids=order_ids,
            client_order_ids=client_order_ids,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsDeleteBatchOrdersV1RespInner]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _options_delete_batch_orders_v1_serialize(
        self,
        symbol,
        timestamp,
        order_ids,
        client_order_ids,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'orderIds': 'multi',
            'clientOrderIds': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if order_ids is not None:
            
            _query_params.append(('orderIds', order_ids))
            
        if client_order_ids is not None:
            
            _query_params.append(('clientOrderIds', client_order_ids))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/eapi/v1/batchOrders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def options_delete_order_v1(
        self,
        symbol: Annotated[StrictStr, Field(description="Option trading pair, e.g BTC-200730-9000-C")],
        timestamp: StrictInt,
        order_id: Annotated[Optional[StrictInt], Field(description="Order ID, e.g 4611875134427365377")] = None,
        client_order_id: Annotated[Optional[StrictStr], Field(description="User-defined order ID, e.g 10000")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OptionsDeleteOrderV1Resp:
        """Cancel Option Order (TRADE)

        Cancel an active order.

        :param symbol: Option trading pair, e.g BTC-200730-9000-C (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param order_id: Order ID, e.g 4611875134427365377
        :type order_id: int
        :param client_order_id: User-defined order ID, e.g 10000
        :type client_order_id: str
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_delete_order_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            order_id=order_id,
            client_order_id=client_order_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OptionsDeleteOrderV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def options_delete_order_v1_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Option trading pair, e.g BTC-200730-9000-C")],
        timestamp: StrictInt,
        order_id: Annotated[Optional[StrictInt], Field(description="Order ID, e.g 4611875134427365377")] = None,
        client_order_id: Annotated[Optional[StrictStr], Field(description="User-defined order ID, e.g 10000")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OptionsDeleteOrderV1Resp]:
        """Cancel Option Order (TRADE)

        Cancel an active order.

        :param symbol: Option trading pair, e.g BTC-200730-9000-C (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param order_id: Order ID, e.g 4611875134427365377
        :type order_id: int
        :param client_order_id: User-defined order ID, e.g 10000
        :type client_order_id: str
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_delete_order_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            order_id=order_id,
            client_order_id=client_order_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OptionsDeleteOrderV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def options_delete_order_v1_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Option trading pair, e.g BTC-200730-9000-C")],
        timestamp: StrictInt,
        order_id: Annotated[Optional[StrictInt], Field(description="Order ID, e.g 4611875134427365377")] = None,
        client_order_id: Annotated[Optional[StrictStr], Field(description="User-defined order ID, e.g 10000")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancel Option Order (TRADE)

        Cancel an active order.

        :param symbol: Option trading pair, e.g BTC-200730-9000-C (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param order_id: Order ID, e.g 4611875134427365377
        :type order_id: int
        :param client_order_id: User-defined order ID, e.g 10000
        :type client_order_id: str
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_delete_order_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            order_id=order_id,
            client_order_id=client_order_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OptionsDeleteOrderV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _options_delete_order_v1_serialize(
        self,
        symbol,
        timestamp,
        order_id,
        client_order_id,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if order_id is not None:
            
            _query_params.append(('orderId', order_id))
            
        if client_order_id is not None:
            
            _query_params.append(('clientOrderId', client_order_id))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/eapi/v1/order',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def options_get_exercise_record_v1(
        self,
        timestamp: StrictInt,
        symbol: Annotated[Optional[StrictStr], Field(description="Option trading pair, e.g BTC-200730-9000-C")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="startTime")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="endTime")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True)]], Field(description="default 1000, max 1000")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OptionsGetExerciseRecordV1RespItem]:
        """User Exercise Record (USER_DATA)

        Get account exercise records.

        :param timestamp: (required)
        :type timestamp: int
        :param symbol: Option trading pair, e.g BTC-200730-9000-C
        :type symbol: str
        :param start_time: startTime
        :type start_time: int
        :param end_time: endTime
        :type end_time: int
        :param limit: default 1000, max 1000
        :type limit: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_get_exercise_record_v1_serialize(
            timestamp=timestamp,
            symbol=symbol,
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsGetExerciseRecordV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def options_get_exercise_record_v1_with_http_info(
        self,
        timestamp: StrictInt,
        symbol: Annotated[Optional[StrictStr], Field(description="Option trading pair, e.g BTC-200730-9000-C")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="startTime")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="endTime")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True)]], Field(description="default 1000, max 1000")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OptionsGetExerciseRecordV1RespItem]]:
        """User Exercise Record (USER_DATA)

        Get account exercise records.

        :param timestamp: (required)
        :type timestamp: int
        :param symbol: Option trading pair, e.g BTC-200730-9000-C
        :type symbol: str
        :param start_time: startTime
        :type start_time: int
        :param end_time: endTime
        :type end_time: int
        :param limit: default 1000, max 1000
        :type limit: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_get_exercise_record_v1_serialize(
            timestamp=timestamp,
            symbol=symbol,
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsGetExerciseRecordV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def options_get_exercise_record_v1_without_preload_content(
        self,
        timestamp: StrictInt,
        symbol: Annotated[Optional[StrictStr], Field(description="Option trading pair, e.g BTC-200730-9000-C")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="startTime")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="endTime")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True)]], Field(description="default 1000, max 1000")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """User Exercise Record (USER_DATA)

        Get account exercise records.

        :param timestamp: (required)
        :type timestamp: int
        :param symbol: Option trading pair, e.g BTC-200730-9000-C
        :type symbol: str
        :param start_time: startTime
        :type start_time: int
        :param end_time: endTime
        :type end_time: int
        :param limit: default 1000, max 1000
        :type limit: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_get_exercise_record_v1_serialize(
            timestamp=timestamp,
            symbol=symbol,
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsGetExerciseRecordV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _options_get_exercise_record_v1_serialize(
        self,
        timestamp,
        symbol,
        start_time,
        end_time,
        limit,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/eapi/v1/exerciseRecord',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def options_get_history_orders_v1(
        self,
        symbol: Annotated[StrictStr, Field(description="Option trading pair")],
        timestamp: StrictInt,
        order_id: Annotated[Optional[StrictInt], Field(description="Returns the orderId and subsequent orders, the most recent order is returned by default")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Start Time, e.g 1593511200000")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="End Time, e.g 1593512200000")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of result sets returned Default:100 Max:1000")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OptionsGetHistoryOrdersV1RespItem]:
        """Query Option Order History (TRADE)

        Query all finished orders within 5 days, finished status: CANCELLED FILLED REJECTED.

        :param symbol: Option trading pair (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param order_id: Returns the orderId and subsequent orders, the most recent order is returned by default
        :type order_id: int
        :param start_time: Start Time, e.g 1593511200000
        :type start_time: int
        :param end_time: End Time, e.g 1593512200000
        :type end_time: int
        :param limit: Number of result sets returned Default:100 Max:1000
        :type limit: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_get_history_orders_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            order_id=order_id,
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsGetHistoryOrdersV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def options_get_history_orders_v1_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Option trading pair")],
        timestamp: StrictInt,
        order_id: Annotated[Optional[StrictInt], Field(description="Returns the orderId and subsequent orders, the most recent order is returned by default")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Start Time, e.g 1593511200000")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="End Time, e.g 1593512200000")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of result sets returned Default:100 Max:1000")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OptionsGetHistoryOrdersV1RespItem]]:
        """Query Option Order History (TRADE)

        Query all finished orders within 5 days, finished status: CANCELLED FILLED REJECTED.

        :param symbol: Option trading pair (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param order_id: Returns the orderId and subsequent orders, the most recent order is returned by default
        :type order_id: int
        :param start_time: Start Time, e.g 1593511200000
        :type start_time: int
        :param end_time: End Time, e.g 1593512200000
        :type end_time: int
        :param limit: Number of result sets returned Default:100 Max:1000
        :type limit: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_get_history_orders_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            order_id=order_id,
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsGetHistoryOrdersV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def options_get_history_orders_v1_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Option trading pair")],
        timestamp: StrictInt,
        order_id: Annotated[Optional[StrictInt], Field(description="Returns the orderId and subsequent orders, the most recent order is returned by default")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Start Time, e.g 1593511200000")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="End Time, e.g 1593512200000")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of result sets returned Default:100 Max:1000")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query Option Order History (TRADE)

        Query all finished orders within 5 days, finished status: CANCELLED FILLED REJECTED.

        :param symbol: Option trading pair (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param order_id: Returns the orderId and subsequent orders, the most recent order is returned by default
        :type order_id: int
        :param start_time: Start Time, e.g 1593511200000
        :type start_time: int
        :param end_time: End Time, e.g 1593512200000
        :type end_time: int
        :param limit: Number of result sets returned Default:100 Max:1000
        :type limit: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_get_history_orders_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            order_id=order_id,
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsGetHistoryOrdersV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _options_get_history_orders_v1_serialize(
        self,
        symbol,
        timestamp,
        order_id,
        start_time,
        end_time,
        limit,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if order_id is not None:
            
            _query_params.append(('orderId', order_id))
            
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/eapi/v1/historyOrders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def options_get_open_orders_v1(
        self,
        timestamp: StrictInt,
        symbol: Annotated[Optional[StrictStr], Field(description="return all orders if don&#39;t pass, Option trading pair, e.g BTC-200730-9000-C,")] = None,
        order_id: Annotated[Optional[StrictInt], Field(description="Returns the orderId and subsequent orders, the most recent order is returned by default")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Start Time")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="End Time")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of result sets returned Default:100 Max:1000")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OptionsGetOpenOrdersV1RespItem]:
        """Query Current Open Option Orders (USER_DATA)

        Query current all open orders, status: ACCEPTED PARTIALLY_FILLED

        :param timestamp: (required)
        :type timestamp: int
        :param symbol: return all orders if don&#39;t pass, Option trading pair, e.g BTC-200730-9000-C,
        :type symbol: str
        :param order_id: Returns the orderId and subsequent orders, the most recent order is returned by default
        :type order_id: int
        :param start_time: Start Time
        :type start_time: int
        :param end_time: End Time
        :type end_time: int
        :param limit: Number of result sets returned Default:100 Max:1000
        :type limit: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_get_open_orders_v1_serialize(
            timestamp=timestamp,
            symbol=symbol,
            order_id=order_id,
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsGetOpenOrdersV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def options_get_open_orders_v1_with_http_info(
        self,
        timestamp: StrictInt,
        symbol: Annotated[Optional[StrictStr], Field(description="return all orders if don&#39;t pass, Option trading pair, e.g BTC-200730-9000-C,")] = None,
        order_id: Annotated[Optional[StrictInt], Field(description="Returns the orderId and subsequent orders, the most recent order is returned by default")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Start Time")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="End Time")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of result sets returned Default:100 Max:1000")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OptionsGetOpenOrdersV1RespItem]]:
        """Query Current Open Option Orders (USER_DATA)

        Query current all open orders, status: ACCEPTED PARTIALLY_FILLED

        :param timestamp: (required)
        :type timestamp: int
        :param symbol: return all orders if don&#39;t pass, Option trading pair, e.g BTC-200730-9000-C,
        :type symbol: str
        :param order_id: Returns the orderId and subsequent orders, the most recent order is returned by default
        :type order_id: int
        :param start_time: Start Time
        :type start_time: int
        :param end_time: End Time
        :type end_time: int
        :param limit: Number of result sets returned Default:100 Max:1000
        :type limit: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_get_open_orders_v1_serialize(
            timestamp=timestamp,
            symbol=symbol,
            order_id=order_id,
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsGetOpenOrdersV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def options_get_open_orders_v1_without_preload_content(
        self,
        timestamp: StrictInt,
        symbol: Annotated[Optional[StrictStr], Field(description="return all orders if don&#39;t pass, Option trading pair, e.g BTC-200730-9000-C,")] = None,
        order_id: Annotated[Optional[StrictInt], Field(description="Returns the orderId and subsequent orders, the most recent order is returned by default")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Start Time")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="End Time")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of result sets returned Default:100 Max:1000")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query Current Open Option Orders (USER_DATA)

        Query current all open orders, status: ACCEPTED PARTIALLY_FILLED

        :param timestamp: (required)
        :type timestamp: int
        :param symbol: return all orders if don&#39;t pass, Option trading pair, e.g BTC-200730-9000-C,
        :type symbol: str
        :param order_id: Returns the orderId and subsequent orders, the most recent order is returned by default
        :type order_id: int
        :param start_time: Start Time
        :type start_time: int
        :param end_time: End Time
        :type end_time: int
        :param limit: Number of result sets returned Default:100 Max:1000
        :type limit: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_get_open_orders_v1_serialize(
            timestamp=timestamp,
            symbol=symbol,
            order_id=order_id,
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsGetOpenOrdersV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _options_get_open_orders_v1_serialize(
        self,
        timestamp,
        symbol,
        order_id,
        start_time,
        end_time,
        limit,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if order_id is not None:
            
            _query_params.append(('orderId', order_id))
            
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/eapi/v1/openOrders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def options_get_order_v1(
        self,
        symbol: Annotated[StrictStr, Field(description="Option trading pair, e.g BTC-200730-9000-C")],
        timestamp: StrictInt,
        order_id: Annotated[Optional[StrictInt], Field(description="Order id")] = None,
        client_order_id: Annotated[Optional[StrictStr], Field(description="User-defined order ID cannot be repeated in pending orders")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OptionsGetOrderV1Resp:
        """Query Single Order (TRADE)

        Check an order status.

        :param symbol: Option trading pair, e.g BTC-200730-9000-C (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param order_id: Order id
        :type order_id: int
        :param client_order_id: User-defined order ID cannot be repeated in pending orders
        :type client_order_id: str
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_get_order_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            order_id=order_id,
            client_order_id=client_order_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OptionsGetOrderV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def options_get_order_v1_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Option trading pair, e.g BTC-200730-9000-C")],
        timestamp: StrictInt,
        order_id: Annotated[Optional[StrictInt], Field(description="Order id")] = None,
        client_order_id: Annotated[Optional[StrictStr], Field(description="User-defined order ID cannot be repeated in pending orders")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OptionsGetOrderV1Resp]:
        """Query Single Order (TRADE)

        Check an order status.

        :param symbol: Option trading pair, e.g BTC-200730-9000-C (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param order_id: Order id
        :type order_id: int
        :param client_order_id: User-defined order ID cannot be repeated in pending orders
        :type client_order_id: str
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_get_order_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            order_id=order_id,
            client_order_id=client_order_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OptionsGetOrderV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def options_get_order_v1_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Option trading pair, e.g BTC-200730-9000-C")],
        timestamp: StrictInt,
        order_id: Annotated[Optional[StrictInt], Field(description="Order id")] = None,
        client_order_id: Annotated[Optional[StrictStr], Field(description="User-defined order ID cannot be repeated in pending orders")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query Single Order (TRADE)

        Check an order status.

        :param symbol: Option trading pair, e.g BTC-200730-9000-C (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param order_id: Order id
        :type order_id: int
        :param client_order_id: User-defined order ID cannot be repeated in pending orders
        :type client_order_id: str
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_get_order_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            order_id=order_id,
            client_order_id=client_order_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OptionsGetOrderV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _options_get_order_v1_serialize(
        self,
        symbol,
        timestamp,
        order_id,
        client_order_id,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if order_id is not None:
            
            _query_params.append(('orderId', order_id))
            
        if client_order_id is not None:
            
            _query_params.append(('clientOrderId', client_order_id))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/eapi/v1/order',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def options_get_position_v1(
        self,
        timestamp: StrictInt,
        symbol: Annotated[Optional[StrictStr], Field(description="Option trading pair, e.g BTC-200730-9000-C")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OptionsGetPositionV1RespItem]:
        """Option Position Information (USER_DATA)

        Get current position information.

        :param timestamp: (required)
        :type timestamp: int
        :param symbol: Option trading pair, e.g BTC-200730-9000-C
        :type symbol: str
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_get_position_v1_serialize(
            timestamp=timestamp,
            symbol=symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsGetPositionV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def options_get_position_v1_with_http_info(
        self,
        timestamp: StrictInt,
        symbol: Annotated[Optional[StrictStr], Field(description="Option trading pair, e.g BTC-200730-9000-C")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OptionsGetPositionV1RespItem]]:
        """Option Position Information (USER_DATA)

        Get current position information.

        :param timestamp: (required)
        :type timestamp: int
        :param symbol: Option trading pair, e.g BTC-200730-9000-C
        :type symbol: str
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_get_position_v1_serialize(
            timestamp=timestamp,
            symbol=symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsGetPositionV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def options_get_position_v1_without_preload_content(
        self,
        timestamp: StrictInt,
        symbol: Annotated[Optional[StrictStr], Field(description="Option trading pair, e.g BTC-200730-9000-C")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Option Position Information (USER_DATA)

        Get current position information.

        :param timestamp: (required)
        :type timestamp: int
        :param symbol: Option trading pair, e.g BTC-200730-9000-C
        :type symbol: str
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_get_position_v1_serialize(
            timestamp=timestamp,
            symbol=symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsGetPositionV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _options_get_position_v1_serialize(
        self,
        timestamp,
        symbol,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/eapi/v1/position',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def options_get_user_trades_v1(
        self,
        timestamp: StrictInt,
        symbol: Annotated[Optional[StrictStr], Field(description="Option symbol, e.g BTC-200730-9000-C")] = None,
        from_id: Annotated[Optional[StrictInt], Field(description="Trade id to fetch from. Default gets most recent trades, e.g 4611875134427365376")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Start time, e.g 1593511200000")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="End time, e.g 1593512200000")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True)]], Field(description="Default 100; max 1000")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OptionsGetUserTradesV1RespItem]:
        """Account Trade List (USER_DATA)

        Get trades for a specific account and symbol.

        :param timestamp: (required)
        :type timestamp: int
        :param symbol: Option symbol, e.g BTC-200730-9000-C
        :type symbol: str
        :param from_id: Trade id to fetch from. Default gets most recent trades, e.g 4611875134427365376
        :type from_id: int
        :param start_time: Start time, e.g 1593511200000
        :type start_time: int
        :param end_time: End time, e.g 1593512200000
        :type end_time: int
        :param limit: Default 100; max 1000
        :type limit: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_get_user_trades_v1_serialize(
            timestamp=timestamp,
            symbol=symbol,
            from_id=from_id,
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsGetUserTradesV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def options_get_user_trades_v1_with_http_info(
        self,
        timestamp: StrictInt,
        symbol: Annotated[Optional[StrictStr], Field(description="Option symbol, e.g BTC-200730-9000-C")] = None,
        from_id: Annotated[Optional[StrictInt], Field(description="Trade id to fetch from. Default gets most recent trades, e.g 4611875134427365376")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Start time, e.g 1593511200000")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="End time, e.g 1593512200000")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True)]], Field(description="Default 100; max 1000")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OptionsGetUserTradesV1RespItem]]:
        """Account Trade List (USER_DATA)

        Get trades for a specific account and symbol.

        :param timestamp: (required)
        :type timestamp: int
        :param symbol: Option symbol, e.g BTC-200730-9000-C
        :type symbol: str
        :param from_id: Trade id to fetch from. Default gets most recent trades, e.g 4611875134427365376
        :type from_id: int
        :param start_time: Start time, e.g 1593511200000
        :type start_time: int
        :param end_time: End time, e.g 1593512200000
        :type end_time: int
        :param limit: Default 100; max 1000
        :type limit: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_get_user_trades_v1_serialize(
            timestamp=timestamp,
            symbol=symbol,
            from_id=from_id,
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsGetUserTradesV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def options_get_user_trades_v1_without_preload_content(
        self,
        timestamp: StrictInt,
        symbol: Annotated[Optional[StrictStr], Field(description="Option symbol, e.g BTC-200730-9000-C")] = None,
        from_id: Annotated[Optional[StrictInt], Field(description="Trade id to fetch from. Default gets most recent trades, e.g 4611875134427365376")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Start time, e.g 1593511200000")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="End time, e.g 1593512200000")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True)]], Field(description="Default 100; max 1000")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Account Trade List (USER_DATA)

        Get trades for a specific account and symbol.

        :param timestamp: (required)
        :type timestamp: int
        :param symbol: Option symbol, e.g BTC-200730-9000-C
        :type symbol: str
        :param from_id: Trade id to fetch from. Default gets most recent trades, e.g 4611875134427365376
        :type from_id: int
        :param start_time: Start time, e.g 1593511200000
        :type start_time: int
        :param end_time: End time, e.g 1593512200000
        :type end_time: int
        :param limit: Default 100; max 1000
        :type limit: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._options_get_user_trades_v1_serialize(
            timestamp=timestamp,
            symbol=symbol,
            from_id=from_id,
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OptionsGetUserTradesV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _options_get_user_trades_v1_serialize(
        self,
        timestamp,
        symbol,
        from_id,
        start_time,
        end_time,
        limit,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if from_id is not None:
            
            _query_params.append(('fromId', from_id))
            
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/eapi/v1/userTrades',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


