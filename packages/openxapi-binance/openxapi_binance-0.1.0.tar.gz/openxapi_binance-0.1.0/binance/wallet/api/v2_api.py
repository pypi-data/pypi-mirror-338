# coding: utf-8

"""
    Binance Wallet API

    OpenAPI specification for Binance exchange - Wallet API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from binance.wallet.models.wallet_get_localentity_withdraw_history_v2_resp_item import WalletGetLocalentityWithdrawHistoryV2RespItem

from binance.wallet.api_client import ApiClient, RequestSerialized
from binance.wallet.api_response import ApiResponse
from binance.wallet.rest import RESTResponseType


class V2Api:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def wallet_get_localentity_withdraw_history_v2(
        self,
        timestamp: StrictInt,
        tr_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of travel rule record Ids.")] = None,
        tx_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of transaction Ids.")] = None,
        withdraw_order_id: Annotated[Optional[StrictStr], Field(description="Withdraw ID defined by the client (i.e. client&#39;s internal withdrawID).")] = None,
        network: Optional[StrictStr] = None,
        coin: Optional[StrictStr] = None,
        travel_rule_status: Annotated[Optional[StrictInt], Field(description="0:Completed,1:Pending,2:Failed")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Default: 0")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True)]], Field(description="Default: 1000, Max: 1000")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Default: 90 days from current timestamp")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="Default: present timestamp")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[WalletGetLocalentityWithdrawHistoryV2RespItem]:
        """Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)

        Fetch withdraw history for local entities that required travel rule.

        :param timestamp: (required)
        :type timestamp: int
        :param tr_id: Comma(,) separated list of travel rule record Ids.
        :type tr_id: str
        :param tx_id: Comma(,) separated list of transaction Ids.
        :type tx_id: str
        :param withdraw_order_id: Withdraw ID defined by the client (i.e. client&#39;s internal withdrawID).
        :type withdraw_order_id: str
        :param network:
        :type network: str
        :param coin:
        :type coin: str
        :param travel_rule_status: 0:Completed,1:Pending,2:Failed
        :type travel_rule_status: int
        :param offset: Default: 0
        :type offset: int
        :param limit: Default: 1000, Max: 1000
        :type limit: int
        :param start_time: Default: 90 days from current timestamp
        :type start_time: int
        :param end_time: Default: present timestamp
        :type end_time: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_get_localentity_withdraw_history_v2_serialize(
            timestamp=timestamp,
            tr_id=tr_id,
            tx_id=tx_id,
            withdraw_order_id=withdraw_order_id,
            network=network,
            coin=coin,
            travel_rule_status=travel_rule_status,
            offset=offset,
            limit=limit,
            start_time=start_time,
            end_time=end_time,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[WalletGetLocalentityWithdrawHistoryV2RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wallet_get_localentity_withdraw_history_v2_with_http_info(
        self,
        timestamp: StrictInt,
        tr_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of travel rule record Ids.")] = None,
        tx_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of transaction Ids.")] = None,
        withdraw_order_id: Annotated[Optional[StrictStr], Field(description="Withdraw ID defined by the client (i.e. client&#39;s internal withdrawID).")] = None,
        network: Optional[StrictStr] = None,
        coin: Optional[StrictStr] = None,
        travel_rule_status: Annotated[Optional[StrictInt], Field(description="0:Completed,1:Pending,2:Failed")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Default: 0")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True)]], Field(description="Default: 1000, Max: 1000")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Default: 90 days from current timestamp")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="Default: present timestamp")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[WalletGetLocalentityWithdrawHistoryV2RespItem]]:
        """Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)

        Fetch withdraw history for local entities that required travel rule.

        :param timestamp: (required)
        :type timestamp: int
        :param tr_id: Comma(,) separated list of travel rule record Ids.
        :type tr_id: str
        :param tx_id: Comma(,) separated list of transaction Ids.
        :type tx_id: str
        :param withdraw_order_id: Withdraw ID defined by the client (i.e. client&#39;s internal withdrawID).
        :type withdraw_order_id: str
        :param network:
        :type network: str
        :param coin:
        :type coin: str
        :param travel_rule_status: 0:Completed,1:Pending,2:Failed
        :type travel_rule_status: int
        :param offset: Default: 0
        :type offset: int
        :param limit: Default: 1000, Max: 1000
        :type limit: int
        :param start_time: Default: 90 days from current timestamp
        :type start_time: int
        :param end_time: Default: present timestamp
        :type end_time: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_get_localentity_withdraw_history_v2_serialize(
            timestamp=timestamp,
            tr_id=tr_id,
            tx_id=tx_id,
            withdraw_order_id=withdraw_order_id,
            network=network,
            coin=coin,
            travel_rule_status=travel_rule_status,
            offset=offset,
            limit=limit,
            start_time=start_time,
            end_time=end_time,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[WalletGetLocalentityWithdrawHistoryV2RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wallet_get_localentity_withdraw_history_v2_without_preload_content(
        self,
        timestamp: StrictInt,
        tr_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of travel rule record Ids.")] = None,
        tx_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of transaction Ids.")] = None,
        withdraw_order_id: Annotated[Optional[StrictStr], Field(description="Withdraw ID defined by the client (i.e. client&#39;s internal withdrawID).")] = None,
        network: Optional[StrictStr] = None,
        coin: Optional[StrictStr] = None,
        travel_rule_status: Annotated[Optional[StrictInt], Field(description="0:Completed,1:Pending,2:Failed")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Default: 0")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True)]], Field(description="Default: 1000, Max: 1000")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Default: 90 days from current timestamp")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="Default: present timestamp")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)

        Fetch withdraw history for local entities that required travel rule.

        :param timestamp: (required)
        :type timestamp: int
        :param tr_id: Comma(,) separated list of travel rule record Ids.
        :type tr_id: str
        :param tx_id: Comma(,) separated list of transaction Ids.
        :type tx_id: str
        :param withdraw_order_id: Withdraw ID defined by the client (i.e. client&#39;s internal withdrawID).
        :type withdraw_order_id: str
        :param network:
        :type network: str
        :param coin:
        :type coin: str
        :param travel_rule_status: 0:Completed,1:Pending,2:Failed
        :type travel_rule_status: int
        :param offset: Default: 0
        :type offset: int
        :param limit: Default: 1000, Max: 1000
        :type limit: int
        :param start_time: Default: 90 days from current timestamp
        :type start_time: int
        :param end_time: Default: present timestamp
        :type end_time: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_get_localentity_withdraw_history_v2_serialize(
            timestamp=timestamp,
            tr_id=tr_id,
            tx_id=tx_id,
            withdraw_order_id=withdraw_order_id,
            network=network,
            coin=coin,
            travel_rule_status=travel_rule_status,
            offset=offset,
            limit=limit,
            start_time=start_time,
            end_time=end_time,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[WalletGetLocalentityWithdrawHistoryV2RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wallet_get_localentity_withdraw_history_v2_serialize(
        self,
        timestamp,
        tr_id,
        tx_id,
        withdraw_order_id,
        network,
        coin,
        travel_rule_status,
        offset,
        limit,
        start_time,
        end_time,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tr_id is not None:
            
            _query_params.append(('trId', tr_id))
            
        if tx_id is not None:
            
            _query_params.append(('txId', tx_id))
            
        if withdraw_order_id is not None:
            
            _query_params.append(('withdrawOrderId', withdraw_order_id))
            
        if network is not None:
            
            _query_params.append(('network', network))
            
        if coin is not None:
            
            _query_params.append(('coin', coin))
            
        if travel_rule_status is not None:
            
            _query_params.append(('travelRuleStatus', travel_rule_status))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v2/localentity/withdraw/history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


