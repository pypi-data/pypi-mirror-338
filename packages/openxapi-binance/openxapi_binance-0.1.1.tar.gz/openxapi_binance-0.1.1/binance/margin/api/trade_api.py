# coding: utf-8

"""
    Binance Margin Trading API

    OpenAPI specification for Binance exchange - Margin API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated
from binance.margin.models.margin_create_margin_api_key_v1_resp import MarginCreateMarginApiKeyV1Resp
from binance.margin.models.margin_create_margin_exchange_small_liability_v1_resp import MarginCreateMarginExchangeSmallLiabilityV1Resp
from binance.margin.models.margin_create_margin_manual_liquidation_v1_resp import MarginCreateMarginManualLiquidationV1Resp
from binance.margin.models.margin_create_margin_order_oco_v1_resp import MarginCreateMarginOrderOcoV1Resp
from binance.margin.models.margin_create_margin_order_oto_v1_resp import MarginCreateMarginOrderOtoV1Resp
from binance.margin.models.margin_create_margin_order_otoco_v1_resp import MarginCreateMarginOrderOtocoV1Resp
from binance.margin.models.margin_create_margin_order_v1_resp import MarginCreateMarginOrderV1Resp
from binance.margin.models.margin_delete_margin_open_orders_v1_resp_item import MarginDeleteMarginOpenOrdersV1RespItem
from binance.margin.models.margin_delete_margin_order_list_v1_resp import MarginDeleteMarginOrderListV1Resp
from binance.margin.models.margin_delete_margin_order_v1_resp import MarginDeleteMarginOrderV1Resp
from binance.margin.models.margin_get_margin_all_order_list_v1_resp_item import MarginGetMarginAllOrderListV1RespItem
from binance.margin.models.margin_get_margin_all_orders_v1_resp_item import MarginGetMarginAllOrdersV1RespItem
from binance.margin.models.margin_get_margin_api_key_list_v1_resp_item import MarginGetMarginApiKeyListV1RespItem
from binance.margin.models.margin_get_margin_api_key_v1_resp import MarginGetMarginApiKeyV1Resp
from binance.margin.models.margin_get_margin_exchange_small_liability_history_v1_resp import MarginGetMarginExchangeSmallLiabilityHistoryV1Resp
from binance.margin.models.margin_get_margin_exchange_small_liability_v1_resp_item import MarginGetMarginExchangeSmallLiabilityV1RespItem
from binance.margin.models.margin_get_margin_force_liquidation_rec_v1_resp import MarginGetMarginForceLiquidationRecV1Resp
from binance.margin.models.margin_get_margin_my_trades_v1_resp_item import MarginGetMarginMyTradesV1RespItem
from binance.margin.models.margin_get_margin_open_order_list_v1_resp_item import MarginGetMarginOpenOrderListV1RespItem
from binance.margin.models.margin_get_margin_open_orders_v1_resp_item import MarginGetMarginOpenOrdersV1RespItem
from binance.margin.models.margin_get_margin_order_list_v1_resp import MarginGetMarginOrderListV1Resp
from binance.margin.models.margin_get_margin_order_v1_resp import MarginGetMarginOrderV1Resp
from binance.margin.models.margin_get_margin_rate_limit_order_v1_resp_item import MarginGetMarginRateLimitOrderV1RespItem

from binance.margin.api_client import ApiClient, RequestSerialized
from binance.margin.api_response import ApiResponse
from binance.margin.rest import RESTResponseType


class TradeApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def margin_create_margin_api_key_v1(
        self,
        api_name: StrictStr,
        timestamp: StrictInt,
        ip: Optional[StrictStr] = None,
        permission_mode: Optional[StrictStr] = None,
        public_key: Optional[StrictStr] = None,
        recv_window: Optional[StrictInt] = None,
        symbol: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MarginCreateMarginApiKeyV1Resp:
        """Create Special Key(Low-Latency Trading)(TRADE)

        **Binance Margin offers low-latency trading through a special key, available exclusively to users with VIP level 4 or higher. **

        :param api_name: (required)
        :type api_name: str
        :param timestamp: (required)
        :type timestamp: int
        :param ip:
        :type ip: str
        :param permission_mode:
        :type permission_mode: str
        :param public_key:
        :type public_key: str
        :param recv_window:
        :type recv_window: int
        :param symbol:
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_api_key_v1_serialize(
            api_name=api_name,
            timestamp=timestamp,
            ip=ip,
            permission_mode=permission_mode,
            public_key=public_key,
            recv_window=recv_window,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginApiKeyV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_create_margin_api_key_v1_with_http_info(
        self,
        api_name: StrictStr,
        timestamp: StrictInt,
        ip: Optional[StrictStr] = None,
        permission_mode: Optional[StrictStr] = None,
        public_key: Optional[StrictStr] = None,
        recv_window: Optional[StrictInt] = None,
        symbol: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MarginCreateMarginApiKeyV1Resp]:
        """Create Special Key(Low-Latency Trading)(TRADE)

        **Binance Margin offers low-latency trading through a special key, available exclusively to users with VIP level 4 or higher. **

        :param api_name: (required)
        :type api_name: str
        :param timestamp: (required)
        :type timestamp: int
        :param ip:
        :type ip: str
        :param permission_mode:
        :type permission_mode: str
        :param public_key:
        :type public_key: str
        :param recv_window:
        :type recv_window: int
        :param symbol:
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_api_key_v1_serialize(
            api_name=api_name,
            timestamp=timestamp,
            ip=ip,
            permission_mode=permission_mode,
            public_key=public_key,
            recv_window=recv_window,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginApiKeyV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_create_margin_api_key_v1_without_preload_content(
        self,
        api_name: StrictStr,
        timestamp: StrictInt,
        ip: Optional[StrictStr] = None,
        permission_mode: Optional[StrictStr] = None,
        public_key: Optional[StrictStr] = None,
        recv_window: Optional[StrictInt] = None,
        symbol: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Special Key(Low-Latency Trading)(TRADE)

        **Binance Margin offers low-latency trading through a special key, available exclusively to users with VIP level 4 or higher. **

        :param api_name: (required)
        :type api_name: str
        :param timestamp: (required)
        :type timestamp: int
        :param ip:
        :type ip: str
        :param permission_mode:
        :type permission_mode: str
        :param public_key:
        :type public_key: str
        :param recv_window:
        :type recv_window: int
        :param symbol:
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_api_key_v1_serialize(
            api_name=api_name,
            timestamp=timestamp,
            ip=ip,
            permission_mode=permission_mode,
            public_key=public_key,
            recv_window=recv_window,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginApiKeyV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_create_margin_api_key_v1_serialize(
        self,
        api_name,
        timestamp,
        ip,
        permission_mode,
        public_key,
        recv_window,
        symbol,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if api_name is not None:
            _form_params.append(('apiName', api_name))
        if ip is not None:
            _form_params.append(('ip', ip))
        if permission_mode is not None:
            _form_params.append(('permissionMode', permission_mode))
        if public_key is not None:
            _form_params.append(('publicKey', public_key))
        if recv_window is not None:
            _form_params.append(('recvWindow', recv_window))
        if symbol is not None:
            _form_params.append(('symbol', symbol))
        if timestamp is not None:
            _form_params.append(('timestamp', timestamp))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/sapi/v1/margin/apiKey',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_create_margin_exchange_small_liability_v1(
        self,
        asset_names: List[StrictStr],
        timestamp: StrictInt,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MarginCreateMarginExchangeSmallLiabilityV1Resp:
        """Small Liability Exchange (MARGIN)

        Small Liability Exchange

        :param asset_names: (required)
        :type asset_names: List[str]
        :param timestamp: (required)
        :type timestamp: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_exchange_small_liability_v1_serialize(
            asset_names=asset_names,
            timestamp=timestamp,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginExchangeSmallLiabilityV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_create_margin_exchange_small_liability_v1_with_http_info(
        self,
        asset_names: List[StrictStr],
        timestamp: StrictInt,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MarginCreateMarginExchangeSmallLiabilityV1Resp]:
        """Small Liability Exchange (MARGIN)

        Small Liability Exchange

        :param asset_names: (required)
        :type asset_names: List[str]
        :param timestamp: (required)
        :type timestamp: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_exchange_small_liability_v1_serialize(
            asset_names=asset_names,
            timestamp=timestamp,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginExchangeSmallLiabilityV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_create_margin_exchange_small_liability_v1_without_preload_content(
        self,
        asset_names: List[StrictStr],
        timestamp: StrictInt,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Small Liability Exchange (MARGIN)

        Small Liability Exchange

        :param asset_names: (required)
        :type asset_names: List[str]
        :param timestamp: (required)
        :type timestamp: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_exchange_small_liability_v1_serialize(
            asset_names=asset_names,
            timestamp=timestamp,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginExchangeSmallLiabilityV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_create_margin_exchange_small_liability_v1_serialize(
        self,
        asset_names,
        timestamp,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'assetNames': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if asset_names is not None:
            _form_params.append(('assetNames', asset_names))
        if recv_window is not None:
            _form_params.append(('recvWindow', recv_window))
        if timestamp is not None:
            _form_params.append(('timestamp', timestamp))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/sapi/v1/margin/exchange-small-liability',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_create_margin_manual_liquidation_v1(
        self,
        timestamp: StrictInt,
        type: StrictStr,
        recv_window: Optional[StrictInt] = None,
        symbol: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MarginCreateMarginManualLiquidationV1Resp:
        """Margin Manual Liquidation(MARGIN)

        Margin Manual Liquidation

        :param timestamp: (required)
        :type timestamp: int
        :param type: (required)
        :type type: str
        :param recv_window:
        :type recv_window: int
        :param symbol:
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_manual_liquidation_v1_serialize(
            timestamp=timestamp,
            type=type,
            recv_window=recv_window,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginManualLiquidationV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_create_margin_manual_liquidation_v1_with_http_info(
        self,
        timestamp: StrictInt,
        type: StrictStr,
        recv_window: Optional[StrictInt] = None,
        symbol: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MarginCreateMarginManualLiquidationV1Resp]:
        """Margin Manual Liquidation(MARGIN)

        Margin Manual Liquidation

        :param timestamp: (required)
        :type timestamp: int
        :param type: (required)
        :type type: str
        :param recv_window:
        :type recv_window: int
        :param symbol:
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_manual_liquidation_v1_serialize(
            timestamp=timestamp,
            type=type,
            recv_window=recv_window,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginManualLiquidationV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_create_margin_manual_liquidation_v1_without_preload_content(
        self,
        timestamp: StrictInt,
        type: StrictStr,
        recv_window: Optional[StrictInt] = None,
        symbol: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Margin Manual Liquidation(MARGIN)

        Margin Manual Liquidation

        :param timestamp: (required)
        :type timestamp: int
        :param type: (required)
        :type type: str
        :param recv_window:
        :type recv_window: int
        :param symbol:
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_manual_liquidation_v1_serialize(
            timestamp=timestamp,
            type=type,
            recv_window=recv_window,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginManualLiquidationV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_create_margin_manual_liquidation_v1_serialize(
        self,
        timestamp,
        type,
        recv_window,
        symbol,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if recv_window is not None:
            _form_params.append(('recvWindow', recv_window))
        if symbol is not None:
            _form_params.append(('symbol', symbol))
        if timestamp is not None:
            _form_params.append(('timestamp', timestamp))
        if type is not None:
            _form_params.append(('type', type))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/sapi/v1/margin/manual-liquidation',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_create_margin_order_oco_v1(
        self,
        price: StrictStr,
        quantity: StrictStr,
        side: StrictStr,
        stop_price: StrictStr,
        symbol: StrictStr,
        timestamp: StrictInt,
        auto_repay_at_cancel: Optional[StrictBool] = None,
        is_isolated: Optional[StrictStr] = None,
        limit_client_order_id: Optional[StrictStr] = None,
        limit_iceberg_qty: Optional[StrictStr] = None,
        list_client_order_id: Optional[StrictStr] = None,
        new_order_resp_type: Optional[StrictStr] = None,
        recv_window: Optional[StrictInt] = None,
        self_trade_prevention_mode: Optional[StrictStr] = None,
        side_effect_type: Optional[StrictStr] = None,
        stop_client_order_id: Optional[StrictStr] = None,
        stop_iceberg_qty: Optional[StrictStr] = None,
        stop_limit_price: Optional[StrictStr] = None,
        stop_limit_time_in_force: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MarginCreateMarginOrderOcoV1Resp:
        """Margin Account New OCO (TRADE)

        Send in a new OCO for a margin account

        :param price: (required)
        :type price: str
        :param quantity: (required)
        :type quantity: str
        :param side: (required)
        :type side: str
        :param stop_price: (required)
        :type stop_price: str
        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param auto_repay_at_cancel:
        :type auto_repay_at_cancel: bool
        :param is_isolated:
        :type is_isolated: str
        :param limit_client_order_id:
        :type limit_client_order_id: str
        :param limit_iceberg_qty:
        :type limit_iceberg_qty: str
        :param list_client_order_id:
        :type list_client_order_id: str
        :param new_order_resp_type:
        :type new_order_resp_type: str
        :param recv_window:
        :type recv_window: int
        :param self_trade_prevention_mode:
        :type self_trade_prevention_mode: str
        :param side_effect_type:
        :type side_effect_type: str
        :param stop_client_order_id:
        :type stop_client_order_id: str
        :param stop_iceberg_qty:
        :type stop_iceberg_qty: str
        :param stop_limit_price:
        :type stop_limit_price: str
        :param stop_limit_time_in_force:
        :type stop_limit_time_in_force: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_order_oco_v1_serialize(
            price=price,
            quantity=quantity,
            side=side,
            stop_price=stop_price,
            symbol=symbol,
            timestamp=timestamp,
            auto_repay_at_cancel=auto_repay_at_cancel,
            is_isolated=is_isolated,
            limit_client_order_id=limit_client_order_id,
            limit_iceberg_qty=limit_iceberg_qty,
            list_client_order_id=list_client_order_id,
            new_order_resp_type=new_order_resp_type,
            recv_window=recv_window,
            self_trade_prevention_mode=self_trade_prevention_mode,
            side_effect_type=side_effect_type,
            stop_client_order_id=stop_client_order_id,
            stop_iceberg_qty=stop_iceberg_qty,
            stop_limit_price=stop_limit_price,
            stop_limit_time_in_force=stop_limit_time_in_force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginOrderOcoV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_create_margin_order_oco_v1_with_http_info(
        self,
        price: StrictStr,
        quantity: StrictStr,
        side: StrictStr,
        stop_price: StrictStr,
        symbol: StrictStr,
        timestamp: StrictInt,
        auto_repay_at_cancel: Optional[StrictBool] = None,
        is_isolated: Optional[StrictStr] = None,
        limit_client_order_id: Optional[StrictStr] = None,
        limit_iceberg_qty: Optional[StrictStr] = None,
        list_client_order_id: Optional[StrictStr] = None,
        new_order_resp_type: Optional[StrictStr] = None,
        recv_window: Optional[StrictInt] = None,
        self_trade_prevention_mode: Optional[StrictStr] = None,
        side_effect_type: Optional[StrictStr] = None,
        stop_client_order_id: Optional[StrictStr] = None,
        stop_iceberg_qty: Optional[StrictStr] = None,
        stop_limit_price: Optional[StrictStr] = None,
        stop_limit_time_in_force: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MarginCreateMarginOrderOcoV1Resp]:
        """Margin Account New OCO (TRADE)

        Send in a new OCO for a margin account

        :param price: (required)
        :type price: str
        :param quantity: (required)
        :type quantity: str
        :param side: (required)
        :type side: str
        :param stop_price: (required)
        :type stop_price: str
        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param auto_repay_at_cancel:
        :type auto_repay_at_cancel: bool
        :param is_isolated:
        :type is_isolated: str
        :param limit_client_order_id:
        :type limit_client_order_id: str
        :param limit_iceberg_qty:
        :type limit_iceberg_qty: str
        :param list_client_order_id:
        :type list_client_order_id: str
        :param new_order_resp_type:
        :type new_order_resp_type: str
        :param recv_window:
        :type recv_window: int
        :param self_trade_prevention_mode:
        :type self_trade_prevention_mode: str
        :param side_effect_type:
        :type side_effect_type: str
        :param stop_client_order_id:
        :type stop_client_order_id: str
        :param stop_iceberg_qty:
        :type stop_iceberg_qty: str
        :param stop_limit_price:
        :type stop_limit_price: str
        :param stop_limit_time_in_force:
        :type stop_limit_time_in_force: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_order_oco_v1_serialize(
            price=price,
            quantity=quantity,
            side=side,
            stop_price=stop_price,
            symbol=symbol,
            timestamp=timestamp,
            auto_repay_at_cancel=auto_repay_at_cancel,
            is_isolated=is_isolated,
            limit_client_order_id=limit_client_order_id,
            limit_iceberg_qty=limit_iceberg_qty,
            list_client_order_id=list_client_order_id,
            new_order_resp_type=new_order_resp_type,
            recv_window=recv_window,
            self_trade_prevention_mode=self_trade_prevention_mode,
            side_effect_type=side_effect_type,
            stop_client_order_id=stop_client_order_id,
            stop_iceberg_qty=stop_iceberg_qty,
            stop_limit_price=stop_limit_price,
            stop_limit_time_in_force=stop_limit_time_in_force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginOrderOcoV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_create_margin_order_oco_v1_without_preload_content(
        self,
        price: StrictStr,
        quantity: StrictStr,
        side: StrictStr,
        stop_price: StrictStr,
        symbol: StrictStr,
        timestamp: StrictInt,
        auto_repay_at_cancel: Optional[StrictBool] = None,
        is_isolated: Optional[StrictStr] = None,
        limit_client_order_id: Optional[StrictStr] = None,
        limit_iceberg_qty: Optional[StrictStr] = None,
        list_client_order_id: Optional[StrictStr] = None,
        new_order_resp_type: Optional[StrictStr] = None,
        recv_window: Optional[StrictInt] = None,
        self_trade_prevention_mode: Optional[StrictStr] = None,
        side_effect_type: Optional[StrictStr] = None,
        stop_client_order_id: Optional[StrictStr] = None,
        stop_iceberg_qty: Optional[StrictStr] = None,
        stop_limit_price: Optional[StrictStr] = None,
        stop_limit_time_in_force: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Margin Account New OCO (TRADE)

        Send in a new OCO for a margin account

        :param price: (required)
        :type price: str
        :param quantity: (required)
        :type quantity: str
        :param side: (required)
        :type side: str
        :param stop_price: (required)
        :type stop_price: str
        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param auto_repay_at_cancel:
        :type auto_repay_at_cancel: bool
        :param is_isolated:
        :type is_isolated: str
        :param limit_client_order_id:
        :type limit_client_order_id: str
        :param limit_iceberg_qty:
        :type limit_iceberg_qty: str
        :param list_client_order_id:
        :type list_client_order_id: str
        :param new_order_resp_type:
        :type new_order_resp_type: str
        :param recv_window:
        :type recv_window: int
        :param self_trade_prevention_mode:
        :type self_trade_prevention_mode: str
        :param side_effect_type:
        :type side_effect_type: str
        :param stop_client_order_id:
        :type stop_client_order_id: str
        :param stop_iceberg_qty:
        :type stop_iceberg_qty: str
        :param stop_limit_price:
        :type stop_limit_price: str
        :param stop_limit_time_in_force:
        :type stop_limit_time_in_force: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_order_oco_v1_serialize(
            price=price,
            quantity=quantity,
            side=side,
            stop_price=stop_price,
            symbol=symbol,
            timestamp=timestamp,
            auto_repay_at_cancel=auto_repay_at_cancel,
            is_isolated=is_isolated,
            limit_client_order_id=limit_client_order_id,
            limit_iceberg_qty=limit_iceberg_qty,
            list_client_order_id=list_client_order_id,
            new_order_resp_type=new_order_resp_type,
            recv_window=recv_window,
            self_trade_prevention_mode=self_trade_prevention_mode,
            side_effect_type=side_effect_type,
            stop_client_order_id=stop_client_order_id,
            stop_iceberg_qty=stop_iceberg_qty,
            stop_limit_price=stop_limit_price,
            stop_limit_time_in_force=stop_limit_time_in_force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginOrderOcoV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_create_margin_order_oco_v1_serialize(
        self,
        price,
        quantity,
        side,
        stop_price,
        symbol,
        timestamp,
        auto_repay_at_cancel,
        is_isolated,
        limit_client_order_id,
        limit_iceberg_qty,
        list_client_order_id,
        new_order_resp_type,
        recv_window,
        self_trade_prevention_mode,
        side_effect_type,
        stop_client_order_id,
        stop_iceberg_qty,
        stop_limit_price,
        stop_limit_time_in_force,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if auto_repay_at_cancel is not None:
            _form_params.append(('autoRepayAtCancel', auto_repay_at_cancel))
        if is_isolated is not None:
            _form_params.append(('isIsolated', is_isolated))
        if limit_client_order_id is not None:
            _form_params.append(('limitClientOrderId', limit_client_order_id))
        if limit_iceberg_qty is not None:
            _form_params.append(('limitIcebergQty', limit_iceberg_qty))
        if list_client_order_id is not None:
            _form_params.append(('listClientOrderId', list_client_order_id))
        if new_order_resp_type is not None:
            _form_params.append(('newOrderRespType', new_order_resp_type))
        if price is not None:
            _form_params.append(('price', price))
        if quantity is not None:
            _form_params.append(('quantity', quantity))
        if recv_window is not None:
            _form_params.append(('recvWindow', recv_window))
        if self_trade_prevention_mode is not None:
            _form_params.append(('selfTradePreventionMode', self_trade_prevention_mode))
        if side is not None:
            _form_params.append(('side', side))
        if side_effect_type is not None:
            _form_params.append(('sideEffectType', side_effect_type))
        if stop_client_order_id is not None:
            _form_params.append(('stopClientOrderId', stop_client_order_id))
        if stop_iceberg_qty is not None:
            _form_params.append(('stopIcebergQty', stop_iceberg_qty))
        if stop_limit_price is not None:
            _form_params.append(('stopLimitPrice', stop_limit_price))
        if stop_limit_time_in_force is not None:
            _form_params.append(('stopLimitTimeInForce', stop_limit_time_in_force))
        if stop_price is not None:
            _form_params.append(('stopPrice', stop_price))
        if symbol is not None:
            _form_params.append(('symbol', symbol))
        if timestamp is not None:
            _form_params.append(('timestamp', timestamp))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/sapi/v1/margin/order/oco',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_create_margin_order_oto_v1(
        self,
        pending_quantity: StrictStr,
        pending_side: StrictStr,
        pending_type: StrictStr,
        symbol: StrictStr,
        working_iceberg_qty: StrictStr,
        working_price: StrictStr,
        working_quantity: StrictStr,
        working_side: StrictStr,
        working_type: StrictStr,
        auto_repay_at_cancel: Optional[StrictBool] = None,
        is_isolated: Optional[StrictStr] = None,
        list_client_order_id: Optional[StrictStr] = None,
        new_order_resp_type: Optional[StrictStr] = None,
        pending_client_order_id: Optional[StrictStr] = None,
        pending_iceberg_qty: Optional[StrictStr] = None,
        pending_price: Optional[StrictStr] = None,
        pending_stop_price: Optional[StrictStr] = None,
        pending_time_in_force: Optional[StrictStr] = None,
        pending_trailing_delta: Optional[StrictStr] = None,
        self_trade_prevention_mode: Optional[StrictStr] = None,
        side_effect_type: Optional[StrictStr] = None,
        working_client_order_id: Optional[StrictStr] = None,
        working_time_in_force: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MarginCreateMarginOrderOtoV1Resp:
        """Margin Account New OTO (TRADE)

        Post a new OTO order for margin account:

        :param pending_quantity: (required)
        :type pending_quantity: str
        :param pending_side: (required)
        :type pending_side: str
        :param pending_type: (required)
        :type pending_type: str
        :param symbol: (required)
        :type symbol: str
        :param working_iceberg_qty: (required)
        :type working_iceberg_qty: str
        :param working_price: (required)
        :type working_price: str
        :param working_quantity: (required)
        :type working_quantity: str
        :param working_side: (required)
        :type working_side: str
        :param working_type: (required)
        :type working_type: str
        :param auto_repay_at_cancel:
        :type auto_repay_at_cancel: bool
        :param is_isolated:
        :type is_isolated: str
        :param list_client_order_id:
        :type list_client_order_id: str
        :param new_order_resp_type:
        :type new_order_resp_type: str
        :param pending_client_order_id:
        :type pending_client_order_id: str
        :param pending_iceberg_qty:
        :type pending_iceberg_qty: str
        :param pending_price:
        :type pending_price: str
        :param pending_stop_price:
        :type pending_stop_price: str
        :param pending_time_in_force:
        :type pending_time_in_force: str
        :param pending_trailing_delta:
        :type pending_trailing_delta: str
        :param self_trade_prevention_mode:
        :type self_trade_prevention_mode: str
        :param side_effect_type:
        :type side_effect_type: str
        :param working_client_order_id:
        :type working_client_order_id: str
        :param working_time_in_force:
        :type working_time_in_force: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_order_oto_v1_serialize(
            pending_quantity=pending_quantity,
            pending_side=pending_side,
            pending_type=pending_type,
            symbol=symbol,
            working_iceberg_qty=working_iceberg_qty,
            working_price=working_price,
            working_quantity=working_quantity,
            working_side=working_side,
            working_type=working_type,
            auto_repay_at_cancel=auto_repay_at_cancel,
            is_isolated=is_isolated,
            list_client_order_id=list_client_order_id,
            new_order_resp_type=new_order_resp_type,
            pending_client_order_id=pending_client_order_id,
            pending_iceberg_qty=pending_iceberg_qty,
            pending_price=pending_price,
            pending_stop_price=pending_stop_price,
            pending_time_in_force=pending_time_in_force,
            pending_trailing_delta=pending_trailing_delta,
            self_trade_prevention_mode=self_trade_prevention_mode,
            side_effect_type=side_effect_type,
            working_client_order_id=working_client_order_id,
            working_time_in_force=working_time_in_force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginOrderOtoV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_create_margin_order_oto_v1_with_http_info(
        self,
        pending_quantity: StrictStr,
        pending_side: StrictStr,
        pending_type: StrictStr,
        symbol: StrictStr,
        working_iceberg_qty: StrictStr,
        working_price: StrictStr,
        working_quantity: StrictStr,
        working_side: StrictStr,
        working_type: StrictStr,
        auto_repay_at_cancel: Optional[StrictBool] = None,
        is_isolated: Optional[StrictStr] = None,
        list_client_order_id: Optional[StrictStr] = None,
        new_order_resp_type: Optional[StrictStr] = None,
        pending_client_order_id: Optional[StrictStr] = None,
        pending_iceberg_qty: Optional[StrictStr] = None,
        pending_price: Optional[StrictStr] = None,
        pending_stop_price: Optional[StrictStr] = None,
        pending_time_in_force: Optional[StrictStr] = None,
        pending_trailing_delta: Optional[StrictStr] = None,
        self_trade_prevention_mode: Optional[StrictStr] = None,
        side_effect_type: Optional[StrictStr] = None,
        working_client_order_id: Optional[StrictStr] = None,
        working_time_in_force: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MarginCreateMarginOrderOtoV1Resp]:
        """Margin Account New OTO (TRADE)

        Post a new OTO order for margin account:

        :param pending_quantity: (required)
        :type pending_quantity: str
        :param pending_side: (required)
        :type pending_side: str
        :param pending_type: (required)
        :type pending_type: str
        :param symbol: (required)
        :type symbol: str
        :param working_iceberg_qty: (required)
        :type working_iceberg_qty: str
        :param working_price: (required)
        :type working_price: str
        :param working_quantity: (required)
        :type working_quantity: str
        :param working_side: (required)
        :type working_side: str
        :param working_type: (required)
        :type working_type: str
        :param auto_repay_at_cancel:
        :type auto_repay_at_cancel: bool
        :param is_isolated:
        :type is_isolated: str
        :param list_client_order_id:
        :type list_client_order_id: str
        :param new_order_resp_type:
        :type new_order_resp_type: str
        :param pending_client_order_id:
        :type pending_client_order_id: str
        :param pending_iceberg_qty:
        :type pending_iceberg_qty: str
        :param pending_price:
        :type pending_price: str
        :param pending_stop_price:
        :type pending_stop_price: str
        :param pending_time_in_force:
        :type pending_time_in_force: str
        :param pending_trailing_delta:
        :type pending_trailing_delta: str
        :param self_trade_prevention_mode:
        :type self_trade_prevention_mode: str
        :param side_effect_type:
        :type side_effect_type: str
        :param working_client_order_id:
        :type working_client_order_id: str
        :param working_time_in_force:
        :type working_time_in_force: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_order_oto_v1_serialize(
            pending_quantity=pending_quantity,
            pending_side=pending_side,
            pending_type=pending_type,
            symbol=symbol,
            working_iceberg_qty=working_iceberg_qty,
            working_price=working_price,
            working_quantity=working_quantity,
            working_side=working_side,
            working_type=working_type,
            auto_repay_at_cancel=auto_repay_at_cancel,
            is_isolated=is_isolated,
            list_client_order_id=list_client_order_id,
            new_order_resp_type=new_order_resp_type,
            pending_client_order_id=pending_client_order_id,
            pending_iceberg_qty=pending_iceberg_qty,
            pending_price=pending_price,
            pending_stop_price=pending_stop_price,
            pending_time_in_force=pending_time_in_force,
            pending_trailing_delta=pending_trailing_delta,
            self_trade_prevention_mode=self_trade_prevention_mode,
            side_effect_type=side_effect_type,
            working_client_order_id=working_client_order_id,
            working_time_in_force=working_time_in_force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginOrderOtoV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_create_margin_order_oto_v1_without_preload_content(
        self,
        pending_quantity: StrictStr,
        pending_side: StrictStr,
        pending_type: StrictStr,
        symbol: StrictStr,
        working_iceberg_qty: StrictStr,
        working_price: StrictStr,
        working_quantity: StrictStr,
        working_side: StrictStr,
        working_type: StrictStr,
        auto_repay_at_cancel: Optional[StrictBool] = None,
        is_isolated: Optional[StrictStr] = None,
        list_client_order_id: Optional[StrictStr] = None,
        new_order_resp_type: Optional[StrictStr] = None,
        pending_client_order_id: Optional[StrictStr] = None,
        pending_iceberg_qty: Optional[StrictStr] = None,
        pending_price: Optional[StrictStr] = None,
        pending_stop_price: Optional[StrictStr] = None,
        pending_time_in_force: Optional[StrictStr] = None,
        pending_trailing_delta: Optional[StrictStr] = None,
        self_trade_prevention_mode: Optional[StrictStr] = None,
        side_effect_type: Optional[StrictStr] = None,
        working_client_order_id: Optional[StrictStr] = None,
        working_time_in_force: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Margin Account New OTO (TRADE)

        Post a new OTO order for margin account:

        :param pending_quantity: (required)
        :type pending_quantity: str
        :param pending_side: (required)
        :type pending_side: str
        :param pending_type: (required)
        :type pending_type: str
        :param symbol: (required)
        :type symbol: str
        :param working_iceberg_qty: (required)
        :type working_iceberg_qty: str
        :param working_price: (required)
        :type working_price: str
        :param working_quantity: (required)
        :type working_quantity: str
        :param working_side: (required)
        :type working_side: str
        :param working_type: (required)
        :type working_type: str
        :param auto_repay_at_cancel:
        :type auto_repay_at_cancel: bool
        :param is_isolated:
        :type is_isolated: str
        :param list_client_order_id:
        :type list_client_order_id: str
        :param new_order_resp_type:
        :type new_order_resp_type: str
        :param pending_client_order_id:
        :type pending_client_order_id: str
        :param pending_iceberg_qty:
        :type pending_iceberg_qty: str
        :param pending_price:
        :type pending_price: str
        :param pending_stop_price:
        :type pending_stop_price: str
        :param pending_time_in_force:
        :type pending_time_in_force: str
        :param pending_trailing_delta:
        :type pending_trailing_delta: str
        :param self_trade_prevention_mode:
        :type self_trade_prevention_mode: str
        :param side_effect_type:
        :type side_effect_type: str
        :param working_client_order_id:
        :type working_client_order_id: str
        :param working_time_in_force:
        :type working_time_in_force: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_order_oto_v1_serialize(
            pending_quantity=pending_quantity,
            pending_side=pending_side,
            pending_type=pending_type,
            symbol=symbol,
            working_iceberg_qty=working_iceberg_qty,
            working_price=working_price,
            working_quantity=working_quantity,
            working_side=working_side,
            working_type=working_type,
            auto_repay_at_cancel=auto_repay_at_cancel,
            is_isolated=is_isolated,
            list_client_order_id=list_client_order_id,
            new_order_resp_type=new_order_resp_type,
            pending_client_order_id=pending_client_order_id,
            pending_iceberg_qty=pending_iceberg_qty,
            pending_price=pending_price,
            pending_stop_price=pending_stop_price,
            pending_time_in_force=pending_time_in_force,
            pending_trailing_delta=pending_trailing_delta,
            self_trade_prevention_mode=self_trade_prevention_mode,
            side_effect_type=side_effect_type,
            working_client_order_id=working_client_order_id,
            working_time_in_force=working_time_in_force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginOrderOtoV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_create_margin_order_oto_v1_serialize(
        self,
        pending_quantity,
        pending_side,
        pending_type,
        symbol,
        working_iceberg_qty,
        working_price,
        working_quantity,
        working_side,
        working_type,
        auto_repay_at_cancel,
        is_isolated,
        list_client_order_id,
        new_order_resp_type,
        pending_client_order_id,
        pending_iceberg_qty,
        pending_price,
        pending_stop_price,
        pending_time_in_force,
        pending_trailing_delta,
        self_trade_prevention_mode,
        side_effect_type,
        working_client_order_id,
        working_time_in_force,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if auto_repay_at_cancel is not None:
            _form_params.append(('autoRepayAtCancel', auto_repay_at_cancel))
        if is_isolated is not None:
            _form_params.append(('isIsolated', is_isolated))
        if list_client_order_id is not None:
            _form_params.append(('listClientOrderId', list_client_order_id))
        if new_order_resp_type is not None:
            _form_params.append(('newOrderRespType', new_order_resp_type))
        if pending_client_order_id is not None:
            _form_params.append(('pendingClientOrderId', pending_client_order_id))
        if pending_iceberg_qty is not None:
            _form_params.append(('pendingIcebergQty', pending_iceberg_qty))
        if pending_price is not None:
            _form_params.append(('pendingPrice', pending_price))
        if pending_quantity is not None:
            _form_params.append(('pendingQuantity', pending_quantity))
        if pending_side is not None:
            _form_params.append(('pendingSide', pending_side))
        if pending_stop_price is not None:
            _form_params.append(('pendingStopPrice', pending_stop_price))
        if pending_time_in_force is not None:
            _form_params.append(('pendingTimeInForce', pending_time_in_force))
        if pending_trailing_delta is not None:
            _form_params.append(('pendingTrailingDelta', pending_trailing_delta))
        if pending_type is not None:
            _form_params.append(('pendingType', pending_type))
        if self_trade_prevention_mode is not None:
            _form_params.append(('selfTradePreventionMode', self_trade_prevention_mode))
        if side_effect_type is not None:
            _form_params.append(('sideEffectType', side_effect_type))
        if symbol is not None:
            _form_params.append(('symbol', symbol))
        if working_client_order_id is not None:
            _form_params.append(('workingClientOrderId', working_client_order_id))
        if working_iceberg_qty is not None:
            _form_params.append(('workingIcebergQty', working_iceberg_qty))
        if working_price is not None:
            _form_params.append(('workingPrice', working_price))
        if working_quantity is not None:
            _form_params.append(('workingQuantity', working_quantity))
        if working_side is not None:
            _form_params.append(('workingSide', working_side))
        if working_time_in_force is not None:
            _form_params.append(('workingTimeInForce', working_time_in_force))
        if working_type is not None:
            _form_params.append(('workingType', working_type))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/sapi/v1/margin/order/oto',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_create_margin_order_otoco_v1(
        self,
        pending_above_type: StrictStr,
        pending_quantity: StrictStr,
        pending_side: StrictStr,
        symbol: StrictStr,
        working_price: StrictStr,
        working_quantity: StrictStr,
        working_side: StrictStr,
        working_type: StrictStr,
        auto_repay_at_cancel: Optional[StrictBool] = None,
        is_isolated: Optional[StrictStr] = None,
        list_client_order_id: Optional[StrictStr] = None,
        new_order_resp_type: Optional[StrictStr] = None,
        pending_above_client_order_id: Optional[StrictStr] = None,
        pending_above_iceberg_qty: Optional[StrictStr] = None,
        pending_above_price: Optional[StrictStr] = None,
        pending_above_stop_price: Optional[StrictStr] = None,
        pending_above_time_in_force: Optional[StrictStr] = None,
        pending_above_trailing_delta: Optional[StrictStr] = None,
        pending_below_client_order_id: Optional[StrictStr] = None,
        pending_below_iceberg_qty: Optional[StrictStr] = None,
        pending_below_price: Optional[StrictStr] = None,
        pending_below_stop_price: Optional[StrictStr] = None,
        pending_below_time_in_force: Optional[StrictStr] = None,
        pending_below_trailing_delta: Optional[StrictStr] = None,
        pending_below_type: Optional[StrictStr] = None,
        self_trade_prevention_mode: Optional[StrictStr] = None,
        side_effect_type: Optional[StrictStr] = None,
        working_client_order_id: Optional[StrictStr] = None,
        working_iceberg_qty: Optional[StrictStr] = None,
        working_time_in_force: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MarginCreateMarginOrderOtocoV1Resp:
        """Margin Account New OTOCO (TRADE)

        Post a new OTOCO order for margin account：

        :param pending_above_type: (required)
        :type pending_above_type: str
        :param pending_quantity: (required)
        :type pending_quantity: str
        :param pending_side: (required)
        :type pending_side: str
        :param symbol: (required)
        :type symbol: str
        :param working_price: (required)
        :type working_price: str
        :param working_quantity: (required)
        :type working_quantity: str
        :param working_side: (required)
        :type working_side: str
        :param working_type: (required)
        :type working_type: str
        :param auto_repay_at_cancel:
        :type auto_repay_at_cancel: bool
        :param is_isolated:
        :type is_isolated: str
        :param list_client_order_id:
        :type list_client_order_id: str
        :param new_order_resp_type:
        :type new_order_resp_type: str
        :param pending_above_client_order_id:
        :type pending_above_client_order_id: str
        :param pending_above_iceberg_qty:
        :type pending_above_iceberg_qty: str
        :param pending_above_price:
        :type pending_above_price: str
        :param pending_above_stop_price:
        :type pending_above_stop_price: str
        :param pending_above_time_in_force:
        :type pending_above_time_in_force: str
        :param pending_above_trailing_delta:
        :type pending_above_trailing_delta: str
        :param pending_below_client_order_id:
        :type pending_below_client_order_id: str
        :param pending_below_iceberg_qty:
        :type pending_below_iceberg_qty: str
        :param pending_below_price:
        :type pending_below_price: str
        :param pending_below_stop_price:
        :type pending_below_stop_price: str
        :param pending_below_time_in_force:
        :type pending_below_time_in_force: str
        :param pending_below_trailing_delta:
        :type pending_below_trailing_delta: str
        :param pending_below_type:
        :type pending_below_type: str
        :param self_trade_prevention_mode:
        :type self_trade_prevention_mode: str
        :param side_effect_type:
        :type side_effect_type: str
        :param working_client_order_id:
        :type working_client_order_id: str
        :param working_iceberg_qty:
        :type working_iceberg_qty: str
        :param working_time_in_force:
        :type working_time_in_force: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_order_otoco_v1_serialize(
            pending_above_type=pending_above_type,
            pending_quantity=pending_quantity,
            pending_side=pending_side,
            symbol=symbol,
            working_price=working_price,
            working_quantity=working_quantity,
            working_side=working_side,
            working_type=working_type,
            auto_repay_at_cancel=auto_repay_at_cancel,
            is_isolated=is_isolated,
            list_client_order_id=list_client_order_id,
            new_order_resp_type=new_order_resp_type,
            pending_above_client_order_id=pending_above_client_order_id,
            pending_above_iceberg_qty=pending_above_iceberg_qty,
            pending_above_price=pending_above_price,
            pending_above_stop_price=pending_above_stop_price,
            pending_above_time_in_force=pending_above_time_in_force,
            pending_above_trailing_delta=pending_above_trailing_delta,
            pending_below_client_order_id=pending_below_client_order_id,
            pending_below_iceberg_qty=pending_below_iceberg_qty,
            pending_below_price=pending_below_price,
            pending_below_stop_price=pending_below_stop_price,
            pending_below_time_in_force=pending_below_time_in_force,
            pending_below_trailing_delta=pending_below_trailing_delta,
            pending_below_type=pending_below_type,
            self_trade_prevention_mode=self_trade_prevention_mode,
            side_effect_type=side_effect_type,
            working_client_order_id=working_client_order_id,
            working_iceberg_qty=working_iceberg_qty,
            working_time_in_force=working_time_in_force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginOrderOtocoV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_create_margin_order_otoco_v1_with_http_info(
        self,
        pending_above_type: StrictStr,
        pending_quantity: StrictStr,
        pending_side: StrictStr,
        symbol: StrictStr,
        working_price: StrictStr,
        working_quantity: StrictStr,
        working_side: StrictStr,
        working_type: StrictStr,
        auto_repay_at_cancel: Optional[StrictBool] = None,
        is_isolated: Optional[StrictStr] = None,
        list_client_order_id: Optional[StrictStr] = None,
        new_order_resp_type: Optional[StrictStr] = None,
        pending_above_client_order_id: Optional[StrictStr] = None,
        pending_above_iceberg_qty: Optional[StrictStr] = None,
        pending_above_price: Optional[StrictStr] = None,
        pending_above_stop_price: Optional[StrictStr] = None,
        pending_above_time_in_force: Optional[StrictStr] = None,
        pending_above_trailing_delta: Optional[StrictStr] = None,
        pending_below_client_order_id: Optional[StrictStr] = None,
        pending_below_iceberg_qty: Optional[StrictStr] = None,
        pending_below_price: Optional[StrictStr] = None,
        pending_below_stop_price: Optional[StrictStr] = None,
        pending_below_time_in_force: Optional[StrictStr] = None,
        pending_below_trailing_delta: Optional[StrictStr] = None,
        pending_below_type: Optional[StrictStr] = None,
        self_trade_prevention_mode: Optional[StrictStr] = None,
        side_effect_type: Optional[StrictStr] = None,
        working_client_order_id: Optional[StrictStr] = None,
        working_iceberg_qty: Optional[StrictStr] = None,
        working_time_in_force: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MarginCreateMarginOrderOtocoV1Resp]:
        """Margin Account New OTOCO (TRADE)

        Post a new OTOCO order for margin account：

        :param pending_above_type: (required)
        :type pending_above_type: str
        :param pending_quantity: (required)
        :type pending_quantity: str
        :param pending_side: (required)
        :type pending_side: str
        :param symbol: (required)
        :type symbol: str
        :param working_price: (required)
        :type working_price: str
        :param working_quantity: (required)
        :type working_quantity: str
        :param working_side: (required)
        :type working_side: str
        :param working_type: (required)
        :type working_type: str
        :param auto_repay_at_cancel:
        :type auto_repay_at_cancel: bool
        :param is_isolated:
        :type is_isolated: str
        :param list_client_order_id:
        :type list_client_order_id: str
        :param new_order_resp_type:
        :type new_order_resp_type: str
        :param pending_above_client_order_id:
        :type pending_above_client_order_id: str
        :param pending_above_iceberg_qty:
        :type pending_above_iceberg_qty: str
        :param pending_above_price:
        :type pending_above_price: str
        :param pending_above_stop_price:
        :type pending_above_stop_price: str
        :param pending_above_time_in_force:
        :type pending_above_time_in_force: str
        :param pending_above_trailing_delta:
        :type pending_above_trailing_delta: str
        :param pending_below_client_order_id:
        :type pending_below_client_order_id: str
        :param pending_below_iceberg_qty:
        :type pending_below_iceberg_qty: str
        :param pending_below_price:
        :type pending_below_price: str
        :param pending_below_stop_price:
        :type pending_below_stop_price: str
        :param pending_below_time_in_force:
        :type pending_below_time_in_force: str
        :param pending_below_trailing_delta:
        :type pending_below_trailing_delta: str
        :param pending_below_type:
        :type pending_below_type: str
        :param self_trade_prevention_mode:
        :type self_trade_prevention_mode: str
        :param side_effect_type:
        :type side_effect_type: str
        :param working_client_order_id:
        :type working_client_order_id: str
        :param working_iceberg_qty:
        :type working_iceberg_qty: str
        :param working_time_in_force:
        :type working_time_in_force: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_order_otoco_v1_serialize(
            pending_above_type=pending_above_type,
            pending_quantity=pending_quantity,
            pending_side=pending_side,
            symbol=symbol,
            working_price=working_price,
            working_quantity=working_quantity,
            working_side=working_side,
            working_type=working_type,
            auto_repay_at_cancel=auto_repay_at_cancel,
            is_isolated=is_isolated,
            list_client_order_id=list_client_order_id,
            new_order_resp_type=new_order_resp_type,
            pending_above_client_order_id=pending_above_client_order_id,
            pending_above_iceberg_qty=pending_above_iceberg_qty,
            pending_above_price=pending_above_price,
            pending_above_stop_price=pending_above_stop_price,
            pending_above_time_in_force=pending_above_time_in_force,
            pending_above_trailing_delta=pending_above_trailing_delta,
            pending_below_client_order_id=pending_below_client_order_id,
            pending_below_iceberg_qty=pending_below_iceberg_qty,
            pending_below_price=pending_below_price,
            pending_below_stop_price=pending_below_stop_price,
            pending_below_time_in_force=pending_below_time_in_force,
            pending_below_trailing_delta=pending_below_trailing_delta,
            pending_below_type=pending_below_type,
            self_trade_prevention_mode=self_trade_prevention_mode,
            side_effect_type=side_effect_type,
            working_client_order_id=working_client_order_id,
            working_iceberg_qty=working_iceberg_qty,
            working_time_in_force=working_time_in_force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginOrderOtocoV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_create_margin_order_otoco_v1_without_preload_content(
        self,
        pending_above_type: StrictStr,
        pending_quantity: StrictStr,
        pending_side: StrictStr,
        symbol: StrictStr,
        working_price: StrictStr,
        working_quantity: StrictStr,
        working_side: StrictStr,
        working_type: StrictStr,
        auto_repay_at_cancel: Optional[StrictBool] = None,
        is_isolated: Optional[StrictStr] = None,
        list_client_order_id: Optional[StrictStr] = None,
        new_order_resp_type: Optional[StrictStr] = None,
        pending_above_client_order_id: Optional[StrictStr] = None,
        pending_above_iceberg_qty: Optional[StrictStr] = None,
        pending_above_price: Optional[StrictStr] = None,
        pending_above_stop_price: Optional[StrictStr] = None,
        pending_above_time_in_force: Optional[StrictStr] = None,
        pending_above_trailing_delta: Optional[StrictStr] = None,
        pending_below_client_order_id: Optional[StrictStr] = None,
        pending_below_iceberg_qty: Optional[StrictStr] = None,
        pending_below_price: Optional[StrictStr] = None,
        pending_below_stop_price: Optional[StrictStr] = None,
        pending_below_time_in_force: Optional[StrictStr] = None,
        pending_below_trailing_delta: Optional[StrictStr] = None,
        pending_below_type: Optional[StrictStr] = None,
        self_trade_prevention_mode: Optional[StrictStr] = None,
        side_effect_type: Optional[StrictStr] = None,
        working_client_order_id: Optional[StrictStr] = None,
        working_iceberg_qty: Optional[StrictStr] = None,
        working_time_in_force: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Margin Account New OTOCO (TRADE)

        Post a new OTOCO order for margin account：

        :param pending_above_type: (required)
        :type pending_above_type: str
        :param pending_quantity: (required)
        :type pending_quantity: str
        :param pending_side: (required)
        :type pending_side: str
        :param symbol: (required)
        :type symbol: str
        :param working_price: (required)
        :type working_price: str
        :param working_quantity: (required)
        :type working_quantity: str
        :param working_side: (required)
        :type working_side: str
        :param working_type: (required)
        :type working_type: str
        :param auto_repay_at_cancel:
        :type auto_repay_at_cancel: bool
        :param is_isolated:
        :type is_isolated: str
        :param list_client_order_id:
        :type list_client_order_id: str
        :param new_order_resp_type:
        :type new_order_resp_type: str
        :param pending_above_client_order_id:
        :type pending_above_client_order_id: str
        :param pending_above_iceberg_qty:
        :type pending_above_iceberg_qty: str
        :param pending_above_price:
        :type pending_above_price: str
        :param pending_above_stop_price:
        :type pending_above_stop_price: str
        :param pending_above_time_in_force:
        :type pending_above_time_in_force: str
        :param pending_above_trailing_delta:
        :type pending_above_trailing_delta: str
        :param pending_below_client_order_id:
        :type pending_below_client_order_id: str
        :param pending_below_iceberg_qty:
        :type pending_below_iceberg_qty: str
        :param pending_below_price:
        :type pending_below_price: str
        :param pending_below_stop_price:
        :type pending_below_stop_price: str
        :param pending_below_time_in_force:
        :type pending_below_time_in_force: str
        :param pending_below_trailing_delta:
        :type pending_below_trailing_delta: str
        :param pending_below_type:
        :type pending_below_type: str
        :param self_trade_prevention_mode:
        :type self_trade_prevention_mode: str
        :param side_effect_type:
        :type side_effect_type: str
        :param working_client_order_id:
        :type working_client_order_id: str
        :param working_iceberg_qty:
        :type working_iceberg_qty: str
        :param working_time_in_force:
        :type working_time_in_force: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_order_otoco_v1_serialize(
            pending_above_type=pending_above_type,
            pending_quantity=pending_quantity,
            pending_side=pending_side,
            symbol=symbol,
            working_price=working_price,
            working_quantity=working_quantity,
            working_side=working_side,
            working_type=working_type,
            auto_repay_at_cancel=auto_repay_at_cancel,
            is_isolated=is_isolated,
            list_client_order_id=list_client_order_id,
            new_order_resp_type=new_order_resp_type,
            pending_above_client_order_id=pending_above_client_order_id,
            pending_above_iceberg_qty=pending_above_iceberg_qty,
            pending_above_price=pending_above_price,
            pending_above_stop_price=pending_above_stop_price,
            pending_above_time_in_force=pending_above_time_in_force,
            pending_above_trailing_delta=pending_above_trailing_delta,
            pending_below_client_order_id=pending_below_client_order_id,
            pending_below_iceberg_qty=pending_below_iceberg_qty,
            pending_below_price=pending_below_price,
            pending_below_stop_price=pending_below_stop_price,
            pending_below_time_in_force=pending_below_time_in_force,
            pending_below_trailing_delta=pending_below_trailing_delta,
            pending_below_type=pending_below_type,
            self_trade_prevention_mode=self_trade_prevention_mode,
            side_effect_type=side_effect_type,
            working_client_order_id=working_client_order_id,
            working_iceberg_qty=working_iceberg_qty,
            working_time_in_force=working_time_in_force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginOrderOtocoV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_create_margin_order_otoco_v1_serialize(
        self,
        pending_above_type,
        pending_quantity,
        pending_side,
        symbol,
        working_price,
        working_quantity,
        working_side,
        working_type,
        auto_repay_at_cancel,
        is_isolated,
        list_client_order_id,
        new_order_resp_type,
        pending_above_client_order_id,
        pending_above_iceberg_qty,
        pending_above_price,
        pending_above_stop_price,
        pending_above_time_in_force,
        pending_above_trailing_delta,
        pending_below_client_order_id,
        pending_below_iceberg_qty,
        pending_below_price,
        pending_below_stop_price,
        pending_below_time_in_force,
        pending_below_trailing_delta,
        pending_below_type,
        self_trade_prevention_mode,
        side_effect_type,
        working_client_order_id,
        working_iceberg_qty,
        working_time_in_force,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if auto_repay_at_cancel is not None:
            _form_params.append(('autoRepayAtCancel', auto_repay_at_cancel))
        if is_isolated is not None:
            _form_params.append(('isIsolated', is_isolated))
        if list_client_order_id is not None:
            _form_params.append(('listClientOrderId', list_client_order_id))
        if new_order_resp_type is not None:
            _form_params.append(('newOrderRespType', new_order_resp_type))
        if pending_above_client_order_id is not None:
            _form_params.append(('pendingAboveClientOrderId', pending_above_client_order_id))
        if pending_above_iceberg_qty is not None:
            _form_params.append(('pendingAboveIcebergQty', pending_above_iceberg_qty))
        if pending_above_price is not None:
            _form_params.append(('pendingAbovePrice', pending_above_price))
        if pending_above_stop_price is not None:
            _form_params.append(('pendingAboveStopPrice', pending_above_stop_price))
        if pending_above_time_in_force is not None:
            _form_params.append(('pendingAboveTimeInForce', pending_above_time_in_force))
        if pending_above_trailing_delta is not None:
            _form_params.append(('pendingAboveTrailingDelta', pending_above_trailing_delta))
        if pending_above_type is not None:
            _form_params.append(('pendingAboveType', pending_above_type))
        if pending_below_client_order_id is not None:
            _form_params.append(('pendingBelowClientOrderId', pending_below_client_order_id))
        if pending_below_iceberg_qty is not None:
            _form_params.append(('pendingBelowIcebergQty', pending_below_iceberg_qty))
        if pending_below_price is not None:
            _form_params.append(('pendingBelowPrice', pending_below_price))
        if pending_below_stop_price is not None:
            _form_params.append(('pendingBelowStopPrice', pending_below_stop_price))
        if pending_below_time_in_force is not None:
            _form_params.append(('pendingBelowTimeInForce', pending_below_time_in_force))
        if pending_below_trailing_delta is not None:
            _form_params.append(('pendingBelowTrailingDelta', pending_below_trailing_delta))
        if pending_below_type is not None:
            _form_params.append(('pendingBelowType', pending_below_type))
        if pending_quantity is not None:
            _form_params.append(('pendingQuantity', pending_quantity))
        if pending_side is not None:
            _form_params.append(('pendingSide', pending_side))
        if self_trade_prevention_mode is not None:
            _form_params.append(('selfTradePreventionMode', self_trade_prevention_mode))
        if side_effect_type is not None:
            _form_params.append(('sideEffectType', side_effect_type))
        if symbol is not None:
            _form_params.append(('symbol', symbol))
        if working_client_order_id is not None:
            _form_params.append(('workingClientOrderId', working_client_order_id))
        if working_iceberg_qty is not None:
            _form_params.append(('workingIcebergQty', working_iceberg_qty))
        if working_price is not None:
            _form_params.append(('workingPrice', working_price))
        if working_quantity is not None:
            _form_params.append(('workingQuantity', working_quantity))
        if working_side is not None:
            _form_params.append(('workingSide', working_side))
        if working_time_in_force is not None:
            _form_params.append(('workingTimeInForce', working_time_in_force))
        if working_type is not None:
            _form_params.append(('workingType', working_type))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/sapi/v1/margin/order/otoco',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_create_margin_order_v1(
        self,
        side: StrictStr,
        symbol: StrictStr,
        timestamp: StrictInt,
        type: StrictStr,
        auto_repay_at_cancel: Optional[StrictBool] = None,
        iceberg_qty: Optional[StrictStr] = None,
        is_isolated: Optional[StrictStr] = None,
        new_client_order_id: Optional[StrictStr] = None,
        new_order_resp_type: Optional[StrictStr] = None,
        price: Optional[StrictStr] = None,
        quantity: Optional[StrictStr] = None,
        quote_order_qty: Optional[StrictStr] = None,
        recv_window: Optional[StrictInt] = None,
        self_trade_prevention_mode: Optional[StrictStr] = None,
        side_effect_type: Optional[StrictStr] = None,
        stop_price: Optional[StrictStr] = None,
        time_in_force: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MarginCreateMarginOrderV1Resp:
        """Margin Account New Order (TRADE)

        Post a new order for margin account.

        :param side: (required)
        :type side: str
        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param type: (required)
        :type type: str
        :param auto_repay_at_cancel:
        :type auto_repay_at_cancel: bool
        :param iceberg_qty:
        :type iceberg_qty: str
        :param is_isolated:
        :type is_isolated: str
        :param new_client_order_id:
        :type new_client_order_id: str
        :param new_order_resp_type:
        :type new_order_resp_type: str
        :param price:
        :type price: str
        :param quantity:
        :type quantity: str
        :param quote_order_qty:
        :type quote_order_qty: str
        :param recv_window:
        :type recv_window: int
        :param self_trade_prevention_mode:
        :type self_trade_prevention_mode: str
        :param side_effect_type:
        :type side_effect_type: str
        :param stop_price:
        :type stop_price: str
        :param time_in_force:
        :type time_in_force: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_order_v1_serialize(
            side=side,
            symbol=symbol,
            timestamp=timestamp,
            type=type,
            auto_repay_at_cancel=auto_repay_at_cancel,
            iceberg_qty=iceberg_qty,
            is_isolated=is_isolated,
            new_client_order_id=new_client_order_id,
            new_order_resp_type=new_order_resp_type,
            price=price,
            quantity=quantity,
            quote_order_qty=quote_order_qty,
            recv_window=recv_window,
            self_trade_prevention_mode=self_trade_prevention_mode,
            side_effect_type=side_effect_type,
            stop_price=stop_price,
            time_in_force=time_in_force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginOrderV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_create_margin_order_v1_with_http_info(
        self,
        side: StrictStr,
        symbol: StrictStr,
        timestamp: StrictInt,
        type: StrictStr,
        auto_repay_at_cancel: Optional[StrictBool] = None,
        iceberg_qty: Optional[StrictStr] = None,
        is_isolated: Optional[StrictStr] = None,
        new_client_order_id: Optional[StrictStr] = None,
        new_order_resp_type: Optional[StrictStr] = None,
        price: Optional[StrictStr] = None,
        quantity: Optional[StrictStr] = None,
        quote_order_qty: Optional[StrictStr] = None,
        recv_window: Optional[StrictInt] = None,
        self_trade_prevention_mode: Optional[StrictStr] = None,
        side_effect_type: Optional[StrictStr] = None,
        stop_price: Optional[StrictStr] = None,
        time_in_force: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MarginCreateMarginOrderV1Resp]:
        """Margin Account New Order (TRADE)

        Post a new order for margin account.

        :param side: (required)
        :type side: str
        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param type: (required)
        :type type: str
        :param auto_repay_at_cancel:
        :type auto_repay_at_cancel: bool
        :param iceberg_qty:
        :type iceberg_qty: str
        :param is_isolated:
        :type is_isolated: str
        :param new_client_order_id:
        :type new_client_order_id: str
        :param new_order_resp_type:
        :type new_order_resp_type: str
        :param price:
        :type price: str
        :param quantity:
        :type quantity: str
        :param quote_order_qty:
        :type quote_order_qty: str
        :param recv_window:
        :type recv_window: int
        :param self_trade_prevention_mode:
        :type self_trade_prevention_mode: str
        :param side_effect_type:
        :type side_effect_type: str
        :param stop_price:
        :type stop_price: str
        :param time_in_force:
        :type time_in_force: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_order_v1_serialize(
            side=side,
            symbol=symbol,
            timestamp=timestamp,
            type=type,
            auto_repay_at_cancel=auto_repay_at_cancel,
            iceberg_qty=iceberg_qty,
            is_isolated=is_isolated,
            new_client_order_id=new_client_order_id,
            new_order_resp_type=new_order_resp_type,
            price=price,
            quantity=quantity,
            quote_order_qty=quote_order_qty,
            recv_window=recv_window,
            self_trade_prevention_mode=self_trade_prevention_mode,
            side_effect_type=side_effect_type,
            stop_price=stop_price,
            time_in_force=time_in_force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginOrderV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_create_margin_order_v1_without_preload_content(
        self,
        side: StrictStr,
        symbol: StrictStr,
        timestamp: StrictInt,
        type: StrictStr,
        auto_repay_at_cancel: Optional[StrictBool] = None,
        iceberg_qty: Optional[StrictStr] = None,
        is_isolated: Optional[StrictStr] = None,
        new_client_order_id: Optional[StrictStr] = None,
        new_order_resp_type: Optional[StrictStr] = None,
        price: Optional[StrictStr] = None,
        quantity: Optional[StrictStr] = None,
        quote_order_qty: Optional[StrictStr] = None,
        recv_window: Optional[StrictInt] = None,
        self_trade_prevention_mode: Optional[StrictStr] = None,
        side_effect_type: Optional[StrictStr] = None,
        stop_price: Optional[StrictStr] = None,
        time_in_force: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Margin Account New Order (TRADE)

        Post a new order for margin account.

        :param side: (required)
        :type side: str
        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param type: (required)
        :type type: str
        :param auto_repay_at_cancel:
        :type auto_repay_at_cancel: bool
        :param iceberg_qty:
        :type iceberg_qty: str
        :param is_isolated:
        :type is_isolated: str
        :param new_client_order_id:
        :type new_client_order_id: str
        :param new_order_resp_type:
        :type new_order_resp_type: str
        :param price:
        :type price: str
        :param quantity:
        :type quantity: str
        :param quote_order_qty:
        :type quote_order_qty: str
        :param recv_window:
        :type recv_window: int
        :param self_trade_prevention_mode:
        :type self_trade_prevention_mode: str
        :param side_effect_type:
        :type side_effect_type: str
        :param stop_price:
        :type stop_price: str
        :param time_in_force:
        :type time_in_force: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_create_margin_order_v1_serialize(
            side=side,
            symbol=symbol,
            timestamp=timestamp,
            type=type,
            auto_repay_at_cancel=auto_repay_at_cancel,
            iceberg_qty=iceberg_qty,
            is_isolated=is_isolated,
            new_client_order_id=new_client_order_id,
            new_order_resp_type=new_order_resp_type,
            price=price,
            quantity=quantity,
            quote_order_qty=quote_order_qty,
            recv_window=recv_window,
            self_trade_prevention_mode=self_trade_prevention_mode,
            side_effect_type=side_effect_type,
            stop_price=stop_price,
            time_in_force=time_in_force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginCreateMarginOrderV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_create_margin_order_v1_serialize(
        self,
        side,
        symbol,
        timestamp,
        type,
        auto_repay_at_cancel,
        iceberg_qty,
        is_isolated,
        new_client_order_id,
        new_order_resp_type,
        price,
        quantity,
        quote_order_qty,
        recv_window,
        self_trade_prevention_mode,
        side_effect_type,
        stop_price,
        time_in_force,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if auto_repay_at_cancel is not None:
            _form_params.append(('autoRepayAtCancel', auto_repay_at_cancel))
        if iceberg_qty is not None:
            _form_params.append(('icebergQty', iceberg_qty))
        if is_isolated is not None:
            _form_params.append(('isIsolated', is_isolated))
        if new_client_order_id is not None:
            _form_params.append(('newClientOrderId', new_client_order_id))
        if new_order_resp_type is not None:
            _form_params.append(('newOrderRespType', new_order_resp_type))
        if price is not None:
            _form_params.append(('price', price))
        if quantity is not None:
            _form_params.append(('quantity', quantity))
        if quote_order_qty is not None:
            _form_params.append(('quoteOrderQty', quote_order_qty))
        if recv_window is not None:
            _form_params.append(('recvWindow', recv_window))
        if self_trade_prevention_mode is not None:
            _form_params.append(('selfTradePreventionMode', self_trade_prevention_mode))
        if side is not None:
            _form_params.append(('side', side))
        if side_effect_type is not None:
            _form_params.append(('sideEffectType', side_effect_type))
        if stop_price is not None:
            _form_params.append(('stopPrice', stop_price))
        if symbol is not None:
            _form_params.append(('symbol', symbol))
        if time_in_force is not None:
            _form_params.append(('timeInForce', time_in_force))
        if timestamp is not None:
            _form_params.append(('timestamp', timestamp))
        if type is not None:
            _form_params.append(('type', type))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/sapi/v1/margin/order',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_delete_margin_api_key_v1(
        self,
        timestamp: StrictInt,
        api_key: Optional[StrictStr] = None,
        api_name: Optional[StrictStr] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="isolated margin pair")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Delete Special Key(Low-Latency Trading)(TRADE)

        This only applies to Special Key for Low Latency Trading.

        :param timestamp: (required)
        :type timestamp: int
        :param api_key:
        :type api_key: str
        :param api_name:
        :type api_name: str
        :param symbol: isolated margin pair
        :type symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_delete_margin_api_key_v1_serialize(
            timestamp=timestamp,
            api_key=api_key,
            api_name=api_name,
            symbol=symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_delete_margin_api_key_v1_with_http_info(
        self,
        timestamp: StrictInt,
        api_key: Optional[StrictStr] = None,
        api_name: Optional[StrictStr] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="isolated margin pair")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Delete Special Key(Low-Latency Trading)(TRADE)

        This only applies to Special Key for Low Latency Trading.

        :param timestamp: (required)
        :type timestamp: int
        :param api_key:
        :type api_key: str
        :param api_name:
        :type api_name: str
        :param symbol: isolated margin pair
        :type symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_delete_margin_api_key_v1_serialize(
            timestamp=timestamp,
            api_key=api_key,
            api_name=api_name,
            symbol=symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_delete_margin_api_key_v1_without_preload_content(
        self,
        timestamp: StrictInt,
        api_key: Optional[StrictStr] = None,
        api_name: Optional[StrictStr] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="isolated margin pair")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete Special Key(Low-Latency Trading)(TRADE)

        This only applies to Special Key for Low Latency Trading.

        :param timestamp: (required)
        :type timestamp: int
        :param api_key:
        :type api_key: str
        :param api_name:
        :type api_name: str
        :param symbol: isolated margin pair
        :type symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_delete_margin_api_key_v1_serialize(
            timestamp=timestamp,
            api_key=api_key,
            api_name=api_name,
            symbol=symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_delete_margin_api_key_v1_serialize(
        self,
        timestamp,
        api_key,
        api_name,
        symbol,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('apiKey', api_key))
            
        if api_name is not None:
            
            _query_params.append(('apiName', api_name))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/sapi/v1/margin/apiKey',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_delete_margin_open_orders_v1(
        self,
        symbol: StrictStr,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[MarginDeleteMarginOpenOrdersV1RespItem]:
        """Margin Account Cancel all Open Orders on a Symbol (TRADE)

        Cancels all active orders on a symbol for margin account. This includes OCO orders.

        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_delete_margin_open_orders_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            is_isolated=is_isolated,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginDeleteMarginOpenOrdersV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_delete_margin_open_orders_v1_with_http_info(
        self,
        symbol: StrictStr,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[MarginDeleteMarginOpenOrdersV1RespItem]]:
        """Margin Account Cancel all Open Orders on a Symbol (TRADE)

        Cancels all active orders on a symbol for margin account. This includes OCO orders.

        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_delete_margin_open_orders_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            is_isolated=is_isolated,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginDeleteMarginOpenOrdersV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_delete_margin_open_orders_v1_without_preload_content(
        self,
        symbol: StrictStr,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Margin Account Cancel all Open Orders on a Symbol (TRADE)

        Cancels all active orders on a symbol for margin account. This includes OCO orders.

        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_delete_margin_open_orders_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            is_isolated=is_isolated,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginDeleteMarginOpenOrdersV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_delete_margin_open_orders_v1_serialize(
        self,
        symbol,
        timestamp,
        is_isolated,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if is_isolated is not None:
            
            _query_params.append(('isIsolated', is_isolated))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/sapi/v1/margin/openOrders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_delete_margin_order_list_v1(
        self,
        symbol: StrictStr,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        order_list_id: Annotated[Optional[StrictInt], Field(description="Either `orderListId` or `listClientOrderId` must be provided")] = None,
        list_client_order_id: Annotated[Optional[StrictStr], Field(description="Either `orderListId` or `listClientOrderId` must be provided")] = None,
        new_client_order_id: Annotated[Optional[StrictStr], Field(description="Used to uniquely identify this cancel. Automatically generated by default")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MarginDeleteMarginOrderListV1Resp:
        """Margin Account Cancel OCO (TRADE)

        Cancel an entire Order List for a margin account.

        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param order_list_id: Either `orderListId` or `listClientOrderId` must be provided
        :type order_list_id: int
        :param list_client_order_id: Either `orderListId` or `listClientOrderId` must be provided
        :type list_client_order_id: str
        :param new_client_order_id: Used to uniquely identify this cancel. Automatically generated by default
        :type new_client_order_id: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_delete_margin_order_list_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            is_isolated=is_isolated,
            order_list_id=order_list_id,
            list_client_order_id=list_client_order_id,
            new_client_order_id=new_client_order_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginDeleteMarginOrderListV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_delete_margin_order_list_v1_with_http_info(
        self,
        symbol: StrictStr,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        order_list_id: Annotated[Optional[StrictInt], Field(description="Either `orderListId` or `listClientOrderId` must be provided")] = None,
        list_client_order_id: Annotated[Optional[StrictStr], Field(description="Either `orderListId` or `listClientOrderId` must be provided")] = None,
        new_client_order_id: Annotated[Optional[StrictStr], Field(description="Used to uniquely identify this cancel. Automatically generated by default")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MarginDeleteMarginOrderListV1Resp]:
        """Margin Account Cancel OCO (TRADE)

        Cancel an entire Order List for a margin account.

        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param order_list_id: Either `orderListId` or `listClientOrderId` must be provided
        :type order_list_id: int
        :param list_client_order_id: Either `orderListId` or `listClientOrderId` must be provided
        :type list_client_order_id: str
        :param new_client_order_id: Used to uniquely identify this cancel. Automatically generated by default
        :type new_client_order_id: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_delete_margin_order_list_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            is_isolated=is_isolated,
            order_list_id=order_list_id,
            list_client_order_id=list_client_order_id,
            new_client_order_id=new_client_order_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginDeleteMarginOrderListV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_delete_margin_order_list_v1_without_preload_content(
        self,
        symbol: StrictStr,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        order_list_id: Annotated[Optional[StrictInt], Field(description="Either `orderListId` or `listClientOrderId` must be provided")] = None,
        list_client_order_id: Annotated[Optional[StrictStr], Field(description="Either `orderListId` or `listClientOrderId` must be provided")] = None,
        new_client_order_id: Annotated[Optional[StrictStr], Field(description="Used to uniquely identify this cancel. Automatically generated by default")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Margin Account Cancel OCO (TRADE)

        Cancel an entire Order List for a margin account.

        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param order_list_id: Either `orderListId` or `listClientOrderId` must be provided
        :type order_list_id: int
        :param list_client_order_id: Either `orderListId` or `listClientOrderId` must be provided
        :type list_client_order_id: str
        :param new_client_order_id: Used to uniquely identify this cancel. Automatically generated by default
        :type new_client_order_id: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_delete_margin_order_list_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            is_isolated=is_isolated,
            order_list_id=order_list_id,
            list_client_order_id=list_client_order_id,
            new_client_order_id=new_client_order_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginDeleteMarginOrderListV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_delete_margin_order_list_v1_serialize(
        self,
        symbol,
        timestamp,
        is_isolated,
        order_list_id,
        list_client_order_id,
        new_client_order_id,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if is_isolated is not None:
            
            _query_params.append(('isIsolated', is_isolated))
            
        if order_list_id is not None:
            
            _query_params.append(('orderListId', order_list_id))
            
        if list_client_order_id is not None:
            
            _query_params.append(('listClientOrderId', list_client_order_id))
            
        if new_client_order_id is not None:
            
            _query_params.append(('newClientOrderId', new_client_order_id))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/sapi/v1/margin/orderList',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_delete_margin_order_v1(
        self,
        symbol: StrictStr,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        order_id: Optional[StrictInt] = None,
        orig_client_order_id: Optional[StrictStr] = None,
        new_client_order_id: Annotated[Optional[StrictStr], Field(description="Used to uniquely identify this cancel. Automatically generated by default.")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MarginDeleteMarginOrderV1Resp:
        """Margin Account Cancel Order (TRADE)

        Cancel an active order for margin account.

        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param order_id:
        :type order_id: int
        :param orig_client_order_id:
        :type orig_client_order_id: str
        :param new_client_order_id: Used to uniquely identify this cancel. Automatically generated by default.
        :type new_client_order_id: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_delete_margin_order_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            is_isolated=is_isolated,
            order_id=order_id,
            orig_client_order_id=orig_client_order_id,
            new_client_order_id=new_client_order_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginDeleteMarginOrderV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_delete_margin_order_v1_with_http_info(
        self,
        symbol: StrictStr,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        order_id: Optional[StrictInt] = None,
        orig_client_order_id: Optional[StrictStr] = None,
        new_client_order_id: Annotated[Optional[StrictStr], Field(description="Used to uniquely identify this cancel. Automatically generated by default.")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MarginDeleteMarginOrderV1Resp]:
        """Margin Account Cancel Order (TRADE)

        Cancel an active order for margin account.

        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param order_id:
        :type order_id: int
        :param orig_client_order_id:
        :type orig_client_order_id: str
        :param new_client_order_id: Used to uniquely identify this cancel. Automatically generated by default.
        :type new_client_order_id: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_delete_margin_order_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            is_isolated=is_isolated,
            order_id=order_id,
            orig_client_order_id=orig_client_order_id,
            new_client_order_id=new_client_order_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginDeleteMarginOrderV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_delete_margin_order_v1_without_preload_content(
        self,
        symbol: StrictStr,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        order_id: Optional[StrictInt] = None,
        orig_client_order_id: Optional[StrictStr] = None,
        new_client_order_id: Annotated[Optional[StrictStr], Field(description="Used to uniquely identify this cancel. Automatically generated by default.")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Margin Account Cancel Order (TRADE)

        Cancel an active order for margin account.

        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param order_id:
        :type order_id: int
        :param orig_client_order_id:
        :type orig_client_order_id: str
        :param new_client_order_id: Used to uniquely identify this cancel. Automatically generated by default.
        :type new_client_order_id: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_delete_margin_order_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            is_isolated=is_isolated,
            order_id=order_id,
            orig_client_order_id=orig_client_order_id,
            new_client_order_id=new_client_order_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginDeleteMarginOrderV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_delete_margin_order_v1_serialize(
        self,
        symbol,
        timestamp,
        is_isolated,
        order_id,
        orig_client_order_id,
        new_client_order_id,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if is_isolated is not None:
            
            _query_params.append(('isIsolated', is_isolated))
            
        if order_id is not None:
            
            _query_params.append(('orderId', order_id))
            
        if orig_client_order_id is not None:
            
            _query_params.append(('origClientOrderId', orig_client_order_id))
            
        if new_client_order_id is not None:
            
            _query_params.append(('newClientOrderId', new_client_order_id))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/sapi/v1/margin/order',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_get_margin_all_order_list_v1(
        self,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="mandatory for isolated margin, not supported for cross margin")] = None,
        from_id: Annotated[Optional[StrictInt], Field(description="If supplied, neither `startTime` or `endTime` can be provided")] = None,
        start_time: Optional[StrictInt] = None,
        end_time: Optional[StrictInt] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Default Value: 500; Max Value: 1000")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[MarginGetMarginAllOrderListV1RespItem]:
        """Query Margin Account's all OCO (USER_DATA)

        Retrieves all OCO for a specific margin account based on provided optional parameters

        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param symbol: mandatory for isolated margin, not supported for cross margin
        :type symbol: str
        :param from_id: If supplied, neither `startTime` or `endTime` can be provided
        :type from_id: int
        :param start_time:
        :type start_time: int
        :param end_time:
        :type end_time: int
        :param limit: Default Value: 500; Max Value: 1000
        :type limit: int
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_all_order_list_v1_serialize(
            timestamp=timestamp,
            is_isolated=is_isolated,
            symbol=symbol,
            from_id=from_id,
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginAllOrderListV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_get_margin_all_order_list_v1_with_http_info(
        self,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="mandatory for isolated margin, not supported for cross margin")] = None,
        from_id: Annotated[Optional[StrictInt], Field(description="If supplied, neither `startTime` or `endTime` can be provided")] = None,
        start_time: Optional[StrictInt] = None,
        end_time: Optional[StrictInt] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Default Value: 500; Max Value: 1000")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[MarginGetMarginAllOrderListV1RespItem]]:
        """Query Margin Account's all OCO (USER_DATA)

        Retrieves all OCO for a specific margin account based on provided optional parameters

        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param symbol: mandatory for isolated margin, not supported for cross margin
        :type symbol: str
        :param from_id: If supplied, neither `startTime` or `endTime` can be provided
        :type from_id: int
        :param start_time:
        :type start_time: int
        :param end_time:
        :type end_time: int
        :param limit: Default Value: 500; Max Value: 1000
        :type limit: int
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_all_order_list_v1_serialize(
            timestamp=timestamp,
            is_isolated=is_isolated,
            symbol=symbol,
            from_id=from_id,
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginAllOrderListV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_get_margin_all_order_list_v1_without_preload_content(
        self,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="mandatory for isolated margin, not supported for cross margin")] = None,
        from_id: Annotated[Optional[StrictInt], Field(description="If supplied, neither `startTime` or `endTime` can be provided")] = None,
        start_time: Optional[StrictInt] = None,
        end_time: Optional[StrictInt] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Default Value: 500; Max Value: 1000")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query Margin Account's all OCO (USER_DATA)

        Retrieves all OCO for a specific margin account based on provided optional parameters

        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param symbol: mandatory for isolated margin, not supported for cross margin
        :type symbol: str
        :param from_id: If supplied, neither `startTime` or `endTime` can be provided
        :type from_id: int
        :param start_time:
        :type start_time: int
        :param end_time:
        :type end_time: int
        :param limit: Default Value: 500; Max Value: 1000
        :type limit: int
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_all_order_list_v1_serialize(
            timestamp=timestamp,
            is_isolated=is_isolated,
            symbol=symbol,
            from_id=from_id,
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginAllOrderListV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_get_margin_all_order_list_v1_serialize(
        self,
        timestamp,
        is_isolated,
        symbol,
        from_id,
        start_time,
        end_time,
        limit,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if is_isolated is not None:
            
            _query_params.append(('isIsolated', is_isolated))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if from_id is not None:
            
            _query_params.append(('fromId', from_id))
            
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/margin/allOrderList',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_get_margin_all_orders_v1(
        self,
        symbol: StrictStr,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        order_id: Optional[StrictInt] = None,
        start_time: Optional[StrictInt] = None,
        end_time: Optional[StrictInt] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=500, strict=True)]], Field(description="Default 500; max 500.")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[MarginGetMarginAllOrdersV1RespItem]:
        """Query Margin Account's All Orders (USER_DATA)

        Query Margin Account's All Orders

        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param order_id:
        :type order_id: int
        :param start_time:
        :type start_time: int
        :param end_time:
        :type end_time: int
        :param limit: Default 500; max 500.
        :type limit: int
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_all_orders_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            is_isolated=is_isolated,
            order_id=order_id,
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginAllOrdersV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_get_margin_all_orders_v1_with_http_info(
        self,
        symbol: StrictStr,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        order_id: Optional[StrictInt] = None,
        start_time: Optional[StrictInt] = None,
        end_time: Optional[StrictInt] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=500, strict=True)]], Field(description="Default 500; max 500.")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[MarginGetMarginAllOrdersV1RespItem]]:
        """Query Margin Account's All Orders (USER_DATA)

        Query Margin Account's All Orders

        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param order_id:
        :type order_id: int
        :param start_time:
        :type start_time: int
        :param end_time:
        :type end_time: int
        :param limit: Default 500; max 500.
        :type limit: int
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_all_orders_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            is_isolated=is_isolated,
            order_id=order_id,
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginAllOrdersV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_get_margin_all_orders_v1_without_preload_content(
        self,
        symbol: StrictStr,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        order_id: Optional[StrictInt] = None,
        start_time: Optional[StrictInt] = None,
        end_time: Optional[StrictInt] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=500, strict=True)]], Field(description="Default 500; max 500.")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query Margin Account's All Orders (USER_DATA)

        Query Margin Account's All Orders

        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param order_id:
        :type order_id: int
        :param start_time:
        :type start_time: int
        :param end_time:
        :type end_time: int
        :param limit: Default 500; max 500.
        :type limit: int
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_all_orders_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            is_isolated=is_isolated,
            order_id=order_id,
            start_time=start_time,
            end_time=end_time,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginAllOrdersV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_get_margin_all_orders_v1_serialize(
        self,
        symbol,
        timestamp,
        is_isolated,
        order_id,
        start_time,
        end_time,
        limit,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if is_isolated is not None:
            
            _query_params.append(('isIsolated', is_isolated))
            
        if order_id is not None:
            
            _query_params.append(('orderId', order_id))
            
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/margin/allOrders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_get_margin_api_key_list_v1(
        self,
        timestamp: StrictInt,
        symbol: Annotated[Optional[StrictStr], Field(description="isolated margin pair")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[MarginGetMarginApiKeyListV1RespItem]:
        """Query Special key List(Low Latency Trading)(TRADE)

        This only applies to Special Key for Low Latency Trading.

        :param timestamp: (required)
        :type timestamp: int
        :param symbol: isolated margin pair
        :type symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_api_key_list_v1_serialize(
            timestamp=timestamp,
            symbol=symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginApiKeyListV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_get_margin_api_key_list_v1_with_http_info(
        self,
        timestamp: StrictInt,
        symbol: Annotated[Optional[StrictStr], Field(description="isolated margin pair")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[MarginGetMarginApiKeyListV1RespItem]]:
        """Query Special key List(Low Latency Trading)(TRADE)

        This only applies to Special Key for Low Latency Trading.

        :param timestamp: (required)
        :type timestamp: int
        :param symbol: isolated margin pair
        :type symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_api_key_list_v1_serialize(
            timestamp=timestamp,
            symbol=symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginApiKeyListV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_get_margin_api_key_list_v1_without_preload_content(
        self,
        timestamp: StrictInt,
        symbol: Annotated[Optional[StrictStr], Field(description="isolated margin pair")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query Special key List(Low Latency Trading)(TRADE)

        This only applies to Special Key for Low Latency Trading.

        :param timestamp: (required)
        :type timestamp: int
        :param symbol: isolated margin pair
        :type symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_api_key_list_v1_serialize(
            timestamp=timestamp,
            symbol=symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginApiKeyListV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_get_margin_api_key_list_v1_serialize(
        self,
        timestamp,
        symbol,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/margin/api-key-list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_get_margin_api_key_v1(
        self,
        api_key: StrictStr,
        timestamp: StrictInt,
        symbol: Annotated[Optional[StrictStr], Field(description="isolated margin pair")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MarginGetMarginApiKeyV1Resp:
        """Query Special key(Low Latency Trading)(TRADE)

        Query Special Key Information.

        :param api_key: (required)
        :type api_key: str
        :param timestamp: (required)
        :type timestamp: int
        :param symbol: isolated margin pair
        :type symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_api_key_v1_serialize(
            api_key=api_key,
            timestamp=timestamp,
            symbol=symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginApiKeyV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_get_margin_api_key_v1_with_http_info(
        self,
        api_key: StrictStr,
        timestamp: StrictInt,
        symbol: Annotated[Optional[StrictStr], Field(description="isolated margin pair")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MarginGetMarginApiKeyV1Resp]:
        """Query Special key(Low Latency Trading)(TRADE)

        Query Special Key Information.

        :param api_key: (required)
        :type api_key: str
        :param timestamp: (required)
        :type timestamp: int
        :param symbol: isolated margin pair
        :type symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_api_key_v1_serialize(
            api_key=api_key,
            timestamp=timestamp,
            symbol=symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginApiKeyV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_get_margin_api_key_v1_without_preload_content(
        self,
        api_key: StrictStr,
        timestamp: StrictInt,
        symbol: Annotated[Optional[StrictStr], Field(description="isolated margin pair")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query Special key(Low Latency Trading)(TRADE)

        Query Special Key Information.

        :param api_key: (required)
        :type api_key: str
        :param timestamp: (required)
        :type timestamp: int
        :param symbol: isolated margin pair
        :type symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_api_key_v1_serialize(
            api_key=api_key,
            timestamp=timestamp,
            symbol=symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginApiKeyV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_get_margin_api_key_v1_serialize(
        self,
        api_key,
        timestamp,
        symbol,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('apiKey', api_key))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/margin/apiKey',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_get_margin_exchange_small_liability_history_v1(
        self,
        current: Annotated[StrictInt, Field(description="Currently querying page. Start from 1. Default:1")],
        size: Annotated[StrictInt, Field(description="Default:10, Max:100")],
        timestamp: StrictInt,
        start_time: Annotated[Optional[StrictInt], Field(description="Default: 30 days from current timestamp")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="Default: present timestamp")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MarginGetMarginExchangeSmallLiabilityHistoryV1Resp:
        """Get Small Liability Exchange History (USER_DATA)

        Get Small liability Exchange History

        :param current: Currently querying page. Start from 1. Default:1 (required)
        :type current: int
        :param size: Default:10, Max:100 (required)
        :type size: int
        :param timestamp: (required)
        :type timestamp: int
        :param start_time: Default: 30 days from current timestamp
        :type start_time: int
        :param end_time: Default: present timestamp
        :type end_time: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_exchange_small_liability_history_v1_serialize(
            current=current,
            size=size,
            timestamp=timestamp,
            start_time=start_time,
            end_time=end_time,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginExchangeSmallLiabilityHistoryV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_get_margin_exchange_small_liability_history_v1_with_http_info(
        self,
        current: Annotated[StrictInt, Field(description="Currently querying page. Start from 1. Default:1")],
        size: Annotated[StrictInt, Field(description="Default:10, Max:100")],
        timestamp: StrictInt,
        start_time: Annotated[Optional[StrictInt], Field(description="Default: 30 days from current timestamp")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="Default: present timestamp")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MarginGetMarginExchangeSmallLiabilityHistoryV1Resp]:
        """Get Small Liability Exchange History (USER_DATA)

        Get Small liability Exchange History

        :param current: Currently querying page. Start from 1. Default:1 (required)
        :type current: int
        :param size: Default:10, Max:100 (required)
        :type size: int
        :param timestamp: (required)
        :type timestamp: int
        :param start_time: Default: 30 days from current timestamp
        :type start_time: int
        :param end_time: Default: present timestamp
        :type end_time: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_exchange_small_liability_history_v1_serialize(
            current=current,
            size=size,
            timestamp=timestamp,
            start_time=start_time,
            end_time=end_time,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginExchangeSmallLiabilityHistoryV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_get_margin_exchange_small_liability_history_v1_without_preload_content(
        self,
        current: Annotated[StrictInt, Field(description="Currently querying page. Start from 1. Default:1")],
        size: Annotated[StrictInt, Field(description="Default:10, Max:100")],
        timestamp: StrictInt,
        start_time: Annotated[Optional[StrictInt], Field(description="Default: 30 days from current timestamp")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="Default: present timestamp")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Small Liability Exchange History (USER_DATA)

        Get Small liability Exchange History

        :param current: Currently querying page. Start from 1. Default:1 (required)
        :type current: int
        :param size: Default:10, Max:100 (required)
        :type size: int
        :param timestamp: (required)
        :type timestamp: int
        :param start_time: Default: 30 days from current timestamp
        :type start_time: int
        :param end_time: Default: present timestamp
        :type end_time: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_exchange_small_liability_history_v1_serialize(
            current=current,
            size=size,
            timestamp=timestamp,
            start_time=start_time,
            end_time=end_time,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginExchangeSmallLiabilityHistoryV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_get_margin_exchange_small_liability_history_v1_serialize(
        self,
        current,
        size,
        timestamp,
        start_time,
        end_time,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if current is not None:
            
            _query_params.append(('current', current))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/margin/exchange-small-liability-history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_get_margin_exchange_small_liability_v1(
        self,
        timestamp: StrictInt,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[MarginGetMarginExchangeSmallLiabilityV1RespItem]:
        """Get Small Liability Exchange Coin List (USER_DATA)

        Query the coins which can be small liability exchange

        :param timestamp: (required)
        :type timestamp: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_exchange_small_liability_v1_serialize(
            timestamp=timestamp,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginExchangeSmallLiabilityV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_get_margin_exchange_small_liability_v1_with_http_info(
        self,
        timestamp: StrictInt,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[MarginGetMarginExchangeSmallLiabilityV1RespItem]]:
        """Get Small Liability Exchange Coin List (USER_DATA)

        Query the coins which can be small liability exchange

        :param timestamp: (required)
        :type timestamp: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_exchange_small_liability_v1_serialize(
            timestamp=timestamp,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginExchangeSmallLiabilityV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_get_margin_exchange_small_liability_v1_without_preload_content(
        self,
        timestamp: StrictInt,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Small Liability Exchange Coin List (USER_DATA)

        Query the coins which can be small liability exchange

        :param timestamp: (required)
        :type timestamp: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_exchange_small_liability_v1_serialize(
            timestamp=timestamp,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginExchangeSmallLiabilityV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_get_margin_exchange_small_liability_v1_serialize(
        self,
        timestamp,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/margin/exchange-small-liability',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_get_margin_force_liquidation_rec_v1(
        self,
        timestamp: StrictInt,
        start_time: Optional[StrictInt] = None,
        end_time: Optional[StrictInt] = None,
        isolated_symbol: Optional[StrictStr] = None,
        current: Annotated[Optional[StrictInt], Field(description="Currently querying page. Start from 1. Default:1")] = None,
        size: Annotated[Optional[StrictInt], Field(description="Default:10 Max:100")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MarginGetMarginForceLiquidationRecV1Resp:
        """Get Force Liquidation Record (USER_DATA)

        Get Force Liquidation Record

        :param timestamp: (required)
        :type timestamp: int
        :param start_time:
        :type start_time: int
        :param end_time:
        :type end_time: int
        :param isolated_symbol:
        :type isolated_symbol: str
        :param current: Currently querying page. Start from 1. Default:1
        :type current: int
        :param size: Default:10 Max:100
        :type size: int
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_force_liquidation_rec_v1_serialize(
            timestamp=timestamp,
            start_time=start_time,
            end_time=end_time,
            isolated_symbol=isolated_symbol,
            current=current,
            size=size,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginForceLiquidationRecV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_get_margin_force_liquidation_rec_v1_with_http_info(
        self,
        timestamp: StrictInt,
        start_time: Optional[StrictInt] = None,
        end_time: Optional[StrictInt] = None,
        isolated_symbol: Optional[StrictStr] = None,
        current: Annotated[Optional[StrictInt], Field(description="Currently querying page. Start from 1. Default:1")] = None,
        size: Annotated[Optional[StrictInt], Field(description="Default:10 Max:100")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MarginGetMarginForceLiquidationRecV1Resp]:
        """Get Force Liquidation Record (USER_DATA)

        Get Force Liquidation Record

        :param timestamp: (required)
        :type timestamp: int
        :param start_time:
        :type start_time: int
        :param end_time:
        :type end_time: int
        :param isolated_symbol:
        :type isolated_symbol: str
        :param current: Currently querying page. Start from 1. Default:1
        :type current: int
        :param size: Default:10 Max:100
        :type size: int
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_force_liquidation_rec_v1_serialize(
            timestamp=timestamp,
            start_time=start_time,
            end_time=end_time,
            isolated_symbol=isolated_symbol,
            current=current,
            size=size,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginForceLiquidationRecV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_get_margin_force_liquidation_rec_v1_without_preload_content(
        self,
        timestamp: StrictInt,
        start_time: Optional[StrictInt] = None,
        end_time: Optional[StrictInt] = None,
        isolated_symbol: Optional[StrictStr] = None,
        current: Annotated[Optional[StrictInt], Field(description="Currently querying page. Start from 1. Default:1")] = None,
        size: Annotated[Optional[StrictInt], Field(description="Default:10 Max:100")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Force Liquidation Record (USER_DATA)

        Get Force Liquidation Record

        :param timestamp: (required)
        :type timestamp: int
        :param start_time:
        :type start_time: int
        :param end_time:
        :type end_time: int
        :param isolated_symbol:
        :type isolated_symbol: str
        :param current: Currently querying page. Start from 1. Default:1
        :type current: int
        :param size: Default:10 Max:100
        :type size: int
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_force_liquidation_rec_v1_serialize(
            timestamp=timestamp,
            start_time=start_time,
            end_time=end_time,
            isolated_symbol=isolated_symbol,
            current=current,
            size=size,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginForceLiquidationRecV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_get_margin_force_liquidation_rec_v1_serialize(
        self,
        timestamp,
        start_time,
        end_time,
        isolated_symbol,
        current,
        size,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if isolated_symbol is not None:
            
            _query_params.append(('isolatedSymbol', isolated_symbol))
            
        if current is not None:
            
            _query_params.append(('current', current))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/margin/forceLiquidationRec',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_get_margin_my_trades_v1(
        self,
        symbol: StrictStr,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        order_id: Optional[StrictInt] = None,
        start_time: Optional[StrictInt] = None,
        end_time: Optional[StrictInt] = None,
        from_id: Annotated[Optional[StrictInt], Field(description="TradeId to fetch from. Default gets most recent trades.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True)]], Field(description="Default 500; max 1000.")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[MarginGetMarginMyTradesV1RespItem]:
        """Query Margin Account's Trade List (USER_DATA)

        Query Margin Account's Trade List

        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param order_id:
        :type order_id: int
        :param start_time:
        :type start_time: int
        :param end_time:
        :type end_time: int
        :param from_id: TradeId to fetch from. Default gets most recent trades.
        :type from_id: int
        :param limit: Default 500; max 1000.
        :type limit: int
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_my_trades_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            is_isolated=is_isolated,
            order_id=order_id,
            start_time=start_time,
            end_time=end_time,
            from_id=from_id,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginMyTradesV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_get_margin_my_trades_v1_with_http_info(
        self,
        symbol: StrictStr,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        order_id: Optional[StrictInt] = None,
        start_time: Optional[StrictInt] = None,
        end_time: Optional[StrictInt] = None,
        from_id: Annotated[Optional[StrictInt], Field(description="TradeId to fetch from. Default gets most recent trades.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True)]], Field(description="Default 500; max 1000.")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[MarginGetMarginMyTradesV1RespItem]]:
        """Query Margin Account's Trade List (USER_DATA)

        Query Margin Account's Trade List

        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param order_id:
        :type order_id: int
        :param start_time:
        :type start_time: int
        :param end_time:
        :type end_time: int
        :param from_id: TradeId to fetch from. Default gets most recent trades.
        :type from_id: int
        :param limit: Default 500; max 1000.
        :type limit: int
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_my_trades_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            is_isolated=is_isolated,
            order_id=order_id,
            start_time=start_time,
            end_time=end_time,
            from_id=from_id,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginMyTradesV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_get_margin_my_trades_v1_without_preload_content(
        self,
        symbol: StrictStr,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        order_id: Optional[StrictInt] = None,
        start_time: Optional[StrictInt] = None,
        end_time: Optional[StrictInt] = None,
        from_id: Annotated[Optional[StrictInt], Field(description="TradeId to fetch from. Default gets most recent trades.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True)]], Field(description="Default 500; max 1000.")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query Margin Account's Trade List (USER_DATA)

        Query Margin Account's Trade List

        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param order_id:
        :type order_id: int
        :param start_time:
        :type start_time: int
        :param end_time:
        :type end_time: int
        :param from_id: TradeId to fetch from. Default gets most recent trades.
        :type from_id: int
        :param limit: Default 500; max 1000.
        :type limit: int
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_my_trades_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            is_isolated=is_isolated,
            order_id=order_id,
            start_time=start_time,
            end_time=end_time,
            from_id=from_id,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginMyTradesV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_get_margin_my_trades_v1_serialize(
        self,
        symbol,
        timestamp,
        is_isolated,
        order_id,
        start_time,
        end_time,
        from_id,
        limit,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if is_isolated is not None:
            
            _query_params.append(('isIsolated', is_isolated))
            
        if order_id is not None:
            
            _query_params.append(('orderId', order_id))
            
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if from_id is not None:
            
            _query_params.append(('fromId', from_id))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/margin/myTrades',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_get_margin_open_order_list_v1(
        self,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="mandatory for isolated margin, not supported for cross margin")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[MarginGetMarginOpenOrderListV1RespItem]:
        """Query Margin Account's Open OCO (USER_DATA)

        Query Margin Account's Open OCO

        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param symbol: mandatory for isolated margin, not supported for cross margin
        :type symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_open_order_list_v1_serialize(
            timestamp=timestamp,
            is_isolated=is_isolated,
            symbol=symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginOpenOrderListV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_get_margin_open_order_list_v1_with_http_info(
        self,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="mandatory for isolated margin, not supported for cross margin")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[MarginGetMarginOpenOrderListV1RespItem]]:
        """Query Margin Account's Open OCO (USER_DATA)

        Query Margin Account's Open OCO

        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param symbol: mandatory for isolated margin, not supported for cross margin
        :type symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_open_order_list_v1_serialize(
            timestamp=timestamp,
            is_isolated=is_isolated,
            symbol=symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginOpenOrderListV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_get_margin_open_order_list_v1_without_preload_content(
        self,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="mandatory for isolated margin, not supported for cross margin")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query Margin Account's Open OCO (USER_DATA)

        Query Margin Account's Open OCO

        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param symbol: mandatory for isolated margin, not supported for cross margin
        :type symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_open_order_list_v1_serialize(
            timestamp=timestamp,
            is_isolated=is_isolated,
            symbol=symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginOpenOrderListV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_get_margin_open_order_list_v1_serialize(
        self,
        timestamp,
        is_isolated,
        symbol,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if is_isolated is not None:
            
            _query_params.append(('isIsolated', is_isolated))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/margin/openOrderList',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_get_margin_open_orders_v1(
        self,
        timestamp: StrictInt,
        symbol: Optional[StrictStr] = None,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[MarginGetMarginOpenOrdersV1RespItem]:
        """Query Margin Account's Open Orders (USER_DATA)

        Query Margin Account's Open Orders

        :param timestamp: (required)
        :type timestamp: int
        :param symbol:
        :type symbol: str
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_open_orders_v1_serialize(
            timestamp=timestamp,
            symbol=symbol,
            is_isolated=is_isolated,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginOpenOrdersV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_get_margin_open_orders_v1_with_http_info(
        self,
        timestamp: StrictInt,
        symbol: Optional[StrictStr] = None,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[MarginGetMarginOpenOrdersV1RespItem]]:
        """Query Margin Account's Open Orders (USER_DATA)

        Query Margin Account's Open Orders

        :param timestamp: (required)
        :type timestamp: int
        :param symbol:
        :type symbol: str
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_open_orders_v1_serialize(
            timestamp=timestamp,
            symbol=symbol,
            is_isolated=is_isolated,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginOpenOrdersV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_get_margin_open_orders_v1_without_preload_content(
        self,
        timestamp: StrictInt,
        symbol: Optional[StrictStr] = None,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query Margin Account's Open Orders (USER_DATA)

        Query Margin Account's Open Orders

        :param timestamp: (required)
        :type timestamp: int
        :param symbol:
        :type symbol: str
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_open_orders_v1_serialize(
            timestamp=timestamp,
            symbol=symbol,
            is_isolated=is_isolated,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginOpenOrdersV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_get_margin_open_orders_v1_serialize(
        self,
        timestamp,
        symbol,
        is_isolated,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if is_isolated is not None:
            
            _query_params.append(('isIsolated', is_isolated))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/margin/openOrders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_get_margin_order_list_v1(
        self,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="mandatory for isolated margin, not supported for cross margin")] = None,
        order_list_id: Annotated[Optional[StrictInt], Field(description="Either `orderListId` or `origClientOrderId` must be provided")] = None,
        orig_client_order_id: Annotated[Optional[StrictStr], Field(description="Either `orderListId` or `origClientOrderId` must be provided")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MarginGetMarginOrderListV1Resp:
        """Query Margin Account's OCO (USER_DATA)

        Retrieves a specific OCO based on provided optional parameters

        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param symbol: mandatory for isolated margin, not supported for cross margin
        :type symbol: str
        :param order_list_id: Either `orderListId` or `origClientOrderId` must be provided
        :type order_list_id: int
        :param orig_client_order_id: Either `orderListId` or `origClientOrderId` must be provided
        :type orig_client_order_id: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_order_list_v1_serialize(
            timestamp=timestamp,
            is_isolated=is_isolated,
            symbol=symbol,
            order_list_id=order_list_id,
            orig_client_order_id=orig_client_order_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginOrderListV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_get_margin_order_list_v1_with_http_info(
        self,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="mandatory for isolated margin, not supported for cross margin")] = None,
        order_list_id: Annotated[Optional[StrictInt], Field(description="Either `orderListId` or `origClientOrderId` must be provided")] = None,
        orig_client_order_id: Annotated[Optional[StrictStr], Field(description="Either `orderListId` or `origClientOrderId` must be provided")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MarginGetMarginOrderListV1Resp]:
        """Query Margin Account's OCO (USER_DATA)

        Retrieves a specific OCO based on provided optional parameters

        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param symbol: mandatory for isolated margin, not supported for cross margin
        :type symbol: str
        :param order_list_id: Either `orderListId` or `origClientOrderId` must be provided
        :type order_list_id: int
        :param orig_client_order_id: Either `orderListId` or `origClientOrderId` must be provided
        :type orig_client_order_id: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_order_list_v1_serialize(
            timestamp=timestamp,
            is_isolated=is_isolated,
            symbol=symbol,
            order_list_id=order_list_id,
            orig_client_order_id=orig_client_order_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginOrderListV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_get_margin_order_list_v1_without_preload_content(
        self,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="mandatory for isolated margin, not supported for cross margin")] = None,
        order_list_id: Annotated[Optional[StrictInt], Field(description="Either `orderListId` or `origClientOrderId` must be provided")] = None,
        orig_client_order_id: Annotated[Optional[StrictStr], Field(description="Either `orderListId` or `origClientOrderId` must be provided")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query Margin Account's OCO (USER_DATA)

        Retrieves a specific OCO based on provided optional parameters

        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param symbol: mandatory for isolated margin, not supported for cross margin
        :type symbol: str
        :param order_list_id: Either `orderListId` or `origClientOrderId` must be provided
        :type order_list_id: int
        :param orig_client_order_id: Either `orderListId` or `origClientOrderId` must be provided
        :type orig_client_order_id: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_order_list_v1_serialize(
            timestamp=timestamp,
            is_isolated=is_isolated,
            symbol=symbol,
            order_list_id=order_list_id,
            orig_client_order_id=orig_client_order_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginOrderListV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_get_margin_order_list_v1_serialize(
        self,
        timestamp,
        is_isolated,
        symbol,
        order_list_id,
        orig_client_order_id,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if is_isolated is not None:
            
            _query_params.append(('isIsolated', is_isolated))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if order_list_id is not None:
            
            _query_params.append(('orderListId', order_list_id))
            
        if orig_client_order_id is not None:
            
            _query_params.append(('origClientOrderId', orig_client_order_id))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/margin/orderList',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_get_margin_order_v1(
        self,
        symbol: StrictStr,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        order_id: Optional[StrictInt] = None,
        orig_client_order_id: Optional[StrictStr] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MarginGetMarginOrderV1Resp:
        """Query Margin Account's Order (USER_DATA)

        Query Margin Account's Order

        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param order_id:
        :type order_id: int
        :param orig_client_order_id:
        :type orig_client_order_id: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_order_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            is_isolated=is_isolated,
            order_id=order_id,
            orig_client_order_id=orig_client_order_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginOrderV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_get_margin_order_v1_with_http_info(
        self,
        symbol: StrictStr,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        order_id: Optional[StrictInt] = None,
        orig_client_order_id: Optional[StrictStr] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MarginGetMarginOrderV1Resp]:
        """Query Margin Account's Order (USER_DATA)

        Query Margin Account's Order

        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param order_id:
        :type order_id: int
        :param orig_client_order_id:
        :type orig_client_order_id: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_order_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            is_isolated=is_isolated,
            order_id=order_id,
            orig_client_order_id=orig_client_order_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginOrderV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_get_margin_order_v1_without_preload_content(
        self,
        symbol: StrictStr,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        order_id: Optional[StrictInt] = None,
        orig_client_order_id: Optional[StrictStr] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query Margin Account's Order (USER_DATA)

        Query Margin Account's Order

        :param symbol: (required)
        :type symbol: str
        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param order_id:
        :type order_id: int
        :param orig_client_order_id:
        :type orig_client_order_id: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_order_v1_serialize(
            symbol=symbol,
            timestamp=timestamp,
            is_isolated=is_isolated,
            order_id=order_id,
            orig_client_order_id=orig_client_order_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginOrderV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_get_margin_order_v1_serialize(
        self,
        symbol,
        timestamp,
        is_isolated,
        order_id,
        orig_client_order_id,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if is_isolated is not None:
            
            _query_params.append(('isIsolated', is_isolated))
            
        if order_id is not None:
            
            _query_params.append(('orderId', order_id))
            
        if orig_client_order_id is not None:
            
            _query_params.append(('origClientOrderId', orig_client_order_id))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/margin/order',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_get_margin_rate_limit_order_v1(
        self,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="isolated symbol, mandatory for isolated margin")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[MarginGetMarginRateLimitOrderV1RespItem]:
        """Query Current Margin Order Count Usage (TRADE)

        Displays the user's current margin order count usage for all intervals.

        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param symbol: isolated symbol, mandatory for isolated margin
        :type symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_rate_limit_order_v1_serialize(
            timestamp=timestamp,
            is_isolated=is_isolated,
            symbol=symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginRateLimitOrderV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_get_margin_rate_limit_order_v1_with_http_info(
        self,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="isolated symbol, mandatory for isolated margin")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[MarginGetMarginRateLimitOrderV1RespItem]]:
        """Query Current Margin Order Count Usage (TRADE)

        Displays the user's current margin order count usage for all intervals.

        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param symbol: isolated symbol, mandatory for isolated margin
        :type symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_rate_limit_order_v1_serialize(
            timestamp=timestamp,
            is_isolated=is_isolated,
            symbol=symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginRateLimitOrderV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_get_margin_rate_limit_order_v1_without_preload_content(
        self,
        timestamp: StrictInt,
        is_isolated: Annotated[Optional[StrictStr], Field(description="for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;")] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="isolated symbol, mandatory for isolated margin")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query Current Margin Order Count Usage (TRADE)

        Displays the user's current margin order count usage for all intervals.

        :param timestamp: (required)
        :type timestamp: int
        :param is_isolated: for isolated margin or not, &#34;TRUE&#34;, &#34;FALSE&#34;，default &#34;FALSE&#34;
        :type is_isolated: str
        :param symbol: isolated symbol, mandatory for isolated margin
        :type symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_rate_limit_order_v1_serialize(
            timestamp=timestamp,
            is_isolated=is_isolated,
            symbol=symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MarginGetMarginRateLimitOrderV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_get_margin_rate_limit_order_v1_serialize(
        self,
        timestamp,
        is_isolated,
        symbol,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if is_isolated is not None:
            
            _query_params.append(('isIsolated', is_isolated))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/margin/rateLimit/order',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_update_margin_api_key_ip_v1(
        self,
        api_key: StrictStr,
        ip: StrictStr,
        timestamp: StrictInt,
        recv_window: Optional[StrictInt] = None,
        symbol: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Edit ip for Special Key(Low-Latency Trading)(TRADE)

        Edit ip restriction. This only applies to Special Key for Low Latency Trading.

        :param api_key: (required)
        :type api_key: str
        :param ip: (required)
        :type ip: str
        :param timestamp: (required)
        :type timestamp: int
        :param recv_window:
        :type recv_window: int
        :param symbol:
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_update_margin_api_key_ip_v1_serialize(
            api_key=api_key,
            ip=ip,
            timestamp=timestamp,
            recv_window=recv_window,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_update_margin_api_key_ip_v1_with_http_info(
        self,
        api_key: StrictStr,
        ip: StrictStr,
        timestamp: StrictInt,
        recv_window: Optional[StrictInt] = None,
        symbol: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Edit ip for Special Key(Low-Latency Trading)(TRADE)

        Edit ip restriction. This only applies to Special Key for Low Latency Trading.

        :param api_key: (required)
        :type api_key: str
        :param ip: (required)
        :type ip: str
        :param timestamp: (required)
        :type timestamp: int
        :param recv_window:
        :type recv_window: int
        :param symbol:
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_update_margin_api_key_ip_v1_serialize(
            api_key=api_key,
            ip=ip,
            timestamp=timestamp,
            recv_window=recv_window,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_update_margin_api_key_ip_v1_without_preload_content(
        self,
        api_key: StrictStr,
        ip: StrictStr,
        timestamp: StrictInt,
        recv_window: Optional[StrictInt] = None,
        symbol: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Edit ip for Special Key(Low-Latency Trading)(TRADE)

        Edit ip restriction. This only applies to Special Key for Low Latency Trading.

        :param api_key: (required)
        :type api_key: str
        :param ip: (required)
        :type ip: str
        :param timestamp: (required)
        :type timestamp: int
        :param recv_window:
        :type recv_window: int
        :param symbol:
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_update_margin_api_key_ip_v1_serialize(
            api_key=api_key,
            ip=ip,
            timestamp=timestamp,
            recv_window=recv_window,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_update_margin_api_key_ip_v1_serialize(
        self,
        api_key,
        ip,
        timestamp,
        recv_window,
        symbol,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if api_key is not None:
            _form_params.append(('apiKey', api_key))
        if ip is not None:
            _form_params.append(('ip', ip))
        if recv_window is not None:
            _form_params.append(('recvWindow', recv_window))
        if symbol is not None:
            _form_params.append(('symbol', symbol))
        if timestamp is not None:
            _form_params.append(('timestamp', timestamp))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/sapi/v1/margin/apiKey/ip',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


