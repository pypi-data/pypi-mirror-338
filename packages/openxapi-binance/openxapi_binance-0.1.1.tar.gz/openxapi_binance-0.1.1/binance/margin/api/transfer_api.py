# coding: utf-8

"""
    Binance Margin Trading API

    OpenAPI specification for Binance exchange - Margin API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from binance.margin.models.margin_get_margin_max_transferable_v1_resp import MarginGetMarginMaxTransferableV1Resp
from binance.margin.models.margin_get_margin_transfer_v1_resp import MarginGetMarginTransferV1Resp

from binance.margin.api_client import ApiClient, RequestSerialized
from binance.margin.api_response import ApiResponse
from binance.margin.rest import RESTResponseType


class TransferApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def margin_get_margin_max_transferable_v1(
        self,
        asset: StrictStr,
        timestamp: StrictInt,
        isolated_symbol: Annotated[Optional[StrictStr], Field(description="isolated symbol")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MarginGetMarginMaxTransferableV1Resp:
        """Query Max Transfer-Out Amount (USER_DATA)

        Query Max Transfer-Out Amount

        :param asset: (required)
        :type asset: str
        :param timestamp: (required)
        :type timestamp: int
        :param isolated_symbol: isolated symbol
        :type isolated_symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_max_transferable_v1_serialize(
            asset=asset,
            timestamp=timestamp,
            isolated_symbol=isolated_symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginMaxTransferableV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_get_margin_max_transferable_v1_with_http_info(
        self,
        asset: StrictStr,
        timestamp: StrictInt,
        isolated_symbol: Annotated[Optional[StrictStr], Field(description="isolated symbol")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MarginGetMarginMaxTransferableV1Resp]:
        """Query Max Transfer-Out Amount (USER_DATA)

        Query Max Transfer-Out Amount

        :param asset: (required)
        :type asset: str
        :param timestamp: (required)
        :type timestamp: int
        :param isolated_symbol: isolated symbol
        :type isolated_symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_max_transferable_v1_serialize(
            asset=asset,
            timestamp=timestamp,
            isolated_symbol=isolated_symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginMaxTransferableV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_get_margin_max_transferable_v1_without_preload_content(
        self,
        asset: StrictStr,
        timestamp: StrictInt,
        isolated_symbol: Annotated[Optional[StrictStr], Field(description="isolated symbol")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query Max Transfer-Out Amount (USER_DATA)

        Query Max Transfer-Out Amount

        :param asset: (required)
        :type asset: str
        :param timestamp: (required)
        :type timestamp: int
        :param isolated_symbol: isolated symbol
        :type isolated_symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_max_transferable_v1_serialize(
            asset=asset,
            timestamp=timestamp,
            isolated_symbol=isolated_symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginMaxTransferableV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_get_margin_max_transferable_v1_serialize(
        self,
        asset,
        timestamp,
        isolated_symbol,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if asset is not None:
            
            _query_params.append(('asset', asset))
            
        if isolated_symbol is not None:
            
            _query_params.append(('isolatedSymbol', isolated_symbol))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/margin/maxTransferable',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def margin_get_margin_transfer_v1(
        self,
        timestamp: StrictInt,
        asset: Optional[StrictStr] = None,
        type: Annotated[Optional[StrictStr], Field(description="Transfer Type: ROLL_IN, ROLL_OUT")] = None,
        start_time: Optional[StrictInt] = None,
        end_time: Optional[StrictInt] = None,
        current: Annotated[Optional[StrictInt], Field(description="Currently querying page. Start from 1. Default:1")] = None,
        size: Annotated[Optional[StrictInt], Field(description="Default:10 Max:100")] = None,
        isolated_symbol: Annotated[Optional[StrictStr], Field(description="Symbol in Isolated Margin")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MarginGetMarginTransferV1Resp:
        """Get Cross Margin Transfer History (USER_DATA)

        Get Cross Margin Transfer History

        :param timestamp: (required)
        :type timestamp: int
        :param asset:
        :type asset: str
        :param type: Transfer Type: ROLL_IN, ROLL_OUT
        :type type: str
        :param start_time:
        :type start_time: int
        :param end_time:
        :type end_time: int
        :param current: Currently querying page. Start from 1. Default:1
        :type current: int
        :param size: Default:10 Max:100
        :type size: int
        :param isolated_symbol: Symbol in Isolated Margin
        :type isolated_symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_transfer_v1_serialize(
            timestamp=timestamp,
            asset=asset,
            type=type,
            start_time=start_time,
            end_time=end_time,
            current=current,
            size=size,
            isolated_symbol=isolated_symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginTransferV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def margin_get_margin_transfer_v1_with_http_info(
        self,
        timestamp: StrictInt,
        asset: Optional[StrictStr] = None,
        type: Annotated[Optional[StrictStr], Field(description="Transfer Type: ROLL_IN, ROLL_OUT")] = None,
        start_time: Optional[StrictInt] = None,
        end_time: Optional[StrictInt] = None,
        current: Annotated[Optional[StrictInt], Field(description="Currently querying page. Start from 1. Default:1")] = None,
        size: Annotated[Optional[StrictInt], Field(description="Default:10 Max:100")] = None,
        isolated_symbol: Annotated[Optional[StrictStr], Field(description="Symbol in Isolated Margin")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MarginGetMarginTransferV1Resp]:
        """Get Cross Margin Transfer History (USER_DATA)

        Get Cross Margin Transfer History

        :param timestamp: (required)
        :type timestamp: int
        :param asset:
        :type asset: str
        :param type: Transfer Type: ROLL_IN, ROLL_OUT
        :type type: str
        :param start_time:
        :type start_time: int
        :param end_time:
        :type end_time: int
        :param current: Currently querying page. Start from 1. Default:1
        :type current: int
        :param size: Default:10 Max:100
        :type size: int
        :param isolated_symbol: Symbol in Isolated Margin
        :type isolated_symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_transfer_v1_serialize(
            timestamp=timestamp,
            asset=asset,
            type=type,
            start_time=start_time,
            end_time=end_time,
            current=current,
            size=size,
            isolated_symbol=isolated_symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginTransferV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def margin_get_margin_transfer_v1_without_preload_content(
        self,
        timestamp: StrictInt,
        asset: Optional[StrictStr] = None,
        type: Annotated[Optional[StrictStr], Field(description="Transfer Type: ROLL_IN, ROLL_OUT")] = None,
        start_time: Optional[StrictInt] = None,
        end_time: Optional[StrictInt] = None,
        current: Annotated[Optional[StrictInt], Field(description="Currently querying page. Start from 1. Default:1")] = None,
        size: Annotated[Optional[StrictInt], Field(description="Default:10 Max:100")] = None,
        isolated_symbol: Annotated[Optional[StrictStr], Field(description="Symbol in Isolated Margin")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than `60000`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Cross Margin Transfer History (USER_DATA)

        Get Cross Margin Transfer History

        :param timestamp: (required)
        :type timestamp: int
        :param asset:
        :type asset: str
        :param type: Transfer Type: ROLL_IN, ROLL_OUT
        :type type: str
        :param start_time:
        :type start_time: int
        :param end_time:
        :type end_time: int
        :param current: Currently querying page. Start from 1. Default:1
        :type current: int
        :param size: Default:10 Max:100
        :type size: int
        :param isolated_symbol: Symbol in Isolated Margin
        :type isolated_symbol: str
        :param recv_window: The value cannot be greater than `60000`
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._margin_get_margin_transfer_v1_serialize(
            timestamp=timestamp,
            asset=asset,
            type=type,
            start_time=start_time,
            end_time=end_time,
            current=current,
            size=size,
            isolated_symbol=isolated_symbol,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarginGetMarginTransferV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _margin_get_margin_transfer_v1_serialize(
        self,
        timestamp,
        asset,
        type,
        start_time,
        end_time,
        current,
        size,
        isolated_symbol,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if asset is not None:
            
            _query_params.append(('asset', asset))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if current is not None:
            
            _query_params.append(('current', current))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        if isolated_symbol is not None:
            
            _query_params.append(('isolatedSymbol', isolated_symbol))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/margin/transfer',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


