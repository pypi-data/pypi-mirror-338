# coding: utf-8

"""
    Binance Wallet API

    OpenAPI specification for Binance exchange - Wallet API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated
from binance.wallet.models.wallet_create_localentity_broker_withdraw_apply_v1_resp import WalletCreateLocalentityBrokerWithdrawApplyV1Resp
from binance.wallet.models.wallet_create_localentity_withdraw_apply_v1_resp import WalletCreateLocalentityWithdrawApplyV1Resp
from binance.wallet.models.wallet_get_localentity_deposit_history_v1_resp_item import WalletGetLocalentityDepositHistoryV1RespItem
from binance.wallet.models.wallet_get_localentity_vasp_v1_resp_item import WalletGetLocalentityVaspV1RespItem
from binance.wallet.models.wallet_get_localentity_withdraw_history_v1_resp_item import WalletGetLocalentityWithdrawHistoryV1RespItem
from binance.wallet.models.wallet_get_localentity_withdraw_history_v2_resp_item import WalletGetLocalentityWithdrawHistoryV2RespItem
from binance.wallet.models.wallet_update_localentity_broker_deposit_provide_info_v1_resp import WalletUpdateLocalentityBrokerDepositProvideInfoV1Resp
from binance.wallet.models.wallet_update_localentity_deposit_provide_info_v1_resp import WalletUpdateLocalentityDepositProvideInfoV1Resp

from binance.wallet.api_client import ApiClient, RequestSerialized
from binance.wallet.api_response import ApiResponse
from binance.wallet.rest import RESTResponseType


class TravelRuleApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def wallet_create_localentity_broker_withdraw_apply_v1(
        self,
        address: StrictStr,
        amount: Dict[str, Any],
        coin: StrictStr,
        originator_pii: StrictStr,
        questionnaire: StrictStr,
        signature: StrictStr,
        sub_account_id: StrictStr,
        timestamp: StrictInt,
        withdraw_order_id: StrictStr,
        address_name: Optional[StrictStr] = None,
        address_tag: Optional[StrictStr] = None,
        network: Optional[StrictStr] = None,
        transaction_fee_flag: Optional[StrictBool] = None,
        wallet_type: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WalletCreateLocalentityBrokerWithdrawApplyV1Resp:
        """Broker Withdraw (for brokers of local entities that require travel rule) (USER_DATA)

        Submit a withdrawal request for brokers of local entities that required travel rule.

        :param address: (required)
        :type address: str
        :param amount: (required)
        :type amount: object
        :param coin: (required)
        :type coin: str
        :param originator_pii: (required)
        :type originator_pii: str
        :param questionnaire: (required)
        :type questionnaire: str
        :param signature: (required)
        :type signature: str
        :param sub_account_id: (required)
        :type sub_account_id: str
        :param timestamp: (required)
        :type timestamp: int
        :param withdraw_order_id: (required)
        :type withdraw_order_id: str
        :param address_name:
        :type address_name: str
        :param address_tag:
        :type address_tag: str
        :param network:
        :type network: str
        :param transaction_fee_flag:
        :type transaction_fee_flag: bool
        :param wallet_type:
        :type wallet_type: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_create_localentity_broker_withdraw_apply_v1_serialize(
            address=address,
            amount=amount,
            coin=coin,
            originator_pii=originator_pii,
            questionnaire=questionnaire,
            signature=signature,
            sub_account_id=sub_account_id,
            timestamp=timestamp,
            withdraw_order_id=withdraw_order_id,
            address_name=address_name,
            address_tag=address_tag,
            network=network,
            transaction_fee_flag=transaction_fee_flag,
            wallet_type=wallet_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WalletCreateLocalentityBrokerWithdrawApplyV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wallet_create_localentity_broker_withdraw_apply_v1_with_http_info(
        self,
        address: StrictStr,
        amount: Dict[str, Any],
        coin: StrictStr,
        originator_pii: StrictStr,
        questionnaire: StrictStr,
        signature: StrictStr,
        sub_account_id: StrictStr,
        timestamp: StrictInt,
        withdraw_order_id: StrictStr,
        address_name: Optional[StrictStr] = None,
        address_tag: Optional[StrictStr] = None,
        network: Optional[StrictStr] = None,
        transaction_fee_flag: Optional[StrictBool] = None,
        wallet_type: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WalletCreateLocalentityBrokerWithdrawApplyV1Resp]:
        """Broker Withdraw (for brokers of local entities that require travel rule) (USER_DATA)

        Submit a withdrawal request for brokers of local entities that required travel rule.

        :param address: (required)
        :type address: str
        :param amount: (required)
        :type amount: object
        :param coin: (required)
        :type coin: str
        :param originator_pii: (required)
        :type originator_pii: str
        :param questionnaire: (required)
        :type questionnaire: str
        :param signature: (required)
        :type signature: str
        :param sub_account_id: (required)
        :type sub_account_id: str
        :param timestamp: (required)
        :type timestamp: int
        :param withdraw_order_id: (required)
        :type withdraw_order_id: str
        :param address_name:
        :type address_name: str
        :param address_tag:
        :type address_tag: str
        :param network:
        :type network: str
        :param transaction_fee_flag:
        :type transaction_fee_flag: bool
        :param wallet_type:
        :type wallet_type: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_create_localentity_broker_withdraw_apply_v1_serialize(
            address=address,
            amount=amount,
            coin=coin,
            originator_pii=originator_pii,
            questionnaire=questionnaire,
            signature=signature,
            sub_account_id=sub_account_id,
            timestamp=timestamp,
            withdraw_order_id=withdraw_order_id,
            address_name=address_name,
            address_tag=address_tag,
            network=network,
            transaction_fee_flag=transaction_fee_flag,
            wallet_type=wallet_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WalletCreateLocalentityBrokerWithdrawApplyV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wallet_create_localentity_broker_withdraw_apply_v1_without_preload_content(
        self,
        address: StrictStr,
        amount: Dict[str, Any],
        coin: StrictStr,
        originator_pii: StrictStr,
        questionnaire: StrictStr,
        signature: StrictStr,
        sub_account_id: StrictStr,
        timestamp: StrictInt,
        withdraw_order_id: StrictStr,
        address_name: Optional[StrictStr] = None,
        address_tag: Optional[StrictStr] = None,
        network: Optional[StrictStr] = None,
        transaction_fee_flag: Optional[StrictBool] = None,
        wallet_type: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Broker Withdraw (for brokers of local entities that require travel rule) (USER_DATA)

        Submit a withdrawal request for brokers of local entities that required travel rule.

        :param address: (required)
        :type address: str
        :param amount: (required)
        :type amount: object
        :param coin: (required)
        :type coin: str
        :param originator_pii: (required)
        :type originator_pii: str
        :param questionnaire: (required)
        :type questionnaire: str
        :param signature: (required)
        :type signature: str
        :param sub_account_id: (required)
        :type sub_account_id: str
        :param timestamp: (required)
        :type timestamp: int
        :param withdraw_order_id: (required)
        :type withdraw_order_id: str
        :param address_name:
        :type address_name: str
        :param address_tag:
        :type address_tag: str
        :param network:
        :type network: str
        :param transaction_fee_flag:
        :type transaction_fee_flag: bool
        :param wallet_type:
        :type wallet_type: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_create_localentity_broker_withdraw_apply_v1_serialize(
            address=address,
            amount=amount,
            coin=coin,
            originator_pii=originator_pii,
            questionnaire=questionnaire,
            signature=signature,
            sub_account_id=sub_account_id,
            timestamp=timestamp,
            withdraw_order_id=withdraw_order_id,
            address_name=address_name,
            address_tag=address_tag,
            network=network,
            transaction_fee_flag=transaction_fee_flag,
            wallet_type=wallet_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WalletCreateLocalentityBrokerWithdrawApplyV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wallet_create_localentity_broker_withdraw_apply_v1_serialize(
        self,
        address,
        amount,
        coin,
        originator_pii,
        questionnaire,
        signature,
        sub_account_id,
        timestamp,
        withdraw_order_id,
        address_name,
        address_tag,
        network,
        transaction_fee_flag,
        wallet_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if address is not None:
            _form_params.append(('address', address))
        if address_name is not None:
            _form_params.append(('addressName', address_name))
        if address_tag is not None:
            _form_params.append(('addressTag', address_tag))
        if amount is not None:
            _form_params.append(('amount', amount))
        if coin is not None:
            _form_params.append(('coin', coin))
        if network is not None:
            _form_params.append(('network', network))
        if originator_pii is not None:
            _form_params.append(('originatorPii', originator_pii))
        if questionnaire is not None:
            _form_params.append(('questionnaire', questionnaire))
        if signature is not None:
            _form_params.append(('signature', signature))
        if sub_account_id is not None:
            _form_params.append(('subAccountId', sub_account_id))
        if timestamp is not None:
            _form_params.append(('timestamp', timestamp))
        if transaction_fee_flag is not None:
            _form_params.append(('transactionFeeFlag', transaction_fee_flag))
        if wallet_type is not None:
            _form_params.append(('walletType', wallet_type))
        if withdraw_order_id is not None:
            _form_params.append(('withdrawOrderId', withdraw_order_id))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/sapi/v1/localentity/broker/withdraw/apply',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wallet_create_localentity_withdraw_apply_v1(
        self,
        address: StrictStr,
        amount: StrictStr,
        coin: StrictStr,
        questionnaire: StrictStr,
        timestamp: StrictInt,
        address_tag: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        network: Optional[StrictStr] = None,
        recv_window: Optional[StrictInt] = None,
        transaction_fee_flag: Optional[StrictBool] = None,
        wallet_type: Optional[StrictInt] = None,
        withdraw_order_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WalletCreateLocalentityWithdrawApplyV1Resp:
        """Withdraw (for local entities that require travel rule) (USER_DATA)

        Submit a withdrawal request for local entities that required travel rule.

        :param address: (required)
        :type address: str
        :param amount: (required)
        :type amount: str
        :param coin: (required)
        :type coin: str
        :param questionnaire: (required)
        :type questionnaire: str
        :param timestamp: (required)
        :type timestamp: int
        :param address_tag:
        :type address_tag: str
        :param name:
        :type name: str
        :param network:
        :type network: str
        :param recv_window:
        :type recv_window: int
        :param transaction_fee_flag:
        :type transaction_fee_flag: bool
        :param wallet_type:
        :type wallet_type: int
        :param withdraw_order_id:
        :type withdraw_order_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_create_localentity_withdraw_apply_v1_serialize(
            address=address,
            amount=amount,
            coin=coin,
            questionnaire=questionnaire,
            timestamp=timestamp,
            address_tag=address_tag,
            name=name,
            network=network,
            recv_window=recv_window,
            transaction_fee_flag=transaction_fee_flag,
            wallet_type=wallet_type,
            withdraw_order_id=withdraw_order_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WalletCreateLocalentityWithdrawApplyV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wallet_create_localentity_withdraw_apply_v1_with_http_info(
        self,
        address: StrictStr,
        amount: StrictStr,
        coin: StrictStr,
        questionnaire: StrictStr,
        timestamp: StrictInt,
        address_tag: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        network: Optional[StrictStr] = None,
        recv_window: Optional[StrictInt] = None,
        transaction_fee_flag: Optional[StrictBool] = None,
        wallet_type: Optional[StrictInt] = None,
        withdraw_order_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WalletCreateLocalentityWithdrawApplyV1Resp]:
        """Withdraw (for local entities that require travel rule) (USER_DATA)

        Submit a withdrawal request for local entities that required travel rule.

        :param address: (required)
        :type address: str
        :param amount: (required)
        :type amount: str
        :param coin: (required)
        :type coin: str
        :param questionnaire: (required)
        :type questionnaire: str
        :param timestamp: (required)
        :type timestamp: int
        :param address_tag:
        :type address_tag: str
        :param name:
        :type name: str
        :param network:
        :type network: str
        :param recv_window:
        :type recv_window: int
        :param transaction_fee_flag:
        :type transaction_fee_flag: bool
        :param wallet_type:
        :type wallet_type: int
        :param withdraw_order_id:
        :type withdraw_order_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_create_localentity_withdraw_apply_v1_serialize(
            address=address,
            amount=amount,
            coin=coin,
            questionnaire=questionnaire,
            timestamp=timestamp,
            address_tag=address_tag,
            name=name,
            network=network,
            recv_window=recv_window,
            transaction_fee_flag=transaction_fee_flag,
            wallet_type=wallet_type,
            withdraw_order_id=withdraw_order_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WalletCreateLocalentityWithdrawApplyV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wallet_create_localentity_withdraw_apply_v1_without_preload_content(
        self,
        address: StrictStr,
        amount: StrictStr,
        coin: StrictStr,
        questionnaire: StrictStr,
        timestamp: StrictInt,
        address_tag: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        network: Optional[StrictStr] = None,
        recv_window: Optional[StrictInt] = None,
        transaction_fee_flag: Optional[StrictBool] = None,
        wallet_type: Optional[StrictInt] = None,
        withdraw_order_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Withdraw (for local entities that require travel rule) (USER_DATA)

        Submit a withdrawal request for local entities that required travel rule.

        :param address: (required)
        :type address: str
        :param amount: (required)
        :type amount: str
        :param coin: (required)
        :type coin: str
        :param questionnaire: (required)
        :type questionnaire: str
        :param timestamp: (required)
        :type timestamp: int
        :param address_tag:
        :type address_tag: str
        :param name:
        :type name: str
        :param network:
        :type network: str
        :param recv_window:
        :type recv_window: int
        :param transaction_fee_flag:
        :type transaction_fee_flag: bool
        :param wallet_type:
        :type wallet_type: int
        :param withdraw_order_id:
        :type withdraw_order_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_create_localentity_withdraw_apply_v1_serialize(
            address=address,
            amount=amount,
            coin=coin,
            questionnaire=questionnaire,
            timestamp=timestamp,
            address_tag=address_tag,
            name=name,
            network=network,
            recv_window=recv_window,
            transaction_fee_flag=transaction_fee_flag,
            wallet_type=wallet_type,
            withdraw_order_id=withdraw_order_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WalletCreateLocalentityWithdrawApplyV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wallet_create_localentity_withdraw_apply_v1_serialize(
        self,
        address,
        amount,
        coin,
        questionnaire,
        timestamp,
        address_tag,
        name,
        network,
        recv_window,
        transaction_fee_flag,
        wallet_type,
        withdraw_order_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if address is not None:
            _form_params.append(('address', address))
        if address_tag is not None:
            _form_params.append(('addressTag', address_tag))
        if amount is not None:
            _form_params.append(('amount', amount))
        if coin is not None:
            _form_params.append(('coin', coin))
        if name is not None:
            _form_params.append(('name', name))
        if network is not None:
            _form_params.append(('network', network))
        if questionnaire is not None:
            _form_params.append(('questionnaire', questionnaire))
        if recv_window is not None:
            _form_params.append(('recvWindow', recv_window))
        if timestamp is not None:
            _form_params.append(('timestamp', timestamp))
        if transaction_fee_flag is not None:
            _form_params.append(('transactionFeeFlag', transaction_fee_flag))
        if wallet_type is not None:
            _form_params.append(('walletType', wallet_type))
        if withdraw_order_id is not None:
            _form_params.append(('withdrawOrderId', withdraw_order_id))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/sapi/v1/localentity/withdraw/apply',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wallet_get_localentity_deposit_history_v1(
        self,
        timestamp: StrictInt,
        tr_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of travel rule record Ids.")] = None,
        tx_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of transaction Ids.")] = None,
        tran_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of wallet tran Ids.")] = None,
        network: Optional[StrictStr] = None,
        coin: Optional[StrictStr] = None,
        travel_rule_status: Annotated[Optional[StrictInt], Field(description="0:Completed,1:Pending,2:Failed")] = None,
        pending_questionnaire: Annotated[Optional[StrictBool], Field(description="true: Only return records that pending deposit questionnaire. false/not provided: return all records.")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Default: 90 days from current timestamp")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="Default: present timestamp")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Default:0")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Default:1000, Max:1000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[WalletGetLocalentityDepositHistoryV1RespItem]:
        """Deposit History (for local entities that required travel rule) (supporting network) (USER_DATA)

        Fetch deposit history for local entities that required travel rule.

        :param timestamp: (required)
        :type timestamp: int
        :param tr_id: Comma(,) separated list of travel rule record Ids.
        :type tr_id: str
        :param tx_id: Comma(,) separated list of transaction Ids.
        :type tx_id: str
        :param tran_id: Comma(,) separated list of wallet tran Ids.
        :type tran_id: str
        :param network:
        :type network: str
        :param coin:
        :type coin: str
        :param travel_rule_status: 0:Completed,1:Pending,2:Failed
        :type travel_rule_status: int
        :param pending_questionnaire: true: Only return records that pending deposit questionnaire. false/not provided: return all records.
        :type pending_questionnaire: bool
        :param start_time: Default: 90 days from current timestamp
        :type start_time: int
        :param end_time: Default: present timestamp
        :type end_time: int
        :param offset: Default:0
        :type offset: int
        :param limit: Default:1000, Max:1000
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_get_localentity_deposit_history_v1_serialize(
            timestamp=timestamp,
            tr_id=tr_id,
            tx_id=tx_id,
            tran_id=tran_id,
            network=network,
            coin=coin,
            travel_rule_status=travel_rule_status,
            pending_questionnaire=pending_questionnaire,
            start_time=start_time,
            end_time=end_time,
            offset=offset,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[WalletGetLocalentityDepositHistoryV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wallet_get_localentity_deposit_history_v1_with_http_info(
        self,
        timestamp: StrictInt,
        tr_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of travel rule record Ids.")] = None,
        tx_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of transaction Ids.")] = None,
        tran_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of wallet tran Ids.")] = None,
        network: Optional[StrictStr] = None,
        coin: Optional[StrictStr] = None,
        travel_rule_status: Annotated[Optional[StrictInt], Field(description="0:Completed,1:Pending,2:Failed")] = None,
        pending_questionnaire: Annotated[Optional[StrictBool], Field(description="true: Only return records that pending deposit questionnaire. false/not provided: return all records.")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Default: 90 days from current timestamp")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="Default: present timestamp")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Default:0")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Default:1000, Max:1000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[WalletGetLocalentityDepositHistoryV1RespItem]]:
        """Deposit History (for local entities that required travel rule) (supporting network) (USER_DATA)

        Fetch deposit history for local entities that required travel rule.

        :param timestamp: (required)
        :type timestamp: int
        :param tr_id: Comma(,) separated list of travel rule record Ids.
        :type tr_id: str
        :param tx_id: Comma(,) separated list of transaction Ids.
        :type tx_id: str
        :param tran_id: Comma(,) separated list of wallet tran Ids.
        :type tran_id: str
        :param network:
        :type network: str
        :param coin:
        :type coin: str
        :param travel_rule_status: 0:Completed,1:Pending,2:Failed
        :type travel_rule_status: int
        :param pending_questionnaire: true: Only return records that pending deposit questionnaire. false/not provided: return all records.
        :type pending_questionnaire: bool
        :param start_time: Default: 90 days from current timestamp
        :type start_time: int
        :param end_time: Default: present timestamp
        :type end_time: int
        :param offset: Default:0
        :type offset: int
        :param limit: Default:1000, Max:1000
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_get_localentity_deposit_history_v1_serialize(
            timestamp=timestamp,
            tr_id=tr_id,
            tx_id=tx_id,
            tran_id=tran_id,
            network=network,
            coin=coin,
            travel_rule_status=travel_rule_status,
            pending_questionnaire=pending_questionnaire,
            start_time=start_time,
            end_time=end_time,
            offset=offset,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[WalletGetLocalentityDepositHistoryV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wallet_get_localentity_deposit_history_v1_without_preload_content(
        self,
        timestamp: StrictInt,
        tr_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of travel rule record Ids.")] = None,
        tx_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of transaction Ids.")] = None,
        tran_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of wallet tran Ids.")] = None,
        network: Optional[StrictStr] = None,
        coin: Optional[StrictStr] = None,
        travel_rule_status: Annotated[Optional[StrictInt], Field(description="0:Completed,1:Pending,2:Failed")] = None,
        pending_questionnaire: Annotated[Optional[StrictBool], Field(description="true: Only return records that pending deposit questionnaire. false/not provided: return all records.")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Default: 90 days from current timestamp")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="Default: present timestamp")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Default:0")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Default:1000, Max:1000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Deposit History (for local entities that required travel rule) (supporting network) (USER_DATA)

        Fetch deposit history for local entities that required travel rule.

        :param timestamp: (required)
        :type timestamp: int
        :param tr_id: Comma(,) separated list of travel rule record Ids.
        :type tr_id: str
        :param tx_id: Comma(,) separated list of transaction Ids.
        :type tx_id: str
        :param tran_id: Comma(,) separated list of wallet tran Ids.
        :type tran_id: str
        :param network:
        :type network: str
        :param coin:
        :type coin: str
        :param travel_rule_status: 0:Completed,1:Pending,2:Failed
        :type travel_rule_status: int
        :param pending_questionnaire: true: Only return records that pending deposit questionnaire. false/not provided: return all records.
        :type pending_questionnaire: bool
        :param start_time: Default: 90 days from current timestamp
        :type start_time: int
        :param end_time: Default: present timestamp
        :type end_time: int
        :param offset: Default:0
        :type offset: int
        :param limit: Default:1000, Max:1000
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_get_localentity_deposit_history_v1_serialize(
            timestamp=timestamp,
            tr_id=tr_id,
            tx_id=tx_id,
            tran_id=tran_id,
            network=network,
            coin=coin,
            travel_rule_status=travel_rule_status,
            pending_questionnaire=pending_questionnaire,
            start_time=start_time,
            end_time=end_time,
            offset=offset,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[WalletGetLocalentityDepositHistoryV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wallet_get_localentity_deposit_history_v1_serialize(
        self,
        timestamp,
        tr_id,
        tx_id,
        tran_id,
        network,
        coin,
        travel_rule_status,
        pending_questionnaire,
        start_time,
        end_time,
        offset,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tr_id is not None:
            
            _query_params.append(('trId', tr_id))
            
        if tx_id is not None:
            
            _query_params.append(('txId', tx_id))
            
        if tran_id is not None:
            
            _query_params.append(('tranId', tran_id))
            
        if network is not None:
            
            _query_params.append(('network', network))
            
        if coin is not None:
            
            _query_params.append(('coin', coin))
            
        if travel_rule_status is not None:
            
            _query_params.append(('travelRuleStatus', travel_rule_status))
            
        if pending_questionnaire is not None:
            
            _query_params.append(('pendingQuestionnaire', pending_questionnaire))
            
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/localentity/deposit/history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wallet_get_localentity_vasp_v1(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[WalletGetLocalentityVaspV1RespItem]:
        """Onboarded VASP list (for local entities that require travel rule) (supporting network) (USER_DATA)

        Fetch the onboarded VASP list for local entities that required travel rule.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_get_localentity_vasp_v1_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[WalletGetLocalentityVaspV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wallet_get_localentity_vasp_v1_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[WalletGetLocalentityVaspV1RespItem]]:
        """Onboarded VASP list (for local entities that require travel rule) (supporting network) (USER_DATA)

        Fetch the onboarded VASP list for local entities that required travel rule.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_get_localentity_vasp_v1_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[WalletGetLocalentityVaspV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wallet_get_localentity_vasp_v1_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Onboarded VASP list (for local entities that require travel rule) (supporting network) (USER_DATA)

        Fetch the onboarded VASP list for local entities that required travel rule.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_get_localentity_vasp_v1_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[WalletGetLocalentityVaspV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wallet_get_localentity_vasp_v1_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/localentity/vasp',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wallet_get_localentity_withdraw_history_v1(
        self,
        timestamp: StrictInt,
        tr_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of travel rule record Ids.")] = None,
        tx_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of transaction Ids.")] = None,
        withdraw_order_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of withdrawID defined by the client (i.e. client&#39;s internal withdrawID).")] = None,
        network: Optional[StrictStr] = None,
        coin: Optional[StrictStr] = None,
        travel_rule_status: Annotated[Optional[StrictInt], Field(description="0:Completed,1:Pending,2:Failed")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Default: 0")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True)]], Field(description="Default: 1000, Max: 1000")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Default: 90 days from current timestamp")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="Default: present timestamp")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[WalletGetLocalentityWithdrawHistoryV1RespItem]:
        """Withdraw History (for local entities that require travel rule) (supporting network) (USER_DATA)

        Fetch withdraw history for local entities that required travel rule.

        :param timestamp: (required)
        :type timestamp: int
        :param tr_id: Comma(,) separated list of travel rule record Ids.
        :type tr_id: str
        :param tx_id: Comma(,) separated list of transaction Ids.
        :type tx_id: str
        :param withdraw_order_id: Comma(,) separated list of withdrawID defined by the client (i.e. client&#39;s internal withdrawID).
        :type withdraw_order_id: str
        :param network:
        :type network: str
        :param coin:
        :type coin: str
        :param travel_rule_status: 0:Completed,1:Pending,2:Failed
        :type travel_rule_status: int
        :param offset: Default: 0
        :type offset: int
        :param limit: Default: 1000, Max: 1000
        :type limit: int
        :param start_time: Default: 90 days from current timestamp
        :type start_time: int
        :param end_time: Default: present timestamp
        :type end_time: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_get_localentity_withdraw_history_v1_serialize(
            timestamp=timestamp,
            tr_id=tr_id,
            tx_id=tx_id,
            withdraw_order_id=withdraw_order_id,
            network=network,
            coin=coin,
            travel_rule_status=travel_rule_status,
            offset=offset,
            limit=limit,
            start_time=start_time,
            end_time=end_time,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[WalletGetLocalentityWithdrawHistoryV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wallet_get_localentity_withdraw_history_v1_with_http_info(
        self,
        timestamp: StrictInt,
        tr_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of travel rule record Ids.")] = None,
        tx_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of transaction Ids.")] = None,
        withdraw_order_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of withdrawID defined by the client (i.e. client&#39;s internal withdrawID).")] = None,
        network: Optional[StrictStr] = None,
        coin: Optional[StrictStr] = None,
        travel_rule_status: Annotated[Optional[StrictInt], Field(description="0:Completed,1:Pending,2:Failed")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Default: 0")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True)]], Field(description="Default: 1000, Max: 1000")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Default: 90 days from current timestamp")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="Default: present timestamp")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[WalletGetLocalentityWithdrawHistoryV1RespItem]]:
        """Withdraw History (for local entities that require travel rule) (supporting network) (USER_DATA)

        Fetch withdraw history for local entities that required travel rule.

        :param timestamp: (required)
        :type timestamp: int
        :param tr_id: Comma(,) separated list of travel rule record Ids.
        :type tr_id: str
        :param tx_id: Comma(,) separated list of transaction Ids.
        :type tx_id: str
        :param withdraw_order_id: Comma(,) separated list of withdrawID defined by the client (i.e. client&#39;s internal withdrawID).
        :type withdraw_order_id: str
        :param network:
        :type network: str
        :param coin:
        :type coin: str
        :param travel_rule_status: 0:Completed,1:Pending,2:Failed
        :type travel_rule_status: int
        :param offset: Default: 0
        :type offset: int
        :param limit: Default: 1000, Max: 1000
        :type limit: int
        :param start_time: Default: 90 days from current timestamp
        :type start_time: int
        :param end_time: Default: present timestamp
        :type end_time: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_get_localentity_withdraw_history_v1_serialize(
            timestamp=timestamp,
            tr_id=tr_id,
            tx_id=tx_id,
            withdraw_order_id=withdraw_order_id,
            network=network,
            coin=coin,
            travel_rule_status=travel_rule_status,
            offset=offset,
            limit=limit,
            start_time=start_time,
            end_time=end_time,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[WalletGetLocalentityWithdrawHistoryV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wallet_get_localentity_withdraw_history_v1_without_preload_content(
        self,
        timestamp: StrictInt,
        tr_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of travel rule record Ids.")] = None,
        tx_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of transaction Ids.")] = None,
        withdraw_order_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of withdrawID defined by the client (i.e. client&#39;s internal withdrawID).")] = None,
        network: Optional[StrictStr] = None,
        coin: Optional[StrictStr] = None,
        travel_rule_status: Annotated[Optional[StrictInt], Field(description="0:Completed,1:Pending,2:Failed")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Default: 0")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True)]], Field(description="Default: 1000, Max: 1000")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Default: 90 days from current timestamp")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="Default: present timestamp")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Withdraw History (for local entities that require travel rule) (supporting network) (USER_DATA)

        Fetch withdraw history for local entities that required travel rule.

        :param timestamp: (required)
        :type timestamp: int
        :param tr_id: Comma(,) separated list of travel rule record Ids.
        :type tr_id: str
        :param tx_id: Comma(,) separated list of transaction Ids.
        :type tx_id: str
        :param withdraw_order_id: Comma(,) separated list of withdrawID defined by the client (i.e. client&#39;s internal withdrawID).
        :type withdraw_order_id: str
        :param network:
        :type network: str
        :param coin:
        :type coin: str
        :param travel_rule_status: 0:Completed,1:Pending,2:Failed
        :type travel_rule_status: int
        :param offset: Default: 0
        :type offset: int
        :param limit: Default: 1000, Max: 1000
        :type limit: int
        :param start_time: Default: 90 days from current timestamp
        :type start_time: int
        :param end_time: Default: present timestamp
        :type end_time: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_get_localentity_withdraw_history_v1_serialize(
            timestamp=timestamp,
            tr_id=tr_id,
            tx_id=tx_id,
            withdraw_order_id=withdraw_order_id,
            network=network,
            coin=coin,
            travel_rule_status=travel_rule_status,
            offset=offset,
            limit=limit,
            start_time=start_time,
            end_time=end_time,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[WalletGetLocalentityWithdrawHistoryV1RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wallet_get_localentity_withdraw_history_v1_serialize(
        self,
        timestamp,
        tr_id,
        tx_id,
        withdraw_order_id,
        network,
        coin,
        travel_rule_status,
        offset,
        limit,
        start_time,
        end_time,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tr_id is not None:
            
            _query_params.append(('trId', tr_id))
            
        if tx_id is not None:
            
            _query_params.append(('txId', tx_id))
            
        if withdraw_order_id is not None:
            
            _query_params.append(('withdrawOrderId', withdraw_order_id))
            
        if network is not None:
            
            _query_params.append(('network', network))
            
        if coin is not None:
            
            _query_params.append(('coin', coin))
            
        if travel_rule_status is not None:
            
            _query_params.append(('travelRuleStatus', travel_rule_status))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/localentity/withdraw/history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wallet_get_localentity_withdraw_history_v2(
        self,
        timestamp: StrictInt,
        tr_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of travel rule record Ids.")] = None,
        tx_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of transaction Ids.")] = None,
        withdraw_order_id: Annotated[Optional[StrictStr], Field(description="Withdraw ID defined by the client (i.e. client&#39;s internal withdrawID).")] = None,
        network: Optional[StrictStr] = None,
        coin: Optional[StrictStr] = None,
        travel_rule_status: Annotated[Optional[StrictInt], Field(description="0:Completed,1:Pending,2:Failed")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Default: 0")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True)]], Field(description="Default: 1000, Max: 1000")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Default: 90 days from current timestamp")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="Default: present timestamp")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[WalletGetLocalentityWithdrawHistoryV2RespItem]:
        """Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)

        Fetch withdraw history for local entities that required travel rule.

        :param timestamp: (required)
        :type timestamp: int
        :param tr_id: Comma(,) separated list of travel rule record Ids.
        :type tr_id: str
        :param tx_id: Comma(,) separated list of transaction Ids.
        :type tx_id: str
        :param withdraw_order_id: Withdraw ID defined by the client (i.e. client&#39;s internal withdrawID).
        :type withdraw_order_id: str
        :param network:
        :type network: str
        :param coin:
        :type coin: str
        :param travel_rule_status: 0:Completed,1:Pending,2:Failed
        :type travel_rule_status: int
        :param offset: Default: 0
        :type offset: int
        :param limit: Default: 1000, Max: 1000
        :type limit: int
        :param start_time: Default: 90 days from current timestamp
        :type start_time: int
        :param end_time: Default: present timestamp
        :type end_time: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_get_localentity_withdraw_history_v2_serialize(
            timestamp=timestamp,
            tr_id=tr_id,
            tx_id=tx_id,
            withdraw_order_id=withdraw_order_id,
            network=network,
            coin=coin,
            travel_rule_status=travel_rule_status,
            offset=offset,
            limit=limit,
            start_time=start_time,
            end_time=end_time,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[WalletGetLocalentityWithdrawHistoryV2RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wallet_get_localentity_withdraw_history_v2_with_http_info(
        self,
        timestamp: StrictInt,
        tr_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of travel rule record Ids.")] = None,
        tx_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of transaction Ids.")] = None,
        withdraw_order_id: Annotated[Optional[StrictStr], Field(description="Withdraw ID defined by the client (i.e. client&#39;s internal withdrawID).")] = None,
        network: Optional[StrictStr] = None,
        coin: Optional[StrictStr] = None,
        travel_rule_status: Annotated[Optional[StrictInt], Field(description="0:Completed,1:Pending,2:Failed")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Default: 0")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True)]], Field(description="Default: 1000, Max: 1000")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Default: 90 days from current timestamp")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="Default: present timestamp")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[WalletGetLocalentityWithdrawHistoryV2RespItem]]:
        """Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)

        Fetch withdraw history for local entities that required travel rule.

        :param timestamp: (required)
        :type timestamp: int
        :param tr_id: Comma(,) separated list of travel rule record Ids.
        :type tr_id: str
        :param tx_id: Comma(,) separated list of transaction Ids.
        :type tx_id: str
        :param withdraw_order_id: Withdraw ID defined by the client (i.e. client&#39;s internal withdrawID).
        :type withdraw_order_id: str
        :param network:
        :type network: str
        :param coin:
        :type coin: str
        :param travel_rule_status: 0:Completed,1:Pending,2:Failed
        :type travel_rule_status: int
        :param offset: Default: 0
        :type offset: int
        :param limit: Default: 1000, Max: 1000
        :type limit: int
        :param start_time: Default: 90 days from current timestamp
        :type start_time: int
        :param end_time: Default: present timestamp
        :type end_time: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_get_localentity_withdraw_history_v2_serialize(
            timestamp=timestamp,
            tr_id=tr_id,
            tx_id=tx_id,
            withdraw_order_id=withdraw_order_id,
            network=network,
            coin=coin,
            travel_rule_status=travel_rule_status,
            offset=offset,
            limit=limit,
            start_time=start_time,
            end_time=end_time,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[WalletGetLocalentityWithdrawHistoryV2RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wallet_get_localentity_withdraw_history_v2_without_preload_content(
        self,
        timestamp: StrictInt,
        tr_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of travel rule record Ids.")] = None,
        tx_id: Annotated[Optional[StrictStr], Field(description="Comma(,) separated list of transaction Ids.")] = None,
        withdraw_order_id: Annotated[Optional[StrictStr], Field(description="Withdraw ID defined by the client (i.e. client&#39;s internal withdrawID).")] = None,
        network: Optional[StrictStr] = None,
        coin: Optional[StrictStr] = None,
        travel_rule_status: Annotated[Optional[StrictInt], Field(description="0:Completed,1:Pending,2:Failed")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Default: 0")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=1000, strict=True)]], Field(description="Default: 1000, Max: 1000")] = None,
        start_time: Annotated[Optional[StrictInt], Field(description="Default: 90 days from current timestamp")] = None,
        end_time: Annotated[Optional[StrictInt], Field(description="Default: present timestamp")] = None,
        recv_window: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)

        Fetch withdraw history for local entities that required travel rule.

        :param timestamp: (required)
        :type timestamp: int
        :param tr_id: Comma(,) separated list of travel rule record Ids.
        :type tr_id: str
        :param tx_id: Comma(,) separated list of transaction Ids.
        :type tx_id: str
        :param withdraw_order_id: Withdraw ID defined by the client (i.e. client&#39;s internal withdrawID).
        :type withdraw_order_id: str
        :param network:
        :type network: str
        :param coin:
        :type coin: str
        :param travel_rule_status: 0:Completed,1:Pending,2:Failed
        :type travel_rule_status: int
        :param offset: Default: 0
        :type offset: int
        :param limit: Default: 1000, Max: 1000
        :type limit: int
        :param start_time: Default: 90 days from current timestamp
        :type start_time: int
        :param end_time: Default: present timestamp
        :type end_time: int
        :param recv_window:
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_get_localentity_withdraw_history_v2_serialize(
            timestamp=timestamp,
            tr_id=tr_id,
            tx_id=tx_id,
            withdraw_order_id=withdraw_order_id,
            network=network,
            coin=coin,
            travel_rule_status=travel_rule_status,
            offset=offset,
            limit=limit,
            start_time=start_time,
            end_time=end_time,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[WalletGetLocalentityWithdrawHistoryV2RespItem]",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wallet_get_localentity_withdraw_history_v2_serialize(
        self,
        timestamp,
        tr_id,
        tx_id,
        withdraw_order_id,
        network,
        coin,
        travel_rule_status,
        offset,
        limit,
        start_time,
        end_time,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tr_id is not None:
            
            _query_params.append(('trId', tr_id))
            
        if tx_id is not None:
            
            _query_params.append(('txId', tx_id))
            
        if withdraw_order_id is not None:
            
            _query_params.append(('withdrawOrderId', withdraw_order_id))
            
        if network is not None:
            
            _query_params.append(('network', network))
            
        if coin is not None:
            
            _query_params.append(('coin', coin))
            
        if travel_rule_status is not None:
            
            _query_params.append(('travelRuleStatus', travel_rule_status))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v2/localentity/withdraw/history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wallet_update_localentity_broker_deposit_provide_info_v1(
        self,
        beneficiary_pii: StrictStr,
        deposit_id: StrictStr,
        questionnaire: StrictStr,
        signature: StrictStr,
        sub_account_id: StrictStr,
        timestamp: StrictInt,
        address: Optional[StrictStr] = None,
        address_tag: Optional[StrictStr] = None,
        amount: Optional[Dict[str, Any]] = None,
        coin: Optional[StrictStr] = None,
        network: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WalletUpdateLocalentityBrokerDepositProvideInfoV1Resp:
        """Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)

        Submit questionnaire for brokers of local entities that require travel rule. The questionnaire is only applies to transactions from un-hosted wallets or VASPs that are not yet onboarded with GTR.

        :param beneficiary_pii: (required)
        :type beneficiary_pii: str
        :param deposit_id: (required)
        :type deposit_id: str
        :param questionnaire: (required)
        :type questionnaire: str
        :param signature: (required)
        :type signature: str
        :param sub_account_id: (required)
        :type sub_account_id: str
        :param timestamp: (required)
        :type timestamp: int
        :param address:
        :type address: str
        :param address_tag:
        :type address_tag: str
        :param amount:
        :type amount: object
        :param coin:
        :type coin: str
        :param network:
        :type network: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_update_localentity_broker_deposit_provide_info_v1_serialize(
            beneficiary_pii=beneficiary_pii,
            deposit_id=deposit_id,
            questionnaire=questionnaire,
            signature=signature,
            sub_account_id=sub_account_id,
            timestamp=timestamp,
            address=address,
            address_tag=address_tag,
            amount=amount,
            coin=coin,
            network=network,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WalletUpdateLocalentityBrokerDepositProvideInfoV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wallet_update_localentity_broker_deposit_provide_info_v1_with_http_info(
        self,
        beneficiary_pii: StrictStr,
        deposit_id: StrictStr,
        questionnaire: StrictStr,
        signature: StrictStr,
        sub_account_id: StrictStr,
        timestamp: StrictInt,
        address: Optional[StrictStr] = None,
        address_tag: Optional[StrictStr] = None,
        amount: Optional[Dict[str, Any]] = None,
        coin: Optional[StrictStr] = None,
        network: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WalletUpdateLocalentityBrokerDepositProvideInfoV1Resp]:
        """Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)

        Submit questionnaire for brokers of local entities that require travel rule. The questionnaire is only applies to transactions from un-hosted wallets or VASPs that are not yet onboarded with GTR.

        :param beneficiary_pii: (required)
        :type beneficiary_pii: str
        :param deposit_id: (required)
        :type deposit_id: str
        :param questionnaire: (required)
        :type questionnaire: str
        :param signature: (required)
        :type signature: str
        :param sub_account_id: (required)
        :type sub_account_id: str
        :param timestamp: (required)
        :type timestamp: int
        :param address:
        :type address: str
        :param address_tag:
        :type address_tag: str
        :param amount:
        :type amount: object
        :param coin:
        :type coin: str
        :param network:
        :type network: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_update_localentity_broker_deposit_provide_info_v1_serialize(
            beneficiary_pii=beneficiary_pii,
            deposit_id=deposit_id,
            questionnaire=questionnaire,
            signature=signature,
            sub_account_id=sub_account_id,
            timestamp=timestamp,
            address=address,
            address_tag=address_tag,
            amount=amount,
            coin=coin,
            network=network,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WalletUpdateLocalentityBrokerDepositProvideInfoV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wallet_update_localentity_broker_deposit_provide_info_v1_without_preload_content(
        self,
        beneficiary_pii: StrictStr,
        deposit_id: StrictStr,
        questionnaire: StrictStr,
        signature: StrictStr,
        sub_account_id: StrictStr,
        timestamp: StrictInt,
        address: Optional[StrictStr] = None,
        address_tag: Optional[StrictStr] = None,
        amount: Optional[Dict[str, Any]] = None,
        coin: Optional[StrictStr] = None,
        network: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)

        Submit questionnaire for brokers of local entities that require travel rule. The questionnaire is only applies to transactions from un-hosted wallets or VASPs that are not yet onboarded with GTR.

        :param beneficiary_pii: (required)
        :type beneficiary_pii: str
        :param deposit_id: (required)
        :type deposit_id: str
        :param questionnaire: (required)
        :type questionnaire: str
        :param signature: (required)
        :type signature: str
        :param sub_account_id: (required)
        :type sub_account_id: str
        :param timestamp: (required)
        :type timestamp: int
        :param address:
        :type address: str
        :param address_tag:
        :type address_tag: str
        :param amount:
        :type amount: object
        :param coin:
        :type coin: str
        :param network:
        :type network: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_update_localentity_broker_deposit_provide_info_v1_serialize(
            beneficiary_pii=beneficiary_pii,
            deposit_id=deposit_id,
            questionnaire=questionnaire,
            signature=signature,
            sub_account_id=sub_account_id,
            timestamp=timestamp,
            address=address,
            address_tag=address_tag,
            amount=amount,
            coin=coin,
            network=network,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WalletUpdateLocalentityBrokerDepositProvideInfoV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wallet_update_localentity_broker_deposit_provide_info_v1_serialize(
        self,
        beneficiary_pii,
        deposit_id,
        questionnaire,
        signature,
        sub_account_id,
        timestamp,
        address,
        address_tag,
        amount,
        coin,
        network,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if address is not None:
            _form_params.append(('address', address))
        if address_tag is not None:
            _form_params.append(('addressTag', address_tag))
        if amount is not None:
            _form_params.append(('amount', amount))
        if beneficiary_pii is not None:
            _form_params.append(('beneficiaryPii', beneficiary_pii))
        if coin is not None:
            _form_params.append(('coin', coin))
        if deposit_id is not None:
            _form_params.append(('depositId', deposit_id))
        if network is not None:
            _form_params.append(('network', network))
        if questionnaire is not None:
            _form_params.append(('questionnaire', questionnaire))
        if signature is not None:
            _form_params.append(('signature', signature))
        if sub_account_id is not None:
            _form_params.append(('subAccountId', sub_account_id))
        if timestamp is not None:
            _form_params.append(('timestamp', timestamp))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/sapi/v1/localentity/broker/deposit/provide-info',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wallet_update_localentity_deposit_provide_info_v1(
        self,
        questionnaire: StrictStr,
        timestamp: StrictInt,
        tran_id: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WalletUpdateLocalentityDepositProvideInfoV1Resp:
        """Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)

        Submit questionnaire for local entities that require travel rule. The questionnaire is only applies to transactions from unhosted wallets or VASPs that are not yet onboarded with GTR.

        :param questionnaire: (required)
        :type questionnaire: str
        :param timestamp: (required)
        :type timestamp: int
        :param tran_id: (required)
        :type tran_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_update_localentity_deposit_provide_info_v1_serialize(
            questionnaire=questionnaire,
            timestamp=timestamp,
            tran_id=tran_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WalletUpdateLocalentityDepositProvideInfoV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wallet_update_localentity_deposit_provide_info_v1_with_http_info(
        self,
        questionnaire: StrictStr,
        timestamp: StrictInt,
        tran_id: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WalletUpdateLocalentityDepositProvideInfoV1Resp]:
        """Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)

        Submit questionnaire for local entities that require travel rule. The questionnaire is only applies to transactions from unhosted wallets or VASPs that are not yet onboarded with GTR.

        :param questionnaire: (required)
        :type questionnaire: str
        :param timestamp: (required)
        :type timestamp: int
        :param tran_id: (required)
        :type tran_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_update_localentity_deposit_provide_info_v1_serialize(
            questionnaire=questionnaire,
            timestamp=timestamp,
            tran_id=tran_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WalletUpdateLocalentityDepositProvideInfoV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wallet_update_localentity_deposit_provide_info_v1_without_preload_content(
        self,
        questionnaire: StrictStr,
        timestamp: StrictInt,
        tran_id: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)

        Submit questionnaire for local entities that require travel rule. The questionnaire is only applies to transactions from unhosted wallets or VASPs that are not yet onboarded with GTR.

        :param questionnaire: (required)
        :type questionnaire: str
        :param timestamp: (required)
        :type timestamp: int
        :param tran_id: (required)
        :type tran_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wallet_update_localentity_deposit_provide_info_v1_serialize(
            questionnaire=questionnaire,
            timestamp=timestamp,
            tran_id=tran_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WalletUpdateLocalentityDepositProvideInfoV1Resp",
            '4XX': "APIError",
            '5XX': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wallet_update_localentity_deposit_provide_info_v1_serialize(
        self,
        questionnaire,
        timestamp,
        tran_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if questionnaire is not None:
            _form_params.append(('questionnaire', questionnaire))
        if timestamp is not None:
            _form_params.append(('timestamp', timestamp))
        if tran_id is not None:
            _form_params.append(('tranId', tran_id))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/sapi/v1/localentity/deposit/provide-info',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


