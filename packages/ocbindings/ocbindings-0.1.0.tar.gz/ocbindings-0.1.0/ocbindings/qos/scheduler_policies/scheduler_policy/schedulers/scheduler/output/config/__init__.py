# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for scheduler output
  """
  __slots__ = ('_path_helper', '_extmethods', '__output_type','__child_scheduler','__output_fwd_group',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    self.__child_scheduler = YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__output_fwd_group = YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'output', 'config']

  def _get_output_type(self):
    """
    Getter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)

    YANG Description: Describes the type of output sink for the scheduler.
    """
    return self.__output_type
      
  def _set_output_type(self, v, load=False):
    """
    Setter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_type() directly.

    YANG Description: Describes the type of output sink for the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)""",
        })

    self.__output_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_type(self):
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)


  def _get_child_scheduler(self):
    """
    Getter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/child_scheduler (leafref)

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    return self.__child_scheduler
      
  def _set_child_scheduler(self, v, load=False):
    """
    Setter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/child_scheduler (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_child_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_child_scheduler() directly.

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """child_scheduler must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__child_scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_child_scheduler(self):
    self.__child_scheduler = YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_output_fwd_group(self):
    """
    Getter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    return self.__output_fwd_group
      
  def _set_output_fwd_group(self, v, load=False):
    """
    Setter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_fwd_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_fwd_group() directly.

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_fwd_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__output_fwd_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_fwd_group(self):
    self.__output_fwd_group = YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  output_type = __builtin__.property(_get_output_type, _set_output_type)
  child_scheduler = __builtin__.property(_get_child_scheduler, _set_child_scheduler)
  output_fwd_group = __builtin__.property(_get_output_fwd_group, _set_output_fwd_group)


  _pyangbind_elements = OrderedDict([('output_type', output_type), ('child_scheduler', child_scheduler), ('output_fwd_group', output_fwd_group), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for scheduler output
  """
  __slots__ = ('_path_helper', '_extmethods', '__output_type','__child_scheduler','__output_fwd_group',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    self.__child_scheduler = YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__output_fwd_group = YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'output', 'config']

  def _get_output_type(self):
    """
    Getter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)

    YANG Description: Describes the type of output sink for the scheduler.
    """
    return self.__output_type
      
  def _set_output_type(self, v, load=False):
    """
    Setter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_type() directly.

    YANG Description: Describes the type of output sink for the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)""",
        })

    self.__output_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_type(self):
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)


  def _get_child_scheduler(self):
    """
    Getter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/child_scheduler (leafref)

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    return self.__child_scheduler
      
  def _set_child_scheduler(self, v, load=False):
    """
    Setter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/child_scheduler (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_child_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_child_scheduler() directly.

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """child_scheduler must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__child_scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_child_scheduler(self):
    self.__child_scheduler = YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_output_fwd_group(self):
    """
    Getter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    return self.__output_fwd_group
      
  def _set_output_fwd_group(self, v, load=False):
    """
    Setter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_fwd_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_fwd_group() directly.

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_fwd_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__output_fwd_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_fwd_group(self):
    self.__output_fwd_group = YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  output_type = __builtin__.property(_get_output_type, _set_output_type)
  child_scheduler = __builtin__.property(_get_child_scheduler, _set_child_scheduler)
  output_fwd_group = __builtin__.property(_get_output_fwd_group, _set_output_fwd_group)


  _pyangbind_elements = OrderedDict([('output_type', output_type), ('child_scheduler', child_scheduler), ('output_fwd_group', output_fwd_group), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for scheduler output
  """
  __slots__ = ('_path_helper', '_extmethods', '__output_type','__child_scheduler','__output_fwd_group',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    self.__child_scheduler = YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__output_fwd_group = YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'output', 'config']

  def _get_output_type(self):
    """
    Getter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)

    YANG Description: Describes the type of output sink for the scheduler.
    """
    return self.__output_type
      
  def _set_output_type(self, v, load=False):
    """
    Setter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_type() directly.

    YANG Description: Describes the type of output sink for the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)""",
        })

    self.__output_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_type(self):
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)


  def _get_child_scheduler(self):
    """
    Getter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/child_scheduler (leafref)

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    return self.__child_scheduler
      
  def _set_child_scheduler(self, v, load=False):
    """
    Setter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/child_scheduler (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_child_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_child_scheduler() directly.

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """child_scheduler must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__child_scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_child_scheduler(self):
    self.__child_scheduler = YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_output_fwd_group(self):
    """
    Getter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    return self.__output_fwd_group
      
  def _set_output_fwd_group(self, v, load=False):
    """
    Setter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_fwd_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_fwd_group() directly.

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_fwd_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__output_fwd_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_fwd_group(self):
    self.__output_fwd_group = YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  output_type = __builtin__.property(_get_output_type, _set_output_type)
  child_scheduler = __builtin__.property(_get_child_scheduler, _set_child_scheduler)
  output_fwd_group = __builtin__.property(_get_output_fwd_group, _set_output_fwd_group)


  _pyangbind_elements = OrderedDict([('output_type', output_type), ('child_scheduler', child_scheduler), ('output_fwd_group', output_fwd_group), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for scheduler output
  """
  __slots__ = ('_path_helper', '_extmethods', '__output_type','__child_scheduler','__output_fwd_group',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    self.__child_scheduler = YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__output_fwd_group = YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'output', 'config']

  def _get_output_type(self):
    """
    Getter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)

    YANG Description: Describes the type of output sink for the scheduler.
    """
    return self.__output_type
      
  def _set_output_type(self, v, load=False):
    """
    Setter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_type() directly.

    YANG Description: Describes the type of output sink for the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)""",
        })

    self.__output_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_type(self):
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)


  def _get_child_scheduler(self):
    """
    Getter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/child_scheduler (leafref)

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    return self.__child_scheduler
      
  def _set_child_scheduler(self, v, load=False):
    """
    Setter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/child_scheduler (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_child_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_child_scheduler() directly.

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """child_scheduler must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__child_scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_child_scheduler(self):
    self.__child_scheduler = YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_output_fwd_group(self):
    """
    Getter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    return self.__output_fwd_group
      
  def _set_output_fwd_group(self, v, load=False):
    """
    Setter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_fwd_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_fwd_group() directly.

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_fwd_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__output_fwd_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_fwd_group(self):
    self.__output_fwd_group = YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  output_type = __builtin__.property(_get_output_type, _set_output_type)
  child_scheduler = __builtin__.property(_get_child_scheduler, _set_child_scheduler)
  output_fwd_group = __builtin__.property(_get_output_fwd_group, _set_output_fwd_group)


  _pyangbind_elements = OrderedDict([('output_type', output_type), ('child_scheduler', child_scheduler), ('output_fwd_group', output_fwd_group), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for scheduler output
  """
  __slots__ = ('_path_helper', '_extmethods', '__output_type','__child_scheduler','__output_fwd_group',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    self.__child_scheduler = YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__output_fwd_group = YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'output', 'config']

  def _get_output_type(self):
    """
    Getter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)

    YANG Description: Describes the type of output sink for the scheduler.
    """
    return self.__output_type
      
  def _set_output_type(self, v, load=False):
    """
    Setter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_type() directly.

    YANG Description: Describes the type of output sink for the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)""",
        })

    self.__output_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_type(self):
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)


  def _get_child_scheduler(self):
    """
    Getter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/child_scheduler (leafref)

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    return self.__child_scheduler
      
  def _set_child_scheduler(self, v, load=False):
    """
    Setter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/child_scheduler (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_child_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_child_scheduler() directly.

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """child_scheduler must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__child_scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_child_scheduler(self):
    self.__child_scheduler = YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_output_fwd_group(self):
    """
    Getter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    return self.__output_fwd_group
      
  def _set_output_fwd_group(self, v, load=False):
    """
    Setter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_fwd_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_fwd_group() directly.

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_fwd_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__output_fwd_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_fwd_group(self):
    self.__output_fwd_group = YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  output_type = __builtin__.property(_get_output_type, _set_output_type)
  child_scheduler = __builtin__.property(_get_child_scheduler, _set_child_scheduler)
  output_fwd_group = __builtin__.property(_get_output_fwd_group, _set_output_fwd_group)


  _pyangbind_elements = OrderedDict([('output_type', output_type), ('child_scheduler', child_scheduler), ('output_fwd_group', output_fwd_group), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for scheduler output
  """
  __slots__ = ('_path_helper', '_extmethods', '__output_type','__child_scheduler','__output_fwd_group',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    self.__child_scheduler = YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__output_fwd_group = YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'output', 'config']

  def _get_output_type(self):
    """
    Getter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)

    YANG Description: Describes the type of output sink for the scheduler.
    """
    return self.__output_type
      
  def _set_output_type(self, v, load=False):
    """
    Setter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_type() directly.

    YANG Description: Describes the type of output sink for the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)""",
        })

    self.__output_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_type(self):
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)


  def _get_child_scheduler(self):
    """
    Getter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/child_scheduler (leafref)

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    return self.__child_scheduler
      
  def _set_child_scheduler(self, v, load=False):
    """
    Setter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/child_scheduler (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_child_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_child_scheduler() directly.

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """child_scheduler must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__child_scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_child_scheduler(self):
    self.__child_scheduler = YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_output_fwd_group(self):
    """
    Getter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    return self.__output_fwd_group
      
  def _set_output_fwd_group(self, v, load=False):
    """
    Setter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_fwd_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_fwd_group() directly.

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_fwd_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__output_fwd_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_fwd_group(self):
    self.__output_fwd_group = YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  output_type = __builtin__.property(_get_output_type, _set_output_type)
  child_scheduler = __builtin__.property(_get_child_scheduler, _set_child_scheduler)
  output_fwd_group = __builtin__.property(_get_output_fwd_group, _set_output_fwd_group)


  _pyangbind_elements = OrderedDict([('output_type', output_type), ('child_scheduler', child_scheduler), ('output_fwd_group', output_fwd_group), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for scheduler output
  """
  __slots__ = ('_path_helper', '_extmethods', '__output_type','__child_scheduler','__output_fwd_group',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    self.__child_scheduler = YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__output_fwd_group = YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'output', 'config']

  def _get_output_type(self):
    """
    Getter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)

    YANG Description: Describes the type of output sink for the scheduler.
    """
    return self.__output_type
      
  def _set_output_type(self, v, load=False):
    """
    Setter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_type() directly.

    YANG Description: Describes the type of output sink for the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)""",
        })

    self.__output_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_type(self):
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)


  def _get_child_scheduler(self):
    """
    Getter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/child_scheduler (leafref)

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    return self.__child_scheduler
      
  def _set_child_scheduler(self, v, load=False):
    """
    Setter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/child_scheduler (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_child_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_child_scheduler() directly.

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """child_scheduler must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__child_scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_child_scheduler(self):
    self.__child_scheduler = YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_output_fwd_group(self):
    """
    Getter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    return self.__output_fwd_group
      
  def _set_output_fwd_group(self, v, load=False):
    """
    Setter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_fwd_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_fwd_group() directly.

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_fwd_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__output_fwd_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_fwd_group(self):
    self.__output_fwd_group = YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  output_type = __builtin__.property(_get_output_type, _set_output_type)
  child_scheduler = __builtin__.property(_get_child_scheduler, _set_child_scheduler)
  output_fwd_group = __builtin__.property(_get_output_fwd_group, _set_output_fwd_group)


  _pyangbind_elements = OrderedDict([('output_type', output_type), ('child_scheduler', child_scheduler), ('output_fwd_group', output_fwd_group), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for scheduler output
  """
  __slots__ = ('_path_helper', '_extmethods', '__output_type','__child_scheduler','__output_fwd_group',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    self.__child_scheduler = YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__output_fwd_group = YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'output', 'config']

  def _get_output_type(self):
    """
    Getter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)

    YANG Description: Describes the type of output sink for the scheduler.
    """
    return self.__output_type
      
  def _set_output_type(self, v, load=False):
    """
    Setter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_type() directly.

    YANG Description: Describes the type of output sink for the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)""",
        })

    self.__output_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_type(self):
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SCHEDULER': {}, 'FWD_GROUP': {}, 'INTERFACE': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)


  def _get_child_scheduler(self):
    """
    Getter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/child_scheduler (leafref)

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    return self.__child_scheduler
      
  def _set_child_scheduler(self, v, load=False):
    """
    Setter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/child_scheduler (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_child_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_child_scheduler() directly.

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """child_scheduler must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__child_scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_child_scheduler(self):
    self.__child_scheduler = YANGDynClass(base=str, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_output_fwd_group(self):
    """
    Getter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    return self.__output_fwd_group
      
  def _set_output_fwd_group(self, v, load=False):
    """
    Setter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_fwd_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_fwd_group() directly.

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_fwd_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__output_fwd_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_fwd_group(self):
    self.__output_fwd_group = YANGDynClass(base=str, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  output_type = __builtin__.property(_get_output_type, _set_output_type)
  child_scheduler = __builtin__.property(_get_child_scheduler, _set_child_scheduler)
  output_fwd_group = __builtin__.property(_get_output_fwd_group, _set_output_fwd_group)


  _pyangbind_elements = OrderedDict([('output_type', output_type), ('child_scheduler', child_scheduler), ('output_fwd_group', output_fwd_group), ])


