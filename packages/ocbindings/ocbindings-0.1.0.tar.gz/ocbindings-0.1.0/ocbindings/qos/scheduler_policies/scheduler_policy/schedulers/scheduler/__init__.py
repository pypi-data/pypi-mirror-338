# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import config
from . import state
from . import inputs
from . import output
from . import one_rate_two_color
from . import two_rate_three_color
class scheduler(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of defined QoS traffic schedulers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__config','__state','__inputs','__output','__one_rate_two_color','__two_rate_three_color',)

  _yang_name = 'scheduler'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    self.__inputs = YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__output = YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__one_rate_two_color = YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__two_rate_three_color = YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)

    YANG Description: Reference to the list key
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)

    YANG Description: Configuration data for QoS schedulers
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)

    YANG Description: Operational state data for QoS schedulers
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)


  def _get_inputs(self):
    """
    Getter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)

    YANG Description: Enclosing container 
    """
    return self.__inputs
      
  def _set_inputs(self, v, load=False):
    """
    Setter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inputs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inputs() directly.

    YANG Description: Enclosing container 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inputs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__inputs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inputs(self):
    self.__inputs = YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_output(self):
    """
    Getter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)

    YANG Description: Top-level container for scheduler output data
    """
    return self.__output
      
  def _set_output(self, v, load=False):
    """
    Setter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output() directly.

    YANG Description: Top-level container for scheduler output data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__output = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output(self):
    self.__output = YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_one_rate_two_color(self):
    """
    Getter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    return self.__one_rate_two_color
      
  def _set_one_rate_two_color(self, v, load=False):
    """
    Setter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_one_rate_two_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_one_rate_two_color() directly.

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """one_rate_two_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__one_rate_two_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_one_rate_two_color(self):
    self.__one_rate_two_color = YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_two_rate_three_color(self):
    """
    Getter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    return self.__two_rate_three_color
      
  def _set_two_rate_three_color(self, v, load=False):
    """
    Setter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_two_rate_three_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_two_rate_three_color() directly.

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """two_rate_three_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__two_rate_three_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_two_rate_three_color(self):
    self.__two_rate_three_color = YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  sequence = __builtin__.property(_get_sequence, _set_sequence)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  inputs = __builtin__.property(_get_inputs, _set_inputs)
  output = __builtin__.property(_get_output, _set_output)
  one_rate_two_color = __builtin__.property(_get_one_rate_two_color, _set_one_rate_two_color)
  two_rate_three_color = __builtin__.property(_get_two_rate_three_color, _set_two_rate_three_color)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('config', config), ('state', state), ('inputs', inputs), ('output', output), ('one_rate_two_color', one_rate_two_color), ('two_rate_three_color', two_rate_three_color), ])


from . import config
from . import state
from . import inputs
from . import output
from . import one_rate_two_color
from . import two_rate_three_color
class scheduler(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of defined QoS traffic schedulers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__config','__state','__inputs','__output','__one_rate_two_color','__two_rate_three_color',)

  _yang_name = 'scheduler'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    self.__inputs = YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__output = YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__one_rate_two_color = YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__two_rate_three_color = YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)

    YANG Description: Reference to the list key
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)

    YANG Description: Configuration data for QoS schedulers
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)

    YANG Description: Operational state data for QoS schedulers
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)


  def _get_inputs(self):
    """
    Getter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)

    YANG Description: Enclosing container 
    """
    return self.__inputs
      
  def _set_inputs(self, v, load=False):
    """
    Setter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inputs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inputs() directly.

    YANG Description: Enclosing container 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inputs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__inputs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inputs(self):
    self.__inputs = YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_output(self):
    """
    Getter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)

    YANG Description: Top-level container for scheduler output data
    """
    return self.__output
      
  def _set_output(self, v, load=False):
    """
    Setter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output() directly.

    YANG Description: Top-level container for scheduler output data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__output = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output(self):
    self.__output = YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_one_rate_two_color(self):
    """
    Getter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    return self.__one_rate_two_color
      
  def _set_one_rate_two_color(self, v, load=False):
    """
    Setter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_one_rate_two_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_one_rate_two_color() directly.

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """one_rate_two_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__one_rate_two_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_one_rate_two_color(self):
    self.__one_rate_two_color = YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_two_rate_three_color(self):
    """
    Getter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    return self.__two_rate_three_color
      
  def _set_two_rate_three_color(self, v, load=False):
    """
    Setter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_two_rate_three_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_two_rate_three_color() directly.

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """two_rate_three_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__two_rate_three_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_two_rate_three_color(self):
    self.__two_rate_three_color = YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  sequence = __builtin__.property(_get_sequence, _set_sequence)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  inputs = __builtin__.property(_get_inputs, _set_inputs)
  output = __builtin__.property(_get_output, _set_output)
  one_rate_two_color = __builtin__.property(_get_one_rate_two_color, _set_one_rate_two_color)
  two_rate_three_color = __builtin__.property(_get_two_rate_three_color, _set_two_rate_three_color)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('config', config), ('state', state), ('inputs', inputs), ('output', output), ('one_rate_two_color', one_rate_two_color), ('two_rate_three_color', two_rate_three_color), ])


from . import config
from . import state
from . import inputs
from . import output
from . import one_rate_two_color
from . import two_rate_three_color
class scheduler(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of defined QoS traffic schedulers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__config','__state','__inputs','__output','__one_rate_two_color','__two_rate_three_color',)

  _yang_name = 'scheduler'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    self.__inputs = YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__output = YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__one_rate_two_color = YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__two_rate_three_color = YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)

    YANG Description: Reference to the list key
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)

    YANG Description: Configuration data for QoS schedulers
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)

    YANG Description: Operational state data for QoS schedulers
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)


  def _get_inputs(self):
    """
    Getter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)

    YANG Description: Enclosing container 
    """
    return self.__inputs
      
  def _set_inputs(self, v, load=False):
    """
    Setter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inputs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inputs() directly.

    YANG Description: Enclosing container 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inputs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__inputs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inputs(self):
    self.__inputs = YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_output(self):
    """
    Getter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)

    YANG Description: Top-level container for scheduler output data
    """
    return self.__output
      
  def _set_output(self, v, load=False):
    """
    Setter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output() directly.

    YANG Description: Top-level container for scheduler output data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__output = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output(self):
    self.__output = YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_one_rate_two_color(self):
    """
    Getter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    return self.__one_rate_two_color
      
  def _set_one_rate_two_color(self, v, load=False):
    """
    Setter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_one_rate_two_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_one_rate_two_color() directly.

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """one_rate_two_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__one_rate_two_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_one_rate_two_color(self):
    self.__one_rate_two_color = YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_two_rate_three_color(self):
    """
    Getter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    return self.__two_rate_three_color
      
  def _set_two_rate_three_color(self, v, load=False):
    """
    Setter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_two_rate_three_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_two_rate_three_color() directly.

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """two_rate_three_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__two_rate_three_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_two_rate_three_color(self):
    self.__two_rate_three_color = YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  sequence = __builtin__.property(_get_sequence, _set_sequence)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  inputs = __builtin__.property(_get_inputs, _set_inputs)
  output = __builtin__.property(_get_output, _set_output)
  one_rate_two_color = __builtin__.property(_get_one_rate_two_color, _set_one_rate_two_color)
  two_rate_three_color = __builtin__.property(_get_two_rate_three_color, _set_two_rate_three_color)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('config', config), ('state', state), ('inputs', inputs), ('output', output), ('one_rate_two_color', one_rate_two_color), ('two_rate_three_color', two_rate_three_color), ])


from . import config
from . import state
from . import inputs
from . import output
from . import one_rate_two_color
from . import two_rate_three_color
class scheduler(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of defined QoS traffic schedulers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__config','__state','__inputs','__output','__one_rate_two_color','__two_rate_three_color',)

  _yang_name = 'scheduler'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    self.__inputs = YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__output = YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__one_rate_two_color = YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__two_rate_three_color = YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)

    YANG Description: Reference to the list key
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)

    YANG Description: Configuration data for QoS schedulers
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)

    YANG Description: Operational state data for QoS schedulers
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)


  def _get_inputs(self):
    """
    Getter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)

    YANG Description: Enclosing container 
    """
    return self.__inputs
      
  def _set_inputs(self, v, load=False):
    """
    Setter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inputs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inputs() directly.

    YANG Description: Enclosing container 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inputs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__inputs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inputs(self):
    self.__inputs = YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_output(self):
    """
    Getter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)

    YANG Description: Top-level container for scheduler output data
    """
    return self.__output
      
  def _set_output(self, v, load=False):
    """
    Setter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output() directly.

    YANG Description: Top-level container for scheduler output data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__output = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output(self):
    self.__output = YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_one_rate_two_color(self):
    """
    Getter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    return self.__one_rate_two_color
      
  def _set_one_rate_two_color(self, v, load=False):
    """
    Setter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_one_rate_two_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_one_rate_two_color() directly.

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """one_rate_two_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__one_rate_two_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_one_rate_two_color(self):
    self.__one_rate_two_color = YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_two_rate_three_color(self):
    """
    Getter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    return self.__two_rate_three_color
      
  def _set_two_rate_three_color(self, v, load=False):
    """
    Setter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_two_rate_three_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_two_rate_three_color() directly.

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """two_rate_three_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__two_rate_three_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_two_rate_three_color(self):
    self.__two_rate_three_color = YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  sequence = __builtin__.property(_get_sequence, _set_sequence)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  inputs = __builtin__.property(_get_inputs, _set_inputs)
  output = __builtin__.property(_get_output, _set_output)
  one_rate_two_color = __builtin__.property(_get_one_rate_two_color, _set_one_rate_two_color)
  two_rate_three_color = __builtin__.property(_get_two_rate_three_color, _set_two_rate_three_color)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('config', config), ('state', state), ('inputs', inputs), ('output', output), ('one_rate_two_color', one_rate_two_color), ('two_rate_three_color', two_rate_three_color), ])


from . import config
from . import state
from . import inputs
from . import output
from . import one_rate_two_color
from . import two_rate_three_color
class scheduler(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of defined QoS traffic schedulers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__config','__state','__inputs','__output','__one_rate_two_color','__two_rate_three_color',)

  _yang_name = 'scheduler'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    self.__inputs = YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__output = YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__one_rate_two_color = YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__two_rate_three_color = YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)

    YANG Description: Reference to the list key
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)

    YANG Description: Configuration data for QoS schedulers
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)

    YANG Description: Operational state data for QoS schedulers
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)


  def _get_inputs(self):
    """
    Getter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)

    YANG Description: Enclosing container 
    """
    return self.__inputs
      
  def _set_inputs(self, v, load=False):
    """
    Setter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inputs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inputs() directly.

    YANG Description: Enclosing container 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inputs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__inputs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inputs(self):
    self.__inputs = YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_output(self):
    """
    Getter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)

    YANG Description: Top-level container for scheduler output data
    """
    return self.__output
      
  def _set_output(self, v, load=False):
    """
    Setter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output() directly.

    YANG Description: Top-level container for scheduler output data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__output = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output(self):
    self.__output = YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_one_rate_two_color(self):
    """
    Getter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    return self.__one_rate_two_color
      
  def _set_one_rate_two_color(self, v, load=False):
    """
    Setter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_one_rate_two_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_one_rate_two_color() directly.

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """one_rate_two_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__one_rate_two_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_one_rate_two_color(self):
    self.__one_rate_two_color = YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_two_rate_three_color(self):
    """
    Getter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    return self.__two_rate_three_color
      
  def _set_two_rate_three_color(self, v, load=False):
    """
    Setter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_two_rate_three_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_two_rate_three_color() directly.

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """two_rate_three_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__two_rate_three_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_two_rate_three_color(self):
    self.__two_rate_three_color = YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  sequence = __builtin__.property(_get_sequence, _set_sequence)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  inputs = __builtin__.property(_get_inputs, _set_inputs)
  output = __builtin__.property(_get_output, _set_output)
  one_rate_two_color = __builtin__.property(_get_one_rate_two_color, _set_one_rate_two_color)
  two_rate_three_color = __builtin__.property(_get_two_rate_three_color, _set_two_rate_three_color)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('config', config), ('state', state), ('inputs', inputs), ('output', output), ('one_rate_two_color', one_rate_two_color), ('two_rate_three_color', two_rate_three_color), ])


from . import config
from . import state
from . import inputs
from . import output
from . import one_rate_two_color
from . import two_rate_three_color
class scheduler(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of defined QoS traffic schedulers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__config','__state','__inputs','__output','__one_rate_two_color','__two_rate_three_color',)

  _yang_name = 'scheduler'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    self.__inputs = YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__output = YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__one_rate_two_color = YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__two_rate_three_color = YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)

    YANG Description: Reference to the list key
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)

    YANG Description: Configuration data for QoS schedulers
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)

    YANG Description: Operational state data for QoS schedulers
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)


  def _get_inputs(self):
    """
    Getter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)

    YANG Description: Enclosing container 
    """
    return self.__inputs
      
  def _set_inputs(self, v, load=False):
    """
    Setter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inputs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inputs() directly.

    YANG Description: Enclosing container 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inputs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__inputs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inputs(self):
    self.__inputs = YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_output(self):
    """
    Getter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)

    YANG Description: Top-level container for scheduler output data
    """
    return self.__output
      
  def _set_output(self, v, load=False):
    """
    Setter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output() directly.

    YANG Description: Top-level container for scheduler output data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__output = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output(self):
    self.__output = YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_one_rate_two_color(self):
    """
    Getter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    return self.__one_rate_two_color
      
  def _set_one_rate_two_color(self, v, load=False):
    """
    Setter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_one_rate_two_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_one_rate_two_color() directly.

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """one_rate_two_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__one_rate_two_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_one_rate_two_color(self):
    self.__one_rate_two_color = YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_two_rate_three_color(self):
    """
    Getter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    return self.__two_rate_three_color
      
  def _set_two_rate_three_color(self, v, load=False):
    """
    Setter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_two_rate_three_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_two_rate_three_color() directly.

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """two_rate_three_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__two_rate_three_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_two_rate_three_color(self):
    self.__two_rate_three_color = YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  sequence = __builtin__.property(_get_sequence, _set_sequence)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  inputs = __builtin__.property(_get_inputs, _set_inputs)
  output = __builtin__.property(_get_output, _set_output)
  one_rate_two_color = __builtin__.property(_get_one_rate_two_color, _set_one_rate_two_color)
  two_rate_three_color = __builtin__.property(_get_two_rate_three_color, _set_two_rate_three_color)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('config', config), ('state', state), ('inputs', inputs), ('output', output), ('one_rate_two_color', one_rate_two_color), ('two_rate_three_color', two_rate_three_color), ])


from . import config
from . import state
from . import inputs
from . import output
from . import one_rate_two_color
from . import two_rate_three_color
class scheduler(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of defined QoS traffic schedulers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__config','__state','__inputs','__output','__one_rate_two_color','__two_rate_three_color',)

  _yang_name = 'scheduler'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    self.__inputs = YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__output = YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__one_rate_two_color = YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__two_rate_three_color = YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)

    YANG Description: Reference to the list key
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)

    YANG Description: Configuration data for QoS schedulers
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)

    YANG Description: Operational state data for QoS schedulers
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)


  def _get_inputs(self):
    """
    Getter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)

    YANG Description: Enclosing container 
    """
    return self.__inputs
      
  def _set_inputs(self, v, load=False):
    """
    Setter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inputs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inputs() directly.

    YANG Description: Enclosing container 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inputs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__inputs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inputs(self):
    self.__inputs = YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_output(self):
    """
    Getter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)

    YANG Description: Top-level container for scheduler output data
    """
    return self.__output
      
  def _set_output(self, v, load=False):
    """
    Setter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output() directly.

    YANG Description: Top-level container for scheduler output data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__output = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output(self):
    self.__output = YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_one_rate_two_color(self):
    """
    Getter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    return self.__one_rate_two_color
      
  def _set_one_rate_two_color(self, v, load=False):
    """
    Setter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_one_rate_two_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_one_rate_two_color() directly.

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """one_rate_two_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__one_rate_two_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_one_rate_two_color(self):
    self.__one_rate_two_color = YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_two_rate_three_color(self):
    """
    Getter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    return self.__two_rate_three_color
      
  def _set_two_rate_three_color(self, v, load=False):
    """
    Setter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_two_rate_three_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_two_rate_three_color() directly.

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """two_rate_three_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__two_rate_three_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_two_rate_three_color(self):
    self.__two_rate_three_color = YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  sequence = __builtin__.property(_get_sequence, _set_sequence)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  inputs = __builtin__.property(_get_inputs, _set_inputs)
  output = __builtin__.property(_get_output, _set_output)
  one_rate_two_color = __builtin__.property(_get_one_rate_two_color, _set_one_rate_two_color)
  two_rate_three_color = __builtin__.property(_get_two_rate_three_color, _set_two_rate_three_color)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('config', config), ('state', state), ('inputs', inputs), ('output', output), ('one_rate_two_color', one_rate_two_color), ('two_rate_three_color', two_rate_three_color), ])


from . import config
from . import state
from . import inputs
from . import output
from . import one_rate_two_color
from . import two_rate_three_color
class scheduler(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of defined QoS traffic schedulers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__config','__state','__inputs','__output','__one_rate_two_color','__two_rate_three_color',)

  _yang_name = 'scheduler'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    self.__inputs = YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__output = YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__one_rate_two_color = YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__two_rate_three_color = YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)

    YANG Description: Reference to the list key
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)

    YANG Description: Configuration data for QoS schedulers
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)

    YANG Description: Operational state data for QoS schedulers
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)


  def _get_inputs(self):
    """
    Getter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)

    YANG Description: Enclosing container 
    """
    return self.__inputs
      
  def _set_inputs(self, v, load=False):
    """
    Setter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inputs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inputs() directly.

    YANG Description: Enclosing container 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inputs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__inputs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inputs(self):
    self.__inputs = YANGDynClass(base=inputs.inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_output(self):
    """
    Getter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)

    YANG Description: Top-level container for scheduler output data
    """
    return self.__output
      
  def _set_output(self, v, load=False):
    """
    Setter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output() directly.

    YANG Description: Top-level container for scheduler output data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__output = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output(self):
    self.__output = YANGDynClass(base=output.output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_one_rate_two_color(self):
    """
    Getter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    return self.__one_rate_two_color
      
  def _set_one_rate_two_color(self, v, load=False):
    """
    Setter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_one_rate_two_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_one_rate_two_color() directly.

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """one_rate_two_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__one_rate_two_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_one_rate_two_color(self):
    self.__one_rate_two_color = YANGDynClass(base=one_rate_two_color.one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_two_rate_three_color(self):
    """
    Getter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    return self.__two_rate_three_color
      
  def _set_two_rate_three_color(self, v, load=False):
    """
    Setter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_two_rate_three_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_two_rate_three_color() directly.

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """two_rate_three_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__two_rate_three_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_two_rate_three_color(self):
    self.__two_rate_three_color = YANGDynClass(base=two_rate_three_color.two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  sequence = __builtin__.property(_get_sequence, _set_sequence)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  inputs = __builtin__.property(_get_inputs, _set_inputs)
  output = __builtin__.property(_get_output, _set_output)
  one_rate_two_color = __builtin__.property(_get_one_rate_two_color, _set_one_rate_two_color)
  two_rate_three_color = __builtin__.property(_get_two_rate_three_color, _set_two_rate_three_color)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('config', config), ('state', state), ('inputs', inputs), ('output', output), ('one_rate_two_color', one_rate_two_color), ('two_rate_three_color', two_rate_three_color), ])


