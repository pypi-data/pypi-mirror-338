# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/queue-management-profiles/queue-management-profile/wred/uniform/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the WRED.
  """
  __slots__ = ('_path_helper', '_extmethods', '__min_threshold','__max_threshold','__min_threshold_percent','__max_threshold_percent','__enable_ecn','__drop','__weight','__max_drop_probability_percent',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__min_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__max_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__enable_ecn = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__drop = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__max_drop_probability_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'queue-management-profiles', 'queue-management-profile', 'wred', 'uniform', 'state']

  def _get_min_threshold(self):
    """
    Getter method for min_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue in bytes.
When the average queue length is less than minth, all packets are admitted
to the queue.  Mututally exclusive with min-threshold-percent and
max-threshold-percent.
    """
    return self.__min_threshold
      
  def _set_min_threshold(self, v, load=False):
    """
    Setter method for min_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue in bytes.
When the average queue length is less than minth, all packets are admitted
to the queue.  Mututally exclusive with min-threshold-percent and
max-threshold-percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__min_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold(self):
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_max_threshold(self):
    """
    Getter method for max_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue in bytes.
When the average queue length exceeds the maxth value, all packets are
dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold-percent and max-threshold-percent.
    """
    return self.__max_threshold
      
  def _set_max_threshold(self, v, load=False):
    """
    Setter method for max_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue in bytes.
When the average queue length exceeds the maxth value, all packets are
dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold-percent and max-threshold-percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__max_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold(self):
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_min_threshold_percent(self):
    """
    Getter method for min_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold_percent (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue in percent.
When the average queue length is less than minth, all packets are
admitted to the queue.  Mutually exclusive with min-threshold and
max-threshold.
    """
    return self.__min_threshold_percent
      
  def _set_min_threshold_percent(self, v, load=False):
    """
    Setter method for min_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold_percent (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold_percent() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue in percent.
When the average queue length is less than minth, all packets are
admitted to the queue.  Mutually exclusive with min-threshold and
max-threshold.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold_percent must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__min_threshold_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold_percent(self):
    self.__min_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_max_threshold_percent(self):
    """
    Getter method for max_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold_percent (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue in percent.
When the average queue length exceeds the maxth value, all packets
are dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold and max-threshold.
    """
    return self.__max_threshold_percent
      
  def _set_max_threshold_percent(self, v, load=False):
    """
    Setter method for max_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold_percent (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold_percent() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue in percent.
When the average queue length exceeds the maxth value, all packets
are dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold and max-threshold.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold_percent must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__max_threshold_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold_percent(self):
    self.__max_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_enable_ecn(self):
    """
    Getter method for enable_ecn, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/enable_ecn (boolean)

    YANG Description: When this leaf is true and the number of packets in the queue
is between the minimum threshold and the maximum threshold, if
the ECN field on the packet indicates that the endpoints are ECN
capable (that is, the ECT bit is set to 1 and the CE bit is set
to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
the WRED algorithm determines that the packet should have been
dropped based on the drop probability, the ECT and CE bits for
the packet are changed to 1, and the packet is transmitted.
    """
    return self.__enable_ecn
      
  def _set_enable_ecn(self, v, load=False):
    """
    Setter method for enable_ecn, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/enable_ecn (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_ecn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_ecn() directly.

    YANG Description: When this leaf is true and the number of packets in the queue
is between the minimum threshold and the maximum threshold, if
the ECN field on the packet indicates that the endpoints are ECN
capable (that is, the ECT bit is set to 1 and the CE bit is set
to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
the WRED algorithm determines that the packet should have been
dropped based on the drop probability, the ECT and CE bits for
the packet are changed to 1, and the packet is transmitted.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_ecn must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__enable_ecn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_ecn(self):
    self.__enable_ecn = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/drop (boolean)

    YANG Description: When this leaf is true and the packet and if the ECN field in
the packet indicates that the endpoints are not ECN capable and
the and the WRED algorithm determines that the packet should
have been dropped based on the drop probability, the packet
is dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: When this leaf is true and the packet and if the ECN field in
the packet indicates that the endpoints are not ECN capable and
the and the WRED algorithm determines that the packet should
have been dropped based on the drop probability, the packet
is dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/weight (uint32)

    YANG Description: The average queue size depends on the previous average as well as
the current size of the queue.

average queue size = (previous average queue size)*(1-2^{-n})+
                    (current queue size)*(2^{-n})

where n is the user-configurable exponential weight factor.

The previous average is more important for high values of n. Peaks
and lows in queue size are smoothed by a high value. For low values
of n, the average queue size is close to the current queue size.

When this leaf is not present, implementation default value is
applied.
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/weight (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.

    YANG Description: The average queue size depends on the previous average as well as
the current size of the queue.

average queue size = (previous average queue size)*(1-2^{-n})+
                    (current queue size)*(2^{-n})

where n is the user-configurable exponential weight factor.

The previous average is more important for high values of n. Peaks
and lows in queue size are smoothed by a high value. For low values
of n, the average queue size is close to the current queue size.

When this leaf is not present, implementation default value is
applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_max_drop_probability_percent(self):
    """
    Getter method for max_drop_probability_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_drop_probability_percent (oc-types:percentage)

    YANG Description: If the queue depth is between min and max threshold then this
the probability with which packets are dropped or marked.
    """
    return self.__max_drop_probability_percent
      
  def _set_max_drop_probability_percent(self, v, load=False):
    """
    Setter method for max_drop_probability_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_drop_probability_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_drop_probability_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_drop_probability_percent() directly.

    YANG Description: If the queue depth is between min and max threshold then this
the probability with which packets are dropped or marked.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_drop_probability_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__max_drop_probability_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_drop_probability_percent(self):
    self.__max_drop_probability_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)

  min_threshold = __builtin__.property(_get_min_threshold)
  max_threshold = __builtin__.property(_get_max_threshold)
  min_threshold_percent = __builtin__.property(_get_min_threshold_percent)
  max_threshold_percent = __builtin__.property(_get_max_threshold_percent)
  enable_ecn = __builtin__.property(_get_enable_ecn)
  drop = __builtin__.property(_get_drop)
  weight = __builtin__.property(_get_weight)
  max_drop_probability_percent = __builtin__.property(_get_max_drop_probability_percent)


  _pyangbind_elements = OrderedDict([('min_threshold', min_threshold), ('max_threshold', max_threshold), ('min_threshold_percent', min_threshold_percent), ('max_threshold_percent', max_threshold_percent), ('enable_ecn', enable_ecn), ('drop', drop), ('weight', weight), ('max_drop_probability_percent', max_drop_probability_percent), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/queue-management-profiles/queue-management-profile/wred/uniform/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the WRED.
  """
  __slots__ = ('_path_helper', '_extmethods', '__min_threshold','__max_threshold','__min_threshold_percent','__max_threshold_percent','__enable_ecn','__drop','__weight','__max_drop_probability_percent',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__min_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__max_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__enable_ecn = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__drop = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__max_drop_probability_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'queue-management-profiles', 'queue-management-profile', 'wred', 'uniform', 'state']

  def _get_min_threshold(self):
    """
    Getter method for min_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue in bytes.
When the average queue length is less than minth, all packets are admitted
to the queue.  Mututally exclusive with min-threshold-percent and
max-threshold-percent.
    """
    return self.__min_threshold
      
  def _set_min_threshold(self, v, load=False):
    """
    Setter method for min_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue in bytes.
When the average queue length is less than minth, all packets are admitted
to the queue.  Mututally exclusive with min-threshold-percent and
max-threshold-percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__min_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold(self):
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_max_threshold(self):
    """
    Getter method for max_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue in bytes.
When the average queue length exceeds the maxth value, all packets are
dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold-percent and max-threshold-percent.
    """
    return self.__max_threshold
      
  def _set_max_threshold(self, v, load=False):
    """
    Setter method for max_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue in bytes.
When the average queue length exceeds the maxth value, all packets are
dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold-percent and max-threshold-percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__max_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold(self):
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_min_threshold_percent(self):
    """
    Getter method for min_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold_percent (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue in percent.
When the average queue length is less than minth, all packets are
admitted to the queue.  Mutually exclusive with min-threshold and
max-threshold.
    """
    return self.__min_threshold_percent
      
  def _set_min_threshold_percent(self, v, load=False):
    """
    Setter method for min_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold_percent (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold_percent() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue in percent.
When the average queue length is less than minth, all packets are
admitted to the queue.  Mutually exclusive with min-threshold and
max-threshold.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold_percent must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__min_threshold_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold_percent(self):
    self.__min_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_max_threshold_percent(self):
    """
    Getter method for max_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold_percent (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue in percent.
When the average queue length exceeds the maxth value, all packets
are dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold and max-threshold.
    """
    return self.__max_threshold_percent
      
  def _set_max_threshold_percent(self, v, load=False):
    """
    Setter method for max_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold_percent (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold_percent() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue in percent.
When the average queue length exceeds the maxth value, all packets
are dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold and max-threshold.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold_percent must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__max_threshold_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold_percent(self):
    self.__max_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_enable_ecn(self):
    """
    Getter method for enable_ecn, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/enable_ecn (boolean)

    YANG Description: When this leaf is true and the number of packets in the queue
is between the minimum threshold and the maximum threshold, if
the ECN field on the packet indicates that the endpoints are ECN
capable (that is, the ECT bit is set to 1 and the CE bit is set
to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
the WRED algorithm determines that the packet should have been
dropped based on the drop probability, the ECT and CE bits for
the packet are changed to 1, and the packet is transmitted.
    """
    return self.__enable_ecn
      
  def _set_enable_ecn(self, v, load=False):
    """
    Setter method for enable_ecn, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/enable_ecn (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_ecn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_ecn() directly.

    YANG Description: When this leaf is true and the number of packets in the queue
is between the minimum threshold and the maximum threshold, if
the ECN field on the packet indicates that the endpoints are ECN
capable (that is, the ECT bit is set to 1 and the CE bit is set
to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
the WRED algorithm determines that the packet should have been
dropped based on the drop probability, the ECT and CE bits for
the packet are changed to 1, and the packet is transmitted.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_ecn must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__enable_ecn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_ecn(self):
    self.__enable_ecn = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/drop (boolean)

    YANG Description: When this leaf is true and the packet and if the ECN field in
the packet indicates that the endpoints are not ECN capable and
the and the WRED algorithm determines that the packet should
have been dropped based on the drop probability, the packet
is dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: When this leaf is true and the packet and if the ECN field in
the packet indicates that the endpoints are not ECN capable and
the and the WRED algorithm determines that the packet should
have been dropped based on the drop probability, the packet
is dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/weight (uint32)

    YANG Description: The average queue size depends on the previous average as well as
the current size of the queue.

average queue size = (previous average queue size)*(1-2^{-n})+
                    (current queue size)*(2^{-n})

where n is the user-configurable exponential weight factor.

The previous average is more important for high values of n. Peaks
and lows in queue size are smoothed by a high value. For low values
of n, the average queue size is close to the current queue size.

When this leaf is not present, implementation default value is
applied.
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/weight (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.

    YANG Description: The average queue size depends on the previous average as well as
the current size of the queue.

average queue size = (previous average queue size)*(1-2^{-n})+
                    (current queue size)*(2^{-n})

where n is the user-configurable exponential weight factor.

The previous average is more important for high values of n. Peaks
and lows in queue size are smoothed by a high value. For low values
of n, the average queue size is close to the current queue size.

When this leaf is not present, implementation default value is
applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_max_drop_probability_percent(self):
    """
    Getter method for max_drop_probability_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_drop_probability_percent (oc-types:percentage)

    YANG Description: If the queue depth is between min and max threshold then this
the probability with which packets are dropped or marked.
    """
    return self.__max_drop_probability_percent
      
  def _set_max_drop_probability_percent(self, v, load=False):
    """
    Setter method for max_drop_probability_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_drop_probability_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_drop_probability_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_drop_probability_percent() directly.

    YANG Description: If the queue depth is between min and max threshold then this
the probability with which packets are dropped or marked.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_drop_probability_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__max_drop_probability_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_drop_probability_percent(self):
    self.__max_drop_probability_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)

  min_threshold = __builtin__.property(_get_min_threshold)
  max_threshold = __builtin__.property(_get_max_threshold)
  min_threshold_percent = __builtin__.property(_get_min_threshold_percent)
  max_threshold_percent = __builtin__.property(_get_max_threshold_percent)
  enable_ecn = __builtin__.property(_get_enable_ecn)
  drop = __builtin__.property(_get_drop)
  weight = __builtin__.property(_get_weight)
  max_drop_probability_percent = __builtin__.property(_get_max_drop_probability_percent)


  _pyangbind_elements = OrderedDict([('min_threshold', min_threshold), ('max_threshold', max_threshold), ('min_threshold_percent', min_threshold_percent), ('max_threshold_percent', max_threshold_percent), ('enable_ecn', enable_ecn), ('drop', drop), ('weight', weight), ('max_drop_probability_percent', max_drop_probability_percent), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/queue-management-profiles/queue-management-profile/wred/uniform/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the WRED.
  """
  __slots__ = ('_path_helper', '_extmethods', '__min_threshold','__max_threshold','__min_threshold_percent','__max_threshold_percent','__enable_ecn','__drop','__weight','__max_drop_probability_percent',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__min_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__max_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__enable_ecn = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__drop = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__max_drop_probability_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'queue-management-profiles', 'queue-management-profile', 'wred', 'uniform', 'state']

  def _get_min_threshold(self):
    """
    Getter method for min_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue in bytes.
When the average queue length is less than minth, all packets are admitted
to the queue.  Mututally exclusive with min-threshold-percent and
max-threshold-percent.
    """
    return self.__min_threshold
      
  def _set_min_threshold(self, v, load=False):
    """
    Setter method for min_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue in bytes.
When the average queue length is less than minth, all packets are admitted
to the queue.  Mututally exclusive with min-threshold-percent and
max-threshold-percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__min_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold(self):
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_max_threshold(self):
    """
    Getter method for max_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue in bytes.
When the average queue length exceeds the maxth value, all packets are
dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold-percent and max-threshold-percent.
    """
    return self.__max_threshold
      
  def _set_max_threshold(self, v, load=False):
    """
    Setter method for max_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue in bytes.
When the average queue length exceeds the maxth value, all packets are
dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold-percent and max-threshold-percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__max_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold(self):
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_min_threshold_percent(self):
    """
    Getter method for min_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold_percent (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue in percent.
When the average queue length is less than minth, all packets are
admitted to the queue.  Mutually exclusive with min-threshold and
max-threshold.
    """
    return self.__min_threshold_percent
      
  def _set_min_threshold_percent(self, v, load=False):
    """
    Setter method for min_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold_percent (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold_percent() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue in percent.
When the average queue length is less than minth, all packets are
admitted to the queue.  Mutually exclusive with min-threshold and
max-threshold.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold_percent must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__min_threshold_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold_percent(self):
    self.__min_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_max_threshold_percent(self):
    """
    Getter method for max_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold_percent (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue in percent.
When the average queue length exceeds the maxth value, all packets
are dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold and max-threshold.
    """
    return self.__max_threshold_percent
      
  def _set_max_threshold_percent(self, v, load=False):
    """
    Setter method for max_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold_percent (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold_percent() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue in percent.
When the average queue length exceeds the maxth value, all packets
are dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold and max-threshold.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold_percent must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__max_threshold_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold_percent(self):
    self.__max_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_enable_ecn(self):
    """
    Getter method for enable_ecn, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/enable_ecn (boolean)

    YANG Description: When this leaf is true and the number of packets in the queue
is between the minimum threshold and the maximum threshold, if
the ECN field on the packet indicates that the endpoints are ECN
capable (that is, the ECT bit is set to 1 and the CE bit is set
to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
the WRED algorithm determines that the packet should have been
dropped based on the drop probability, the ECT and CE bits for
the packet are changed to 1, and the packet is transmitted.
    """
    return self.__enable_ecn
      
  def _set_enable_ecn(self, v, load=False):
    """
    Setter method for enable_ecn, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/enable_ecn (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_ecn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_ecn() directly.

    YANG Description: When this leaf is true and the number of packets in the queue
is between the minimum threshold and the maximum threshold, if
the ECN field on the packet indicates that the endpoints are ECN
capable (that is, the ECT bit is set to 1 and the CE bit is set
to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
the WRED algorithm determines that the packet should have been
dropped based on the drop probability, the ECT and CE bits for
the packet are changed to 1, and the packet is transmitted.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_ecn must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__enable_ecn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_ecn(self):
    self.__enable_ecn = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/drop (boolean)

    YANG Description: When this leaf is true and the packet and if the ECN field in
the packet indicates that the endpoints are not ECN capable and
the and the WRED algorithm determines that the packet should
have been dropped based on the drop probability, the packet
is dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: When this leaf is true and the packet and if the ECN field in
the packet indicates that the endpoints are not ECN capable and
the and the WRED algorithm determines that the packet should
have been dropped based on the drop probability, the packet
is dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/weight (uint32)

    YANG Description: The average queue size depends on the previous average as well as
the current size of the queue.

average queue size = (previous average queue size)*(1-2^{-n})+
                    (current queue size)*(2^{-n})

where n is the user-configurable exponential weight factor.

The previous average is more important for high values of n. Peaks
and lows in queue size are smoothed by a high value. For low values
of n, the average queue size is close to the current queue size.

When this leaf is not present, implementation default value is
applied.
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/weight (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.

    YANG Description: The average queue size depends on the previous average as well as
the current size of the queue.

average queue size = (previous average queue size)*(1-2^{-n})+
                    (current queue size)*(2^{-n})

where n is the user-configurable exponential weight factor.

The previous average is more important for high values of n. Peaks
and lows in queue size are smoothed by a high value. For low values
of n, the average queue size is close to the current queue size.

When this leaf is not present, implementation default value is
applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_max_drop_probability_percent(self):
    """
    Getter method for max_drop_probability_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_drop_probability_percent (oc-types:percentage)

    YANG Description: If the queue depth is between min and max threshold then this
the probability with which packets are dropped or marked.
    """
    return self.__max_drop_probability_percent
      
  def _set_max_drop_probability_percent(self, v, load=False):
    """
    Setter method for max_drop_probability_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_drop_probability_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_drop_probability_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_drop_probability_percent() directly.

    YANG Description: If the queue depth is between min and max threshold then this
the probability with which packets are dropped or marked.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_drop_probability_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__max_drop_probability_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_drop_probability_percent(self):
    self.__max_drop_probability_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)

  min_threshold = __builtin__.property(_get_min_threshold)
  max_threshold = __builtin__.property(_get_max_threshold)
  min_threshold_percent = __builtin__.property(_get_min_threshold_percent)
  max_threshold_percent = __builtin__.property(_get_max_threshold_percent)
  enable_ecn = __builtin__.property(_get_enable_ecn)
  drop = __builtin__.property(_get_drop)
  weight = __builtin__.property(_get_weight)
  max_drop_probability_percent = __builtin__.property(_get_max_drop_probability_percent)


  _pyangbind_elements = OrderedDict([('min_threshold', min_threshold), ('max_threshold', max_threshold), ('min_threshold_percent', min_threshold_percent), ('max_threshold_percent', max_threshold_percent), ('enable_ecn', enable_ecn), ('drop', drop), ('weight', weight), ('max_drop_probability_percent', max_drop_probability_percent), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/queue-management-profiles/queue-management-profile/wred/uniform/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the WRED.
  """
  __slots__ = ('_path_helper', '_extmethods', '__min_threshold','__max_threshold','__min_threshold_percent','__max_threshold_percent','__enable_ecn','__drop','__weight','__max_drop_probability_percent',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__min_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__max_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__enable_ecn = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__drop = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__max_drop_probability_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'queue-management-profiles', 'queue-management-profile', 'wred', 'uniform', 'state']

  def _get_min_threshold(self):
    """
    Getter method for min_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue in bytes.
When the average queue length is less than minth, all packets are admitted
to the queue.  Mututally exclusive with min-threshold-percent and
max-threshold-percent.
    """
    return self.__min_threshold
      
  def _set_min_threshold(self, v, load=False):
    """
    Setter method for min_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue in bytes.
When the average queue length is less than minth, all packets are admitted
to the queue.  Mututally exclusive with min-threshold-percent and
max-threshold-percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__min_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold(self):
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_max_threshold(self):
    """
    Getter method for max_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue in bytes.
When the average queue length exceeds the maxth value, all packets are
dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold-percent and max-threshold-percent.
    """
    return self.__max_threshold
      
  def _set_max_threshold(self, v, load=False):
    """
    Setter method for max_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue in bytes.
When the average queue length exceeds the maxth value, all packets are
dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold-percent and max-threshold-percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__max_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold(self):
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_min_threshold_percent(self):
    """
    Getter method for min_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold_percent (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue in percent.
When the average queue length is less than minth, all packets are
admitted to the queue.  Mutually exclusive with min-threshold and
max-threshold.
    """
    return self.__min_threshold_percent
      
  def _set_min_threshold_percent(self, v, load=False):
    """
    Setter method for min_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold_percent (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold_percent() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue in percent.
When the average queue length is less than minth, all packets are
admitted to the queue.  Mutually exclusive with min-threshold and
max-threshold.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold_percent must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__min_threshold_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold_percent(self):
    self.__min_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_max_threshold_percent(self):
    """
    Getter method for max_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold_percent (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue in percent.
When the average queue length exceeds the maxth value, all packets
are dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold and max-threshold.
    """
    return self.__max_threshold_percent
      
  def _set_max_threshold_percent(self, v, load=False):
    """
    Setter method for max_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold_percent (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold_percent() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue in percent.
When the average queue length exceeds the maxth value, all packets
are dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold and max-threshold.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold_percent must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__max_threshold_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold_percent(self):
    self.__max_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_enable_ecn(self):
    """
    Getter method for enable_ecn, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/enable_ecn (boolean)

    YANG Description: When this leaf is true and the number of packets in the queue
is between the minimum threshold and the maximum threshold, if
the ECN field on the packet indicates that the endpoints are ECN
capable (that is, the ECT bit is set to 1 and the CE bit is set
to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
the WRED algorithm determines that the packet should have been
dropped based on the drop probability, the ECT and CE bits for
the packet are changed to 1, and the packet is transmitted.
    """
    return self.__enable_ecn
      
  def _set_enable_ecn(self, v, load=False):
    """
    Setter method for enable_ecn, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/enable_ecn (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_ecn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_ecn() directly.

    YANG Description: When this leaf is true and the number of packets in the queue
is between the minimum threshold and the maximum threshold, if
the ECN field on the packet indicates that the endpoints are ECN
capable (that is, the ECT bit is set to 1 and the CE bit is set
to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
the WRED algorithm determines that the packet should have been
dropped based on the drop probability, the ECT and CE bits for
the packet are changed to 1, and the packet is transmitted.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_ecn must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__enable_ecn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_ecn(self):
    self.__enable_ecn = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/drop (boolean)

    YANG Description: When this leaf is true and the packet and if the ECN field in
the packet indicates that the endpoints are not ECN capable and
the and the WRED algorithm determines that the packet should
have been dropped based on the drop probability, the packet
is dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: When this leaf is true and the packet and if the ECN field in
the packet indicates that the endpoints are not ECN capable and
the and the WRED algorithm determines that the packet should
have been dropped based on the drop probability, the packet
is dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/weight (uint32)

    YANG Description: The average queue size depends on the previous average as well as
the current size of the queue.

average queue size = (previous average queue size)*(1-2^{-n})+
                    (current queue size)*(2^{-n})

where n is the user-configurable exponential weight factor.

The previous average is more important for high values of n. Peaks
and lows in queue size are smoothed by a high value. For low values
of n, the average queue size is close to the current queue size.

When this leaf is not present, implementation default value is
applied.
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/weight (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.

    YANG Description: The average queue size depends on the previous average as well as
the current size of the queue.

average queue size = (previous average queue size)*(1-2^{-n})+
                    (current queue size)*(2^{-n})

where n is the user-configurable exponential weight factor.

The previous average is more important for high values of n. Peaks
and lows in queue size are smoothed by a high value. For low values
of n, the average queue size is close to the current queue size.

When this leaf is not present, implementation default value is
applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_max_drop_probability_percent(self):
    """
    Getter method for max_drop_probability_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_drop_probability_percent (oc-types:percentage)

    YANG Description: If the queue depth is between min and max threshold then this
the probability with which packets are dropped or marked.
    """
    return self.__max_drop_probability_percent
      
  def _set_max_drop_probability_percent(self, v, load=False):
    """
    Setter method for max_drop_probability_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_drop_probability_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_drop_probability_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_drop_probability_percent() directly.

    YANG Description: If the queue depth is between min and max threshold then this
the probability with which packets are dropped or marked.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_drop_probability_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__max_drop_probability_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_drop_probability_percent(self):
    self.__max_drop_probability_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)

  min_threshold = __builtin__.property(_get_min_threshold)
  max_threshold = __builtin__.property(_get_max_threshold)
  min_threshold_percent = __builtin__.property(_get_min_threshold_percent)
  max_threshold_percent = __builtin__.property(_get_max_threshold_percent)
  enable_ecn = __builtin__.property(_get_enable_ecn)
  drop = __builtin__.property(_get_drop)
  weight = __builtin__.property(_get_weight)
  max_drop_probability_percent = __builtin__.property(_get_max_drop_probability_percent)


  _pyangbind_elements = OrderedDict([('min_threshold', min_threshold), ('max_threshold', max_threshold), ('min_threshold_percent', min_threshold_percent), ('max_threshold_percent', max_threshold_percent), ('enable_ecn', enable_ecn), ('drop', drop), ('weight', weight), ('max_drop_probability_percent', max_drop_probability_percent), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/queue-management-profiles/queue-management-profile/wred/uniform/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the WRED.
  """
  __slots__ = ('_path_helper', '_extmethods', '__min_threshold','__max_threshold','__min_threshold_percent','__max_threshold_percent','__enable_ecn','__drop','__weight','__max_drop_probability_percent',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__min_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__max_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__enable_ecn = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__drop = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__max_drop_probability_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'queue-management-profiles', 'queue-management-profile', 'wred', 'uniform', 'state']

  def _get_min_threshold(self):
    """
    Getter method for min_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue in bytes.
When the average queue length is less than minth, all packets are admitted
to the queue.  Mututally exclusive with min-threshold-percent and
max-threshold-percent.
    """
    return self.__min_threshold
      
  def _set_min_threshold(self, v, load=False):
    """
    Setter method for min_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue in bytes.
When the average queue length is less than minth, all packets are admitted
to the queue.  Mututally exclusive with min-threshold-percent and
max-threshold-percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__min_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold(self):
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_max_threshold(self):
    """
    Getter method for max_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue in bytes.
When the average queue length exceeds the maxth value, all packets are
dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold-percent and max-threshold-percent.
    """
    return self.__max_threshold
      
  def _set_max_threshold(self, v, load=False):
    """
    Setter method for max_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue in bytes.
When the average queue length exceeds the maxth value, all packets are
dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold-percent and max-threshold-percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__max_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold(self):
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_min_threshold_percent(self):
    """
    Getter method for min_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold_percent (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue in percent.
When the average queue length is less than minth, all packets are
admitted to the queue.  Mutually exclusive with min-threshold and
max-threshold.
    """
    return self.__min_threshold_percent
      
  def _set_min_threshold_percent(self, v, load=False):
    """
    Setter method for min_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold_percent (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold_percent() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue in percent.
When the average queue length is less than minth, all packets are
admitted to the queue.  Mutually exclusive with min-threshold and
max-threshold.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold_percent must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__min_threshold_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold_percent(self):
    self.__min_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_max_threshold_percent(self):
    """
    Getter method for max_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold_percent (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue in percent.
When the average queue length exceeds the maxth value, all packets
are dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold and max-threshold.
    """
    return self.__max_threshold_percent
      
  def _set_max_threshold_percent(self, v, load=False):
    """
    Setter method for max_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold_percent (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold_percent() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue in percent.
When the average queue length exceeds the maxth value, all packets
are dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold and max-threshold.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold_percent must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__max_threshold_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold_percent(self):
    self.__max_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_enable_ecn(self):
    """
    Getter method for enable_ecn, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/enable_ecn (boolean)

    YANG Description: When this leaf is true and the number of packets in the queue
is between the minimum threshold and the maximum threshold, if
the ECN field on the packet indicates that the endpoints are ECN
capable (that is, the ECT bit is set to 1 and the CE bit is set
to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
the WRED algorithm determines that the packet should have been
dropped based on the drop probability, the ECT and CE bits for
the packet are changed to 1, and the packet is transmitted.
    """
    return self.__enable_ecn
      
  def _set_enable_ecn(self, v, load=False):
    """
    Setter method for enable_ecn, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/enable_ecn (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_ecn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_ecn() directly.

    YANG Description: When this leaf is true and the number of packets in the queue
is between the minimum threshold and the maximum threshold, if
the ECN field on the packet indicates that the endpoints are ECN
capable (that is, the ECT bit is set to 1 and the CE bit is set
to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
the WRED algorithm determines that the packet should have been
dropped based on the drop probability, the ECT and CE bits for
the packet are changed to 1, and the packet is transmitted.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_ecn must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__enable_ecn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_ecn(self):
    self.__enable_ecn = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/drop (boolean)

    YANG Description: When this leaf is true and the packet and if the ECN field in
the packet indicates that the endpoints are not ECN capable and
the and the WRED algorithm determines that the packet should
have been dropped based on the drop probability, the packet
is dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: When this leaf is true and the packet and if the ECN field in
the packet indicates that the endpoints are not ECN capable and
the and the WRED algorithm determines that the packet should
have been dropped based on the drop probability, the packet
is dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/weight (uint32)

    YANG Description: The average queue size depends on the previous average as well as
the current size of the queue.

average queue size = (previous average queue size)*(1-2^{-n})+
                    (current queue size)*(2^{-n})

where n is the user-configurable exponential weight factor.

The previous average is more important for high values of n. Peaks
and lows in queue size are smoothed by a high value. For low values
of n, the average queue size is close to the current queue size.

When this leaf is not present, implementation default value is
applied.
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/weight (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.

    YANG Description: The average queue size depends on the previous average as well as
the current size of the queue.

average queue size = (previous average queue size)*(1-2^{-n})+
                    (current queue size)*(2^{-n})

where n is the user-configurable exponential weight factor.

The previous average is more important for high values of n. Peaks
and lows in queue size are smoothed by a high value. For low values
of n, the average queue size is close to the current queue size.

When this leaf is not present, implementation default value is
applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_max_drop_probability_percent(self):
    """
    Getter method for max_drop_probability_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_drop_probability_percent (oc-types:percentage)

    YANG Description: If the queue depth is between min and max threshold then this
the probability with which packets are dropped or marked.
    """
    return self.__max_drop_probability_percent
      
  def _set_max_drop_probability_percent(self, v, load=False):
    """
    Setter method for max_drop_probability_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_drop_probability_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_drop_probability_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_drop_probability_percent() directly.

    YANG Description: If the queue depth is between min and max threshold then this
the probability with which packets are dropped or marked.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_drop_probability_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__max_drop_probability_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_drop_probability_percent(self):
    self.__max_drop_probability_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)

  min_threshold = __builtin__.property(_get_min_threshold)
  max_threshold = __builtin__.property(_get_max_threshold)
  min_threshold_percent = __builtin__.property(_get_min_threshold_percent)
  max_threshold_percent = __builtin__.property(_get_max_threshold_percent)
  enable_ecn = __builtin__.property(_get_enable_ecn)
  drop = __builtin__.property(_get_drop)
  weight = __builtin__.property(_get_weight)
  max_drop_probability_percent = __builtin__.property(_get_max_drop_probability_percent)


  _pyangbind_elements = OrderedDict([('min_threshold', min_threshold), ('max_threshold', max_threshold), ('min_threshold_percent', min_threshold_percent), ('max_threshold_percent', max_threshold_percent), ('enable_ecn', enable_ecn), ('drop', drop), ('weight', weight), ('max_drop_probability_percent', max_drop_probability_percent), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/queue-management-profiles/queue-management-profile/wred/uniform/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the WRED.
  """
  __slots__ = ('_path_helper', '_extmethods', '__min_threshold','__max_threshold','__min_threshold_percent','__max_threshold_percent','__enable_ecn','__drop','__weight','__max_drop_probability_percent',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__min_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__max_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__enable_ecn = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__drop = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__max_drop_probability_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'queue-management-profiles', 'queue-management-profile', 'wred', 'uniform', 'state']

  def _get_min_threshold(self):
    """
    Getter method for min_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue in bytes.
When the average queue length is less than minth, all packets are admitted
to the queue.  Mututally exclusive with min-threshold-percent and
max-threshold-percent.
    """
    return self.__min_threshold
      
  def _set_min_threshold(self, v, load=False):
    """
    Setter method for min_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue in bytes.
When the average queue length is less than minth, all packets are admitted
to the queue.  Mututally exclusive with min-threshold-percent and
max-threshold-percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__min_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold(self):
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_max_threshold(self):
    """
    Getter method for max_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue in bytes.
When the average queue length exceeds the maxth value, all packets are
dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold-percent and max-threshold-percent.
    """
    return self.__max_threshold
      
  def _set_max_threshold(self, v, load=False):
    """
    Setter method for max_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue in bytes.
When the average queue length exceeds the maxth value, all packets are
dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold-percent and max-threshold-percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__max_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold(self):
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_min_threshold_percent(self):
    """
    Getter method for min_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold_percent (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue in percent.
When the average queue length is less than minth, all packets are
admitted to the queue.  Mutually exclusive with min-threshold and
max-threshold.
    """
    return self.__min_threshold_percent
      
  def _set_min_threshold_percent(self, v, load=False):
    """
    Setter method for min_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold_percent (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold_percent() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue in percent.
When the average queue length is less than minth, all packets are
admitted to the queue.  Mutually exclusive with min-threshold and
max-threshold.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold_percent must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__min_threshold_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold_percent(self):
    self.__min_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_max_threshold_percent(self):
    """
    Getter method for max_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold_percent (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue in percent.
When the average queue length exceeds the maxth value, all packets
are dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold and max-threshold.
    """
    return self.__max_threshold_percent
      
  def _set_max_threshold_percent(self, v, load=False):
    """
    Setter method for max_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold_percent (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold_percent() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue in percent.
When the average queue length exceeds the maxth value, all packets
are dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold and max-threshold.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold_percent must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__max_threshold_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold_percent(self):
    self.__max_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_enable_ecn(self):
    """
    Getter method for enable_ecn, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/enable_ecn (boolean)

    YANG Description: When this leaf is true and the number of packets in the queue
is between the minimum threshold and the maximum threshold, if
the ECN field on the packet indicates that the endpoints are ECN
capable (that is, the ECT bit is set to 1 and the CE bit is set
to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
the WRED algorithm determines that the packet should have been
dropped based on the drop probability, the ECT and CE bits for
the packet are changed to 1, and the packet is transmitted.
    """
    return self.__enable_ecn
      
  def _set_enable_ecn(self, v, load=False):
    """
    Setter method for enable_ecn, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/enable_ecn (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_ecn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_ecn() directly.

    YANG Description: When this leaf is true and the number of packets in the queue
is between the minimum threshold and the maximum threshold, if
the ECN field on the packet indicates that the endpoints are ECN
capable (that is, the ECT bit is set to 1 and the CE bit is set
to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
the WRED algorithm determines that the packet should have been
dropped based on the drop probability, the ECT and CE bits for
the packet are changed to 1, and the packet is transmitted.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_ecn must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__enable_ecn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_ecn(self):
    self.__enable_ecn = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/drop (boolean)

    YANG Description: When this leaf is true and the packet and if the ECN field in
the packet indicates that the endpoints are not ECN capable and
the and the WRED algorithm determines that the packet should
have been dropped based on the drop probability, the packet
is dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: When this leaf is true and the packet and if the ECN field in
the packet indicates that the endpoints are not ECN capable and
the and the WRED algorithm determines that the packet should
have been dropped based on the drop probability, the packet
is dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/weight (uint32)

    YANG Description: The average queue size depends on the previous average as well as
the current size of the queue.

average queue size = (previous average queue size)*(1-2^{-n})+
                    (current queue size)*(2^{-n})

where n is the user-configurable exponential weight factor.

The previous average is more important for high values of n. Peaks
and lows in queue size are smoothed by a high value. For low values
of n, the average queue size is close to the current queue size.

When this leaf is not present, implementation default value is
applied.
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/weight (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.

    YANG Description: The average queue size depends on the previous average as well as
the current size of the queue.

average queue size = (previous average queue size)*(1-2^{-n})+
                    (current queue size)*(2^{-n})

where n is the user-configurable exponential weight factor.

The previous average is more important for high values of n. Peaks
and lows in queue size are smoothed by a high value. For low values
of n, the average queue size is close to the current queue size.

When this leaf is not present, implementation default value is
applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_max_drop_probability_percent(self):
    """
    Getter method for max_drop_probability_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_drop_probability_percent (oc-types:percentage)

    YANG Description: If the queue depth is between min and max threshold then this
the probability with which packets are dropped or marked.
    """
    return self.__max_drop_probability_percent
      
  def _set_max_drop_probability_percent(self, v, load=False):
    """
    Setter method for max_drop_probability_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_drop_probability_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_drop_probability_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_drop_probability_percent() directly.

    YANG Description: If the queue depth is between min and max threshold then this
the probability with which packets are dropped or marked.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_drop_probability_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__max_drop_probability_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_drop_probability_percent(self):
    self.__max_drop_probability_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)

  min_threshold = __builtin__.property(_get_min_threshold)
  max_threshold = __builtin__.property(_get_max_threshold)
  min_threshold_percent = __builtin__.property(_get_min_threshold_percent)
  max_threshold_percent = __builtin__.property(_get_max_threshold_percent)
  enable_ecn = __builtin__.property(_get_enable_ecn)
  drop = __builtin__.property(_get_drop)
  weight = __builtin__.property(_get_weight)
  max_drop_probability_percent = __builtin__.property(_get_max_drop_probability_percent)


  _pyangbind_elements = OrderedDict([('min_threshold', min_threshold), ('max_threshold', max_threshold), ('min_threshold_percent', min_threshold_percent), ('max_threshold_percent', max_threshold_percent), ('enable_ecn', enable_ecn), ('drop', drop), ('weight', weight), ('max_drop_probability_percent', max_drop_probability_percent), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/queue-management-profiles/queue-management-profile/wred/uniform/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the WRED.
  """
  __slots__ = ('_path_helper', '_extmethods', '__min_threshold','__max_threshold','__min_threshold_percent','__max_threshold_percent','__enable_ecn','__drop','__weight','__max_drop_probability_percent',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__min_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__max_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__enable_ecn = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__drop = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__max_drop_probability_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'queue-management-profiles', 'queue-management-profile', 'wred', 'uniform', 'state']

  def _get_min_threshold(self):
    """
    Getter method for min_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue in bytes.
When the average queue length is less than minth, all packets are admitted
to the queue.  Mututally exclusive with min-threshold-percent and
max-threshold-percent.
    """
    return self.__min_threshold
      
  def _set_min_threshold(self, v, load=False):
    """
    Setter method for min_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue in bytes.
When the average queue length is less than minth, all packets are admitted
to the queue.  Mututally exclusive with min-threshold-percent and
max-threshold-percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__min_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold(self):
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_max_threshold(self):
    """
    Getter method for max_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue in bytes.
When the average queue length exceeds the maxth value, all packets are
dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold-percent and max-threshold-percent.
    """
    return self.__max_threshold
      
  def _set_max_threshold(self, v, load=False):
    """
    Setter method for max_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue in bytes.
When the average queue length exceeds the maxth value, all packets are
dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold-percent and max-threshold-percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__max_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold(self):
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_min_threshold_percent(self):
    """
    Getter method for min_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold_percent (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue in percent.
When the average queue length is less than minth, all packets are
admitted to the queue.  Mutually exclusive with min-threshold and
max-threshold.
    """
    return self.__min_threshold_percent
      
  def _set_min_threshold_percent(self, v, load=False):
    """
    Setter method for min_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold_percent (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold_percent() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue in percent.
When the average queue length is less than minth, all packets are
admitted to the queue.  Mutually exclusive with min-threshold and
max-threshold.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold_percent must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__min_threshold_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold_percent(self):
    self.__min_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_max_threshold_percent(self):
    """
    Getter method for max_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold_percent (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue in percent.
When the average queue length exceeds the maxth value, all packets
are dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold and max-threshold.
    """
    return self.__max_threshold_percent
      
  def _set_max_threshold_percent(self, v, load=False):
    """
    Setter method for max_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold_percent (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold_percent() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue in percent.
When the average queue length exceeds the maxth value, all packets
are dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold and max-threshold.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold_percent must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__max_threshold_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold_percent(self):
    self.__max_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_enable_ecn(self):
    """
    Getter method for enable_ecn, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/enable_ecn (boolean)

    YANG Description: When this leaf is true and the number of packets in the queue
is between the minimum threshold and the maximum threshold, if
the ECN field on the packet indicates that the endpoints are ECN
capable (that is, the ECT bit is set to 1 and the CE bit is set
to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
the WRED algorithm determines that the packet should have been
dropped based on the drop probability, the ECT and CE bits for
the packet are changed to 1, and the packet is transmitted.
    """
    return self.__enable_ecn
      
  def _set_enable_ecn(self, v, load=False):
    """
    Setter method for enable_ecn, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/enable_ecn (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_ecn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_ecn() directly.

    YANG Description: When this leaf is true and the number of packets in the queue
is between the minimum threshold and the maximum threshold, if
the ECN field on the packet indicates that the endpoints are ECN
capable (that is, the ECT bit is set to 1 and the CE bit is set
to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
the WRED algorithm determines that the packet should have been
dropped based on the drop probability, the ECT and CE bits for
the packet are changed to 1, and the packet is transmitted.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_ecn must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__enable_ecn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_ecn(self):
    self.__enable_ecn = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/drop (boolean)

    YANG Description: When this leaf is true and the packet and if the ECN field in
the packet indicates that the endpoints are not ECN capable and
the and the WRED algorithm determines that the packet should
have been dropped based on the drop probability, the packet
is dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: When this leaf is true and the packet and if the ECN field in
the packet indicates that the endpoints are not ECN capable and
the and the WRED algorithm determines that the packet should
have been dropped based on the drop probability, the packet
is dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/weight (uint32)

    YANG Description: The average queue size depends on the previous average as well as
the current size of the queue.

average queue size = (previous average queue size)*(1-2^{-n})+
                    (current queue size)*(2^{-n})

where n is the user-configurable exponential weight factor.

The previous average is more important for high values of n. Peaks
and lows in queue size are smoothed by a high value. For low values
of n, the average queue size is close to the current queue size.

When this leaf is not present, implementation default value is
applied.
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/weight (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.

    YANG Description: The average queue size depends on the previous average as well as
the current size of the queue.

average queue size = (previous average queue size)*(1-2^{-n})+
                    (current queue size)*(2^{-n})

where n is the user-configurable exponential weight factor.

The previous average is more important for high values of n. Peaks
and lows in queue size are smoothed by a high value. For low values
of n, the average queue size is close to the current queue size.

When this leaf is not present, implementation default value is
applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_max_drop_probability_percent(self):
    """
    Getter method for max_drop_probability_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_drop_probability_percent (oc-types:percentage)

    YANG Description: If the queue depth is between min and max threshold then this
the probability with which packets are dropped or marked.
    """
    return self.__max_drop_probability_percent
      
  def _set_max_drop_probability_percent(self, v, load=False):
    """
    Setter method for max_drop_probability_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_drop_probability_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_drop_probability_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_drop_probability_percent() directly.

    YANG Description: If the queue depth is between min and max threshold then this
the probability with which packets are dropped or marked.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_drop_probability_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__max_drop_probability_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_drop_probability_percent(self):
    self.__max_drop_probability_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)

  min_threshold = __builtin__.property(_get_min_threshold)
  max_threshold = __builtin__.property(_get_max_threshold)
  min_threshold_percent = __builtin__.property(_get_min_threshold_percent)
  max_threshold_percent = __builtin__.property(_get_max_threshold_percent)
  enable_ecn = __builtin__.property(_get_enable_ecn)
  drop = __builtin__.property(_get_drop)
  weight = __builtin__.property(_get_weight)
  max_drop_probability_percent = __builtin__.property(_get_max_drop_probability_percent)


  _pyangbind_elements = OrderedDict([('min_threshold', min_threshold), ('max_threshold', max_threshold), ('min_threshold_percent', min_threshold_percent), ('max_threshold_percent', max_threshold_percent), ('enable_ecn', enable_ecn), ('drop', drop), ('weight', weight), ('max_drop_probability_percent', max_drop_probability_percent), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/queue-management-profiles/queue-management-profile/wred/uniform/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the WRED.
  """
  __slots__ = ('_path_helper', '_extmethods', '__min_threshold','__max_threshold','__min_threshold_percent','__max_threshold_percent','__enable_ecn','__drop','__weight','__max_drop_probability_percent',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__min_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__max_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__enable_ecn = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__drop = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__max_drop_probability_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'queue-management-profiles', 'queue-management-profile', 'wred', 'uniform', 'state']

  def _get_min_threshold(self):
    """
    Getter method for min_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue in bytes.
When the average queue length is less than minth, all packets are admitted
to the queue.  Mututally exclusive with min-threshold-percent and
max-threshold-percent.
    """
    return self.__min_threshold
      
  def _set_min_threshold(self, v, load=False):
    """
    Setter method for min_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue in bytes.
When the average queue length is less than minth, all packets are admitted
to the queue.  Mututally exclusive with min-threshold-percent and
max-threshold-percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__min_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold(self):
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_max_threshold(self):
    """
    Getter method for max_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue in bytes.
When the average queue length exceeds the maxth value, all packets are
dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold-percent and max-threshold-percent.
    """
    return self.__max_threshold
      
  def _set_max_threshold(self, v, load=False):
    """
    Setter method for max_threshold, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue in bytes.
When the average queue length exceeds the maxth value, all packets are
dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold-percent and max-threshold-percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__max_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold(self):
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_min_threshold_percent(self):
    """
    Getter method for min_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold_percent (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue in percent.
When the average queue length is less than minth, all packets are
admitted to the queue.  Mutually exclusive with min-threshold and
max-threshold.
    """
    return self.__min_threshold_percent
      
  def _set_min_threshold_percent(self, v, load=False):
    """
    Setter method for min_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/min_threshold_percent (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold_percent() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue in percent.
When the average queue length is less than minth, all packets are
admitted to the queue.  Mutually exclusive with min-threshold and
max-threshold.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold_percent must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__min_threshold_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold_percent(self):
    self.__min_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_max_threshold_percent(self):
    """
    Getter method for max_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold_percent (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue in percent.
When the average queue length exceeds the maxth value, all packets
are dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold and max-threshold.
    """
    return self.__max_threshold_percent
      
  def _set_max_threshold_percent(self, v, load=False):
    """
    Setter method for max_threshold_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_threshold_percent (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold_percent() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue in percent.
When the average queue length exceeds the maxth value, all packets
are dropped (or marked if ECN is enabled).  Mutually exclusive with
min-threshold and max-threshold.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold_percent must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__max_threshold_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold_percent(self):
    self.__max_threshold_percent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-threshold-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_enable_ecn(self):
    """
    Getter method for enable_ecn, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/enable_ecn (boolean)

    YANG Description: When this leaf is true and the number of packets in the queue
is between the minimum threshold and the maximum threshold, if
the ECN field on the packet indicates that the endpoints are ECN
capable (that is, the ECT bit is set to 1 and the CE bit is set
to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
the WRED algorithm determines that the packet should have been
dropped based on the drop probability, the ECT and CE bits for
the packet are changed to 1, and the packet is transmitted.
    """
    return self.__enable_ecn
      
  def _set_enable_ecn(self, v, load=False):
    """
    Setter method for enable_ecn, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/enable_ecn (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_ecn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_ecn() directly.

    YANG Description: When this leaf is true and the number of packets in the queue
is between the minimum threshold and the maximum threshold, if
the ECN field on the packet indicates that the endpoints are ECN
capable (that is, the ECT bit is set to 1 and the CE bit is set
to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
the WRED algorithm determines that the packet should have been
dropped based on the drop probability, the ECT and CE bits for
the packet are changed to 1, and the packet is transmitted.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_ecn must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__enable_ecn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_ecn(self):
    self.__enable_ecn = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-ecn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/drop (boolean)

    YANG Description: When this leaf is true and the packet and if the ECN field in
the packet indicates that the endpoints are not ECN capable and
the and the WRED algorithm determines that the packet should
have been dropped based on the drop probability, the packet
is dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: When this leaf is true and the packet and if the ECN field in
the packet indicates that the endpoints are not ECN capable and
the and the WRED algorithm determines that the packet should
have been dropped based on the drop probability, the packet
is dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/weight (uint32)

    YANG Description: The average queue size depends on the previous average as well as
the current size of the queue.

average queue size = (previous average queue size)*(1-2^{-n})+
                    (current queue size)*(2^{-n})

where n is the user-configurable exponential weight factor.

The previous average is more important for high values of n. Peaks
and lows in queue size are smoothed by a high value. For low values
of n, the average queue size is close to the current queue size.

When this leaf is not present, implementation default value is
applied.
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/weight (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.

    YANG Description: The average queue size depends on the previous average as well as
the current size of the queue.

average queue size = (previous average queue size)*(1-2^{-n})+
                    (current queue size)*(2^{-n})

where n is the user-configurable exponential weight factor.

The previous average is more important for high values of n. Peaks
and lows in queue size are smoothed by a high value. For low values
of n, the average queue size is close to the current queue size.

When this leaf is not present, implementation default value is
applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_max_drop_probability_percent(self):
    """
    Getter method for max_drop_probability_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_drop_probability_percent (oc-types:percentage)

    YANG Description: If the queue depth is between min and max threshold then this
the probability with which packets are dropped or marked.
    """
    return self.__max_drop_probability_percent
      
  def _set_max_drop_probability_percent(self, v, load=False):
    """
    Setter method for max_drop_probability_percent, mapped from YANG variable /qos/queue_management_profiles/queue_management_profile/wred/uniform/state/max_drop_probability_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_drop_probability_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_drop_probability_percent() directly.

    YANG Description: If the queue depth is between min and max threshold then this
the probability with which packets are dropped or marked.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_drop_probability_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__max_drop_probability_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_drop_probability_percent(self):
    self.__max_drop_probability_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-drop-probability-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)

  min_threshold = __builtin__.property(_get_min_threshold)
  max_threshold = __builtin__.property(_get_max_threshold)
  min_threshold_percent = __builtin__.property(_get_min_threshold_percent)
  max_threshold_percent = __builtin__.property(_get_max_threshold_percent)
  enable_ecn = __builtin__.property(_get_enable_ecn)
  drop = __builtin__.property(_get_drop)
  weight = __builtin__.property(_get_weight)
  max_drop_probability_percent = __builtin__.property(_get_max_drop_probability_percent)


  _pyangbind_elements = OrderedDict([('min_threshold', min_threshold), ('max_threshold', max_threshold), ('min_threshold_percent', min_threshold_percent), ('max_threshold_percent', max_threshold_percent), ('enable_ecn', enable_ecn), ('drop', drop), ('weight', weight), ('max_drop_probability_percent', max_drop_probability_percent), ])


