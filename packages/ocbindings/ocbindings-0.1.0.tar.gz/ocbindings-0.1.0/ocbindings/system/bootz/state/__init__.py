# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/bootz/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state relating to the bootz service.
  """
  __slots__ = ('_path_helper', '_extmethods', '__checksum','__error_count','__status','__last_boot_attempt',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__checksum = YANGDynClass(base=str, default=str(""), is_leaf=True, yang_name="checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='string', is_config=False)
    self.__error_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='oc-yang:counter64', is_config=False)
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'BOOTZ_UNSPECIFIED': {}, 'BOOTZ_SENT': {}, 'BOOTZ_RECEIVED': {}, 'BOOTZ_CONFIGURATION_APPLIED': {}, 'BOOTZ_OK': {}, 'BOOTZ_OV_INVALID': {}, 'BOOTZ_OS_UPGRADE_IN_PROGRESS': {}, 'BOOTZ_OS_UPGRADE_COMPLETE': {}, 'BOOTZ_OS_INVALID_IMAGE': {}, 'BOOTZ_CONFIGURATION_INVALID': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='enumeration', is_config=False)
    self.__last_boot_attempt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-boot-attempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='oc-types:timeticks64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'bootz', 'state']

  def _get_checksum(self):
    """
    Getter method for checksum, mapped from YANG variable /system/bootz/state/checksum (string)

    YANG Description: The current checksum of the bootz protocol buffer.

This value should refect the current sha-512 of the bootz
protocol buffer message BootstrapDataSigned. The protocol
buffer serialization must be done by tag value for each field
in the bootz protocol buffer. This will produce a
determintistic marshalled value which can be
checksummed.
    """
    return self.__checksum
      
  def _set_checksum(self, v, load=False):
    """
    Setter method for checksum, mapped from YANG variable /system/bootz/state/checksum (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_checksum is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_checksum() directly.

    YANG Description: The current checksum of the bootz protocol buffer.

This value should refect the current sha-512 of the bootz
protocol buffer message BootstrapDataSigned. The protocol
buffer serialization must be done by tag value for each field
in the bootz protocol buffer. This will produce a
determintistic marshalled value which can be
checksummed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, default=str(""), is_leaf=True, yang_name="checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """checksum must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, default=str(""), is_leaf=True, yang_name="checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='string', is_config=False)""",
        })

    self.__checksum = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_checksum(self):
    self.__checksum = YANGDynClass(base=str, default=str(""), is_leaf=True, yang_name="checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='string', is_config=False)


  def _get_error_count(self):
    """
    Getter method for error_count, mapped from YANG variable /system/bootz/state/error_count (oc-yang:counter64)

    YANG Description: Total count of all bootz errors.
    """
    return self.__error_count
      
  def _set_error_count(self, v, load=False):
    """
    Setter method for error_count, mapped from YANG variable /system/bootz/state/error_count (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_error_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_error_count() directly.

    YANG Description: Total count of all bootz errors.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """error_count must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__error_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_error_count(self):
    self.__error_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='oc-yang:counter64', is_config=False)


  def _get_status(self):
    """
    Getter method for status, mapped from YANG variable /system/bootz/state/status (enumeration)

    YANG Description: The status of the bootz service.

The general sequence for the flow would be:
BOOTZ_UNSPECIFIED            <- system initial state
BOOTZ_SENT                   <- bootz request sent
BOOTZ_RECEIVED               <- bootz response received
BOOTZ_OS_UPGRADE_IN_PROGRESS <- (if needed)
BOOTZ_OS_UPGRADE_COMPLETE    <- (if needed)
BOOTZ_CONFIGURATION_APPLIED  <- bootz configuration applied
BOOTZ_OK                     <- bootz process successful

If any error is encounter an error ENUM will be returned.
    """
    return self.__status
      
  def _set_status(self, v, load=False):
    """
    Setter method for status, mapped from YANG variable /system/bootz/state/status (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_status() directly.

    YANG Description: The status of the bootz service.

The general sequence for the flow would be:
BOOTZ_UNSPECIFIED            <- system initial state
BOOTZ_SENT                   <- bootz request sent
BOOTZ_RECEIVED               <- bootz response received
BOOTZ_OS_UPGRADE_IN_PROGRESS <- (if needed)
BOOTZ_OS_UPGRADE_COMPLETE    <- (if needed)
BOOTZ_CONFIGURATION_APPLIED  <- bootz configuration applied
BOOTZ_OK                     <- bootz process successful

If any error is encounter an error ENUM will be returned.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'BOOTZ_UNSPECIFIED': {}, 'BOOTZ_SENT': {}, 'BOOTZ_RECEIVED': {}, 'BOOTZ_CONFIGURATION_APPLIED': {}, 'BOOTZ_OK': {}, 'BOOTZ_OV_INVALID': {}, 'BOOTZ_OS_UPGRADE_IN_PROGRESS': {}, 'BOOTZ_OS_UPGRADE_COMPLETE': {}, 'BOOTZ_OS_INVALID_IMAGE': {}, 'BOOTZ_CONFIGURATION_INVALID': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """status must be of a type compatible with enumeration""",
          'defined-type': "openconfig-system-bootz:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'BOOTZ_UNSPECIFIED': {}, 'BOOTZ_SENT': {}, 'BOOTZ_RECEIVED': {}, 'BOOTZ_CONFIGURATION_APPLIED': {}, 'BOOTZ_OK': {}, 'BOOTZ_OV_INVALID': {}, 'BOOTZ_OS_UPGRADE_IN_PROGRESS': {}, 'BOOTZ_OS_UPGRADE_COMPLETE': {}, 'BOOTZ_OS_INVALID_IMAGE': {}, 'BOOTZ_CONFIGURATION_INVALID': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='enumeration', is_config=False)""",
        })

    self.__status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_status(self):
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'BOOTZ_UNSPECIFIED': {}, 'BOOTZ_SENT': {}, 'BOOTZ_RECEIVED': {}, 'BOOTZ_CONFIGURATION_APPLIED': {}, 'BOOTZ_OK': {}, 'BOOTZ_OV_INVALID': {}, 'BOOTZ_OS_UPGRADE_IN_PROGRESS': {}, 'BOOTZ_OS_UPGRADE_COMPLETE': {}, 'BOOTZ_OS_INVALID_IMAGE': {}, 'BOOTZ_CONFIGURATION_INVALID': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='enumeration', is_config=False)


  def _get_last_boot_attempt(self):
    """
    Getter method for last_boot_attempt, mapped from YANG variable /system/bootz/state/last_boot_attempt (oc-types:timeticks64)

    YANG Description: The timestamp of the last bootz attempt.
    """
    return self.__last_boot_attempt
      
  def _set_last_boot_attempt(self, v, load=False):
    """
    Setter method for last_boot_attempt, mapped from YANG variable /system/bootz/state/last_boot_attempt (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_boot_attempt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_boot_attempt() directly.

    YANG Description: The timestamp of the last bootz attempt.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-boot-attempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_boot_attempt must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-boot-attempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_boot_attempt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_boot_attempt(self):
    self.__last_boot_attempt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-boot-attempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='oc-types:timeticks64', is_config=False)

  checksum = __builtin__.property(_get_checksum)
  error_count = __builtin__.property(_get_error_count)
  status = __builtin__.property(_get_status)
  last_boot_attempt = __builtin__.property(_get_last_boot_attempt)


  _pyangbind_elements = OrderedDict([('checksum', checksum), ('error_count', error_count), ('status', status), ('last_boot_attempt', last_boot_attempt), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/bootz/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state relating to the bootz service.
  """
  __slots__ = ('_path_helper', '_extmethods', '__checksum','__error_count','__status','__last_boot_attempt',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__checksum = YANGDynClass(base=str, default=str(""), is_leaf=True, yang_name="checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='string', is_config=False)
    self.__error_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='oc-yang:counter64', is_config=False)
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'BOOTZ_UNSPECIFIED': {}, 'BOOTZ_SENT': {}, 'BOOTZ_RECEIVED': {}, 'BOOTZ_CONFIGURATION_APPLIED': {}, 'BOOTZ_OK': {}, 'BOOTZ_OV_INVALID': {}, 'BOOTZ_OS_UPGRADE_IN_PROGRESS': {}, 'BOOTZ_OS_UPGRADE_COMPLETE': {}, 'BOOTZ_OS_INVALID_IMAGE': {}, 'BOOTZ_CONFIGURATION_INVALID': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='enumeration', is_config=False)
    self.__last_boot_attempt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-boot-attempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='oc-types:timeticks64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'bootz', 'state']

  def _get_checksum(self):
    """
    Getter method for checksum, mapped from YANG variable /system/bootz/state/checksum (string)

    YANG Description: The current checksum of the bootz protocol buffer.

This value should refect the current sha-512 of the bootz
protocol buffer message BootstrapDataSigned. The protocol
buffer serialization must be done by tag value for each field
in the bootz protocol buffer. This will produce a
determintistic marshalled value which can be
checksummed.
    """
    return self.__checksum
      
  def _set_checksum(self, v, load=False):
    """
    Setter method for checksum, mapped from YANG variable /system/bootz/state/checksum (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_checksum is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_checksum() directly.

    YANG Description: The current checksum of the bootz protocol buffer.

This value should refect the current sha-512 of the bootz
protocol buffer message BootstrapDataSigned. The protocol
buffer serialization must be done by tag value for each field
in the bootz protocol buffer. This will produce a
determintistic marshalled value which can be
checksummed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, default=str(""), is_leaf=True, yang_name="checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """checksum must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, default=str(""), is_leaf=True, yang_name="checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='string', is_config=False)""",
        })

    self.__checksum = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_checksum(self):
    self.__checksum = YANGDynClass(base=str, default=str(""), is_leaf=True, yang_name="checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='string', is_config=False)


  def _get_error_count(self):
    """
    Getter method for error_count, mapped from YANG variable /system/bootz/state/error_count (oc-yang:counter64)

    YANG Description: Total count of all bootz errors.
    """
    return self.__error_count
      
  def _set_error_count(self, v, load=False):
    """
    Setter method for error_count, mapped from YANG variable /system/bootz/state/error_count (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_error_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_error_count() directly.

    YANG Description: Total count of all bootz errors.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """error_count must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__error_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_error_count(self):
    self.__error_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='oc-yang:counter64', is_config=False)


  def _get_status(self):
    """
    Getter method for status, mapped from YANG variable /system/bootz/state/status (enumeration)

    YANG Description: The status of the bootz service.

The general sequence for the flow would be:
BOOTZ_UNSPECIFIED            <- system initial state
BOOTZ_SENT                   <- bootz request sent
BOOTZ_RECEIVED               <- bootz response received
BOOTZ_OS_UPGRADE_IN_PROGRESS <- (if needed)
BOOTZ_OS_UPGRADE_COMPLETE    <- (if needed)
BOOTZ_CONFIGURATION_APPLIED  <- bootz configuration applied
BOOTZ_OK                     <- bootz process successful

If any error is encounter an error ENUM will be returned.
    """
    return self.__status
      
  def _set_status(self, v, load=False):
    """
    Setter method for status, mapped from YANG variable /system/bootz/state/status (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_status() directly.

    YANG Description: The status of the bootz service.

The general sequence for the flow would be:
BOOTZ_UNSPECIFIED            <- system initial state
BOOTZ_SENT                   <- bootz request sent
BOOTZ_RECEIVED               <- bootz response received
BOOTZ_OS_UPGRADE_IN_PROGRESS <- (if needed)
BOOTZ_OS_UPGRADE_COMPLETE    <- (if needed)
BOOTZ_CONFIGURATION_APPLIED  <- bootz configuration applied
BOOTZ_OK                     <- bootz process successful

If any error is encounter an error ENUM will be returned.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'BOOTZ_UNSPECIFIED': {}, 'BOOTZ_SENT': {}, 'BOOTZ_RECEIVED': {}, 'BOOTZ_CONFIGURATION_APPLIED': {}, 'BOOTZ_OK': {}, 'BOOTZ_OV_INVALID': {}, 'BOOTZ_OS_UPGRADE_IN_PROGRESS': {}, 'BOOTZ_OS_UPGRADE_COMPLETE': {}, 'BOOTZ_OS_INVALID_IMAGE': {}, 'BOOTZ_CONFIGURATION_INVALID': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """status must be of a type compatible with enumeration""",
          'defined-type': "openconfig-system-bootz:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'BOOTZ_UNSPECIFIED': {}, 'BOOTZ_SENT': {}, 'BOOTZ_RECEIVED': {}, 'BOOTZ_CONFIGURATION_APPLIED': {}, 'BOOTZ_OK': {}, 'BOOTZ_OV_INVALID': {}, 'BOOTZ_OS_UPGRADE_IN_PROGRESS': {}, 'BOOTZ_OS_UPGRADE_COMPLETE': {}, 'BOOTZ_OS_INVALID_IMAGE': {}, 'BOOTZ_CONFIGURATION_INVALID': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='enumeration', is_config=False)""",
        })

    self.__status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_status(self):
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'BOOTZ_UNSPECIFIED': {}, 'BOOTZ_SENT': {}, 'BOOTZ_RECEIVED': {}, 'BOOTZ_CONFIGURATION_APPLIED': {}, 'BOOTZ_OK': {}, 'BOOTZ_OV_INVALID': {}, 'BOOTZ_OS_UPGRADE_IN_PROGRESS': {}, 'BOOTZ_OS_UPGRADE_COMPLETE': {}, 'BOOTZ_OS_INVALID_IMAGE': {}, 'BOOTZ_CONFIGURATION_INVALID': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='enumeration', is_config=False)


  def _get_last_boot_attempt(self):
    """
    Getter method for last_boot_attempt, mapped from YANG variable /system/bootz/state/last_boot_attempt (oc-types:timeticks64)

    YANG Description: The timestamp of the last bootz attempt.
    """
    return self.__last_boot_attempt
      
  def _set_last_boot_attempt(self, v, load=False):
    """
    Setter method for last_boot_attempt, mapped from YANG variable /system/bootz/state/last_boot_attempt (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_boot_attempt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_boot_attempt() directly.

    YANG Description: The timestamp of the last bootz attempt.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-boot-attempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_boot_attempt must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-boot-attempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_boot_attempt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_boot_attempt(self):
    self.__last_boot_attempt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-boot-attempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-bootz', defining_module='openconfig-system-bootz', yang_type='oc-types:timeticks64', is_config=False)

  checksum = __builtin__.property(_get_checksum)
  error_count = __builtin__.property(_get_error_count)
  status = __builtin__.property(_get_status)
  last_boot_attempt = __builtin__.property(_get_last_boot_attempt)


  _pyangbind_elements = OrderedDict([('checksum', checksum), ('error_count', error_count), ('status', status), ('last_boot_attempt', last_boot_attempt), ])


