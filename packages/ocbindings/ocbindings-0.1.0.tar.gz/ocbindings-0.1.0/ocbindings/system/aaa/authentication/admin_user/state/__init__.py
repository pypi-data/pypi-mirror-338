# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/aaa/authentication/admin-user/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for the root user account
  """
  __slots__ = ('_path_helper', '_extmethods', '__admin_password','__admin_password_hashed','__admin_username','__password_version','__password_created_on','__authorized_principals_list_version','__authorized_principals_list_created_on','__authorized_keys_list_version','__authorized_keys_list_created_on',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__admin_password = YANGDynClass(base=str, is_leaf=True, yang_name="admin-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='string', is_config=False)
    self.__admin_password_hashed = YANGDynClass(base=str, is_leaf=True, yang_name="admin-password-hashed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='oc-aaa-types:crypt-password-type', is_config=False)
    self.__admin_username = YANGDynClass(base=str, is_leaf=True, yang_name="admin-username", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='string', is_config=False)
    self.__password_version = YANGDynClass(base=str, is_leaf=True, yang_name="password-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)
    self.__password_created_on = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="password-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)
    self.__authorized_principals_list_version = YANGDynClass(base=str, is_leaf=True, yang_name="authorized-principals-list-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)
    self.__authorized_principals_list_created_on = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authorized-principals-list-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)
    self.__authorized_keys_list_version = YANGDynClass(base=str, is_leaf=True, yang_name="authorized-keys-list-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)
    self.__authorized_keys_list_created_on = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authorized-keys-list-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'aaa', 'authentication', 'admin-user', 'state']

  def _get_admin_password(self):
    """
    Getter method for admin_password, mapped from YANG variable /system/aaa/authentication/admin_user/state/admin_password (string)

    YANG Description: The admin/root password, supplied as a cleartext string.
The system should hash and only store the password as a
hashed value.
    """
    return self.__admin_password
      
  def _set_admin_password(self, v, load=False):
    """
    Setter method for admin_password, mapped from YANG variable /system/aaa/authentication/admin_user/state/admin_password (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_password() directly.

    YANG Description: The admin/root password, supplied as a cleartext string.
The system should hash and only store the password as a
hashed value.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="admin-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_password must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="admin-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='string', is_config=False)""",
        })

    self.__admin_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_password(self):
    self.__admin_password = YANGDynClass(base=str, is_leaf=True, yang_name="admin-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='string', is_config=False)


  def _get_admin_password_hashed(self):
    """
    Getter method for admin_password_hashed, mapped from YANG variable /system/aaa/authentication/admin_user/state/admin_password_hashed (oc-aaa-types:crypt-password-type)

    YANG Description: The admin/root password, supplied as a hashed value
using the notation described in the definition of the
crypt-password-type.
    """
    return self.__admin_password_hashed
      
  def _set_admin_password_hashed(self, v, load=False):
    """
    Setter method for admin_password_hashed, mapped from YANG variable /system/aaa/authentication/admin_user/state/admin_password_hashed (oc-aaa-types:crypt-password-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_password_hashed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_password_hashed() directly.

    YANG Description: The admin/root password, supplied as a hashed value
using the notation described in the definition of the
crypt-password-type.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="admin-password-hashed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='oc-aaa-types:crypt-password-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_password_hashed must be of a type compatible with oc-aaa-types:crypt-password-type""",
          'defined-type': "oc-aaa-types:crypt-password-type",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="admin-password-hashed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='oc-aaa-types:crypt-password-type', is_config=False)""",
        })

    self.__admin_password_hashed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_password_hashed(self):
    self.__admin_password_hashed = YANGDynClass(base=str, is_leaf=True, yang_name="admin-password-hashed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='oc-aaa-types:crypt-password-type', is_config=False)


  def _get_admin_username(self):
    """
    Getter method for admin_username, mapped from YANG variable /system/aaa/authentication/admin_user/state/admin_username (string)

    YANG Description: Name of the administrator user account, e.g., admin, root,
etc.
    """
    return self.__admin_username
      
  def _set_admin_username(self, v, load=False):
    """
    Setter method for admin_username, mapped from YANG variable /system/aaa/authentication/admin_user/state/admin_username (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_username is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_username() directly.

    YANG Description: Name of the administrator user account, e.g., admin, root,
etc.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="admin-username", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_username must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="admin-username", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='string', is_config=False)""",
        })

    self.__admin_username = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_username(self):
    self.__admin_username = YANGDynClass(base=str, is_leaf=True, yang_name="admin-username", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='string', is_config=False)


  def _get_password_version(self):
    """
    Getter method for password_version, mapped from YANG variable /system/aaa/authentication/admin_user/state/password_version (version)

    YANG Description: The version of the password that is currently used to
authenticate this user account.
    """
    return self.__password_version
      
  def _set_password_version(self, v, load=False):
    """
    Setter method for password_version, mapped from YANG variable /system/aaa/authentication/admin_user/state/password_version (version)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_password_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_password_version() directly.

    YANG Description: The version of the password that is currently used to
authenticate this user account.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="password-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """password_version must be of a type compatible with version""",
          'defined-type': "openconfig-gnsi-credentialz:version",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="password-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)""",
        })

    self.__password_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_password_version(self):
    self.__password_version = YANGDynClass(base=str, is_leaf=True, yang_name="password-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)


  def _get_password_created_on(self):
    """
    Getter method for password_created_on, mapped from YANG variable /system/aaa/authentication/admin_user/state/password_created_on (created-on)

    YANG Description: The timestamp of the moment the currently used password has
been created.
    """
    return self.__password_created_on
      
  def _set_password_created_on(self, v, load=False):
    """
    Setter method for password_created_on, mapped from YANG variable /system/aaa/authentication/admin_user/state/password_created_on (created-on)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_password_created_on is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_password_created_on() directly.

    YANG Description: The timestamp of the moment the currently used password has
been created.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="password-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """password_created_on must be of a type compatible with created-on""",
          'defined-type': "openconfig-gnsi-credentialz:created-on",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="password-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)""",
        })

    self.__password_created_on = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_password_created_on(self):
    self.__password_created_on = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="password-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)


  def _get_authorized_principals_list_version(self):
    """
    Getter method for authorized_principals_list_version, mapped from YANG variable /system/aaa/authentication/admin_user/state/authorized_principals_list_version (version)

    YANG Description: The version of the list of authorized principals currently
associated with this system role.
    """
    return self.__authorized_principals_list_version
      
  def _set_authorized_principals_list_version(self, v, load=False):
    """
    Setter method for authorized_principals_list_version, mapped from YANG variable /system/aaa/authentication/admin_user/state/authorized_principals_list_version (version)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_authorized_principals_list_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_authorized_principals_list_version() directly.

    YANG Description: The version of the list of authorized principals currently
associated with this system role.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="authorized-principals-list-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """authorized_principals_list_version must be of a type compatible with version""",
          'defined-type': "openconfig-gnsi-credentialz:version",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="authorized-principals-list-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)""",
        })

    self.__authorized_principals_list_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_authorized_principals_list_version(self):
    self.__authorized_principals_list_version = YANGDynClass(base=str, is_leaf=True, yang_name="authorized-principals-list-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)


  def _get_authorized_principals_list_created_on(self):
    """
    Getter method for authorized_principals_list_created_on, mapped from YANG variable /system/aaa/authentication/admin_user/state/authorized_principals_list_created_on (created-on)

    YANG Description: The timestamp of the moment the currently used list of
authorized principals has been created.
    """
    return self.__authorized_principals_list_created_on
      
  def _set_authorized_principals_list_created_on(self, v, load=False):
    """
    Setter method for authorized_principals_list_created_on, mapped from YANG variable /system/aaa/authentication/admin_user/state/authorized_principals_list_created_on (created-on)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_authorized_principals_list_created_on is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_authorized_principals_list_created_on() directly.

    YANG Description: The timestamp of the moment the currently used list of
authorized principals has been created.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authorized-principals-list-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """authorized_principals_list_created_on must be of a type compatible with created-on""",
          'defined-type': "openconfig-gnsi-credentialz:created-on",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authorized-principals-list-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)""",
        })

    self.__authorized_principals_list_created_on = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_authorized_principals_list_created_on(self):
    self.__authorized_principals_list_created_on = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authorized-principals-list-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)


  def _get_authorized_keys_list_version(self):
    """
    Getter method for authorized_keys_list_version, mapped from YANG variable /system/aaa/authentication/admin_user/state/authorized_keys_list_version (version)

    YANG Description: The version of the list of authorized keys that is currently
associated with this system role.
    """
    return self.__authorized_keys_list_version
      
  def _set_authorized_keys_list_version(self, v, load=False):
    """
    Setter method for authorized_keys_list_version, mapped from YANG variable /system/aaa/authentication/admin_user/state/authorized_keys_list_version (version)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_authorized_keys_list_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_authorized_keys_list_version() directly.

    YANG Description: The version of the list of authorized keys that is currently
associated with this system role.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="authorized-keys-list-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """authorized_keys_list_version must be of a type compatible with version""",
          'defined-type': "openconfig-gnsi-credentialz:version",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="authorized-keys-list-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)""",
        })

    self.__authorized_keys_list_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_authorized_keys_list_version(self):
    self.__authorized_keys_list_version = YANGDynClass(base=str, is_leaf=True, yang_name="authorized-keys-list-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)


  def _get_authorized_keys_list_created_on(self):
    """
    Getter method for authorized_keys_list_created_on, mapped from YANG variable /system/aaa/authentication/admin_user/state/authorized_keys_list_created_on (created-on)

    YANG Description: The timestamp of the moment the currently used list of
authorized keys has been created.
    """
    return self.__authorized_keys_list_created_on
      
  def _set_authorized_keys_list_created_on(self, v, load=False):
    """
    Setter method for authorized_keys_list_created_on, mapped from YANG variable /system/aaa/authentication/admin_user/state/authorized_keys_list_created_on (created-on)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_authorized_keys_list_created_on is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_authorized_keys_list_created_on() directly.

    YANG Description: The timestamp of the moment the currently used list of
authorized keys has been created.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authorized-keys-list-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """authorized_keys_list_created_on must be of a type compatible with created-on""",
          'defined-type': "openconfig-gnsi-credentialz:created-on",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authorized-keys-list-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)""",
        })

    self.__authorized_keys_list_created_on = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_authorized_keys_list_created_on(self):
    self.__authorized_keys_list_created_on = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authorized-keys-list-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)

  admin_password = __builtin__.property(_get_admin_password)
  admin_password_hashed = __builtin__.property(_get_admin_password_hashed)
  admin_username = __builtin__.property(_get_admin_username)
  password_version = __builtin__.property(_get_password_version)
  password_created_on = __builtin__.property(_get_password_created_on)
  authorized_principals_list_version = __builtin__.property(_get_authorized_principals_list_version)
  authorized_principals_list_created_on = __builtin__.property(_get_authorized_principals_list_created_on)
  authorized_keys_list_version = __builtin__.property(_get_authorized_keys_list_version)
  authorized_keys_list_created_on = __builtin__.property(_get_authorized_keys_list_created_on)


  _pyangbind_elements = OrderedDict([('admin_password', admin_password), ('admin_password_hashed', admin_password_hashed), ('admin_username', admin_username), ('password_version', password_version), ('password_created_on', password_created_on), ('authorized_principals_list_version', authorized_principals_list_version), ('authorized_principals_list_created_on', authorized_principals_list_created_on), ('authorized_keys_list_version', authorized_keys_list_version), ('authorized_keys_list_created_on', authorized_keys_list_created_on), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/aaa/authentication/admin-user/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for the root user account
  """
  __slots__ = ('_path_helper', '_extmethods', '__admin_password','__admin_password_hashed','__admin_username','__password_version','__password_created_on','__authorized_principals_list_version','__authorized_principals_list_created_on','__authorized_keys_list_version','__authorized_keys_list_created_on',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__admin_password = YANGDynClass(base=str, is_leaf=True, yang_name="admin-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='string', is_config=False)
    self.__admin_password_hashed = YANGDynClass(base=str, is_leaf=True, yang_name="admin-password-hashed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='oc-aaa-types:crypt-password-type', is_config=False)
    self.__admin_username = YANGDynClass(base=str, is_leaf=True, yang_name="admin-username", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='string', is_config=False)
    self.__password_version = YANGDynClass(base=str, is_leaf=True, yang_name="password-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)
    self.__password_created_on = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="password-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)
    self.__authorized_principals_list_version = YANGDynClass(base=str, is_leaf=True, yang_name="authorized-principals-list-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)
    self.__authorized_principals_list_created_on = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authorized-principals-list-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)
    self.__authorized_keys_list_version = YANGDynClass(base=str, is_leaf=True, yang_name="authorized-keys-list-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)
    self.__authorized_keys_list_created_on = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authorized-keys-list-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'aaa', 'authentication', 'admin-user', 'state']

  def _get_admin_password(self):
    """
    Getter method for admin_password, mapped from YANG variable /system/aaa/authentication/admin_user/state/admin_password (string)

    YANG Description: The admin/root password, supplied as a cleartext string.
The system should hash and only store the password as a
hashed value.
    """
    return self.__admin_password
      
  def _set_admin_password(self, v, load=False):
    """
    Setter method for admin_password, mapped from YANG variable /system/aaa/authentication/admin_user/state/admin_password (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_password() directly.

    YANG Description: The admin/root password, supplied as a cleartext string.
The system should hash and only store the password as a
hashed value.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="admin-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_password must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="admin-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='string', is_config=False)""",
        })

    self.__admin_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_password(self):
    self.__admin_password = YANGDynClass(base=str, is_leaf=True, yang_name="admin-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='string', is_config=False)


  def _get_admin_password_hashed(self):
    """
    Getter method for admin_password_hashed, mapped from YANG variable /system/aaa/authentication/admin_user/state/admin_password_hashed (oc-aaa-types:crypt-password-type)

    YANG Description: The admin/root password, supplied as a hashed value
using the notation described in the definition of the
crypt-password-type.
    """
    return self.__admin_password_hashed
      
  def _set_admin_password_hashed(self, v, load=False):
    """
    Setter method for admin_password_hashed, mapped from YANG variable /system/aaa/authentication/admin_user/state/admin_password_hashed (oc-aaa-types:crypt-password-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_password_hashed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_password_hashed() directly.

    YANG Description: The admin/root password, supplied as a hashed value
using the notation described in the definition of the
crypt-password-type.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="admin-password-hashed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='oc-aaa-types:crypt-password-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_password_hashed must be of a type compatible with oc-aaa-types:crypt-password-type""",
          'defined-type': "oc-aaa-types:crypt-password-type",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="admin-password-hashed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='oc-aaa-types:crypt-password-type', is_config=False)""",
        })

    self.__admin_password_hashed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_password_hashed(self):
    self.__admin_password_hashed = YANGDynClass(base=str, is_leaf=True, yang_name="admin-password-hashed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='oc-aaa-types:crypt-password-type', is_config=False)


  def _get_admin_username(self):
    """
    Getter method for admin_username, mapped from YANG variable /system/aaa/authentication/admin_user/state/admin_username (string)

    YANG Description: Name of the administrator user account, e.g., admin, root,
etc.
    """
    return self.__admin_username
      
  def _set_admin_username(self, v, load=False):
    """
    Setter method for admin_username, mapped from YANG variable /system/aaa/authentication/admin_user/state/admin_username (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_username is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_username() directly.

    YANG Description: Name of the administrator user account, e.g., admin, root,
etc.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="admin-username", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_username must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="admin-username", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='string', is_config=False)""",
        })

    self.__admin_username = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_username(self):
    self.__admin_username = YANGDynClass(base=str, is_leaf=True, yang_name="admin-username", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='openconfig-system', yang_type='string', is_config=False)


  def _get_password_version(self):
    """
    Getter method for password_version, mapped from YANG variable /system/aaa/authentication/admin_user/state/password_version (version)

    YANG Description: The version of the password that is currently used to
authenticate this user account.
    """
    return self.__password_version
      
  def _set_password_version(self, v, load=False):
    """
    Setter method for password_version, mapped from YANG variable /system/aaa/authentication/admin_user/state/password_version (version)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_password_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_password_version() directly.

    YANG Description: The version of the password that is currently used to
authenticate this user account.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="password-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """password_version must be of a type compatible with version""",
          'defined-type': "openconfig-gnsi-credentialz:version",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="password-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)""",
        })

    self.__password_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_password_version(self):
    self.__password_version = YANGDynClass(base=str, is_leaf=True, yang_name="password-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)


  def _get_password_created_on(self):
    """
    Getter method for password_created_on, mapped from YANG variable /system/aaa/authentication/admin_user/state/password_created_on (created-on)

    YANG Description: The timestamp of the moment the currently used password has
been created.
    """
    return self.__password_created_on
      
  def _set_password_created_on(self, v, load=False):
    """
    Setter method for password_created_on, mapped from YANG variable /system/aaa/authentication/admin_user/state/password_created_on (created-on)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_password_created_on is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_password_created_on() directly.

    YANG Description: The timestamp of the moment the currently used password has
been created.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="password-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """password_created_on must be of a type compatible with created-on""",
          'defined-type': "openconfig-gnsi-credentialz:created-on",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="password-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)""",
        })

    self.__password_created_on = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_password_created_on(self):
    self.__password_created_on = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="password-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)


  def _get_authorized_principals_list_version(self):
    """
    Getter method for authorized_principals_list_version, mapped from YANG variable /system/aaa/authentication/admin_user/state/authorized_principals_list_version (version)

    YANG Description: The version of the list of authorized principals currently
associated with this system role.
    """
    return self.__authorized_principals_list_version
      
  def _set_authorized_principals_list_version(self, v, load=False):
    """
    Setter method for authorized_principals_list_version, mapped from YANG variable /system/aaa/authentication/admin_user/state/authorized_principals_list_version (version)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_authorized_principals_list_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_authorized_principals_list_version() directly.

    YANG Description: The version of the list of authorized principals currently
associated with this system role.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="authorized-principals-list-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """authorized_principals_list_version must be of a type compatible with version""",
          'defined-type': "openconfig-gnsi-credentialz:version",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="authorized-principals-list-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)""",
        })

    self.__authorized_principals_list_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_authorized_principals_list_version(self):
    self.__authorized_principals_list_version = YANGDynClass(base=str, is_leaf=True, yang_name="authorized-principals-list-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)


  def _get_authorized_principals_list_created_on(self):
    """
    Getter method for authorized_principals_list_created_on, mapped from YANG variable /system/aaa/authentication/admin_user/state/authorized_principals_list_created_on (created-on)

    YANG Description: The timestamp of the moment the currently used list of
authorized principals has been created.
    """
    return self.__authorized_principals_list_created_on
      
  def _set_authorized_principals_list_created_on(self, v, load=False):
    """
    Setter method for authorized_principals_list_created_on, mapped from YANG variable /system/aaa/authentication/admin_user/state/authorized_principals_list_created_on (created-on)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_authorized_principals_list_created_on is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_authorized_principals_list_created_on() directly.

    YANG Description: The timestamp of the moment the currently used list of
authorized principals has been created.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authorized-principals-list-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """authorized_principals_list_created_on must be of a type compatible with created-on""",
          'defined-type': "openconfig-gnsi-credentialz:created-on",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authorized-principals-list-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)""",
        })

    self.__authorized_principals_list_created_on = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_authorized_principals_list_created_on(self):
    self.__authorized_principals_list_created_on = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authorized-principals-list-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)


  def _get_authorized_keys_list_version(self):
    """
    Getter method for authorized_keys_list_version, mapped from YANG variable /system/aaa/authentication/admin_user/state/authorized_keys_list_version (version)

    YANG Description: The version of the list of authorized keys that is currently
associated with this system role.
    """
    return self.__authorized_keys_list_version
      
  def _set_authorized_keys_list_version(self, v, load=False):
    """
    Setter method for authorized_keys_list_version, mapped from YANG variable /system/aaa/authentication/admin_user/state/authorized_keys_list_version (version)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_authorized_keys_list_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_authorized_keys_list_version() directly.

    YANG Description: The version of the list of authorized keys that is currently
associated with this system role.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="authorized-keys-list-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """authorized_keys_list_version must be of a type compatible with version""",
          'defined-type': "openconfig-gnsi-credentialz:version",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="authorized-keys-list-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)""",
        })

    self.__authorized_keys_list_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_authorized_keys_list_version(self):
    self.__authorized_keys_list_version = YANGDynClass(base=str, is_leaf=True, yang_name="authorized-keys-list-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='version', is_config=False)


  def _get_authorized_keys_list_created_on(self):
    """
    Getter method for authorized_keys_list_created_on, mapped from YANG variable /system/aaa/authentication/admin_user/state/authorized_keys_list_created_on (created-on)

    YANG Description: The timestamp of the moment the currently used list of
authorized keys has been created.
    """
    return self.__authorized_keys_list_created_on
      
  def _set_authorized_keys_list_created_on(self, v, load=False):
    """
    Setter method for authorized_keys_list_created_on, mapped from YANG variable /system/aaa/authentication/admin_user/state/authorized_keys_list_created_on (created-on)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_authorized_keys_list_created_on is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_authorized_keys_list_created_on() directly.

    YANG Description: The timestamp of the moment the currently used list of
authorized keys has been created.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authorized-keys-list-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """authorized_keys_list_created_on must be of a type compatible with created-on""",
          'defined-type': "openconfig-gnsi-credentialz:created-on",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authorized-keys-list-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)""",
        })

    self.__authorized_keys_list_created_on = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_authorized_keys_list_created_on(self):
    self.__authorized_keys_list_created_on = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authorized-keys-list-created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/credentialz', defining_module='openconfig-gnsi-credentialz', yang_type='created-on', is_config=False)

  admin_password = __builtin__.property(_get_admin_password)
  admin_password_hashed = __builtin__.property(_get_admin_password_hashed)
  admin_username = __builtin__.property(_get_admin_username)
  password_version = __builtin__.property(_get_password_version)
  password_created_on = __builtin__.property(_get_password_created_on)
  authorized_principals_list_version = __builtin__.property(_get_authorized_principals_list_version)
  authorized_principals_list_created_on = __builtin__.property(_get_authorized_principals_list_created_on)
  authorized_keys_list_version = __builtin__.property(_get_authorized_keys_list_version)
  authorized_keys_list_created_on = __builtin__.property(_get_authorized_keys_list_created_on)


  _pyangbind_elements = OrderedDict([('admin_password', admin_password), ('admin_password_hashed', admin_password_hashed), ('admin_username', admin_username), ('password_version', password_version), ('password_created_on', password_created_on), ('authorized_principals_list_version', authorized_principals_list_version), ('authorized_principals_list_created_on', authorized_principals_list_created_on), ('authorized_keys_list_version', authorized_keys_list_version), ('authorized_keys_list_created_on', authorized_keys_list_created_on), ])


