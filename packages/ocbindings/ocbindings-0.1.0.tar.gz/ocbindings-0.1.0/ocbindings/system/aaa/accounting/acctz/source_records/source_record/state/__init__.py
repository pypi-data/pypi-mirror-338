# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import counters
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/aaa/accounting/acctz/source-records/source-record/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state for gNSI.acctz counters of record production per
service request type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__service','__type','__counters',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__service = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'CMD_SERVICE': {'value': 4}, 'GRPC_SERVICE': {'value': 5}, 'SESSION_SERVICE': {'value': 6}},), is_leaf=True, yang_name="service", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='service-request', is_config=False)
    self.__type = YANGDynClass(base=[RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'SHELL': {'value': 1}, 'CLI': {'value': 2}, 'WEBUI': {'value': 3}, 'RESTCONF': {'value': 4}, 'NETCONF': {'value': 5}},),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'GNMI': {'value': 1}, 'GNOI': {'value': 2}, 'GNSI': {'value': 3}, 'GRIBI': {'value': 4}, 'P4RT': {'value': 5}},),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'LOGIN': {'value': 1}, 'LOGOUT': {'value': 2}},),], is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='service-type', is_config=False)
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'aaa', 'accounting', 'acctz', 'source-records', 'source-record', 'state']

  def _get_service(self):
    """
    Getter method for service, mapped from YANG variable /system/aaa/accounting/acctz/source_records/source_record/state/service (service-request)

    YANG Description: service request type for the gNSI.acctz record.
    """
    return self.__service
      
  def _set_service(self, v, load=False):
    """
    Setter method for service, mapped from YANG variable /system/aaa/accounting/acctz/source_records/source_record/state/service (service-request)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service() directly.

    YANG Description: service request type for the gNSI.acctz record.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'CMD_SERVICE': {'value': 4}, 'GRPC_SERVICE': {'value': 5}, 'SESSION_SERVICE': {'value': 6}},), is_leaf=True, yang_name="service", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='service-request', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service must be of a type compatible with service-request""",
          'defined-type': "openconfig-gnsi-acctz:service-request",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'CMD_SERVICE': {'value': 4}, 'GRPC_SERVICE': {'value': 5}, 'SESSION_SERVICE': {'value': 6}},), is_leaf=True, yang_name="service", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='service-request', is_config=False)""",
        })

    self.__service = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service(self):
    self.__service = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'CMD_SERVICE': {'value': 4}, 'GRPC_SERVICE': {'value': 5}, 'SESSION_SERVICE': {'value': 6}},), is_leaf=True, yang_name="service", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='service-request', is_config=False)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /system/aaa/accounting/acctz/source_records/source_record/state/type (service-type)

    YANG Description: service request application enum for the gNSI.acctz record.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /system/aaa/accounting/acctz/source_records/source_record/state/type (service-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: service request application enum for the gNSI.acctz record.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'SHELL': {'value': 1}, 'CLI': {'value': 2}, 'WEBUI': {'value': 3}, 'RESTCONF': {'value': 4}, 'NETCONF': {'value': 5}},),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'GNMI': {'value': 1}, 'GNOI': {'value': 2}, 'GNSI': {'value': 3}, 'GRIBI': {'value': 4}, 'P4RT': {'value': 5}},),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'LOGIN': {'value': 1}, 'LOGOUT': {'value': 2}},),], is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='service-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with service-type""",
          'defined-type': "openconfig-gnsi-acctz:service-type",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'SHELL': {'value': 1}, 'CLI': {'value': 2}, 'WEBUI': {'value': 3}, 'RESTCONF': {'value': 4}, 'NETCONF': {'value': 5}},),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'GNMI': {'value': 1}, 'GNOI': {'value': 2}, 'GNSI': {'value': 3}, 'GRIBI': {'value': 4}, 'P4RT': {'value': 5}},),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'LOGIN': {'value': 1}, 'LOGOUT': {'value': 2}},),], is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='service-type', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=[RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'SHELL': {'value': 1}, 'CLI': {'value': 2}, 'WEBUI': {'value': 3}, 'RESTCONF': {'value': 4}, 'NETCONF': {'value': 5}},),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'GNMI': {'value': 1}, 'GNOI': {'value': 2}, 'GNSI': {'value': 3}, 'GRIBI': {'value': 4}, 'P4RT': {'value': 5}},),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'LOGIN': {'value': 1}, 'LOGOUT': {'value': 2}},),], is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='service-type', is_config=False)


  def _get_counters(self):
    """
    Getter method for counters, mapped from YANG variable /system/aaa/accounting/acctz/source_records/source_record/state/counters (container)

    YANG Description: A collection of counters for gNSI.acctz record production per
service-type.
    """
    return self.__counters
      
  def _set_counters(self, v, load=False):
    """
    Setter method for counters, mapped from YANG variable /system/aaa/accounting/acctz/source_records/source_record/state/counters (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_counters is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_counters() directly.

    YANG Description: A collection of counters for gNSI.acctz record production per
service-type.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """counters must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='container', is_config=False)""",
        })

    self.__counters = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_counters(self):
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='container', is_config=False)

  service = __builtin__.property(_get_service)
  type = __builtin__.property(_get_type)
  counters = __builtin__.property(_get_counters)


  _pyangbind_elements = OrderedDict([('service', service), ('type', type), ('counters', counters), ])


from . import counters
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/aaa/accounting/acctz/source-records/source-record/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state for gNSI.acctz counters of record production per
service request type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__service','__type','__counters',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__service = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'CMD_SERVICE': {'value': 4}, 'GRPC_SERVICE': {'value': 5}, 'SESSION_SERVICE': {'value': 6}},), is_leaf=True, yang_name="service", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='service-request', is_config=False)
    self.__type = YANGDynClass(base=[RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'SHELL': {'value': 1}, 'CLI': {'value': 2}, 'WEBUI': {'value': 3}, 'RESTCONF': {'value': 4}, 'NETCONF': {'value': 5}},),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'GNMI': {'value': 1}, 'GNOI': {'value': 2}, 'GNSI': {'value': 3}, 'GRIBI': {'value': 4}, 'P4RT': {'value': 5}},),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'LOGIN': {'value': 1}, 'LOGOUT': {'value': 2}},),], is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='service-type', is_config=False)
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'aaa', 'accounting', 'acctz', 'source-records', 'source-record', 'state']

  def _get_service(self):
    """
    Getter method for service, mapped from YANG variable /system/aaa/accounting/acctz/source_records/source_record/state/service (service-request)

    YANG Description: service request type for the gNSI.acctz record.
    """
    return self.__service
      
  def _set_service(self, v, load=False):
    """
    Setter method for service, mapped from YANG variable /system/aaa/accounting/acctz/source_records/source_record/state/service (service-request)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service() directly.

    YANG Description: service request type for the gNSI.acctz record.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'CMD_SERVICE': {'value': 4}, 'GRPC_SERVICE': {'value': 5}, 'SESSION_SERVICE': {'value': 6}},), is_leaf=True, yang_name="service", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='service-request', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service must be of a type compatible with service-request""",
          'defined-type': "openconfig-gnsi-acctz:service-request",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'CMD_SERVICE': {'value': 4}, 'GRPC_SERVICE': {'value': 5}, 'SESSION_SERVICE': {'value': 6}},), is_leaf=True, yang_name="service", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='service-request', is_config=False)""",
        })

    self.__service = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service(self):
    self.__service = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'CMD_SERVICE': {'value': 4}, 'GRPC_SERVICE': {'value': 5}, 'SESSION_SERVICE': {'value': 6}},), is_leaf=True, yang_name="service", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='service-request', is_config=False)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /system/aaa/accounting/acctz/source_records/source_record/state/type (service-type)

    YANG Description: service request application enum for the gNSI.acctz record.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /system/aaa/accounting/acctz/source_records/source_record/state/type (service-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: service request application enum for the gNSI.acctz record.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'SHELL': {'value': 1}, 'CLI': {'value': 2}, 'WEBUI': {'value': 3}, 'RESTCONF': {'value': 4}, 'NETCONF': {'value': 5}},),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'GNMI': {'value': 1}, 'GNOI': {'value': 2}, 'GNSI': {'value': 3}, 'GRIBI': {'value': 4}, 'P4RT': {'value': 5}},),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'LOGIN': {'value': 1}, 'LOGOUT': {'value': 2}},),], is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='service-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with service-type""",
          'defined-type': "openconfig-gnsi-acctz:service-type",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'SHELL': {'value': 1}, 'CLI': {'value': 2}, 'WEBUI': {'value': 3}, 'RESTCONF': {'value': 4}, 'NETCONF': {'value': 5}},),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'GNMI': {'value': 1}, 'GNOI': {'value': 2}, 'GNSI': {'value': 3}, 'GRIBI': {'value': 4}, 'P4RT': {'value': 5}},),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'LOGIN': {'value': 1}, 'LOGOUT': {'value': 2}},),], is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='service-type', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=[RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'SHELL': {'value': 1}, 'CLI': {'value': 2}, 'WEBUI': {'value': 3}, 'RESTCONF': {'value': 4}, 'NETCONF': {'value': 5}},),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'GNMI': {'value': 1}, 'GNOI': {'value': 2}, 'GNSI': {'value': 3}, 'GRIBI': {'value': 4}, 'P4RT': {'value': 5}},),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {'value': 0}, 'LOGIN': {'value': 1}, 'LOGOUT': {'value': 2}},),], is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='service-type', is_config=False)


  def _get_counters(self):
    """
    Getter method for counters, mapped from YANG variable /system/aaa/accounting/acctz/source_records/source_record/state/counters (container)

    YANG Description: A collection of counters for gNSI.acctz record production per
service-type.
    """
    return self.__counters
      
  def _set_counters(self, v, load=False):
    """
    Setter method for counters, mapped from YANG variable /system/aaa/accounting/acctz/source_records/source_record/state/counters (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_counters is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_counters() directly.

    YANG Description: A collection of counters for gNSI.acctz record production per
service-type.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """counters must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='container', is_config=False)""",
        })

    self.__counters = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_counters(self):
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='container', is_config=False)

  service = __builtin__.property(_get_service)
  type = __builtin__.property(_get_type)
  counters = __builtin__.property(_get_counters)


  _pyangbind_elements = OrderedDict([('service', service), ('type', type), ('counters', counters), ])


