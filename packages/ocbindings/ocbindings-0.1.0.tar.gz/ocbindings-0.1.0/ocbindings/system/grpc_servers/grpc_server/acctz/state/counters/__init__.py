# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/grpc-servers/grpc-server/acctz/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A collection of counters that were collected by the gNSI.acctz
module while servicing acctz clients.
  """
  __slots__ = ('_path_helper', '_extmethods', '__history_istruncated','__record_requests','__record_responses',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__history_istruncated = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="history-istruncated", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)
    self.__record_requests = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="record-requests", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)
    self.__record_responses = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="record-responses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'grpc-servers', 'grpc-server', 'acctz', 'state', 'counters']

  def _get_history_istruncated(self):
    """
    Getter method for history_istruncated, mapped from YANG variable /system/grpc_servers/grpc_server/acctz/state/counters/history_istruncated (oc-yang:counter64)

    YANG Description: The total number of times that a RecordRequest resulted in
a RecordResponse being marked history-istruncated. ie: a
request was made for a timestamp that did not exist in the
history.
    """
    return self.__history_istruncated
      
  def _set_history_istruncated(self, v, load=False):
    """
    Setter method for history_istruncated, mapped from YANG variable /system/grpc_servers/grpc_server/acctz/state/counters/history_istruncated (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_history_istruncated is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_history_istruncated() directly.

    YANG Description: The total number of times that a RecordRequest resulted in
a RecordResponse being marked history-istruncated. ie: a
request was made for a timestamp that did not exist in the
history.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="history-istruncated", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """history_istruncated must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="history-istruncated", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__history_istruncated = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_history_istruncated(self):
    self.__history_istruncated = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="history-istruncated", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)


  def _get_record_requests(self):
    """
    Getter method for record_requests, mapped from YANG variable /system/grpc_servers/grpc_server/acctz/state/counters/record_requests (oc-yang:counter64)

    YANG Description: The total number of RecordRequest messages that have been received.
    """
    return self.__record_requests
      
  def _set_record_requests(self, v, load=False):
    """
    Setter method for record_requests, mapped from YANG variable /system/grpc_servers/grpc_server/acctz/state/counters/record_requests (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_record_requests is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_record_requests() directly.

    YANG Description: The total number of RecordRequest messages that have been received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="record-requests", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """record_requests must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="record-requests", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__record_requests = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_record_requests(self):
    self.__record_requests = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="record-requests", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)


  def _get_record_responses(self):
    """
    Getter method for record_responses, mapped from YANG variable /system/grpc_servers/grpc_server/acctz/state/counters/record_responses (oc-yang:counter64)

    YANG Description: The total number of RecordResponse messages that have been sent.
    """
    return self.__record_responses
      
  def _set_record_responses(self, v, load=False):
    """
    Setter method for record_responses, mapped from YANG variable /system/grpc_servers/grpc_server/acctz/state/counters/record_responses (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_record_responses is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_record_responses() directly.

    YANG Description: The total number of RecordResponse messages that have been sent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="record-responses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """record_responses must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="record-responses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__record_responses = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_record_responses(self):
    self.__record_responses = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="record-responses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)

  history_istruncated = __builtin__.property(_get_history_istruncated)
  record_requests = __builtin__.property(_get_record_requests)
  record_responses = __builtin__.property(_get_record_responses)


  _pyangbind_elements = OrderedDict([('history_istruncated', history_istruncated), ('record_requests', record_requests), ('record_responses', record_responses), ])


class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/grpc-servers/grpc-server/acctz/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A collection of counters that were collected by the gNSI.acctz
module while servicing acctz clients.
  """
  __slots__ = ('_path_helper', '_extmethods', '__history_istruncated','__record_requests','__record_responses',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__history_istruncated = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="history-istruncated", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)
    self.__record_requests = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="record-requests", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)
    self.__record_responses = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="record-responses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'grpc-servers', 'grpc-server', 'acctz', 'state', 'counters']

  def _get_history_istruncated(self):
    """
    Getter method for history_istruncated, mapped from YANG variable /system/grpc_servers/grpc_server/acctz/state/counters/history_istruncated (oc-yang:counter64)

    YANG Description: The total number of times that a RecordRequest resulted in
a RecordResponse being marked history-istruncated. ie: a
request was made for a timestamp that did not exist in the
history.
    """
    return self.__history_istruncated
      
  def _set_history_istruncated(self, v, load=False):
    """
    Setter method for history_istruncated, mapped from YANG variable /system/grpc_servers/grpc_server/acctz/state/counters/history_istruncated (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_history_istruncated is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_history_istruncated() directly.

    YANG Description: The total number of times that a RecordRequest resulted in
a RecordResponse being marked history-istruncated. ie: a
request was made for a timestamp that did not exist in the
history.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="history-istruncated", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """history_istruncated must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="history-istruncated", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__history_istruncated = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_history_istruncated(self):
    self.__history_istruncated = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="history-istruncated", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)


  def _get_record_requests(self):
    """
    Getter method for record_requests, mapped from YANG variable /system/grpc_servers/grpc_server/acctz/state/counters/record_requests (oc-yang:counter64)

    YANG Description: The total number of RecordRequest messages that have been received.
    """
    return self.__record_requests
      
  def _set_record_requests(self, v, load=False):
    """
    Setter method for record_requests, mapped from YANG variable /system/grpc_servers/grpc_server/acctz/state/counters/record_requests (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_record_requests is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_record_requests() directly.

    YANG Description: The total number of RecordRequest messages that have been received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="record-requests", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """record_requests must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="record-requests", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__record_requests = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_record_requests(self):
    self.__record_requests = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="record-requests", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)


  def _get_record_responses(self):
    """
    Getter method for record_responses, mapped from YANG variable /system/grpc_servers/grpc_server/acctz/state/counters/record_responses (oc-yang:counter64)

    YANG Description: The total number of RecordResponse messages that have been sent.
    """
    return self.__record_responses
      
  def _set_record_responses(self, v, load=False):
    """
    Setter method for record_responses, mapped from YANG variable /system/grpc_servers/grpc_server/acctz/state/counters/record_responses (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_record_responses is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_record_responses() directly.

    YANG Description: The total number of RecordResponse messages that have been sent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="record-responses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """record_responses must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="record-responses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__record_responses = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_record_responses(self):
    self.__record_responses = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="record-responses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='oc-yang:counter64', is_config=False)

  history_istruncated = __builtin__.property(_get_history_istruncated)
  record_requests = __builtin__.property(_get_record_requests)
  record_responses = __builtin__.property(_get_record_responses)


  _pyangbind_elements = OrderedDict([('history_istruncated', history_istruncated), ('record_requests', record_requests), ('record_responses', record_responses), ])


