# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import reads
from . import writes
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state for per-OpenConfig path counters.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__reads','__writes',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='string', is_config=False)
    self.__reads = YANGDynClass(base=reads.reads, is_container='container', yang_name="reads", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)
    self.__writes = YANGDynClass(base=writes.writes, is_container='container', yang_name="writes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'grpc-servers', 'grpc-server', 'gnmi-pathz-policy-counters', 'paths', 'path', 'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /system/grpc_servers/grpc_server/gnmi_pathz_policy_counters/paths/path/state/name (string)

    YANG Description: A OpenConfig schema path the counter were
collected for.

For documentation on the naming of paths, see
https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-path-conventions.md
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /system/grpc_servers/grpc_server/gnmi_pathz_policy_counters/paths/path/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: A OpenConfig schema path the counter were
collected for.

For documentation on the naming of paths, see
https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-path-conventions.md
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='string', is_config=False)


  def _get_reads(self):
    """
    Getter method for reads, mapped from YANG variable /system/grpc_servers/grpc_server/gnmi_pathz_policy_counters/paths/path/state/reads (container)

    YANG Description: The counter were collected while
performing a read operation on the
schema path.
    """
    return self.__reads
      
  def _set_reads(self, v, load=False):
    """
    Setter method for reads, mapped from YANG variable /system/grpc_servers/grpc_server/gnmi_pathz_policy_counters/paths/path/state/reads (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_reads is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_reads() directly.

    YANG Description: The counter were collected while
performing a read operation on the
schema path.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=reads.reads, is_container='container', yang_name="reads", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """reads must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=reads.reads, is_container='container', yang_name="reads", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)""",
        })

    self.__reads = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_reads(self):
    self.__reads = YANGDynClass(base=reads.reads, is_container='container', yang_name="reads", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)


  def _get_writes(self):
    """
    Getter method for writes, mapped from YANG variable /system/grpc_servers/grpc_server/gnmi_pathz_policy_counters/paths/path/state/writes (container)

    YANG Description: The counter were collected while
performing a write operation on the
schema path.
    """
    return self.__writes
      
  def _set_writes(self, v, load=False):
    """
    Setter method for writes, mapped from YANG variable /system/grpc_servers/grpc_server/gnmi_pathz_policy_counters/paths/path/state/writes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_writes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_writes() directly.

    YANG Description: The counter were collected while
performing a write operation on the
schema path.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=writes.writes, is_container='container', yang_name="writes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """writes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=writes.writes, is_container='container', yang_name="writes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)""",
        })

    self.__writes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_writes(self):
    self.__writes = YANGDynClass(base=writes.writes, is_container='container', yang_name="writes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)

  name = __builtin__.property(_get_name)
  reads = __builtin__.property(_get_reads)
  writes = __builtin__.property(_get_writes)


  _pyangbind_elements = OrderedDict([('name', name), ('reads', reads), ('writes', writes), ])


from . import reads
from . import writes
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state for per-OpenConfig path counters.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__reads','__writes',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='string', is_config=False)
    self.__reads = YANGDynClass(base=reads.reads, is_container='container', yang_name="reads", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)
    self.__writes = YANGDynClass(base=writes.writes, is_container='container', yang_name="writes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'grpc-servers', 'grpc-server', 'gnmi-pathz-policy-counters', 'paths', 'path', 'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /system/grpc_servers/grpc_server/gnmi_pathz_policy_counters/paths/path/state/name (string)

    YANG Description: A OpenConfig schema path the counter were
collected for.

For documentation on the naming of paths, see
https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-path-conventions.md
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /system/grpc_servers/grpc_server/gnmi_pathz_policy_counters/paths/path/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: A OpenConfig schema path the counter were
collected for.

For documentation on the naming of paths, see
https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-path-conventions.md
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='string', is_config=False)


  def _get_reads(self):
    """
    Getter method for reads, mapped from YANG variable /system/grpc_servers/grpc_server/gnmi_pathz_policy_counters/paths/path/state/reads (container)

    YANG Description: The counter were collected while
performing a read operation on the
schema path.
    """
    return self.__reads
      
  def _set_reads(self, v, load=False):
    """
    Setter method for reads, mapped from YANG variable /system/grpc_servers/grpc_server/gnmi_pathz_policy_counters/paths/path/state/reads (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_reads is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_reads() directly.

    YANG Description: The counter were collected while
performing a read operation on the
schema path.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=reads.reads, is_container='container', yang_name="reads", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """reads must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=reads.reads, is_container='container', yang_name="reads", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)""",
        })

    self.__reads = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_reads(self):
    self.__reads = YANGDynClass(base=reads.reads, is_container='container', yang_name="reads", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)


  def _get_writes(self):
    """
    Getter method for writes, mapped from YANG variable /system/grpc_servers/grpc_server/gnmi_pathz_policy_counters/paths/path/state/writes (container)

    YANG Description: The counter were collected while
performing a write operation on the
schema path.
    """
    return self.__writes
      
  def _set_writes(self, v, load=False):
    """
    Setter method for writes, mapped from YANG variable /system/grpc_servers/grpc_server/gnmi_pathz_policy_counters/paths/path/state/writes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_writes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_writes() directly.

    YANG Description: The counter were collected while
performing a write operation on the
schema path.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=writes.writes, is_container='container', yang_name="writes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """writes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=writes.writes, is_container='container', yang_name="writes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)""",
        })

    self.__writes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_writes(self):
    self.__writes = YANGDynClass(base=writes.writes, is_container='container', yang_name="writes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)

  name = __builtin__.property(_get_name)
  reads = __builtin__.property(_get_reads)
  writes = __builtin__.property(_get_writes)


  _pyangbind_elements = OrderedDict([('name', name), ('reads', reads), ('writes', writes), ])


