# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/grpc-servers/grpc-server/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to the gRPC service.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__services','__enable','__port','__transport_security','__certificate_id','__metadata_authentication','__listen_addresses','__network_instance',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, default=str("DEFAULT"), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='string', is_config=True)
    self.__services = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'openconfig-system-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'oc-sys-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'oc-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'openconfig-gnsi:GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'oc-gnsi:GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'openconfig-gribi:GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'oc-gribi:GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}, 'openconfig-p4rt:P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}, 'oc-p4rt:P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}},)), is_leaf=False, yang_name="services", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='identityref', is_config=True)
    self.__enable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)
    self.__port = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-inet:port-number', is_config=True)
    self.__transport_security = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="transport-security", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)
    self.__certificate_id = YANGDynClass(base=str, is_leaf=True, yang_name="certificate-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='string', is_config=True)
    self.__metadata_authentication = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="metadata-authentication", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)
    self.__listen_addresses = YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ANY': {}},),]), is_leaf=False, yang_name="listen-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='union', is_config=True)
    self.__network_instance = YANGDynClass(base=str, is_leaf=True, yang_name="network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-ni:network-instance-ref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'grpc-servers', 'grpc-server', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /system/grpc_servers/grpc_server/config/name (string)

    YANG Description: The name of the gRPC server instance that is running on
the local system.

If the operator does not designate a name for the protocol
instance (e.g. config), the implementation should use the
name of 'DEFAULT' (e.g. state).  In addition, for
implementations that support a single gRPC server instance,
the default value is recommended for consistency.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /system/grpc_servers/grpc_server/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The name of the gRPC server instance that is running on
the local system.

If the operator does not designate a name for the protocol
instance (e.g. config), the implementation should use the
name of 'DEFAULT' (e.g. state).  In addition, for
implementations that support a single gRPC server instance,
the default value is recommended for consistency.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, default=str("DEFAULT"), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, default=str("DEFAULT"), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, default=str("DEFAULT"), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='string', is_config=True)


  def _get_services(self):
    """
    Getter method for services, mapped from YANG variable /system/grpc_servers/grpc_server/config/services (identityref)

    YANG Description: The gRPC service definitions that should be enabled for the
specified server. A target may support only specific
sets of services being enabled on the same server (e.g.,
it may be possible to run gNMI and gNOI services on the same
port, but not to run gRIBI and gNMI on the same port).

The set of gRPC services that are available to be configured is
defined through the GRPC_SERVICE identity, which can be extended
for each protocol that is based on gRPC that is available on the
device.
    """
    return self.__services
      
  def _set_services(self, v, load=False):
    """
    Setter method for services, mapped from YANG variable /system/grpc_servers/grpc_server/config/services (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_services is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_services() directly.

    YANG Description: The gRPC service definitions that should be enabled for the
specified server. A target may support only specific
sets of services being enabled on the same server (e.g.,
it may be possible to run gNMI and gNOI services on the same
port, but not to run gRIBI and gNMI on the same port).

The set of gRPC services that are available to be configured is
defined through the GRPC_SERVICE identity, which can be extended
for each protocol that is based on gRPC that is available on the
device.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'openconfig-system-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'oc-sys-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'oc-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'openconfig-gnsi:GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'oc-gnsi:GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'openconfig-gribi:GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'oc-gribi:GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}, 'openconfig-p4rt:P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}, 'oc-p4rt:P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}},)), is_leaf=False, yang_name="services", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """services must be of a type compatible with identityref""",
          'defined-type': "openconfig-system-grpc:identityref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'openconfig-system-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'oc-sys-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'oc-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'openconfig-gnsi:GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'oc-gnsi:GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'openconfig-gribi:GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'oc-gribi:GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}, 'openconfig-p4rt:P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}, 'oc-p4rt:P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}},)), is_leaf=False, yang_name="services", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='identityref', is_config=True)""",
        })

    self.__services = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_services(self):
    self.__services = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'openconfig-system-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'oc-sys-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'oc-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'openconfig-gnsi:GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'oc-gnsi:GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'openconfig-gribi:GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'oc-gribi:GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}, 'openconfig-p4rt:P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}, 'oc-p4rt:P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}},)), is_leaf=False, yang_name="services", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='identityref', is_config=True)


  def _get_enable(self):
    """
    Getter method for enable, mapped from YANG variable /system/grpc_servers/grpc_server/config/enable (boolean)

    YANG Description: When set to true, the gRPC server is enabled and runs on the
local device.
    """
    return self.__enable
      
  def _set_enable(self, v, load=False):
    """
    Setter method for enable, mapped from YANG variable /system/grpc_servers/grpc_server/config/enable (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable() directly.

    YANG Description: When set to true, the gRPC server is enabled and runs on the
local device.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)""",
        })

    self.__enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable(self):
    self.__enable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)


  def _get_port(self):
    """
    Getter method for port, mapped from YANG variable /system/grpc_servers/grpc_server/config/port (oc-inet:port-number)

    YANG Description: TCP port on which the gRPC server should listen.
    """
    return self.__port
      
  def _set_port(self, v, load=False):
    """
    Setter method for port, mapped from YANG variable /system/grpc_servers/grpc_server/config/port (oc-inet:port-number)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port() directly.

    YANG Description: TCP port on which the gRPC server should listen.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-inet:port-number', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port must be of a type compatible with oc-inet:port-number""",
          'defined-type': "oc-inet:port-number",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-inet:port-number', is_config=True)""",
        })

    self.__port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port(self):
    self.__port = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-inet:port-number', is_config=True)


  def _get_transport_security(self):
    """
    Getter method for transport_security, mapped from YANG variable /system/grpc_servers/grpc_server/config/transport_security (boolean)

    YANG Description: Use gRPC transport security (e.g., SSL or TLS). Enabled by default.
This leaf allows transport security to be disabled for use cases that
are not supported, such as lab testing.
    """
    return self.__transport_security
      
  def _set_transport_security(self, v, load=False):
    """
    Setter method for transport_security, mapped from YANG variable /system/grpc_servers/grpc_server/config/transport_security (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transport_security is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transport_security() directly.

    YANG Description: Use gRPC transport security (e.g., SSL or TLS). Enabled by default.
This leaf allows transport security to be disabled for use cases that
are not supported, such as lab testing.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="transport-security", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transport_security must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="transport-security", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)""",
        })

    self.__transport_security = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transport_security(self):
    self.__transport_security = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="transport-security", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)


  def _get_certificate_id(self):
    """
    Getter method for certificate_id, mapped from YANG variable /system/grpc_servers/grpc_server/config/certificate_id (string)

    YANG Description: Name of the certificate that is associated with the gRPC service. The
certificate ID is provisioned through other interfaces to the device, such
as the gNOI certificate management service.
    """
    return self.__certificate_id
      
  def _set_certificate_id(self, v, load=False):
    """
    Setter method for certificate_id, mapped from YANG variable /system/grpc_servers/grpc_server/config/certificate_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_certificate_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_certificate_id() directly.

    YANG Description: Name of the certificate that is associated with the gRPC service. The
certificate ID is provisioned through other interfaces to the device, such
as the gNOI certificate management service.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="certificate-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """certificate_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="certificate-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='string', is_config=True)""",
        })

    self.__certificate_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_certificate_id(self):
    self.__certificate_id = YANGDynClass(base=str, is_leaf=True, yang_name="certificate-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='string', is_config=True)


  def _get_metadata_authentication(self):
    """
    Getter method for metadata_authentication, mapped from YANG variable /system/grpc_servers/grpc_server/config/metadata_authentication (boolean)

    YANG Description: When set to true, metadata authentication is enabled for the gRPC server.
In this mode of operation, gRPC metadata is used to carry authentication
credentials as per the specification in
https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-authentication.md#credentials-and-authentication.
    """
    return self.__metadata_authentication
      
  def _set_metadata_authentication(self, v, load=False):
    """
    Setter method for metadata_authentication, mapped from YANG variable /system/grpc_servers/grpc_server/config/metadata_authentication (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_metadata_authentication is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_metadata_authentication() directly.

    YANG Description: When set to true, metadata authentication is enabled for the gRPC server.
In this mode of operation, gRPC metadata is used to carry authentication
credentials as per the specification in
https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-authentication.md#credentials-and-authentication.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="metadata-authentication", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """metadata_authentication must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="metadata-authentication", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)""",
        })

    self.__metadata_authentication = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_metadata_authentication(self):
    self.__metadata_authentication = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="metadata-authentication", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)


  def _get_listen_addresses(self):
    """
    Getter method for listen_addresses, mapped from YANG variable /system/grpc_servers/grpc_server/config/listen_addresses (union)

    YANG Description: The IP addresses that the gRPC server should listen on. This may be
an IPv4 or an IPv6 address (or both).
    """
    return self.__listen_addresses
      
  def _set_listen_addresses(self, v, load=False):
    """
    Setter method for listen_addresses, mapped from YANG variable /system/grpc_servers/grpc_server/config/listen_addresses (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_listen_addresses is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_listen_addresses() directly.

    YANG Description: The IP addresses that the gRPC server should listen on. This may be
an IPv4 or an IPv6 address (or both).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ANY': {}},),]), is_leaf=False, yang_name="listen-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """listen_addresses must be of a type compatible with union""",
          'defined-type': "openconfig-system-grpc:union",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ANY': {}},),]), is_leaf=False, yang_name="listen-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='union', is_config=True)""",
        })

    self.__listen_addresses = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_listen_addresses(self):
    self.__listen_addresses = YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ANY': {}},),]), is_leaf=False, yang_name="listen-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='union', is_config=True)


  def _get_network_instance(self):
    """
    Getter method for network_instance, mapped from YANG variable /system/grpc_servers/grpc_server/config/network_instance (oc-ni:network-instance-ref)

    YANG Description: The network instance within which the gRPC server is listening.
When unspecified, the DEFAULT_INSTANCE should be used.
    """
    return self.__network_instance
      
  def _set_network_instance(self, v, load=False):
    """
    Setter method for network_instance, mapped from YANG variable /system/grpc_servers/grpc_server/config/network_instance (oc-ni:network-instance-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_network_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_network_instance() directly.

    YANG Description: The network instance within which the gRPC server is listening.
When unspecified, the DEFAULT_INSTANCE should be used.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-ni:network-instance-ref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """network_instance must be of a type compatible with oc-ni:network-instance-ref""",
          'defined-type': "oc-ni:network-instance-ref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-ni:network-instance-ref', is_config=True)""",
        })

    self.__network_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_network_instance(self):
    self.__network_instance = YANGDynClass(base=str, is_leaf=True, yang_name="network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-ni:network-instance-ref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  services = __builtin__.property(_get_services, _set_services)
  enable = __builtin__.property(_get_enable, _set_enable)
  port = __builtin__.property(_get_port, _set_port)
  transport_security = __builtin__.property(_get_transport_security, _set_transport_security)
  certificate_id = __builtin__.property(_get_certificate_id, _set_certificate_id)
  metadata_authentication = __builtin__.property(_get_metadata_authentication, _set_metadata_authentication)
  listen_addresses = __builtin__.property(_get_listen_addresses, _set_listen_addresses)
  network_instance = __builtin__.property(_get_network_instance, _set_network_instance)


  _pyangbind_elements = OrderedDict([('name', name), ('services', services), ('enable', enable), ('port', port), ('transport_security', transport_security), ('certificate_id', certificate_id), ('metadata_authentication', metadata_authentication), ('listen_addresses', listen_addresses), ('network_instance', network_instance), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/grpc-servers/grpc-server/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to the gRPC service.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__services','__enable','__port','__transport_security','__certificate_id','__metadata_authentication','__listen_addresses','__network_instance',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, default=str("DEFAULT"), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='string', is_config=True)
    self.__services = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'openconfig-system-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'oc-sys-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'oc-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'openconfig-gnsi:GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'oc-gnsi:GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'openconfig-gribi:GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'oc-gribi:GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}, 'openconfig-p4rt:P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}, 'oc-p4rt:P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}},)), is_leaf=False, yang_name="services", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='identityref', is_config=True)
    self.__enable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)
    self.__port = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-inet:port-number', is_config=True)
    self.__transport_security = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="transport-security", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)
    self.__certificate_id = YANGDynClass(base=str, is_leaf=True, yang_name="certificate-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='string', is_config=True)
    self.__metadata_authentication = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="metadata-authentication", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)
    self.__listen_addresses = YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ANY': {}},),]), is_leaf=False, yang_name="listen-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='union', is_config=True)
    self.__network_instance = YANGDynClass(base=str, is_leaf=True, yang_name="network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-ni:network-instance-ref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'grpc-servers', 'grpc-server', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /system/grpc_servers/grpc_server/config/name (string)

    YANG Description: The name of the gRPC server instance that is running on
the local system.

If the operator does not designate a name for the protocol
instance (e.g. config), the implementation should use the
name of 'DEFAULT' (e.g. state).  In addition, for
implementations that support a single gRPC server instance,
the default value is recommended for consistency.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /system/grpc_servers/grpc_server/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The name of the gRPC server instance that is running on
the local system.

If the operator does not designate a name for the protocol
instance (e.g. config), the implementation should use the
name of 'DEFAULT' (e.g. state).  In addition, for
implementations that support a single gRPC server instance,
the default value is recommended for consistency.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, default=str("DEFAULT"), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, default=str("DEFAULT"), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, default=str("DEFAULT"), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='string', is_config=True)


  def _get_services(self):
    """
    Getter method for services, mapped from YANG variable /system/grpc_servers/grpc_server/config/services (identityref)

    YANG Description: The gRPC service definitions that should be enabled for the
specified server. A target may support only specific
sets of services being enabled on the same server (e.g.,
it may be possible to run gNMI and gNOI services on the same
port, but not to run gRIBI and gNMI on the same port).

The set of gRPC services that are available to be configured is
defined through the GRPC_SERVICE identity, which can be extended
for each protocol that is based on gRPC that is available on the
device.
    """
    return self.__services
      
  def _set_services(self, v, load=False):
    """
    Setter method for services, mapped from YANG variable /system/grpc_servers/grpc_server/config/services (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_services is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_services() directly.

    YANG Description: The gRPC service definitions that should be enabled for the
specified server. A target may support only specific
sets of services being enabled on the same server (e.g.,
it may be possible to run gNMI and gNOI services on the same
port, but not to run gRIBI and gNMI on the same port).

The set of gRPC services that are available to be configured is
defined through the GRPC_SERVICE identity, which can be extended
for each protocol that is based on gRPC that is available on the
device.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'openconfig-system-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'oc-sys-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'oc-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'openconfig-gnsi:GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'oc-gnsi:GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'openconfig-gribi:GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'oc-gribi:GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}, 'openconfig-p4rt:P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}, 'oc-p4rt:P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}},)), is_leaf=False, yang_name="services", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """services must be of a type compatible with identityref""",
          'defined-type': "openconfig-system-grpc:identityref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'openconfig-system-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'oc-sys-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'oc-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'openconfig-gnsi:GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'oc-gnsi:GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'openconfig-gribi:GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'oc-gribi:GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}, 'openconfig-p4rt:P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}, 'oc-p4rt:P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}},)), is_leaf=False, yang_name="services", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='identityref', is_config=True)""",
        })

    self.__services = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_services(self):
    self.__services = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'openconfig-system-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'oc-sys-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'oc-grpc:GNMI': {'@module': 'openconfig-system-grpc', '@namespace': 'http://openconfig.net/yang/system-grpc'}, 'GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'openconfig-gnsi:GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'oc-gnsi:GNSI': {'@module': 'openconfig-gnsi', '@namespace': 'http://openconfig.net/yang/gnsi'}, 'GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'openconfig-gribi:GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'oc-gribi:GRIBI': {'@module': 'openconfig-gribi', '@namespace': 'http://openconfig.net/yang/gribi'}, 'P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}, 'openconfig-p4rt:P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}, 'oc-p4rt:P4RT': {'@module': 'openconfig-p4rt', '@namespace': 'http://openconfig.net/yang/p4rt'}},)), is_leaf=False, yang_name="services", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='identityref', is_config=True)


  def _get_enable(self):
    """
    Getter method for enable, mapped from YANG variable /system/grpc_servers/grpc_server/config/enable (boolean)

    YANG Description: When set to true, the gRPC server is enabled and runs on the
local device.
    """
    return self.__enable
      
  def _set_enable(self, v, load=False):
    """
    Setter method for enable, mapped from YANG variable /system/grpc_servers/grpc_server/config/enable (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable() directly.

    YANG Description: When set to true, the gRPC server is enabled and runs on the
local device.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)""",
        })

    self.__enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable(self):
    self.__enable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)


  def _get_port(self):
    """
    Getter method for port, mapped from YANG variable /system/grpc_servers/grpc_server/config/port (oc-inet:port-number)

    YANG Description: TCP port on which the gRPC server should listen.
    """
    return self.__port
      
  def _set_port(self, v, load=False):
    """
    Setter method for port, mapped from YANG variable /system/grpc_servers/grpc_server/config/port (oc-inet:port-number)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port() directly.

    YANG Description: TCP port on which the gRPC server should listen.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-inet:port-number', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port must be of a type compatible with oc-inet:port-number""",
          'defined-type': "oc-inet:port-number",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-inet:port-number', is_config=True)""",
        })

    self.__port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port(self):
    self.__port = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-inet:port-number', is_config=True)


  def _get_transport_security(self):
    """
    Getter method for transport_security, mapped from YANG variable /system/grpc_servers/grpc_server/config/transport_security (boolean)

    YANG Description: Use gRPC transport security (e.g., SSL or TLS). Enabled by default.
This leaf allows transport security to be disabled for use cases that
are not supported, such as lab testing.
    """
    return self.__transport_security
      
  def _set_transport_security(self, v, load=False):
    """
    Setter method for transport_security, mapped from YANG variable /system/grpc_servers/grpc_server/config/transport_security (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transport_security is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transport_security() directly.

    YANG Description: Use gRPC transport security (e.g., SSL or TLS). Enabled by default.
This leaf allows transport security to be disabled for use cases that
are not supported, such as lab testing.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="transport-security", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transport_security must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="transport-security", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)""",
        })

    self.__transport_security = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transport_security(self):
    self.__transport_security = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="transport-security", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)


  def _get_certificate_id(self):
    """
    Getter method for certificate_id, mapped from YANG variable /system/grpc_servers/grpc_server/config/certificate_id (string)

    YANG Description: Name of the certificate that is associated with the gRPC service. The
certificate ID is provisioned through other interfaces to the device, such
as the gNOI certificate management service.
    """
    return self.__certificate_id
      
  def _set_certificate_id(self, v, load=False):
    """
    Setter method for certificate_id, mapped from YANG variable /system/grpc_servers/grpc_server/config/certificate_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_certificate_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_certificate_id() directly.

    YANG Description: Name of the certificate that is associated with the gRPC service. The
certificate ID is provisioned through other interfaces to the device, such
as the gNOI certificate management service.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="certificate-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """certificate_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="certificate-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='string', is_config=True)""",
        })

    self.__certificate_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_certificate_id(self):
    self.__certificate_id = YANGDynClass(base=str, is_leaf=True, yang_name="certificate-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='string', is_config=True)


  def _get_metadata_authentication(self):
    """
    Getter method for metadata_authentication, mapped from YANG variable /system/grpc_servers/grpc_server/config/metadata_authentication (boolean)

    YANG Description: When set to true, metadata authentication is enabled for the gRPC server.
In this mode of operation, gRPC metadata is used to carry authentication
credentials as per the specification in
https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-authentication.md#credentials-and-authentication.
    """
    return self.__metadata_authentication
      
  def _set_metadata_authentication(self, v, load=False):
    """
    Setter method for metadata_authentication, mapped from YANG variable /system/grpc_servers/grpc_server/config/metadata_authentication (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_metadata_authentication is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_metadata_authentication() directly.

    YANG Description: When set to true, metadata authentication is enabled for the gRPC server.
In this mode of operation, gRPC metadata is used to carry authentication
credentials as per the specification in
https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-authentication.md#credentials-and-authentication.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="metadata-authentication", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """metadata_authentication must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="metadata-authentication", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)""",
        })

    self.__metadata_authentication = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_metadata_authentication(self):
    self.__metadata_authentication = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="metadata-authentication", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='boolean', is_config=True)


  def _get_listen_addresses(self):
    """
    Getter method for listen_addresses, mapped from YANG variable /system/grpc_servers/grpc_server/config/listen_addresses (union)

    YANG Description: The IP addresses that the gRPC server should listen on. This may be
an IPv4 or an IPv6 address (or both).
    """
    return self.__listen_addresses
      
  def _set_listen_addresses(self, v, load=False):
    """
    Setter method for listen_addresses, mapped from YANG variable /system/grpc_servers/grpc_server/config/listen_addresses (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_listen_addresses is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_listen_addresses() directly.

    YANG Description: The IP addresses that the gRPC server should listen on. This may be
an IPv4 or an IPv6 address (or both).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ANY': {}},),]), is_leaf=False, yang_name="listen-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """listen_addresses must be of a type compatible with union""",
          'defined-type': "openconfig-system-grpc:union",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ANY': {}},),]), is_leaf=False, yang_name="listen-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='union', is_config=True)""",
        })

    self.__listen_addresses = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_listen_addresses(self):
    self.__listen_addresses = YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ANY': {}},),]), is_leaf=False, yang_name="listen-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='union', is_config=True)


  def _get_network_instance(self):
    """
    Getter method for network_instance, mapped from YANG variable /system/grpc_servers/grpc_server/config/network_instance (oc-ni:network-instance-ref)

    YANG Description: The network instance within which the gRPC server is listening.
When unspecified, the DEFAULT_INSTANCE should be used.
    """
    return self.__network_instance
      
  def _set_network_instance(self, v, load=False):
    """
    Setter method for network_instance, mapped from YANG variable /system/grpc_servers/grpc_server/config/network_instance (oc-ni:network-instance-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_network_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_network_instance() directly.

    YANG Description: The network instance within which the gRPC server is listening.
When unspecified, the DEFAULT_INSTANCE should be used.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-ni:network-instance-ref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """network_instance must be of a type compatible with oc-ni:network-instance-ref""",
          'defined-type': "oc-ni:network-instance-ref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-ni:network-instance-ref', is_config=True)""",
        })

    self.__network_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_network_instance(self):
    self.__network_instance = YANGDynClass(base=str, is_leaf=True, yang_name="network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-ni:network-instance-ref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  services = __builtin__.property(_get_services, _set_services)
  enable = __builtin__.property(_get_enable, _set_enable)
  port = __builtin__.property(_get_port, _set_port)
  transport_security = __builtin__.property(_get_transport_security, _set_transport_security)
  certificate_id = __builtin__.property(_get_certificate_id, _set_certificate_id)
  metadata_authentication = __builtin__.property(_get_metadata_authentication, _set_metadata_authentication)
  listen_addresses = __builtin__.property(_get_listen_addresses, _set_listen_addresses)
  network_instance = __builtin__.property(_get_network_instance, _set_network_instance)


  _pyangbind_elements = OrderedDict([('name', name), ('services', services), ('enable', enable), ('port', port), ('transport_security', transport_security), ('certificate_id', certificate_id), ('metadata_authentication', metadata_authentication), ('listen_addresses', listen_addresses), ('network_instance', network_instance), ])


