# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import grpc_server
class grpc_servers(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/grpc-servers. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of gRPC servers that can be configured on the device.
  """
  __slots__ = ('_path_helper', '_extmethods', '__grpc_server',)

  _yang_name = 'grpc-servers'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__grpc_server = YANGDynClass(base=YANGListType("name",grpc_server.grpc_server, yang_name="grpc-server", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="grpc-server", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'grpc-servers']

  def _get_grpc_server(self):
    """
    Getter method for grpc_server, mapped from YANG variable /system/grpc_servers/grpc_server (list)

    YANG Description: The list of gRPC servers that are running on the device. Each
instance within this list corresponds to an individual gRPC listener
that listens on a single TCP port on the specified addresses.
Where there are multiple services that run on a single port, these
are enabled through the service leaf-list which uses the GRPC_SERVICE
identity to list the supported service types.
    """
    return self.__grpc_server
      
  def _set_grpc_server(self, v, load=False):
    """
    Setter method for grpc_server, mapped from YANG variable /system/grpc_servers/grpc_server (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_grpc_server is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_grpc_server() directly.

    YANG Description: The list of gRPC servers that are running on the device. Each
instance within this list corresponds to an individual gRPC listener
that listens on a single TCP port on the specified addresses.
Where there are multiple services that run on a single port, these
are enabled through the service leaf-list which uses the GRPC_SERVICE
identity to list the supported service types.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",grpc_server.grpc_server, yang_name="grpc-server", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="grpc-server", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """grpc_server must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",grpc_server.grpc_server, yang_name="grpc-server", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="grpc-server", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='list', is_config=True)""",
        })

    self.__grpc_server = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_grpc_server(self):
    self.__grpc_server = YANGDynClass(base=YANGListType("name",grpc_server.grpc_server, yang_name="grpc-server", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="grpc-server", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='list', is_config=True)

  grpc_server = __builtin__.property(_get_grpc_server, _set_grpc_server)


  _pyangbind_elements = OrderedDict([('grpc_server', grpc_server), ])


from . import grpc_server
class grpc_servers(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/grpc-servers. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of gRPC servers that can be configured on the device.
  """
  __slots__ = ('_path_helper', '_extmethods', '__grpc_server',)

  _yang_name = 'grpc-servers'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__grpc_server = YANGDynClass(base=YANGListType("name",grpc_server.grpc_server, yang_name="grpc-server", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="grpc-server", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'grpc-servers']

  def _get_grpc_server(self):
    """
    Getter method for grpc_server, mapped from YANG variable /system/grpc_servers/grpc_server (list)

    YANG Description: The list of gRPC servers that are running on the device. Each
instance within this list corresponds to an individual gRPC listener
that listens on a single TCP port on the specified addresses.
Where there are multiple services that run on a single port, these
are enabled through the service leaf-list which uses the GRPC_SERVICE
identity to list the supported service types.
    """
    return self.__grpc_server
      
  def _set_grpc_server(self, v, load=False):
    """
    Setter method for grpc_server, mapped from YANG variable /system/grpc_servers/grpc_server (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_grpc_server is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_grpc_server() directly.

    YANG Description: The list of gRPC servers that are running on the device. Each
instance within this list corresponds to an individual gRPC listener
that listens on a single TCP port on the specified addresses.
Where there are multiple services that run on a single port, these
are enabled through the service leaf-list which uses the GRPC_SERVICE
identity to list the supported service types.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",grpc_server.grpc_server, yang_name="grpc-server", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="grpc-server", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """grpc_server must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",grpc_server.grpc_server, yang_name="grpc-server", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="grpc-server", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='list', is_config=True)""",
        })

    self.__grpc_server = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_grpc_server(self):
    self.__grpc_server = YANGDynClass(base=YANGListType("name",grpc_server.grpc_server, yang_name="grpc-server", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="grpc-server", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='list', is_config=True)

  grpc_server = __builtin__.property(_get_grpc_server, _set_grpc_server)


  _pyangbind_elements = OrderedDict([('grpc_server', grpc_server), ])


