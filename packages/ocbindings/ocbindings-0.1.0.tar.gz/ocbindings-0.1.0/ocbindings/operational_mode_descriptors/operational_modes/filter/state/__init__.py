# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-terminal-device-properties - based on the path /operational-mode-descriptors/operational-modes/filter/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Filter's state attributes top container.
  """
  __slots__ = ('_path_helper', '_extmethods', '__pulse_shaping_type','__roll_off',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/openconfig-terminal-device-properties'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__pulse_shaping_type = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},),], is_leaf=True, yang_name="pulse-shaping-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)
    self.__roll_off = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="roll-off", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['operational-mode-descriptors', 'operational-modes', 'filter', 'state']

  def _get_pulse_shaping_type(self):
    """
    Getter method for pulse_shaping_type, mapped from YANG variable /operational_mode_descriptors/operational_modes/filter/state/pulse_shaping_type (union)

    YANG Description: Pulse/spectral shaping type such as Raised-cosine (RC),
 root-raised-cosine (RRC) and OFF. The attribute allows
 other pulse-shaping types to be encoded as strings.
    """
    return self.__pulse_shaping_type
      
  def _set_pulse_shaping_type(self, v, load=False):
    """
    Setter method for pulse_shaping_type, mapped from YANG variable /operational_mode_descriptors/operational_modes/filter/state/pulse_shaping_type (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pulse_shaping_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pulse_shaping_type() directly.

    YANG Description: Pulse/spectral shaping type such as Raised-cosine (RC),
 root-raised-cosine (RRC) and OFF. The attribute allows
 other pulse-shaping types to be encoded as strings.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},),], is_leaf=True, yang_name="pulse-shaping-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pulse_shaping_type must be of a type compatible with union""",
          'defined-type': "openconfig-terminal-device-properties:union",
          'generated-type': """YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},),], is_leaf=True, yang_name="pulse-shaping-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)""",
        })

    self.__pulse_shaping_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pulse_shaping_type(self):
    self.__pulse_shaping_type = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},),], is_leaf=True, yang_name="pulse-shaping-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)


  def _get_roll_off(self):
    """
    Getter method for roll_off, mapped from YANG variable /operational_mode_descriptors/operational_modes/filter/state/roll_off (decimal64)

    YANG Description: Decimal fraction between 0 and 1. Roll-off parameter (𝛽) of the
TX pulse shaping filter. This assumes a raised-cosine filter
    """
    return self.__roll_off
      
  def _set_roll_off(self, v, load=False):
    """
    Setter method for roll_off, mapped from YANG variable /operational_mode_descriptors/operational_modes/filter/state/roll_off (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_roll_off is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_roll_off() directly.

    YANG Description: Decimal fraction between 0 and 1. Roll-off parameter (𝛽) of the
TX pulse shaping filter. This assumes a raised-cosine filter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="roll-off", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """roll_off must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="roll-off", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)""",
        })

    self.__roll_off = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_roll_off(self):
    self.__roll_off = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="roll-off", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)

  pulse_shaping_type = __builtin__.property(_get_pulse_shaping_type)
  roll_off = __builtin__.property(_get_roll_off)


  _pyangbind_elements = OrderedDict([('pulse_shaping_type', pulse_shaping_type), ('roll_off', roll_off), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-terminal-device-properties - based on the path /operational-mode-descriptors/operational-modes/filter/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Filter's state attributes top container.
  """
  __slots__ = ('_path_helper', '_extmethods', '__pulse_shaping_type','__roll_off',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/openconfig-terminal-device-properties'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__pulse_shaping_type = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},),], is_leaf=True, yang_name="pulse-shaping-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)
    self.__roll_off = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="roll-off", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['operational-mode-descriptors', 'operational-modes', 'filter', 'state']

  def _get_pulse_shaping_type(self):
    """
    Getter method for pulse_shaping_type, mapped from YANG variable /operational_mode_descriptors/operational_modes/filter/state/pulse_shaping_type (union)

    YANG Description: Pulse/spectral shaping type such as Raised-cosine (RC),
 root-raised-cosine (RRC) and OFF. The attribute allows
 other pulse-shaping types to be encoded as strings.
    """
    return self.__pulse_shaping_type
      
  def _set_pulse_shaping_type(self, v, load=False):
    """
    Setter method for pulse_shaping_type, mapped from YANG variable /operational_mode_descriptors/operational_modes/filter/state/pulse_shaping_type (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pulse_shaping_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pulse_shaping_type() directly.

    YANG Description: Pulse/spectral shaping type such as Raised-cosine (RC),
 root-raised-cosine (RRC) and OFF. The attribute allows
 other pulse-shaping types to be encoded as strings.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},),], is_leaf=True, yang_name="pulse-shaping-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pulse_shaping_type must be of a type compatible with union""",
          'defined-type': "openconfig-terminal-device-properties:union",
          'generated-type': """YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},),], is_leaf=True, yang_name="pulse-shaping-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)""",
        })

    self.__pulse_shaping_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pulse_shaping_type(self):
    self.__pulse_shaping_type = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:RC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:RRC': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:OFF': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},),], is_leaf=True, yang_name="pulse-shaping-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)


  def _get_roll_off(self):
    """
    Getter method for roll_off, mapped from YANG variable /operational_mode_descriptors/operational_modes/filter/state/roll_off (decimal64)

    YANG Description: Decimal fraction between 0 and 1. Roll-off parameter (𝛽) of the
TX pulse shaping filter. This assumes a raised-cosine filter
    """
    return self.__roll_off
      
  def _set_roll_off(self, v, load=False):
    """
    Setter method for roll_off, mapped from YANG variable /operational_mode_descriptors/operational_modes/filter/state/roll_off (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_roll_off is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_roll_off() directly.

    YANG Description: Decimal fraction between 0 and 1. Roll-off parameter (𝛽) of the
TX pulse shaping filter. This assumes a raised-cosine filter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="roll-off", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """roll_off must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="roll-off", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)""",
        })

    self.__roll_off = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_roll_off(self):
    self.__roll_off = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="roll-off", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)

  pulse_shaping_type = __builtin__.property(_get_pulse_shaping_type)
  roll_off = __builtin__.property(_get_roll_off)


  _pyangbind_elements = OrderedDict([('pulse_shaping_type', pulse_shaping_type), ('roll_off', roll_off), ])


