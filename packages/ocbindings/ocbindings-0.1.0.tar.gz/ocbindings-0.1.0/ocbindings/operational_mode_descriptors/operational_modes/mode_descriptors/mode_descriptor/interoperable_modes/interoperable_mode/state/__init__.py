# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-terminal-device-properties - based on the path /operational-mode-descriptors/operational-modes/mode-descriptors/mode-descriptor/interoperable-modes/interoperable-mode/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational-mode interoperbale mode state top container.
  """
  __slots__ = ('_path_helper', '_extmethods', '__mode_name','__publisher_organization',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/openconfig-terminal-device-properties'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mode_name = YANGDynClass(base=str, is_leaf=True, yang_name="mode-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='string', is_config=False)
    self.__publisher_organization = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},),], is_leaf=True, yang_name="publisher-organization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['operational-mode-descriptors', 'operational-modes', 'mode-descriptors', 'mode-descriptor', 'interoperable-modes', 'interoperable-mode', 'state']

  def _get_mode_name(self):
    """
    Getter method for mode_name, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/interoperable_modes/interoperable_mode/state/mode_name (string)

    YANG Description: Public well-know free-format name reference to the mode name.
    """
    return self.__mode_name
      
  def _set_mode_name(self, v, load=False):
    """
    Setter method for mode_name, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/interoperable_modes/interoperable_mode/state/mode_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mode_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mode_name() directly.

    YANG Description: Public well-know free-format name reference to the mode name.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="mode-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mode_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="mode-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='string', is_config=False)""",
        })

    self.__mode_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mode_name(self):
    self.__mode_name = YANGDynClass(base=str, is_leaf=True, yang_name="mode-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='string', is_config=False)


  def _get_publisher_organization(self):
    """
    Getter method for publisher_organization, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/interoperable_modes/interoperable_mode/state/publisher_organization (union)

    YANG Description: Name of the organization, standard body, Multi-Source Agreement, or
open source project, responsible of the definition of the interoperable
mode.
    """
    return self.__publisher_organization
      
  def _set_publisher_organization(self, v, load=False):
    """
    Setter method for publisher_organization, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/interoperable_modes/interoperable_mode/state/publisher_organization (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_publisher_organization is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_publisher_organization() directly.

    YANG Description: Name of the organization, standard body, Multi-Source Agreement, or
open source project, responsible of the definition of the interoperable
mode.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},),], is_leaf=True, yang_name="publisher-organization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """publisher_organization must be of a type compatible with union""",
          'defined-type': "openconfig-terminal-device-properties:union",
          'generated-type': """YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},),], is_leaf=True, yang_name="publisher-organization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)""",
        })

    self.__publisher_organization = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_publisher_organization(self):
    self.__publisher_organization = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},),], is_leaf=True, yang_name="publisher-organization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)

  mode_name = __builtin__.property(_get_mode_name)
  publisher_organization = __builtin__.property(_get_publisher_organization)


  _pyangbind_elements = OrderedDict([('mode_name', mode_name), ('publisher_organization', publisher_organization), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-terminal-device-properties - based on the path /operational-mode-descriptors/operational-modes/mode-descriptors/mode-descriptor/interoperable-modes/interoperable-mode/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational-mode interoperbale mode state top container.
  """
  __slots__ = ('_path_helper', '_extmethods', '__mode_name','__publisher_organization',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/openconfig-terminal-device-properties'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mode_name = YANGDynClass(base=str, is_leaf=True, yang_name="mode-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='string', is_config=False)
    self.__publisher_organization = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},),], is_leaf=True, yang_name="publisher-organization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['operational-mode-descriptors', 'operational-modes', 'mode-descriptors', 'mode-descriptor', 'interoperable-modes', 'interoperable-mode', 'state']

  def _get_mode_name(self):
    """
    Getter method for mode_name, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/interoperable_modes/interoperable_mode/state/mode_name (string)

    YANG Description: Public well-know free-format name reference to the mode name.
    """
    return self.__mode_name
      
  def _set_mode_name(self, v, load=False):
    """
    Setter method for mode_name, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/interoperable_modes/interoperable_mode/state/mode_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mode_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mode_name() directly.

    YANG Description: Public well-know free-format name reference to the mode name.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="mode-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mode_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="mode-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='string', is_config=False)""",
        })

    self.__mode_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mode_name(self):
    self.__mode_name = YANGDynClass(base=str, is_leaf=True, yang_name="mode-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='string', is_config=False)


  def _get_publisher_organization(self):
    """
    Getter method for publisher_organization, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/interoperable_modes/interoperable_mode/state/publisher_organization (union)

    YANG Description: Name of the organization, standard body, Multi-Source Agreement, or
open source project, responsible of the definition of the interoperable
mode.
    """
    return self.__publisher_organization
      
  def _set_publisher_organization(self, v, load=False):
    """
    Setter method for publisher_organization, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/interoperable_modes/interoperable_mode/state/publisher_organization (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_publisher_organization is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_publisher_organization() directly.

    YANG Description: Name of the organization, standard body, Multi-Source Agreement, or
open source project, responsible of the definition of the interoperable
mode.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},),], is_leaf=True, yang_name="publisher-organization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """publisher_organization must be of a type compatible with union""",
          'defined-type': "openconfig-terminal-device-properties:union",
          'generated-type': """YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},),], is_leaf=True, yang_name="publisher-organization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)""",
        })

    self.__publisher_organization = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_publisher_organization(self):
    self.__publisher_organization = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},),], is_leaf=True, yang_name="publisher-organization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)

  mode_name = __builtin__.property(_get_mode_name)
  publisher_organization = __builtin__.property(_get_publisher_organization)


  _pyangbind_elements = OrderedDict([('mode_name', mode_name), ('publisher_organization', publisher_organization), ])


