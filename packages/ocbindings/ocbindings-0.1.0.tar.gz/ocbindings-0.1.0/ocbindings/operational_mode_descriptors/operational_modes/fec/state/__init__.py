# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-terminal-device-properties - based on the path /operational-mode-descriptors/operational-modes/fec/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: FEC state attributes top container.
  """
  __slots__ = ('_path_helper', '_extmethods', '__fec_coding','__coding_overhead','__coding_gain',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/openconfig-terminal-device-properties'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__fec_coding = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},),], is_leaf=True, yang_name="fec-coding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)
    self.__coding_overhead = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="coding-overhead", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)
    self.__coding_gain = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), default=Decimal(0.00), is_leaf=True, yang_name="coding-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['operational-mode-descriptors', 'operational-modes', 'fec', 'state']

  def _get_fec_coding(self):
    """
    Getter method for fec_coding, mapped from YANG variable /operational_mode_descriptors/operational_modes/fec/state/fec_coding (union)

    YANG Description: Forward error correction (FEC) coding schema used in the
transmission mode. Type union of string (for proprietary codes)
and a set of standard codes encoded as identity references
    """
    return self.__fec_coding
      
  def _set_fec_coding(self, v, load=False):
    """
    Setter method for fec_coding, mapped from YANG variable /operational_mode_descriptors/operational_modes/fec/state/fec_coding (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fec_coding is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fec_coding() directly.

    YANG Description: Forward error correction (FEC) coding schema used in the
transmission mode. Type union of string (for proprietary codes)
and a set of standard codes encoded as identity references
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},),], is_leaf=True, yang_name="fec-coding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fec_coding must be of a type compatible with union""",
          'defined-type': "openconfig-terminal-device-properties:union",
          'generated-type': """YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},),], is_leaf=True, yang_name="fec-coding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)""",
        })

    self.__fec_coding = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fec_coding(self):
    self.__fec_coding = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},),], is_leaf=True, yang_name="fec-coding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)


  def _get_coding_overhead(self):
    """
    Getter method for coding_overhead, mapped from YANG variable /operational_mode_descriptors/operational_modes/fec/state/coding_overhead (decimal64)

    YANG Description: Coding overhead rate in %.
    """
    return self.__coding_overhead
      
  def _set_coding_overhead(self, v, load=False):
    """
    Setter method for coding_overhead, mapped from YANG variable /operational_mode_descriptors/operational_modes/fec/state/coding_overhead (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_coding_overhead is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_coding_overhead() directly.

    YANG Description: Coding overhead rate in %.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="coding-overhead", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """coding_overhead must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="coding-overhead", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)""",
        })

    self.__coding_overhead = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_coding_overhead(self):
    self.__coding_overhead = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="coding-overhead", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)


  def _get_coding_gain(self):
    """
    Getter method for coding_gain, mapped from YANG variable /operational_mode_descriptors/operational_modes/fec/state/coding_gain (decimal64)

    YANG Description: Net coding gain (NCG) in dB units at 10E-15 bit error rate.
It may vary depending on the modulation format used in the
associated transmission mode (operational-mode).
    """
    return self.__coding_gain
      
  def _set_coding_gain(self, v, load=False):
    """
    Setter method for coding_gain, mapped from YANG variable /operational_mode_descriptors/operational_modes/fec/state/coding_gain (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_coding_gain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_coding_gain() directly.

    YANG Description: Net coding gain (NCG) in dB units at 10E-15 bit error rate.
It may vary depending on the modulation format used in the
associated transmission mode (operational-mode).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), default=Decimal(0.00), is_leaf=True, yang_name="coding-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """coding_gain must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), default=Decimal(0.00), is_leaf=True, yang_name="coding-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)""",
        })

    self.__coding_gain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_coding_gain(self):
    self.__coding_gain = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), default=Decimal(0.00), is_leaf=True, yang_name="coding-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)

  fec_coding = __builtin__.property(_get_fec_coding)
  coding_overhead = __builtin__.property(_get_coding_overhead)
  coding_gain = __builtin__.property(_get_coding_gain)


  _pyangbind_elements = OrderedDict([('fec_coding', fec_coding), ('coding_overhead', coding_overhead), ('coding_gain', coding_gain), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-terminal-device-properties - based on the path /operational-mode-descriptors/operational-modes/fec/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: FEC state attributes top container.
  """
  __slots__ = ('_path_helper', '_extmethods', '__fec_coding','__coding_overhead','__coding_gain',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/openconfig-terminal-device-properties'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__fec_coding = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},),], is_leaf=True, yang_name="fec-coding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)
    self.__coding_overhead = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="coding-overhead", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)
    self.__coding_gain = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), default=Decimal(0.00), is_leaf=True, yang_name="coding-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['operational-mode-descriptors', 'operational-modes', 'fec', 'state']

  def _get_fec_coding(self):
    """
    Getter method for fec_coding, mapped from YANG variable /operational_mode_descriptors/operational_modes/fec/state/fec_coding (union)

    YANG Description: Forward error correction (FEC) coding schema used in the
transmission mode. Type union of string (for proprietary codes)
and a set of standard codes encoded as identity references
    """
    return self.__fec_coding
      
  def _set_fec_coding(self, v, load=False):
    """
    Setter method for fec_coding, mapped from YANG variable /operational_mode_descriptors/operational_modes/fec/state/fec_coding (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fec_coding is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fec_coding() directly.

    YANG Description: Forward error correction (FEC) coding schema used in the
transmission mode. Type union of string (for proprietary codes)
and a set of standard codes encoded as identity references
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},),], is_leaf=True, yang_name="fec-coding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fec_coding must be of a type compatible with union""",
          'defined-type': "openconfig-terminal-device-properties:union",
          'generated-type': """YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},),], is_leaf=True, yang_name="fec-coding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)""",
        })

    self.__fec_coding = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fec_coding(self):
    self.__fec_coding = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_HD': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_G': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_E': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_O': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_C': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FEC_OTHER': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},),], is_leaf=True, yang_name="fec-coding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='union', is_config=False)


  def _get_coding_overhead(self):
    """
    Getter method for coding_overhead, mapped from YANG variable /operational_mode_descriptors/operational_modes/fec/state/coding_overhead (decimal64)

    YANG Description: Coding overhead rate in %.
    """
    return self.__coding_overhead
      
  def _set_coding_overhead(self, v, load=False):
    """
    Setter method for coding_overhead, mapped from YANG variable /operational_mode_descriptors/operational_modes/fec/state/coding_overhead (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_coding_overhead is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_coding_overhead() directly.

    YANG Description: Coding overhead rate in %.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="coding-overhead", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """coding_overhead must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="coding-overhead", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)""",
        })

    self.__coding_overhead = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_coding_overhead(self):
    self.__coding_overhead = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="coding-overhead", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)


  def _get_coding_gain(self):
    """
    Getter method for coding_gain, mapped from YANG variable /operational_mode_descriptors/operational_modes/fec/state/coding_gain (decimal64)

    YANG Description: Net coding gain (NCG) in dB units at 10E-15 bit error rate.
It may vary depending on the modulation format used in the
associated transmission mode (operational-mode).
    """
    return self.__coding_gain
      
  def _set_coding_gain(self, v, load=False):
    """
    Setter method for coding_gain, mapped from YANG variable /operational_mode_descriptors/operational_modes/fec/state/coding_gain (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_coding_gain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_coding_gain() directly.

    YANG Description: Net coding gain (NCG) in dB units at 10E-15 bit error rate.
It may vary depending on the modulation format used in the
associated transmission mode (operational-mode).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), default=Decimal(0.00), is_leaf=True, yang_name="coding-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """coding_gain must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), default=Decimal(0.00), is_leaf=True, yang_name="coding-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)""",
        })

    self.__coding_gain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_coding_gain(self):
    self.__coding_gain = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), default=Decimal(0.00), is_leaf=True, yang_name="coding-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)

  fec_coding = __builtin__.property(_get_fec_coding)
  coding_overhead = __builtin__.property(_get_coding_overhead)
  coding_gain = __builtin__.property(_get_coding_gain)


  _pyangbind_elements = OrderedDict([('fec_coding', fec_coding), ('coding_overhead', coding_overhead), ('coding_gain', coding_gain), ])


