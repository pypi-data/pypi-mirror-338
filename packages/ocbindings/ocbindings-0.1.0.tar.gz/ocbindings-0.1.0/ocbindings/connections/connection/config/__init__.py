# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-transport-line-connectivity - based on the path /connections/connection/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data
  """
  __slots__ = ('_path_helper', '_extmethods', '__index','__source','__dest','__fiber_type',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/openconfig-transport-line-connectivity'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='uint32', is_config=True)
    self.__source = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'openconfig-transport-line-connectivity:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'oc-line-connect:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}},),], is_leaf=True, yang_name="source", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='union', is_config=True)
    self.__dest = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'openconfig-transport-line-connectivity:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'oc-line-connect:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}},),], is_leaf=True, yang_name="dest", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='union', is_config=True)
    self.__fiber_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'openconfig-transport-types:FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'oc-opt-types:FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'openconfig-transport-types:FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'oc-opt-types:FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}},), is_leaf=True, yang_name="fiber-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='identityref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['connections', 'connection', 'config']

  def _get_index(self):
    """
    Getter method for index, mapped from YANG variable /connections/connection/config/index (uint32)

    YANG Description: Index for the defined connection
    """
    return self.__index
      
  def _set_index(self, v, load=False):
    """
    Setter method for index, mapped from YANG variable /connections/connection/config/index (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_index() directly.

    YANG Description: Index for the defined connection
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """index must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='uint32', is_config=True)""",
        })

    self.__index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_index(self):
    self.__index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='uint32', is_config=True)


  def _get_source(self):
    """
    Getter method for source, mapped from YANG variable /connections/connection/config/source (union)

    YANG Description: The user supplied name of the source port of the connection
within the system. If the port is within the device, the
string should reflect the name of the port as it appears in
the components model. If the port is not represented in the
components model (e.g., a port on a passive chassis), the
string should reflect the system assigned name of the port.
If the source port is not within the device, then an
identityref of EXTERNAL should be specified.
    """
    return self.__source
      
  def _set_source(self, v, load=False):
    """
    Setter method for source, mapped from YANG variable /connections/connection/config/source (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source() directly.

    YANG Description: The user supplied name of the source port of the connection
within the system. If the port is within the device, the
string should reflect the name of the port as it appears in
the components model. If the port is not represented in the
components model (e.g., a port on a passive chassis), the
string should reflect the system assigned name of the port.
If the source port is not within the device, then an
identityref of EXTERNAL should be specified.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'openconfig-transport-line-connectivity:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'oc-line-connect:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}},),], is_leaf=True, yang_name="source", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source must be of a type compatible with union""",
          'defined-type': "openconfig-transport-line-connectivity:union",
          'generated-type': """YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'openconfig-transport-line-connectivity:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'oc-line-connect:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}},),], is_leaf=True, yang_name="source", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='union', is_config=True)""",
        })

    self.__source = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source(self):
    self.__source = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'openconfig-transport-line-connectivity:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'oc-line-connect:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}},),], is_leaf=True, yang_name="source", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='union', is_config=True)


  def _get_dest(self):
    """
    Getter method for dest, mapped from YANG variable /connections/connection/config/dest (union)

    YANG Description: The user supplied name of the destination port of the connection
within the system. If the port is within the device, the string
should reflect the name of the port as it appears in the
components model. If the port is not represented in the components
model (e.g., a port on a passive chassis), the string should
reflect the system assigned name of the port. If the destination
port is not within the device, then an identityref of EXTERNAL
should be specified.
    """
    return self.__dest
      
  def _set_dest(self, v, load=False):
    """
    Setter method for dest, mapped from YANG variable /connections/connection/config/dest (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dest is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dest() directly.

    YANG Description: The user supplied name of the destination port of the connection
within the system. If the port is within the device, the string
should reflect the name of the port as it appears in the
components model. If the port is not represented in the components
model (e.g., a port on a passive chassis), the string should
reflect the system assigned name of the port. If the destination
port is not within the device, then an identityref of EXTERNAL
should be specified.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'openconfig-transport-line-connectivity:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'oc-line-connect:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}},),], is_leaf=True, yang_name="dest", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dest must be of a type compatible with union""",
          'defined-type': "openconfig-transport-line-connectivity:union",
          'generated-type': """YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'openconfig-transport-line-connectivity:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'oc-line-connect:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}},),], is_leaf=True, yang_name="dest", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='union', is_config=True)""",
        })

    self.__dest = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dest(self):
    self.__dest = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'openconfig-transport-line-connectivity:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'oc-line-connect:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}},),], is_leaf=True, yang_name="dest", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='union', is_config=True)


  def _get_fiber_type(self):
    """
    Getter method for fiber_type, mapped from YANG variable /connections/connection/config/fiber_type (identityref)

    YANG Description: The type of fiber jumper used for the connection.
    """
    return self.__fiber_type
      
  def _set_fiber_type(self, v, load=False):
    """
    Setter method for fiber_type, mapped from YANG variable /connections/connection/config/fiber_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fiber_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fiber_type() directly.

    YANG Description: The type of fiber jumper used for the connection.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'openconfig-transport-types:FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'oc-opt-types:FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'openconfig-transport-types:FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'oc-opt-types:FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}},), is_leaf=True, yang_name="fiber-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fiber_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-transport-line-connectivity:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'openconfig-transport-types:FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'oc-opt-types:FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'openconfig-transport-types:FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'oc-opt-types:FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}},), is_leaf=True, yang_name="fiber-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='identityref', is_config=True)""",
        })

    self.__fiber_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fiber_type(self):
    self.__fiber_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'openconfig-transport-types:FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'oc-opt-types:FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'openconfig-transport-types:FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'oc-opt-types:FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}},), is_leaf=True, yang_name="fiber-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='identityref', is_config=True)

  index = __builtin__.property(_get_index, _set_index)
  source = __builtin__.property(_get_source, _set_source)
  dest = __builtin__.property(_get_dest, _set_dest)
  fiber_type = __builtin__.property(_get_fiber_type, _set_fiber_type)


  _pyangbind_elements = OrderedDict([('index', index), ('source', source), ('dest', dest), ('fiber_type', fiber_type), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-transport-line-connectivity - based on the path /connections/connection/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data
  """
  __slots__ = ('_path_helper', '_extmethods', '__index','__source','__dest','__fiber_type',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/openconfig-transport-line-connectivity'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='uint32', is_config=True)
    self.__source = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'openconfig-transport-line-connectivity:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'oc-line-connect:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}},),], is_leaf=True, yang_name="source", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='union', is_config=True)
    self.__dest = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'openconfig-transport-line-connectivity:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'oc-line-connect:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}},),], is_leaf=True, yang_name="dest", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='union', is_config=True)
    self.__fiber_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'openconfig-transport-types:FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'oc-opt-types:FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'openconfig-transport-types:FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'oc-opt-types:FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}},), is_leaf=True, yang_name="fiber-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='identityref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['connections', 'connection', 'config']

  def _get_index(self):
    """
    Getter method for index, mapped from YANG variable /connections/connection/config/index (uint32)

    YANG Description: Index for the defined connection
    """
    return self.__index
      
  def _set_index(self, v, load=False):
    """
    Setter method for index, mapped from YANG variable /connections/connection/config/index (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_index() directly.

    YANG Description: Index for the defined connection
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """index must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='uint32', is_config=True)""",
        })

    self.__index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_index(self):
    self.__index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='uint32', is_config=True)


  def _get_source(self):
    """
    Getter method for source, mapped from YANG variable /connections/connection/config/source (union)

    YANG Description: The user supplied name of the source port of the connection
within the system. If the port is within the device, the
string should reflect the name of the port as it appears in
the components model. If the port is not represented in the
components model (e.g., a port on a passive chassis), the
string should reflect the system assigned name of the port.
If the source port is not within the device, then an
identityref of EXTERNAL should be specified.
    """
    return self.__source
      
  def _set_source(self, v, load=False):
    """
    Setter method for source, mapped from YANG variable /connections/connection/config/source (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source() directly.

    YANG Description: The user supplied name of the source port of the connection
within the system. If the port is within the device, the
string should reflect the name of the port as it appears in
the components model. If the port is not represented in the
components model (e.g., a port on a passive chassis), the
string should reflect the system assigned name of the port.
If the source port is not within the device, then an
identityref of EXTERNAL should be specified.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'openconfig-transport-line-connectivity:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'oc-line-connect:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}},),], is_leaf=True, yang_name="source", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source must be of a type compatible with union""",
          'defined-type': "openconfig-transport-line-connectivity:union",
          'generated-type': """YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'openconfig-transport-line-connectivity:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'oc-line-connect:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}},),], is_leaf=True, yang_name="source", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='union', is_config=True)""",
        })

    self.__source = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source(self):
    self.__source = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'openconfig-transport-line-connectivity:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'oc-line-connect:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}},),], is_leaf=True, yang_name="source", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='union', is_config=True)


  def _get_dest(self):
    """
    Getter method for dest, mapped from YANG variable /connections/connection/config/dest (union)

    YANG Description: The user supplied name of the destination port of the connection
within the system. If the port is within the device, the string
should reflect the name of the port as it appears in the
components model. If the port is not represented in the components
model (e.g., a port on a passive chassis), the string should
reflect the system assigned name of the port. If the destination
port is not within the device, then an identityref of EXTERNAL
should be specified.
    """
    return self.__dest
      
  def _set_dest(self, v, load=False):
    """
    Setter method for dest, mapped from YANG variable /connections/connection/config/dest (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dest is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dest() directly.

    YANG Description: The user supplied name of the destination port of the connection
within the system. If the port is within the device, the string
should reflect the name of the port as it appears in the
components model. If the port is not represented in the components
model (e.g., a port on a passive chassis), the string should
reflect the system assigned name of the port. If the destination
port is not within the device, then an identityref of EXTERNAL
should be specified.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'openconfig-transport-line-connectivity:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'oc-line-connect:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}},),], is_leaf=True, yang_name="dest", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dest must be of a type compatible with union""",
          'defined-type': "openconfig-transport-line-connectivity:union",
          'generated-type': """YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'openconfig-transport-line-connectivity:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'oc-line-connect:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}},),], is_leaf=True, yang_name="dest", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='union', is_config=True)""",
        })

    self.__dest = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dest(self):
    self.__dest = YANGDynClass(base=[str,RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'openconfig-transport-line-connectivity:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}, 'oc-line-connect:EXTERNAL': {'@module': 'openconfig-transport-line-connectivity', '@namespace': 'http://openconfig.net/yang/openconfig-transport-line-connectivity'}},),], is_leaf=True, yang_name="dest", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='union', is_config=True)


  def _get_fiber_type(self):
    """
    Getter method for fiber_type, mapped from YANG variable /connections/connection/config/fiber_type (identityref)

    YANG Description: The type of fiber jumper used for the connection.
    """
    return self.__fiber_type
      
  def _set_fiber_type(self, v, load=False):
    """
    Setter method for fiber_type, mapped from YANG variable /connections/connection/config/fiber_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fiber_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fiber_type() directly.

    YANG Description: The type of fiber jumper used for the connection.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'openconfig-transport-types:FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'oc-opt-types:FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'openconfig-transport-types:FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'oc-opt-types:FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}},), is_leaf=True, yang_name="fiber-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fiber_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-transport-line-connectivity:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'openconfig-transport-types:FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'oc-opt-types:FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'openconfig-transport-types:FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'oc-opt-types:FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}},), is_leaf=True, yang_name="fiber-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='identityref', is_config=True)""",
        })

    self.__fiber_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fiber_type(self):
    self.__fiber_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'openconfig-transport-types:FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'oc-opt-types:FIBER_JUMPER_SIMPLEX': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'openconfig-transport-types:FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}, 'oc-opt-types:FIBER_JUMPER_MULTI_FIBER_STRAND': {'@module': 'openconfig-transport-types', '@namespace': 'http://openconfig.net/yang/transport-types'}},), is_leaf=True, yang_name="fiber-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-transport-line-connectivity', defining_module='openconfig-transport-line-connectivity', yang_type='identityref', is_config=True)

  index = __builtin__.property(_get_index, _set_index)
  source = __builtin__.property(_get_source, _set_source)
  dest = __builtin__.property(_get_dest, _set_dest)
  fiber_type = __builtin__.property(_get_fiber_type, _set_fiber_type)


  _pyangbind_elements = OrderedDict([('index', index), ('source', source), ('dest', dest), ('fiber_type', fiber_type), ])


