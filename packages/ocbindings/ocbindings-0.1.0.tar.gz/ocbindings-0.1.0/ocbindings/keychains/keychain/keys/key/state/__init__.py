# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-keychain - based on the path /keychains/keychain/keys/key/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines keychain key state.
  """
  __slots__ = ('_path_helper', '_extmethods', '__key_id','__secret_key','__crypto_algorithm',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/oc-keychain'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__key_id = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '(0x)([0-9a-fA-F]{2})*', 'length': ['3..max']}), restriction_dict={'length': ['3..66']}),RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64),], is_leaf=True, yang_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='union', is_config=False)
    self.__secret_key = YANGDynClass(base=str, is_leaf=True, yang_name="secret-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='string', is_config=False)
    self.__crypto_algorithm = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="crypto-algorithm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='identityref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['keychains', 'keychain', 'keys', 'key', 'state']

  def _get_key_id(self):
    """
    Getter method for key_id, mapped from YANG variable /keychains/keychain/keys/key/state/key_id (union)

    YANG Description: Identifier for the key within the keychain.  Note that the
hex-string type is deprecated and will be removed from a future
version of this model. Implementations should transition to using
the hex-string-prefixed type.
    """
    return self.__key_id
      
  def _set_key_id(self, v, load=False):
    """
    Setter method for key_id, mapped from YANG variable /keychains/keychain/keys/key/state/key_id (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_key_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_key_id() directly.

    YANG Description: Identifier for the key within the keychain.  Note that the
hex-string type is deprecated and will be removed from a future
version of this model. Implementations should transition to using
the hex-string-prefixed type.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '(0x)([0-9a-fA-F]{2})*', 'length': ['3..max']}), restriction_dict={'length': ['3..66']}),RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64),], is_leaf=True, yang_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """key_id must be of a type compatible with union""",
          'defined-type': "openconfig-keychain:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '(0x)([0-9a-fA-F]{2})*', 'length': ['3..max']}), restriction_dict={'length': ['3..66']}),RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64),], is_leaf=True, yang_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='union', is_config=False)""",
        })

    self.__key_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_key_id(self):
    self.__key_id = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '(0x)([0-9a-fA-F]{2})*', 'length': ['3..max']}), restriction_dict={'length': ['3..66']}),RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64),], is_leaf=True, yang_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='union', is_config=False)


  def _get_secret_key(self):
    """
    Getter method for secret_key, mapped from YANG variable /keychains/keychain/keys/key/state/secret_key (string)

    YANG Description: Authentication key supplied as an encrypted value.  The system should store and
return the key in encrypted form.
    """
    return self.__secret_key
      
  def _set_secret_key(self, v, load=False):
    """
    Setter method for secret_key, mapped from YANG variable /keychains/keychain/keys/key/state/secret_key (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_secret_key is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_secret_key() directly.

    YANG Description: Authentication key supplied as an encrypted value.  The system should store and
return the key in encrypted form.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="secret-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """secret_key must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="secret-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='string', is_config=False)""",
        })

    self.__secret_key = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_secret_key(self):
    self.__secret_key = YANGDynClass(base=str, is_leaf=True, yang_name="secret-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='string', is_config=False)


  def _get_crypto_algorithm(self):
    """
    Getter method for crypto_algorithm, mapped from YANG variable /keychains/keychain/keys/key/state/crypto_algorithm (identityref)

    YANG Description: Cryptographic algorithm associated with the key.  Note that not all cryptographic
algorithms are available in all contexts (e.g., across different protocols).
    """
    return self.__crypto_algorithm
      
  def _set_crypto_algorithm(self, v, load=False):
    """
    Setter method for crypto_algorithm, mapped from YANG variable /keychains/keychain/keys/key/state/crypto_algorithm (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_crypto_algorithm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_crypto_algorithm() directly.

    YANG Description: Cryptographic algorithm associated with the key.  Note that not all cryptographic
algorithms are available in all contexts (e.g., across different protocols).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="crypto-algorithm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """crypto_algorithm must be of a type compatible with identityref""",
          'defined-type': "openconfig-keychain:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="crypto-algorithm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='identityref', is_config=False)""",
        })

    self.__crypto_algorithm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_crypto_algorithm(self):
    self.__crypto_algorithm = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="crypto-algorithm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='identityref', is_config=False)

  key_id = __builtin__.property(_get_key_id)
  secret_key = __builtin__.property(_get_secret_key)
  crypto_algorithm = __builtin__.property(_get_crypto_algorithm)


  _pyangbind_elements = OrderedDict([('key_id', key_id), ('secret_key', secret_key), ('crypto_algorithm', crypto_algorithm), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-keychain - based on the path /keychains/keychain/keys/key/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines keychain key state.
  """
  __slots__ = ('_path_helper', '_extmethods', '__key_id','__secret_key','__crypto_algorithm',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/oc-keychain'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__key_id = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '(0x)([0-9a-fA-F]{2})*', 'length': ['3..max']}), restriction_dict={'length': ['3..66']}),RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64),], is_leaf=True, yang_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='union', is_config=False)
    self.__secret_key = YANGDynClass(base=str, is_leaf=True, yang_name="secret-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='string', is_config=False)
    self.__crypto_algorithm = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="crypto-algorithm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='identityref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['keychains', 'keychain', 'keys', 'key', 'state']

  def _get_key_id(self):
    """
    Getter method for key_id, mapped from YANG variable /keychains/keychain/keys/key/state/key_id (union)

    YANG Description: Identifier for the key within the keychain.  Note that the
hex-string type is deprecated and will be removed from a future
version of this model. Implementations should transition to using
the hex-string-prefixed type.
    """
    return self.__key_id
      
  def _set_key_id(self, v, load=False):
    """
    Setter method for key_id, mapped from YANG variable /keychains/keychain/keys/key/state/key_id (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_key_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_key_id() directly.

    YANG Description: Identifier for the key within the keychain.  Note that the
hex-string type is deprecated and will be removed from a future
version of this model. Implementations should transition to using
the hex-string-prefixed type.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '(0x)([0-9a-fA-F]{2})*', 'length': ['3..max']}), restriction_dict={'length': ['3..66']}),RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64),], is_leaf=True, yang_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """key_id must be of a type compatible with union""",
          'defined-type': "openconfig-keychain:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '(0x)([0-9a-fA-F]{2})*', 'length': ['3..max']}), restriction_dict={'length': ['3..66']}),RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64),], is_leaf=True, yang_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='union', is_config=False)""",
        })

    self.__key_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_key_id(self):
    self.__key_id = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '(0x)([0-9a-fA-F]{2})*', 'length': ['3..max']}), restriction_dict={'length': ['3..66']}),RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64),], is_leaf=True, yang_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='union', is_config=False)


  def _get_secret_key(self):
    """
    Getter method for secret_key, mapped from YANG variable /keychains/keychain/keys/key/state/secret_key (string)

    YANG Description: Authentication key supplied as an encrypted value.  The system should store and
return the key in encrypted form.
    """
    return self.__secret_key
      
  def _set_secret_key(self, v, load=False):
    """
    Setter method for secret_key, mapped from YANG variable /keychains/keychain/keys/key/state/secret_key (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_secret_key is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_secret_key() directly.

    YANG Description: Authentication key supplied as an encrypted value.  The system should store and
return the key in encrypted form.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="secret-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """secret_key must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="secret-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='string', is_config=False)""",
        })

    self.__secret_key = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_secret_key(self):
    self.__secret_key = YANGDynClass(base=str, is_leaf=True, yang_name="secret-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='string', is_config=False)


  def _get_crypto_algorithm(self):
    """
    Getter method for crypto_algorithm, mapped from YANG variable /keychains/keychain/keys/key/state/crypto_algorithm (identityref)

    YANG Description: Cryptographic algorithm associated with the key.  Note that not all cryptographic
algorithms are available in all contexts (e.g., across different protocols).
    """
    return self.__crypto_algorithm
      
  def _set_crypto_algorithm(self, v, load=False):
    """
    Setter method for crypto_algorithm, mapped from YANG variable /keychains/keychain/keys/key/state/crypto_algorithm (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_crypto_algorithm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_crypto_algorithm() directly.

    YANG Description: Cryptographic algorithm associated with the key.  Note that not all cryptographic
algorithms are available in all contexts (e.g., across different protocols).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="crypto-algorithm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """crypto_algorithm must be of a type compatible with identityref""",
          'defined-type': "openconfig-keychain:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="crypto-algorithm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='identityref', is_config=False)""",
        })

    self.__crypto_algorithm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_crypto_algorithm(self):
    self.__crypto_algorithm = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:CRYPTO_NONE': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_MD5': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_12': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_20': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_1_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:HMAC_SHA_256': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_128_CMAC_96': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_128_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:AES_256_CMAC': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="crypto-algorithm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='identityref', is_config=False)

  key_id = __builtin__.property(_get_key_id)
  secret_key = __builtin__.property(_get_secret_key)
  crypto_algorithm = __builtin__.property(_get_crypto_algorithm)


  _pyangbind_elements = OrderedDict([('key_id', key_id), ('secret_key', secret_key), ('crypto_algorithm', crypto_algorithm), ])


