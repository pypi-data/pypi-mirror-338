# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import config
from . import state
from . import send_lifetime
from . import receive_lifetime
class key(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-keychain - based on the path /keychains/keychain/keys/key. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of configured keys for the keychain.
  """
  __slots__ = ('_path_helper', '_extmethods', '__key_id','__config','__state','__send_lifetime','__receive_lifetime',)

  _yang_name = 'key'
  _yang_namespace = 'http://openconfig.net/yang/oc-keychain'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__key_id = YANGDynClass(base=str, is_leaf=True, yang_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=False)
    self.__send_lifetime = YANGDynClass(base=send_lifetime.send_lifetime, is_container='container', yang_name="send-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)
    self.__receive_lifetime = YANGDynClass(base=receive_lifetime.receive_lifetime, is_container='container', yang_name="receive-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['keychains', 'keychain', 'keys', 'key']

  def _get_key_id(self):
    """
    Getter method for key_id, mapped from YANG variable /keychains/keychain/keys/key/key_id (leafref)

    YANG Description: Reference to key id.
    """
    return self.__key_id
      
  def _set_key_id(self, v, load=False):
    """
    Setter method for key_id, mapped from YANG variable /keychains/keychain/keys/key/key_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_key_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_key_id() directly.

    YANG Description: Reference to key id.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """key_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='leafref', is_config=True)""",
        })

    self.__key_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_key_id(self):
    self.__key_id = YANGDynClass(base=str, is_leaf=True, yang_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /keychains/keychain/keys/key/config (container)

    YANG Description: This container defines keychain key configuration.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /keychains/keychain/keys/key/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: This container defines keychain key configuration.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /keychains/keychain/keys/key/state (container)

    YANG Description: This container defines keychain key state.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /keychains/keychain/keys/key/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: This container defines keychain key state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=False)


  def _get_send_lifetime(self):
    """
    Getter method for send_lifetime, mapped from YANG variable /keychains/keychain/keys/key/send_lifetime (container)

    YANG Description: Specifies the lifetime of the key for sending authentication
information to the peer.
    """
    return self.__send_lifetime
      
  def _set_send_lifetime(self, v, load=False):
    """
    Setter method for send_lifetime, mapped from YANG variable /keychains/keychain/keys/key/send_lifetime (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_send_lifetime is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_send_lifetime() directly.

    YANG Description: Specifies the lifetime of the key for sending authentication
information to the peer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=send_lifetime.send_lifetime, is_container='container', yang_name="send-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """send_lifetime must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=send_lifetime.send_lifetime, is_container='container', yang_name="send-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)""",
        })

    self.__send_lifetime = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_send_lifetime(self):
    self.__send_lifetime = YANGDynClass(base=send_lifetime.send_lifetime, is_container='container', yang_name="send-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)


  def _get_receive_lifetime(self):
    """
    Getter method for receive_lifetime, mapped from YANG variable /keychains/keychain/keys/key/receive_lifetime (container)

    YANG Description: Specify the validity lifetime of the key in the receive direction.
Some platforms may only support symmetric send and receive lifetimes,
in which case the receive-lifetime is typically not specified.
    """
    return self.__receive_lifetime
      
  def _set_receive_lifetime(self, v, load=False):
    """
    Setter method for receive_lifetime, mapped from YANG variable /keychains/keychain/keys/key/receive_lifetime (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_receive_lifetime is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_receive_lifetime() directly.

    YANG Description: Specify the validity lifetime of the key in the receive direction.
Some platforms may only support symmetric send and receive lifetimes,
in which case the receive-lifetime is typically not specified.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=receive_lifetime.receive_lifetime, is_container='container', yang_name="receive-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """receive_lifetime must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=receive_lifetime.receive_lifetime, is_container='container', yang_name="receive-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)""",
        })

    self.__receive_lifetime = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_receive_lifetime(self):
    self.__receive_lifetime = YANGDynClass(base=receive_lifetime.receive_lifetime, is_container='container', yang_name="receive-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)

  key_id = __builtin__.property(_get_key_id, _set_key_id)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  send_lifetime = __builtin__.property(_get_send_lifetime, _set_send_lifetime)
  receive_lifetime = __builtin__.property(_get_receive_lifetime, _set_receive_lifetime)


  _pyangbind_elements = OrderedDict([('key_id', key_id), ('config', config), ('state', state), ('send_lifetime', send_lifetime), ('receive_lifetime', receive_lifetime), ])


from . import config
from . import state
from . import send_lifetime
from . import receive_lifetime
class key(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-keychain - based on the path /keychains/keychain/keys/key. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of configured keys for the keychain.
  """
  __slots__ = ('_path_helper', '_extmethods', '__key_id','__config','__state','__send_lifetime','__receive_lifetime',)

  _yang_name = 'key'
  _yang_namespace = 'http://openconfig.net/yang/oc-keychain'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__key_id = YANGDynClass(base=str, is_leaf=True, yang_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=False)
    self.__send_lifetime = YANGDynClass(base=send_lifetime.send_lifetime, is_container='container', yang_name="send-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)
    self.__receive_lifetime = YANGDynClass(base=receive_lifetime.receive_lifetime, is_container='container', yang_name="receive-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['keychains', 'keychain', 'keys', 'key']

  def _get_key_id(self):
    """
    Getter method for key_id, mapped from YANG variable /keychains/keychain/keys/key/key_id (leafref)

    YANG Description: Reference to key id.
    """
    return self.__key_id
      
  def _set_key_id(self, v, load=False):
    """
    Setter method for key_id, mapped from YANG variable /keychains/keychain/keys/key/key_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_key_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_key_id() directly.

    YANG Description: Reference to key id.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """key_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='leafref', is_config=True)""",
        })

    self.__key_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_key_id(self):
    self.__key_id = YANGDynClass(base=str, is_leaf=True, yang_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /keychains/keychain/keys/key/config (container)

    YANG Description: This container defines keychain key configuration.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /keychains/keychain/keys/key/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: This container defines keychain key configuration.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /keychains/keychain/keys/key/state (container)

    YANG Description: This container defines keychain key state.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /keychains/keychain/keys/key/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: This container defines keychain key state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=False)


  def _get_send_lifetime(self):
    """
    Getter method for send_lifetime, mapped from YANG variable /keychains/keychain/keys/key/send_lifetime (container)

    YANG Description: Specifies the lifetime of the key for sending authentication
information to the peer.
    """
    return self.__send_lifetime
      
  def _set_send_lifetime(self, v, load=False):
    """
    Setter method for send_lifetime, mapped from YANG variable /keychains/keychain/keys/key/send_lifetime (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_send_lifetime is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_send_lifetime() directly.

    YANG Description: Specifies the lifetime of the key for sending authentication
information to the peer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=send_lifetime.send_lifetime, is_container='container', yang_name="send-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """send_lifetime must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=send_lifetime.send_lifetime, is_container='container', yang_name="send-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)""",
        })

    self.__send_lifetime = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_send_lifetime(self):
    self.__send_lifetime = YANGDynClass(base=send_lifetime.send_lifetime, is_container='container', yang_name="send-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)


  def _get_receive_lifetime(self):
    """
    Getter method for receive_lifetime, mapped from YANG variable /keychains/keychain/keys/key/receive_lifetime (container)

    YANG Description: Specify the validity lifetime of the key in the receive direction.
Some platforms may only support symmetric send and receive lifetimes,
in which case the receive-lifetime is typically not specified.
    """
    return self.__receive_lifetime
      
  def _set_receive_lifetime(self, v, load=False):
    """
    Setter method for receive_lifetime, mapped from YANG variable /keychains/keychain/keys/key/receive_lifetime (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_receive_lifetime is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_receive_lifetime() directly.

    YANG Description: Specify the validity lifetime of the key in the receive direction.
Some platforms may only support symmetric send and receive lifetimes,
in which case the receive-lifetime is typically not specified.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=receive_lifetime.receive_lifetime, is_container='container', yang_name="receive-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """receive_lifetime must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=receive_lifetime.receive_lifetime, is_container='container', yang_name="receive-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)""",
        })

    self.__receive_lifetime = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_receive_lifetime(self):
    self.__receive_lifetime = YANGDynClass(base=receive_lifetime.receive_lifetime, is_container='container', yang_name="receive-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='container', is_config=True)

  key_id = __builtin__.property(_get_key_id, _set_key_id)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  send_lifetime = __builtin__.property(_get_send_lifetime, _set_send_lifetime)
  receive_lifetime = __builtin__.property(_get_receive_lifetime, _set_receive_lifetime)


  _pyangbind_elements = OrderedDict([('key_id', key_id), ('config', config), ('state', state), ('send_lifetime', send_lifetime), ('receive_lifetime', receive_lifetime), ])


