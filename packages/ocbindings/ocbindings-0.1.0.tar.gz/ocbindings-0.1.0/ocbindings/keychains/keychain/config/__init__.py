# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-keychain - based on the path /keychains/keychain/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines keychain configuration.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__tolerance',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/oc-keychain'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='string', is_config=True)
    self.__tolerance = YANGDynClass(base=[RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FOREVER': {}},),RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32),], is_leaf=True, yang_name="tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='union', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['keychains', 'keychain', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /keychains/keychain/config/name (string)

    YANG Description: Keychain name.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /keychains/keychain/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Keychain name.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='string', is_config=True)


  def _get_tolerance(self):
    """
    Getter method for tolerance, mapped from YANG variable /keychains/keychain/config/tolerance (union)

    YANG Description: Tolerance (overlap time) that a receive key should be accepted.  May be
expressed as range in seconds, or using the FOREVER value to indicate
that the key does not expire.  The default value should be 0, i.e., no
tolerance.
    """
    return self.__tolerance
      
  def _set_tolerance(self, v, load=False):
    """
    Setter method for tolerance, mapped from YANG variable /keychains/keychain/config/tolerance (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tolerance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tolerance() directly.

    YANG Description: Tolerance (overlap time) that a receive key should be accepted.  May be
expressed as range in seconds, or using the FOREVER value to indicate
that the key does not expire.  The default value should be 0, i.e., no
tolerance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FOREVER': {}},),RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32),], is_leaf=True, yang_name="tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tolerance must be of a type compatible with union""",
          'defined-type': "openconfig-keychain:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FOREVER': {}},),RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32),], is_leaf=True, yang_name="tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='union', is_config=True)""",
        })

    self.__tolerance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tolerance(self):
    self.__tolerance = YANGDynClass(base=[RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FOREVER': {}},),RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32),], is_leaf=True, yang_name="tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='union', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  tolerance = __builtin__.property(_get_tolerance, _set_tolerance)


  _pyangbind_elements = OrderedDict([('name', name), ('tolerance', tolerance), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-keychain - based on the path /keychains/keychain/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines keychain configuration.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__tolerance',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/oc-keychain'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='string', is_config=True)
    self.__tolerance = YANGDynClass(base=[RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FOREVER': {}},),RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32),], is_leaf=True, yang_name="tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='union', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['keychains', 'keychain', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /keychains/keychain/config/name (string)

    YANG Description: Keychain name.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /keychains/keychain/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Keychain name.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='string', is_config=True)


  def _get_tolerance(self):
    """
    Getter method for tolerance, mapped from YANG variable /keychains/keychain/config/tolerance (union)

    YANG Description: Tolerance (overlap time) that a receive key should be accepted.  May be
expressed as range in seconds, or using the FOREVER value to indicate
that the key does not expire.  The default value should be 0, i.e., no
tolerance.
    """
    return self.__tolerance
      
  def _set_tolerance(self, v, load=False):
    """
    Setter method for tolerance, mapped from YANG variable /keychains/keychain/config/tolerance (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tolerance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tolerance() directly.

    YANG Description: Tolerance (overlap time) that a receive key should be accepted.  May be
expressed as range in seconds, or using the FOREVER value to indicate
that the key does not expire.  The default value should be 0, i.e., no
tolerance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FOREVER': {}},),RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32),], is_leaf=True, yang_name="tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tolerance must be of a type compatible with union""",
          'defined-type': "openconfig-keychain:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FOREVER': {}},),RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32),], is_leaf=True, yang_name="tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='union', is_config=True)""",
        })

    self.__tolerance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tolerance(self):
    self.__tolerance = YANGDynClass(base=[RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FOREVER': {}},),RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32),], is_leaf=True, yang_name="tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-keychain', defining_module='openconfig-keychain', yang_type='union', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  tolerance = __builtin__.property(_get_tolerance, _set_tolerance)


  _pyangbind_elements = OrderedDict([('name', name), ('tolerance', tolerance), ])


