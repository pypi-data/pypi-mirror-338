# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-relay-agent - based on the path /relay-agent/dhcpv6/interfaces/interface/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Counters and statistics for relay agent operation.
  """
  __slots__ = ('_path_helper', '_extmethods', '__total_dropped','__invalid_opcode','__invalid_options','__dhcpv6_solicit_received','__dhcpv6_decline_received','__dhcpv6_request_received','__dhcpv6_release_received','__dhcpv6_confirm_received','__dhcpv6_rebind_received','__dhcpv6_info_request_received','__dhcpv6_relay_reply_received','__dhcpv6_adverstise_sent','__dhcpv6_reply_sent','__dhcpv6_reconfigure_sent','__dhcpv6_relay_forw_sent',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/relay-agent'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__total_dropped = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__invalid_opcode = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-opcode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__invalid_options = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-options", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_solicit_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-solicit-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_decline_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-decline-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_request_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_release_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-release-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_confirm_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-confirm-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_rebind_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-rebind-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_info_request_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-info-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_relay_reply_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-relay-reply-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_adverstise_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-adverstise-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_reply_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-reply-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_reconfigure_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-reconfigure-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_relay_forw_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-relay-forw-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['relay-agent', 'dhcpv6', 'interfaces', 'interface', 'state', 'counters']

  def _get_total_dropped(self):
    """
    Getter method for total_dropped, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/total_dropped (yang:counter64)

    YANG Description: Total number of DHCP packets dropped by the relay agent
    """
    return self.__total_dropped
      
  def _set_total_dropped(self, v, load=False):
    """
    Setter method for total_dropped, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/total_dropped (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_dropped is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_dropped() directly.

    YANG Description: Total number of DHCP packets dropped by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_dropped must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__total_dropped = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_dropped(self):
    self.__total_dropped = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_invalid_opcode(self):
    """
    Getter method for invalid_opcode, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/invalid_opcode (yang:counter64)

    YANG Description: Number of DHCP packets dropped due to an invalid opcode
    """
    return self.__invalid_opcode
      
  def _set_invalid_opcode(self, v, load=False):
    """
    Setter method for invalid_opcode, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/invalid_opcode (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_opcode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_opcode() directly.

    YANG Description: Number of DHCP packets dropped due to an invalid opcode
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-opcode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_opcode must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-opcode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__invalid_opcode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_opcode(self):
    self.__invalid_opcode = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-opcode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_invalid_options(self):
    """
    Getter method for invalid_options, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/invalid_options (yang:counter64)

    YANG Description: Number of DHCP packets dropped due to an invalid option
    """
    return self.__invalid_options
      
  def _set_invalid_options(self, v, load=False):
    """
    Setter method for invalid_options, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/invalid_options (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_options is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_options() directly.

    YANG Description: Number of DHCP packets dropped due to an invalid option
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-options", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_options must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-options", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__invalid_options = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_options(self):
    self.__invalid_options = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-options", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_solicit_received(self):
    """
    Getter method for dhcpv6_solicit_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_solicit_received (yang:counter64)

    YANG Description: Number of DHCPv6 SOLICIT messages received from clients
by the relay agent
    """
    return self.__dhcpv6_solicit_received
      
  def _set_dhcpv6_solicit_received(self, v, load=False):
    """
    Setter method for dhcpv6_solicit_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_solicit_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_solicit_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_solicit_received() directly.

    YANG Description: Number of DHCPv6 SOLICIT messages received from clients
by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-solicit-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_solicit_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-solicit-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_solicit_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_solicit_received(self):
    self.__dhcpv6_solicit_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-solicit-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_decline_received(self):
    """
    Getter method for dhcpv6_decline_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_decline_received (yang:counter64)

    YANG Description: Number of DHCPv6 DECLINE messages received from
clients by the relay agent
    """
    return self.__dhcpv6_decline_received
      
  def _set_dhcpv6_decline_received(self, v, load=False):
    """
    Setter method for dhcpv6_decline_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_decline_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_decline_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_decline_received() directly.

    YANG Description: Number of DHCPv6 DECLINE messages received from
clients by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-decline-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_decline_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-decline-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_decline_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_decline_received(self):
    self.__dhcpv6_decline_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-decline-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_request_received(self):
    """
    Getter method for dhcpv6_request_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_request_received (yang:counter64)

    YANG Description: Number of DHCPv6 request messages received from clients
by the relay agent
    """
    return self.__dhcpv6_request_received
      
  def _set_dhcpv6_request_received(self, v, load=False):
    """
    Setter method for dhcpv6_request_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_request_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_request_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_request_received() directly.

    YANG Description: Number of DHCPv6 request messages received from clients
by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_request_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_request_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_request_received(self):
    self.__dhcpv6_request_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_release_received(self):
    """
    Getter method for dhcpv6_release_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_release_received (yang:counter64)

    YANG Description: Number of DHCPv6 release messages received from clients
by the relay agent
    """
    return self.__dhcpv6_release_received
      
  def _set_dhcpv6_release_received(self, v, load=False):
    """
    Setter method for dhcpv6_release_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_release_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_release_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_release_received() directly.

    YANG Description: Number of DHCPv6 release messages received from clients
by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-release-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_release_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-release-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_release_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_release_received(self):
    self.__dhcpv6_release_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-release-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_confirm_received(self):
    """
    Getter method for dhcpv6_confirm_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_confirm_received (yang:counter64)

    YANG Description: Number of DHCPv6 confirm messages received from clients
by the relay agent
    """
    return self.__dhcpv6_confirm_received
      
  def _set_dhcpv6_confirm_received(self, v, load=False):
    """
    Setter method for dhcpv6_confirm_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_confirm_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_confirm_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_confirm_received() directly.

    YANG Description: Number of DHCPv6 confirm messages received from clients
by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-confirm-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_confirm_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-confirm-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_confirm_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_confirm_received(self):
    self.__dhcpv6_confirm_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-confirm-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_rebind_received(self):
    """
    Getter method for dhcpv6_rebind_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_rebind_received (yang:counter64)

    YANG Description: Number of DHCPv6 rebind messages received from clients
by the relay agent
    """
    return self.__dhcpv6_rebind_received
      
  def _set_dhcpv6_rebind_received(self, v, load=False):
    """
    Setter method for dhcpv6_rebind_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_rebind_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_rebind_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_rebind_received() directly.

    YANG Description: Number of DHCPv6 rebind messages received from clients
by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-rebind-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_rebind_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-rebind-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_rebind_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_rebind_received(self):
    self.__dhcpv6_rebind_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-rebind-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_info_request_received(self):
    """
    Getter method for dhcpv6_info_request_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_info_request_received (yang:counter64)

    YANG Description: Number of DHCPv6 information requests messages received from
clients by the relay agent
    """
    return self.__dhcpv6_info_request_received
      
  def _set_dhcpv6_info_request_received(self, v, load=False):
    """
    Setter method for dhcpv6_info_request_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_info_request_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_info_request_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_info_request_received() directly.

    YANG Description: Number of DHCPv6 information requests messages received from
clients by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-info-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_info_request_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-info-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_info_request_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_info_request_received(self):
    self.__dhcpv6_info_request_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-info-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_relay_reply_received(self):
    """
    Getter method for dhcpv6_relay_reply_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_relay_reply_received (yang:counter64)

    YANG Description: Number of DHCPv6 relay reply messages received from servers
by the relay agent
    """
    return self.__dhcpv6_relay_reply_received
      
  def _set_dhcpv6_relay_reply_received(self, v, load=False):
    """
    Setter method for dhcpv6_relay_reply_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_relay_reply_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_relay_reply_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_relay_reply_received() directly.

    YANG Description: Number of DHCPv6 relay reply messages received from servers
by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-relay-reply-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_relay_reply_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-relay-reply-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_relay_reply_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_relay_reply_received(self):
    self.__dhcpv6_relay_reply_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-relay-reply-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_adverstise_sent(self):
    """
    Getter method for dhcpv6_adverstise_sent, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_adverstise_sent (yang:counter64)

    YANG Description: Number of DHCPv6 adverstise messages sent to clients by
the relay agent
    """
    return self.__dhcpv6_adverstise_sent
      
  def _set_dhcpv6_adverstise_sent(self, v, load=False):
    """
    Setter method for dhcpv6_adverstise_sent, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_adverstise_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_adverstise_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_adverstise_sent() directly.

    YANG Description: Number of DHCPv6 adverstise messages sent to clients by
the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-adverstise-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_adverstise_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-adverstise-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_adverstise_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_adverstise_sent(self):
    self.__dhcpv6_adverstise_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-adverstise-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_reply_sent(self):
    """
    Getter method for dhcpv6_reply_sent, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_reply_sent (yang:counter64)

    YANG Description: Number of DHCPv6 reply messages sent to clients by
the relay agent
    """
    return self.__dhcpv6_reply_sent
      
  def _set_dhcpv6_reply_sent(self, v, load=False):
    """
    Setter method for dhcpv6_reply_sent, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_reply_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_reply_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_reply_sent() directly.

    YANG Description: Number of DHCPv6 reply messages sent to clients by
the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-reply-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_reply_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-reply-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_reply_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_reply_sent(self):
    self.__dhcpv6_reply_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-reply-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_reconfigure_sent(self):
    """
    Getter method for dhcpv6_reconfigure_sent, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_reconfigure_sent (yang:counter64)

    YANG Description: Number of DHCPv6 reconfigure messages sent to clients by
the relay agent
    """
    return self.__dhcpv6_reconfigure_sent
      
  def _set_dhcpv6_reconfigure_sent(self, v, load=False):
    """
    Setter method for dhcpv6_reconfigure_sent, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_reconfigure_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_reconfigure_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_reconfigure_sent() directly.

    YANG Description: Number of DHCPv6 reconfigure messages sent to clients by
the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-reconfigure-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_reconfigure_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-reconfigure-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_reconfigure_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_reconfigure_sent(self):
    self.__dhcpv6_reconfigure_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-reconfigure-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_relay_forw_sent(self):
    """
    Getter method for dhcpv6_relay_forw_sent, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_relay_forw_sent (yang:counter64)

    YANG Description: Number of DHCPv6 relay-forward messages sent to servers
by the relay agent
    """
    return self.__dhcpv6_relay_forw_sent
      
  def _set_dhcpv6_relay_forw_sent(self, v, load=False):
    """
    Setter method for dhcpv6_relay_forw_sent, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_relay_forw_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_relay_forw_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_relay_forw_sent() directly.

    YANG Description: Number of DHCPv6 relay-forward messages sent to servers
by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-relay-forw-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_relay_forw_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-relay-forw-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_relay_forw_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_relay_forw_sent(self):
    self.__dhcpv6_relay_forw_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-relay-forw-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)

  total_dropped = __builtin__.property(_get_total_dropped)
  invalid_opcode = __builtin__.property(_get_invalid_opcode)
  invalid_options = __builtin__.property(_get_invalid_options)
  dhcpv6_solicit_received = __builtin__.property(_get_dhcpv6_solicit_received)
  dhcpv6_decline_received = __builtin__.property(_get_dhcpv6_decline_received)
  dhcpv6_request_received = __builtin__.property(_get_dhcpv6_request_received)
  dhcpv6_release_received = __builtin__.property(_get_dhcpv6_release_received)
  dhcpv6_confirm_received = __builtin__.property(_get_dhcpv6_confirm_received)
  dhcpv6_rebind_received = __builtin__.property(_get_dhcpv6_rebind_received)
  dhcpv6_info_request_received = __builtin__.property(_get_dhcpv6_info_request_received)
  dhcpv6_relay_reply_received = __builtin__.property(_get_dhcpv6_relay_reply_received)
  dhcpv6_adverstise_sent = __builtin__.property(_get_dhcpv6_adverstise_sent)
  dhcpv6_reply_sent = __builtin__.property(_get_dhcpv6_reply_sent)
  dhcpv6_reconfigure_sent = __builtin__.property(_get_dhcpv6_reconfigure_sent)
  dhcpv6_relay_forw_sent = __builtin__.property(_get_dhcpv6_relay_forw_sent)


  _pyangbind_elements = OrderedDict([('total_dropped', total_dropped), ('invalid_opcode', invalid_opcode), ('invalid_options', invalid_options), ('dhcpv6_solicit_received', dhcpv6_solicit_received), ('dhcpv6_decline_received', dhcpv6_decline_received), ('dhcpv6_request_received', dhcpv6_request_received), ('dhcpv6_release_received', dhcpv6_release_received), ('dhcpv6_confirm_received', dhcpv6_confirm_received), ('dhcpv6_rebind_received', dhcpv6_rebind_received), ('dhcpv6_info_request_received', dhcpv6_info_request_received), ('dhcpv6_relay_reply_received', dhcpv6_relay_reply_received), ('dhcpv6_adverstise_sent', dhcpv6_adverstise_sent), ('dhcpv6_reply_sent', dhcpv6_reply_sent), ('dhcpv6_reconfigure_sent', dhcpv6_reconfigure_sent), ('dhcpv6_relay_forw_sent', dhcpv6_relay_forw_sent), ])


class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-relay-agent - based on the path /relay-agent/dhcpv6/interfaces/interface/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Counters and statistics for relay agent operation.
  """
  __slots__ = ('_path_helper', '_extmethods', '__total_dropped','__invalid_opcode','__invalid_options','__dhcpv6_solicit_received','__dhcpv6_decline_received','__dhcpv6_request_received','__dhcpv6_release_received','__dhcpv6_confirm_received','__dhcpv6_rebind_received','__dhcpv6_info_request_received','__dhcpv6_relay_reply_received','__dhcpv6_adverstise_sent','__dhcpv6_reply_sent','__dhcpv6_reconfigure_sent','__dhcpv6_relay_forw_sent',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/relay-agent'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__total_dropped = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__invalid_opcode = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-opcode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__invalid_options = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-options", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_solicit_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-solicit-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_decline_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-decline-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_request_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_release_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-release-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_confirm_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-confirm-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_rebind_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-rebind-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_info_request_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-info-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_relay_reply_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-relay-reply-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_adverstise_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-adverstise-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_reply_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-reply-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_reconfigure_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-reconfigure-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcpv6_relay_forw_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-relay-forw-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['relay-agent', 'dhcpv6', 'interfaces', 'interface', 'state', 'counters']

  def _get_total_dropped(self):
    """
    Getter method for total_dropped, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/total_dropped (yang:counter64)

    YANG Description: Total number of DHCP packets dropped by the relay agent
    """
    return self.__total_dropped
      
  def _set_total_dropped(self, v, load=False):
    """
    Setter method for total_dropped, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/total_dropped (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_dropped is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_dropped() directly.

    YANG Description: Total number of DHCP packets dropped by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_dropped must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__total_dropped = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_dropped(self):
    self.__total_dropped = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_invalid_opcode(self):
    """
    Getter method for invalid_opcode, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/invalid_opcode (yang:counter64)

    YANG Description: Number of DHCP packets dropped due to an invalid opcode
    """
    return self.__invalid_opcode
      
  def _set_invalid_opcode(self, v, load=False):
    """
    Setter method for invalid_opcode, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/invalid_opcode (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_opcode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_opcode() directly.

    YANG Description: Number of DHCP packets dropped due to an invalid opcode
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-opcode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_opcode must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-opcode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__invalid_opcode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_opcode(self):
    self.__invalid_opcode = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-opcode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_invalid_options(self):
    """
    Getter method for invalid_options, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/invalid_options (yang:counter64)

    YANG Description: Number of DHCP packets dropped due to an invalid option
    """
    return self.__invalid_options
      
  def _set_invalid_options(self, v, load=False):
    """
    Setter method for invalid_options, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/invalid_options (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_options is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_options() directly.

    YANG Description: Number of DHCP packets dropped due to an invalid option
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-options", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_options must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-options", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__invalid_options = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_options(self):
    self.__invalid_options = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-options", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_solicit_received(self):
    """
    Getter method for dhcpv6_solicit_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_solicit_received (yang:counter64)

    YANG Description: Number of DHCPv6 SOLICIT messages received from clients
by the relay agent
    """
    return self.__dhcpv6_solicit_received
      
  def _set_dhcpv6_solicit_received(self, v, load=False):
    """
    Setter method for dhcpv6_solicit_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_solicit_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_solicit_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_solicit_received() directly.

    YANG Description: Number of DHCPv6 SOLICIT messages received from clients
by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-solicit-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_solicit_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-solicit-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_solicit_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_solicit_received(self):
    self.__dhcpv6_solicit_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-solicit-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_decline_received(self):
    """
    Getter method for dhcpv6_decline_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_decline_received (yang:counter64)

    YANG Description: Number of DHCPv6 DECLINE messages received from
clients by the relay agent
    """
    return self.__dhcpv6_decline_received
      
  def _set_dhcpv6_decline_received(self, v, load=False):
    """
    Setter method for dhcpv6_decline_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_decline_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_decline_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_decline_received() directly.

    YANG Description: Number of DHCPv6 DECLINE messages received from
clients by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-decline-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_decline_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-decline-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_decline_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_decline_received(self):
    self.__dhcpv6_decline_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-decline-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_request_received(self):
    """
    Getter method for dhcpv6_request_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_request_received (yang:counter64)

    YANG Description: Number of DHCPv6 request messages received from clients
by the relay agent
    """
    return self.__dhcpv6_request_received
      
  def _set_dhcpv6_request_received(self, v, load=False):
    """
    Setter method for dhcpv6_request_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_request_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_request_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_request_received() directly.

    YANG Description: Number of DHCPv6 request messages received from clients
by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_request_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_request_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_request_received(self):
    self.__dhcpv6_request_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_release_received(self):
    """
    Getter method for dhcpv6_release_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_release_received (yang:counter64)

    YANG Description: Number of DHCPv6 release messages received from clients
by the relay agent
    """
    return self.__dhcpv6_release_received
      
  def _set_dhcpv6_release_received(self, v, load=False):
    """
    Setter method for dhcpv6_release_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_release_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_release_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_release_received() directly.

    YANG Description: Number of DHCPv6 release messages received from clients
by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-release-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_release_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-release-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_release_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_release_received(self):
    self.__dhcpv6_release_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-release-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_confirm_received(self):
    """
    Getter method for dhcpv6_confirm_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_confirm_received (yang:counter64)

    YANG Description: Number of DHCPv6 confirm messages received from clients
by the relay agent
    """
    return self.__dhcpv6_confirm_received
      
  def _set_dhcpv6_confirm_received(self, v, load=False):
    """
    Setter method for dhcpv6_confirm_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_confirm_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_confirm_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_confirm_received() directly.

    YANG Description: Number of DHCPv6 confirm messages received from clients
by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-confirm-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_confirm_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-confirm-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_confirm_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_confirm_received(self):
    self.__dhcpv6_confirm_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-confirm-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_rebind_received(self):
    """
    Getter method for dhcpv6_rebind_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_rebind_received (yang:counter64)

    YANG Description: Number of DHCPv6 rebind messages received from clients
by the relay agent
    """
    return self.__dhcpv6_rebind_received
      
  def _set_dhcpv6_rebind_received(self, v, load=False):
    """
    Setter method for dhcpv6_rebind_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_rebind_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_rebind_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_rebind_received() directly.

    YANG Description: Number of DHCPv6 rebind messages received from clients
by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-rebind-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_rebind_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-rebind-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_rebind_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_rebind_received(self):
    self.__dhcpv6_rebind_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-rebind-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_info_request_received(self):
    """
    Getter method for dhcpv6_info_request_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_info_request_received (yang:counter64)

    YANG Description: Number of DHCPv6 information requests messages received from
clients by the relay agent
    """
    return self.__dhcpv6_info_request_received
      
  def _set_dhcpv6_info_request_received(self, v, load=False):
    """
    Setter method for dhcpv6_info_request_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_info_request_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_info_request_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_info_request_received() directly.

    YANG Description: Number of DHCPv6 information requests messages received from
clients by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-info-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_info_request_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-info-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_info_request_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_info_request_received(self):
    self.__dhcpv6_info_request_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-info-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_relay_reply_received(self):
    """
    Getter method for dhcpv6_relay_reply_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_relay_reply_received (yang:counter64)

    YANG Description: Number of DHCPv6 relay reply messages received from servers
by the relay agent
    """
    return self.__dhcpv6_relay_reply_received
      
  def _set_dhcpv6_relay_reply_received(self, v, load=False):
    """
    Setter method for dhcpv6_relay_reply_received, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_relay_reply_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_relay_reply_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_relay_reply_received() directly.

    YANG Description: Number of DHCPv6 relay reply messages received from servers
by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-relay-reply-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_relay_reply_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-relay-reply-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_relay_reply_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_relay_reply_received(self):
    self.__dhcpv6_relay_reply_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-relay-reply-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_adverstise_sent(self):
    """
    Getter method for dhcpv6_adverstise_sent, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_adverstise_sent (yang:counter64)

    YANG Description: Number of DHCPv6 adverstise messages sent to clients by
the relay agent
    """
    return self.__dhcpv6_adverstise_sent
      
  def _set_dhcpv6_adverstise_sent(self, v, load=False):
    """
    Setter method for dhcpv6_adverstise_sent, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_adverstise_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_adverstise_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_adverstise_sent() directly.

    YANG Description: Number of DHCPv6 adverstise messages sent to clients by
the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-adverstise-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_adverstise_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-adverstise-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_adverstise_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_adverstise_sent(self):
    self.__dhcpv6_adverstise_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-adverstise-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_reply_sent(self):
    """
    Getter method for dhcpv6_reply_sent, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_reply_sent (yang:counter64)

    YANG Description: Number of DHCPv6 reply messages sent to clients by
the relay agent
    """
    return self.__dhcpv6_reply_sent
      
  def _set_dhcpv6_reply_sent(self, v, load=False):
    """
    Setter method for dhcpv6_reply_sent, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_reply_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_reply_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_reply_sent() directly.

    YANG Description: Number of DHCPv6 reply messages sent to clients by
the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-reply-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_reply_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-reply-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_reply_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_reply_sent(self):
    self.__dhcpv6_reply_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-reply-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_reconfigure_sent(self):
    """
    Getter method for dhcpv6_reconfigure_sent, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_reconfigure_sent (yang:counter64)

    YANG Description: Number of DHCPv6 reconfigure messages sent to clients by
the relay agent
    """
    return self.__dhcpv6_reconfigure_sent
      
  def _set_dhcpv6_reconfigure_sent(self, v, load=False):
    """
    Setter method for dhcpv6_reconfigure_sent, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_reconfigure_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_reconfigure_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_reconfigure_sent() directly.

    YANG Description: Number of DHCPv6 reconfigure messages sent to clients by
the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-reconfigure-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_reconfigure_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-reconfigure-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_reconfigure_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_reconfigure_sent(self):
    self.__dhcpv6_reconfigure_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-reconfigure-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcpv6_relay_forw_sent(self):
    """
    Getter method for dhcpv6_relay_forw_sent, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_relay_forw_sent (yang:counter64)

    YANG Description: Number of DHCPv6 relay-forward messages sent to servers
by the relay agent
    """
    return self.__dhcpv6_relay_forw_sent
      
  def _set_dhcpv6_relay_forw_sent(self, v, load=False):
    """
    Setter method for dhcpv6_relay_forw_sent, mapped from YANG variable /relay_agent/dhcpv6/interfaces/interface/state/counters/dhcpv6_relay_forw_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6_relay_forw_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6_relay_forw_sent() directly.

    YANG Description: Number of DHCPv6 relay-forward messages sent to servers
by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-relay-forw-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6_relay_forw_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-relay-forw-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcpv6_relay_forw_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6_relay_forw_sent(self):
    self.__dhcpv6_relay_forw_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcpv6-relay-forw-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)

  total_dropped = __builtin__.property(_get_total_dropped)
  invalid_opcode = __builtin__.property(_get_invalid_opcode)
  invalid_options = __builtin__.property(_get_invalid_options)
  dhcpv6_solicit_received = __builtin__.property(_get_dhcpv6_solicit_received)
  dhcpv6_decline_received = __builtin__.property(_get_dhcpv6_decline_received)
  dhcpv6_request_received = __builtin__.property(_get_dhcpv6_request_received)
  dhcpv6_release_received = __builtin__.property(_get_dhcpv6_release_received)
  dhcpv6_confirm_received = __builtin__.property(_get_dhcpv6_confirm_received)
  dhcpv6_rebind_received = __builtin__.property(_get_dhcpv6_rebind_received)
  dhcpv6_info_request_received = __builtin__.property(_get_dhcpv6_info_request_received)
  dhcpv6_relay_reply_received = __builtin__.property(_get_dhcpv6_relay_reply_received)
  dhcpv6_adverstise_sent = __builtin__.property(_get_dhcpv6_adverstise_sent)
  dhcpv6_reply_sent = __builtin__.property(_get_dhcpv6_reply_sent)
  dhcpv6_reconfigure_sent = __builtin__.property(_get_dhcpv6_reconfigure_sent)
  dhcpv6_relay_forw_sent = __builtin__.property(_get_dhcpv6_relay_forw_sent)


  _pyangbind_elements = OrderedDict([('total_dropped', total_dropped), ('invalid_opcode', invalid_opcode), ('invalid_options', invalid_options), ('dhcpv6_solicit_received', dhcpv6_solicit_received), ('dhcpv6_decline_received', dhcpv6_decline_received), ('dhcpv6_request_received', dhcpv6_request_received), ('dhcpv6_release_received', dhcpv6_release_received), ('dhcpv6_confirm_received', dhcpv6_confirm_received), ('dhcpv6_rebind_received', dhcpv6_rebind_received), ('dhcpv6_info_request_received', dhcpv6_info_request_received), ('dhcpv6_relay_reply_received', dhcpv6_relay_reply_received), ('dhcpv6_adverstise_sent', dhcpv6_adverstise_sent), ('dhcpv6_reply_sent', dhcpv6_reply_sent), ('dhcpv6_reconfigure_sent', dhcpv6_reconfigure_sent), ('dhcpv6_relay_forw_sent', dhcpv6_relay_forw_sent), ])


