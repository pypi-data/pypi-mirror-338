# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import dhcp
from . import dhcpv6
class relay_agent(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-relay-agent - based on the path /relay-agent. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top level container for relay-agent configuration and
operational state data
  """
  __slots__ = ('_path_helper', '_extmethods', '__dhcp','__dhcpv6',)

  _yang_name = 'relay-agent'
  _yang_namespace = 'http://openconfig.net/yang/relay-agent'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__dhcp = YANGDynClass(base=dhcp.dhcp, is_container='container', yang_name="dhcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='container', is_config=True)
    self.__dhcpv6 = YANGDynClass(base=dhcpv6.dhcpv6, is_container='container', yang_name="dhcpv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['relay-agent']

  def _get_dhcp(self):
    """
    Getter method for dhcp, mapped from YANG variable /relay_agent/dhcp (container)

    YANG Description: Top-level container for global relay agent data
    """
    return self.__dhcp
      
  def _set_dhcp(self, v, load=False):
    """
    Setter method for dhcp, mapped from YANG variable /relay_agent/dhcp (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp() directly.

    YANG Description: Top-level container for global relay agent data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=dhcp.dhcp, is_container='container', yang_name="dhcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=dhcp.dhcp, is_container='container', yang_name="dhcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='container', is_config=True)""",
        })

    self.__dhcp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp(self):
    self.__dhcp = YANGDynClass(base=dhcp.dhcp, is_container='container', yang_name="dhcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='container', is_config=True)


  def _get_dhcpv6(self):
    """
    Getter method for dhcpv6, mapped from YANG variable /relay_agent/dhcpv6 (container)

    YANG Description: Top-level container for global relay agent data
    """
    return self.__dhcpv6
      
  def _set_dhcpv6(self, v, load=False):
    """
    Setter method for dhcpv6, mapped from YANG variable /relay_agent/dhcpv6 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6() directly.

    YANG Description: Top-level container for global relay agent data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=dhcpv6.dhcpv6, is_container='container', yang_name="dhcpv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=dhcpv6.dhcpv6, is_container='container', yang_name="dhcpv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='container', is_config=True)""",
        })

    self.__dhcpv6 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6(self):
    self.__dhcpv6 = YANGDynClass(base=dhcpv6.dhcpv6, is_container='container', yang_name="dhcpv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='container', is_config=True)

  dhcp = __builtin__.property(_get_dhcp, _set_dhcp)
  dhcpv6 = __builtin__.property(_get_dhcpv6, _set_dhcpv6)


  _pyangbind_elements = OrderedDict([('dhcp', dhcp), ('dhcpv6', dhcpv6), ])


from . import dhcp
from . import dhcpv6
class relay_agent(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-relay-agent - based on the path /relay-agent. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top level container for relay-agent configuration and
operational state data
  """
  __slots__ = ('_path_helper', '_extmethods', '__dhcp','__dhcpv6',)

  _yang_name = 'relay-agent'
  _yang_namespace = 'http://openconfig.net/yang/relay-agent'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__dhcp = YANGDynClass(base=dhcp.dhcp, is_container='container', yang_name="dhcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='container', is_config=True)
    self.__dhcpv6 = YANGDynClass(base=dhcpv6.dhcpv6, is_container='container', yang_name="dhcpv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['relay-agent']

  def _get_dhcp(self):
    """
    Getter method for dhcp, mapped from YANG variable /relay_agent/dhcp (container)

    YANG Description: Top-level container for global relay agent data
    """
    return self.__dhcp
      
  def _set_dhcp(self, v, load=False):
    """
    Setter method for dhcp, mapped from YANG variable /relay_agent/dhcp (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp() directly.

    YANG Description: Top-level container for global relay agent data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=dhcp.dhcp, is_container='container', yang_name="dhcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=dhcp.dhcp, is_container='container', yang_name="dhcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='container', is_config=True)""",
        })

    self.__dhcp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp(self):
    self.__dhcp = YANGDynClass(base=dhcp.dhcp, is_container='container', yang_name="dhcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='container', is_config=True)


  def _get_dhcpv6(self):
    """
    Getter method for dhcpv6, mapped from YANG variable /relay_agent/dhcpv6 (container)

    YANG Description: Top-level container for global relay agent data
    """
    return self.__dhcpv6
      
  def _set_dhcpv6(self, v, load=False):
    """
    Setter method for dhcpv6, mapped from YANG variable /relay_agent/dhcpv6 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpv6 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpv6() directly.

    YANG Description: Top-level container for global relay agent data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=dhcpv6.dhcpv6, is_container='container', yang_name="dhcpv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpv6 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=dhcpv6.dhcpv6, is_container='container', yang_name="dhcpv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='container', is_config=True)""",
        })

    self.__dhcpv6 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpv6(self):
    self.__dhcpv6 = YANGDynClass(base=dhcpv6.dhcpv6, is_container='container', yang_name="dhcpv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='container', is_config=True)

  dhcp = __builtin__.property(_get_dhcp, _set_dhcp)
  dhcpv6 = __builtin__.property(_get_dhcpv6, _set_dhcpv6)


  _pyangbind_elements = OrderedDict([('dhcp', dhcp), ('dhcpv6', dhcpv6), ])


