# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import domains
from . import state
from . import performance_measurement_profiles_global
class cfm(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Container for CFM configuration, state and perfomance measurement policies
  """
  __slots__ = ('_path_helper', '_extmethods', '__domains','__state','__performance_measurement_profiles_global',)

  _yang_name = 'cfm'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__domains = YANGDynClass(base=domains.domains, is_container='container', yang_name="domains", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)
    self.__performance_measurement_profiles_global = YANGDynClass(base=performance_measurement_profiles_global.performance_measurement_profiles_global, is_container='container', yang_name="performance-measurement-profiles-global", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm']

  def _get_domains(self):
    """
    Getter method for domains, mapped from YANG variable /oam/cfm/domains (container)

    YANG Description: A Container for CFM maintenance domain state and Configuration
on the local system
    """
    return self.__domains
      
  def _set_domains(self, v, load=False):
    """
    Setter method for domains, mapped from YANG variable /oam/cfm/domains (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_domains is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_domains() directly.

    YANG Description: A Container for CFM maintenance domain state and Configuration
on the local system
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=domains.domains, is_container='container', yang_name="domains", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """domains must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=domains.domains, is_container='container', yang_name="domains", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)""",
        })

    self.__domains = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_domains(self):
    self.__domains = YANGDynClass(base=domains.domains, is_container='container', yang_name="domains", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /oam/cfm/state (container)

    YANG Description: Operational data for CFM.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /oam/cfm/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational data for CFM.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)


  def _get_performance_measurement_profiles_global(self):
    """
    Getter method for performance_measurement_profiles_global, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global (container)

    YANG Description: This container includes configuration and state objects
for the Frame Loss Measurement and Delay measurement
functions as defined in [Y.1731] and [MEF SOAM PM IA].
    """
    return self.__performance_measurement_profiles_global
      
  def _set_performance_measurement_profiles_global(self, v, load=False):
    """
    Setter method for performance_measurement_profiles_global, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_performance_measurement_profiles_global is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_performance_measurement_profiles_global() directly.

    YANG Description: This container includes configuration and state objects
for the Frame Loss Measurement and Delay measurement
functions as defined in [Y.1731] and [MEF SOAM PM IA].
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=performance_measurement_profiles_global.performance_measurement_profiles_global, is_container='container', yang_name="performance-measurement-profiles-global", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """performance_measurement_profiles_global must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=performance_measurement_profiles_global.performance_measurement_profiles_global, is_container='container', yang_name="performance-measurement-profiles-global", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)""",
        })

    self.__performance_measurement_profiles_global = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_performance_measurement_profiles_global(self):
    self.__performance_measurement_profiles_global = YANGDynClass(base=performance_measurement_profiles_global.performance_measurement_profiles_global, is_container='container', yang_name="performance-measurement-profiles-global", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)

  domains = __builtin__.property(_get_domains, _set_domains)
  state = __builtin__.property(_get_state)
  performance_measurement_profiles_global = __builtin__.property(_get_performance_measurement_profiles_global, _set_performance_measurement_profiles_global)


  _pyangbind_elements = OrderedDict([('domains', domains), ('state', state), ('performance_measurement_profiles_global', performance_measurement_profiles_global), ])


from . import domains
from . import state
from . import performance_measurement_profiles_global
class cfm(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Container for CFM configuration, state and perfomance measurement policies
  """
  __slots__ = ('_path_helper', '_extmethods', '__domains','__state','__performance_measurement_profiles_global',)

  _yang_name = 'cfm'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__domains = YANGDynClass(base=domains.domains, is_container='container', yang_name="domains", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)
    self.__performance_measurement_profiles_global = YANGDynClass(base=performance_measurement_profiles_global.performance_measurement_profiles_global, is_container='container', yang_name="performance-measurement-profiles-global", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm']

  def _get_domains(self):
    """
    Getter method for domains, mapped from YANG variable /oam/cfm/domains (container)

    YANG Description: A Container for CFM maintenance domain state and Configuration
on the local system
    """
    return self.__domains
      
  def _set_domains(self, v, load=False):
    """
    Setter method for domains, mapped from YANG variable /oam/cfm/domains (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_domains is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_domains() directly.

    YANG Description: A Container for CFM maintenance domain state and Configuration
on the local system
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=domains.domains, is_container='container', yang_name="domains", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """domains must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=domains.domains, is_container='container', yang_name="domains", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)""",
        })

    self.__domains = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_domains(self):
    self.__domains = YANGDynClass(base=domains.domains, is_container='container', yang_name="domains", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /oam/cfm/state (container)

    YANG Description: Operational data for CFM.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /oam/cfm/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational data for CFM.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)


  def _get_performance_measurement_profiles_global(self):
    """
    Getter method for performance_measurement_profiles_global, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global (container)

    YANG Description: This container includes configuration and state objects
for the Frame Loss Measurement and Delay measurement
functions as defined in [Y.1731] and [MEF SOAM PM IA].
    """
    return self.__performance_measurement_profiles_global
      
  def _set_performance_measurement_profiles_global(self, v, load=False):
    """
    Setter method for performance_measurement_profiles_global, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_performance_measurement_profiles_global is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_performance_measurement_profiles_global() directly.

    YANG Description: This container includes configuration and state objects
for the Frame Loss Measurement and Delay measurement
functions as defined in [Y.1731] and [MEF SOAM PM IA].
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=performance_measurement_profiles_global.performance_measurement_profiles_global, is_container='container', yang_name="performance-measurement-profiles-global", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """performance_measurement_profiles_global must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=performance_measurement_profiles_global.performance_measurement_profiles_global, is_container='container', yang_name="performance-measurement-profiles-global", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)""",
        })

    self.__performance_measurement_profiles_global = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_performance_measurement_profiles_global(self):
    self.__performance_measurement_profiles_global = YANGDynClass(base=performance_measurement_profiles_global.performance_measurement_profiles_global, is_container='container', yang_name="performance-measurement-profiles-global", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)

  domains = __builtin__.property(_get_domains, _set_domains)
  state = __builtin__.property(_get_state)
  performance_measurement_profiles_global = __builtin__.property(_get_performance_measurement_profiles_global, _set_performance_measurement_profiles_global)


  _pyangbind_elements = OrderedDict([('domains', domains), ('state', state), ('performance_measurement_profiles_global', performance_measurement_profiles_global), ])


