# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import config
from . import state
from . import pm_profiles
from . import rdi
from . import link_loss_forwarding
from . import remote_meps
class mep_endpoint(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: collection of full mesh MEPs under the maintenance association.
  """
  __slots__ = ('_path_helper', '_extmethods', '__local_mep_id','__config','__state','__pm_profiles','__rdi','__link_loss_forwarding','__remote_meps',)

  _yang_name = 'mep-endpoint'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__local_mep_id = YANGDynClass(base=str, is_leaf=True, yang_name="local-mep-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)
    self.__pm_profiles = YANGDynClass(base=pm_profiles.pm_profiles, is_container='container', yang_name="pm-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    self.__rdi = YANGDynClass(base=rdi.rdi, is_container='container', yang_name="rdi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    self.__link_loss_forwarding = YANGDynClass(base=link_loss_forwarding.link_loss_forwarding, is_container='container', yang_name="link-loss-forwarding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    self.__remote_meps = YANGDynClass(base=remote_meps.remote_meps, is_container='container', yang_name="remote-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'domains', 'maintenance-domain', 'maintenance-associations', 'maintenance-association', 'mep-endpoints', 'mep-endpoint']

  def _get_local_mep_id(self):
    """
    Getter method for local_mep_id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/local_mep_id (leafref)

    YANG Description: Local MEP identifier.
    """
    return self.__local_mep_id
      
  def _set_local_mep_id(self, v, load=False):
    """
    Setter method for local_mep_id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/local_mep_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_mep_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_mep_id() directly.

    YANG Description: Local MEP identifier.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="local-mep-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_mep_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="local-mep-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='leafref', is_config=True)""",
        })

    self.__local_mep_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_mep_id(self):
    self.__local_mep_id = YANGDynClass(base=str, is_leaf=True, yang_name="local-mep-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/config (container)

    YANG Description: Configuration data for a MEP.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for a MEP.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/state (container)

    YANG Description:  Operational tate data for a MEP.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description:  Operational tate data for a MEP.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)


  def _get_pm_profiles(self):
    """
    Getter method for pm_profiles, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles (container)

    YANG Description: This container includes configuration and state objects for the Frame Loss
Measurement & Delay Measurement functions defined in [Y.1731] and [MEF SOAM PM IA].
    """
    return self.__pm_profiles
      
  def _set_pm_profiles(self, v, load=False):
    """
    Setter method for pm_profiles, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pm_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pm_profiles() directly.

    YANG Description: This container includes configuration and state objects for the Frame Loss
Measurement & Delay Measurement functions defined in [Y.1731] and [MEF SOAM PM IA].
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=pm_profiles.pm_profiles, is_container='container', yang_name="pm-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pm_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=pm_profiles.pm_profiles, is_container='container', yang_name="pm-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)""",
        })

    self.__pm_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pm_profiles(self):
    self.__pm_profiles = YANGDynClass(base=pm_profiles.pm_profiles, is_container='container', yang_name="pm-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)


  def _get_rdi(self):
    """
    Getter method for rdi, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/rdi (container)

    YANG Description: rdi config for a mep.
    """
    return self.__rdi
      
  def _set_rdi(self, v, load=False):
    """
    Setter method for rdi, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/rdi (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rdi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rdi() directly.

    YANG Description: rdi config for a mep.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=rdi.rdi, is_container='container', yang_name="rdi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rdi must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=rdi.rdi, is_container='container', yang_name="rdi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)""",
        })

    self.__rdi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rdi(self):
    self.__rdi = YANGDynClass(base=rdi.rdi, is_container='container', yang_name="rdi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)


  def _get_link_loss_forwarding(self):
    """
    Getter method for link_loss_forwarding, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/link_loss_forwarding (container)

    YANG Description: link loss forwarding config for a mep.
    """
    return self.__link_loss_forwarding
      
  def _set_link_loss_forwarding(self, v, load=False):
    """
    Setter method for link_loss_forwarding, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/link_loss_forwarding (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_link_loss_forwarding is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_link_loss_forwarding() directly.

    YANG Description: link loss forwarding config for a mep.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=link_loss_forwarding.link_loss_forwarding, is_container='container', yang_name="link-loss-forwarding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """link_loss_forwarding must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=link_loss_forwarding.link_loss_forwarding, is_container='container', yang_name="link-loss-forwarding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)""",
        })

    self.__link_loss_forwarding = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_link_loss_forwarding(self):
    self.__link_loss_forwarding = YANGDynClass(base=link_loss_forwarding.link_loss_forwarding, is_container='container', yang_name="link-loss-forwarding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)


  def _get_remote_meps(self):
    """
    Getter method for remote_meps, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps (container)

    YANG Description: Remote meps associated to a local mep
    """
    return self.__remote_meps
      
  def _set_remote_meps(self, v, load=False):
    """
    Setter method for remote_meps, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_meps is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_meps() directly.

    YANG Description: Remote meps associated to a local mep
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=remote_meps.remote_meps, is_container='container', yang_name="remote-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_meps must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=remote_meps.remote_meps, is_container='container', yang_name="remote-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)""",
        })

    self.__remote_meps = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_meps(self):
    self.__remote_meps = YANGDynClass(base=remote_meps.remote_meps, is_container='container', yang_name="remote-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)

  local_mep_id = __builtin__.property(_get_local_mep_id, _set_local_mep_id)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  pm_profiles = __builtin__.property(_get_pm_profiles, _set_pm_profiles)
  rdi = __builtin__.property(_get_rdi, _set_rdi)
  link_loss_forwarding = __builtin__.property(_get_link_loss_forwarding, _set_link_loss_forwarding)
  remote_meps = __builtin__.property(_get_remote_meps, _set_remote_meps)


  _pyangbind_elements = OrderedDict([('local_mep_id', local_mep_id), ('config', config), ('state', state), ('pm_profiles', pm_profiles), ('rdi', rdi), ('link_loss_forwarding', link_loss_forwarding), ('remote_meps', remote_meps), ])


from . import config
from . import state
from . import pm_profiles
from . import rdi
from . import link_loss_forwarding
from . import remote_meps
class mep_endpoint(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: collection of full mesh MEPs under the maintenance association.
  """
  __slots__ = ('_path_helper', '_extmethods', '__local_mep_id','__config','__state','__pm_profiles','__rdi','__link_loss_forwarding','__remote_meps',)

  _yang_name = 'mep-endpoint'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__local_mep_id = YANGDynClass(base=str, is_leaf=True, yang_name="local-mep-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)
    self.__pm_profiles = YANGDynClass(base=pm_profiles.pm_profiles, is_container='container', yang_name="pm-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    self.__rdi = YANGDynClass(base=rdi.rdi, is_container='container', yang_name="rdi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    self.__link_loss_forwarding = YANGDynClass(base=link_loss_forwarding.link_loss_forwarding, is_container='container', yang_name="link-loss-forwarding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    self.__remote_meps = YANGDynClass(base=remote_meps.remote_meps, is_container='container', yang_name="remote-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'domains', 'maintenance-domain', 'maintenance-associations', 'maintenance-association', 'mep-endpoints', 'mep-endpoint']

  def _get_local_mep_id(self):
    """
    Getter method for local_mep_id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/local_mep_id (leafref)

    YANG Description: Local MEP identifier.
    """
    return self.__local_mep_id
      
  def _set_local_mep_id(self, v, load=False):
    """
    Setter method for local_mep_id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/local_mep_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_mep_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_mep_id() directly.

    YANG Description: Local MEP identifier.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="local-mep-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_mep_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="local-mep-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='leafref', is_config=True)""",
        })

    self.__local_mep_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_mep_id(self):
    self.__local_mep_id = YANGDynClass(base=str, is_leaf=True, yang_name="local-mep-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/config (container)

    YANG Description: Configuration data for a MEP.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for a MEP.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/state (container)

    YANG Description:  Operational tate data for a MEP.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description:  Operational tate data for a MEP.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)


  def _get_pm_profiles(self):
    """
    Getter method for pm_profiles, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles (container)

    YANG Description: This container includes configuration and state objects for the Frame Loss
Measurement & Delay Measurement functions defined in [Y.1731] and [MEF SOAM PM IA].
    """
    return self.__pm_profiles
      
  def _set_pm_profiles(self, v, load=False):
    """
    Setter method for pm_profiles, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pm_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pm_profiles() directly.

    YANG Description: This container includes configuration and state objects for the Frame Loss
Measurement & Delay Measurement functions defined in [Y.1731] and [MEF SOAM PM IA].
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=pm_profiles.pm_profiles, is_container='container', yang_name="pm-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pm_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=pm_profiles.pm_profiles, is_container='container', yang_name="pm-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)""",
        })

    self.__pm_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pm_profiles(self):
    self.__pm_profiles = YANGDynClass(base=pm_profiles.pm_profiles, is_container='container', yang_name="pm-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)


  def _get_rdi(self):
    """
    Getter method for rdi, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/rdi (container)

    YANG Description: rdi config for a mep.
    """
    return self.__rdi
      
  def _set_rdi(self, v, load=False):
    """
    Setter method for rdi, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/rdi (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rdi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rdi() directly.

    YANG Description: rdi config for a mep.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=rdi.rdi, is_container='container', yang_name="rdi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rdi must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=rdi.rdi, is_container='container', yang_name="rdi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)""",
        })

    self.__rdi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rdi(self):
    self.__rdi = YANGDynClass(base=rdi.rdi, is_container='container', yang_name="rdi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)


  def _get_link_loss_forwarding(self):
    """
    Getter method for link_loss_forwarding, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/link_loss_forwarding (container)

    YANG Description: link loss forwarding config for a mep.
    """
    return self.__link_loss_forwarding
      
  def _set_link_loss_forwarding(self, v, load=False):
    """
    Setter method for link_loss_forwarding, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/link_loss_forwarding (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_link_loss_forwarding is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_link_loss_forwarding() directly.

    YANG Description: link loss forwarding config for a mep.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=link_loss_forwarding.link_loss_forwarding, is_container='container', yang_name="link-loss-forwarding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """link_loss_forwarding must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=link_loss_forwarding.link_loss_forwarding, is_container='container', yang_name="link-loss-forwarding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)""",
        })

    self.__link_loss_forwarding = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_link_loss_forwarding(self):
    self.__link_loss_forwarding = YANGDynClass(base=link_loss_forwarding.link_loss_forwarding, is_container='container', yang_name="link-loss-forwarding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)


  def _get_remote_meps(self):
    """
    Getter method for remote_meps, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps (container)

    YANG Description: Remote meps associated to a local mep
    """
    return self.__remote_meps
      
  def _set_remote_meps(self, v, load=False):
    """
    Setter method for remote_meps, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_meps is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_meps() directly.

    YANG Description: Remote meps associated to a local mep
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=remote_meps.remote_meps, is_container='container', yang_name="remote-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_meps must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=remote_meps.remote_meps, is_container='container', yang_name="remote-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)""",
        })

    self.__remote_meps = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_meps(self):
    self.__remote_meps = YANGDynClass(base=remote_meps.remote_meps, is_container='container', yang_name="remote-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)

  local_mep_id = __builtin__.property(_get_local_mep_id, _set_local_mep_id)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  pm_profiles = __builtin__.property(_get_pm_profiles, _set_pm_profiles)
  rdi = __builtin__.property(_get_rdi, _set_rdi)
  link_loss_forwarding = __builtin__.property(_get_link_loss_forwarding, _set_link_loss_forwarding)
  remote_meps = __builtin__.property(_get_remote_meps, _set_remote_meps)


  _pyangbind_elements = OrderedDict([('local_mep_id', local_mep_id), ('config', config), ('state', state), ('pm_profiles', pm_profiles), ('rdi', rdi), ('link_loss_forwarding', link_loss_forwarding), ('remote_meps', remote_meps), ])


