# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import counters
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational data for a remote mep.
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__mac_address','__oper_state','__interface_state','__fng_state','__highest_priority_defect','__mep_defects','__present_rdi','__config_errors_detected','__error_ccm_last_failure','__counters',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['1..8191']}), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:mep-id-type', is_config=False)
    self.__mac_address = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="mac-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:mac-address', is_config=False)
    self.__oper_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ENABLED': {}, 'DISABLED': {}, 'UNKNOWN': {}},), is_leaf=True, yang_name="oper-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:operational-state-type', is_config=False)
    self.__interface_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_STATUS_TLV': {}, 'UP': {}, 'DOWN': {}, 'TESTING': {}, 'UNKNOWN': {}, 'DORMANT': {}, 'NOT_PRESENT': {}, 'LOWER_LAYER_DOWN': {}},), is_leaf=True, yang_name="interface-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:interface-status-type', is_config=False)
    self.__fng_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FNG_RESET': {'value': 1}, 'FNG_DEFECT': {'value': 2}, 'FNG_REPORT_DEFECT': {'value': 3}, 'FNG_DEFECT_REPORTED': {'value': 4}, 'FNG_DEFECT_CLEARING': {'value': 5}},), default=str("FNG_RESET"), is_leaf=True, yang_name="fng-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:fng-state-type', is_config=False)
    self.__highest_priority_defect = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NONE': {'value': 0}, 'DEF_RDI_CCM': {'value': 1}, 'DEF_MAC_STATUS': {'value': 2}, 'DEF_REMOTE_CCM': {'value': 3}, 'DEF_ERROR_CCM': {'value': 4}, 'DEF_XCON_CCM': {'value': 5}},), is_leaf=True, yang_name="highest-priority-defect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:highest-defect-priority-type', is_config=False)
    self.__mep_defects = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'DEF_RDI_CCM': {'value': 1}, 'DEF_MAC_STATUS': {'value': 2}, 'DEF_REMOTE_CCM': {'value': 3}, 'DEF_ERROR_CCM': {'value': 4}, 'DEF_XCON_CCM': {'value': 5}},)), is_leaf=False, yang_name="mep-defects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:mep-defects-type', is_config=False)
    self.__present_rdi = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="present-rdi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=False)
    self.__config_errors_detected = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'CFM_LEAK': {}, 'CONFLICTING_VIDS': {}, 'EXCESSIVE_LEVELS': {}, 'OVERLAPPED_LEVELS': {}},)), is_leaf=False, yang_name="config-errors-detected", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:config-error-type', is_config=False)
    self.__error_ccm_last_failure = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['1..128']}), is_leaf=True, yang_name="error-ccm-last-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='binary', is_config=False)
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'domains', 'maintenance-domain', 'maintenance-associations', 'maintenance-association', 'mep-endpoints', 'mep-endpoint', 'remote-meps', 'remote-mep', 'state']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/id (oc-cfm-types:mep-id-type)

    YANG Description: Remote MEP IDs in full mesh.
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/id (oc-cfm-types:mep-id-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: Remote MEP IDs in full mesh.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['1..8191']}), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:mep-id-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with oc-cfm-types:mep-id-type""",
          'defined-type': "oc-cfm-types:mep-id-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['1..8191']}), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:mep-id-type', is_config=False)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['1..8191']}), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:mep-id-type', is_config=False)


  def _get_mac_address(self):
    """
    Getter method for mac_address, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/mac_address (oc-yang:mac-address)

    YANG Description: Remote MEP IDs in full mesh.
    """
    return self.__mac_address
      
  def _set_mac_address(self, v, load=False):
    """
    Setter method for mac_address, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/mac_address (oc-yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_address() directly.

    YANG Description: Remote MEP IDs in full mesh.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="mac-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:mac-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_address must be of a type compatible with oc-yang:mac-address""",
          'defined-type': "oc-yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="mac-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:mac-address', is_config=False)""",
        })

    self.__mac_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_address(self):
    self.__mac_address = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="mac-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:mac-address', is_config=False)


  def _get_oper_state(self):
    """
    Getter method for oper_state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/oper_state (oc-cfm-types:operational-state-type)

    YANG Description: Operational state of the MEP.
    """
    return self.__oper_state
      
  def _set_oper_state(self, v, load=False):
    """
    Setter method for oper_state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/oper_state (oc-cfm-types:operational-state-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oper_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oper_state() directly.

    YANG Description: Operational state of the MEP.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ENABLED': {}, 'DISABLED': {}, 'UNKNOWN': {}},), is_leaf=True, yang_name="oper-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:operational-state-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oper_state must be of a type compatible with oc-cfm-types:operational-state-type""",
          'defined-type': "oc-cfm-types:operational-state-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ENABLED': {}, 'DISABLED': {}, 'UNKNOWN': {}},), is_leaf=True, yang_name="oper-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:operational-state-type', is_config=False)""",
        })

    self.__oper_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oper_state(self):
    self.__oper_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ENABLED': {}, 'DISABLED': {}, 'UNKNOWN': {}},), is_leaf=True, yang_name="oper-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:operational-state-type', is_config=False)


  def _get_interface_state(self):
    """
    Getter method for interface_state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/interface_state (oc-cfm-types:interface-status-type)

    YANG Description: The state of the interface last reported by the local MEP in the TLV.
    """
    return self.__interface_state
      
  def _set_interface_state(self, v, load=False):
    """
    Setter method for interface_state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/interface_state (oc-cfm-types:interface-status-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_state() directly.

    YANG Description: The state of the interface last reported by the local MEP in the TLV.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_STATUS_TLV': {}, 'UP': {}, 'DOWN': {}, 'TESTING': {}, 'UNKNOWN': {}, 'DORMANT': {}, 'NOT_PRESENT': {}, 'LOWER_LAYER_DOWN': {}},), is_leaf=True, yang_name="interface-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:interface-status-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_state must be of a type compatible with oc-cfm-types:interface-status-type""",
          'defined-type': "oc-cfm-types:interface-status-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_STATUS_TLV': {}, 'UP': {}, 'DOWN': {}, 'TESTING': {}, 'UNKNOWN': {}, 'DORMANT': {}, 'NOT_PRESENT': {}, 'LOWER_LAYER_DOWN': {}},), is_leaf=True, yang_name="interface-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:interface-status-type', is_config=False)""",
        })

    self.__interface_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_state(self):
    self.__interface_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_STATUS_TLV': {}, 'UP': {}, 'DOWN': {}, 'TESTING': {}, 'UNKNOWN': {}, 'DORMANT': {}, 'NOT_PRESENT': {}, 'LOWER_LAYER_DOWN': {}},), is_leaf=True, yang_name="interface-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:interface-status-type', is_config=False)


  def _get_fng_state(self):
    """
    Getter method for fng_state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/fng_state (oc-cfm-types:fng-state-type)

    YANG Description: The current state of the MEP Fault Notification Generator
state machine.
    """
    return self.__fng_state
      
  def _set_fng_state(self, v, load=False):
    """
    Setter method for fng_state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/fng_state (oc-cfm-types:fng-state-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fng_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fng_state() directly.

    YANG Description: The current state of the MEP Fault Notification Generator
state machine.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FNG_RESET': {'value': 1}, 'FNG_DEFECT': {'value': 2}, 'FNG_REPORT_DEFECT': {'value': 3}, 'FNG_DEFECT_REPORTED': {'value': 4}, 'FNG_DEFECT_CLEARING': {'value': 5}},), default=str("FNG_RESET"), is_leaf=True, yang_name="fng-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:fng-state-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fng_state must be of a type compatible with oc-cfm-types:fng-state-type""",
          'defined-type': "oc-cfm-types:fng-state-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FNG_RESET': {'value': 1}, 'FNG_DEFECT': {'value': 2}, 'FNG_REPORT_DEFECT': {'value': 3}, 'FNG_DEFECT_REPORTED': {'value': 4}, 'FNG_DEFECT_CLEARING': {'value': 5}},), default=str("FNG_RESET"), is_leaf=True, yang_name="fng-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:fng-state-type', is_config=False)""",
        })

    self.__fng_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fng_state(self):
    self.__fng_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FNG_RESET': {'value': 1}, 'FNG_DEFECT': {'value': 2}, 'FNG_REPORT_DEFECT': {'value': 3}, 'FNG_DEFECT_REPORTED': {'value': 4}, 'FNG_DEFECT_CLEARING': {'value': 5}},), default=str("FNG_RESET"), is_leaf=True, yang_name="fng-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:fng-state-type', is_config=False)


  def _get_highest_priority_defect(self):
    """
    Getter method for highest_priority_defect, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/highest_priority_defect (oc-cfm-types:highest-defect-priority-type)

    YANG Description: The highest priority defect that has been present since
the MEPs Fault Notification Generator state machine was
last in the FNG_RESET state.
    """
    return self.__highest_priority_defect
      
  def _set_highest_priority_defect(self, v, load=False):
    """
    Setter method for highest_priority_defect, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/highest_priority_defect (oc-cfm-types:highest-defect-priority-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_highest_priority_defect is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_highest_priority_defect() directly.

    YANG Description: The highest priority defect that has been present since
the MEPs Fault Notification Generator state machine was
last in the FNG_RESET state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NONE': {'value': 0}, 'DEF_RDI_CCM': {'value': 1}, 'DEF_MAC_STATUS': {'value': 2}, 'DEF_REMOTE_CCM': {'value': 3}, 'DEF_ERROR_CCM': {'value': 4}, 'DEF_XCON_CCM': {'value': 5}},), is_leaf=True, yang_name="highest-priority-defect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:highest-defect-priority-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """highest_priority_defect must be of a type compatible with oc-cfm-types:highest-defect-priority-type""",
          'defined-type': "oc-cfm-types:highest-defect-priority-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NONE': {'value': 0}, 'DEF_RDI_CCM': {'value': 1}, 'DEF_MAC_STATUS': {'value': 2}, 'DEF_REMOTE_CCM': {'value': 3}, 'DEF_ERROR_CCM': {'value': 4}, 'DEF_XCON_CCM': {'value': 5}},), is_leaf=True, yang_name="highest-priority-defect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:highest-defect-priority-type', is_config=False)""",
        })

    self.__highest_priority_defect = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_highest_priority_defect(self):
    self.__highest_priority_defect = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NONE': {'value': 0}, 'DEF_RDI_CCM': {'value': 1}, 'DEF_MAC_STATUS': {'value': 2}, 'DEF_REMOTE_CCM': {'value': 3}, 'DEF_ERROR_CCM': {'value': 4}, 'DEF_XCON_CCM': {'value': 5}},), is_leaf=True, yang_name="highest-priority-defect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:highest-defect-priority-type', is_config=False)


  def _get_mep_defects(self):
    """
    Getter method for mep_defects, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/mep_defects (oc-cfm-types:mep-defects-type)

    YANG Description: Vector of boolean error conditions.
Multiple defects can be present at the same time.
    """
    return self.__mep_defects
      
  def _set_mep_defects(self, v, load=False):
    """
    Setter method for mep_defects, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/mep_defects (oc-cfm-types:mep-defects-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mep_defects is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mep_defects() directly.

    YANG Description: Vector of boolean error conditions.
Multiple defects can be present at the same time.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'DEF_RDI_CCM': {'value': 1}, 'DEF_MAC_STATUS': {'value': 2}, 'DEF_REMOTE_CCM': {'value': 3}, 'DEF_ERROR_CCM': {'value': 4}, 'DEF_XCON_CCM': {'value': 5}},)), is_leaf=False, yang_name="mep-defects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:mep-defects-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mep_defects must be of a type compatible with oc-cfm-types:mep-defects-type""",
          'defined-type': "oc-cfm-types:mep-defects-type",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'DEF_RDI_CCM': {'value': 1}, 'DEF_MAC_STATUS': {'value': 2}, 'DEF_REMOTE_CCM': {'value': 3}, 'DEF_ERROR_CCM': {'value': 4}, 'DEF_XCON_CCM': {'value': 5}},)), is_leaf=False, yang_name="mep-defects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:mep-defects-type', is_config=False)""",
        })

    self.__mep_defects = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mep_defects(self):
    self.__mep_defects = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'DEF_RDI_CCM': {'value': 1}, 'DEF_MAC_STATUS': {'value': 2}, 'DEF_REMOTE_CCM': {'value': 3}, 'DEF_ERROR_CCM': {'value': 4}, 'DEF_XCON_CCM': {'value': 5}},)), is_leaf=False, yang_name="mep-defects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:mep-defects-type', is_config=False)


  def _get_present_rdi(self):
    """
    Getter method for present_rdi, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/present_rdi (boolean)

    YANG Description: A boolean value indicating the state of the RDI bit in CCMs
transmitted by this MEP. present-rdi is true if and only if one or more
of the variables someRMEPCCMdefect, someMACstatusDefect, errorCCMdefect,
or xconCCMdefect is true, and if the corresponding priority of that
variable, from mep-defects above, is greater than or equal to the
value of the variable lowestAlarmPri.
    """
    return self.__present_rdi
      
  def _set_present_rdi(self, v, load=False):
    """
    Setter method for present_rdi, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/present_rdi (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_present_rdi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_present_rdi() directly.

    YANG Description: A boolean value indicating the state of the RDI bit in CCMs
transmitted by this MEP. present-rdi is true if and only if one or more
of the variables someRMEPCCMdefect, someMACstatusDefect, errorCCMdefect,
or xconCCMdefect is true, and if the corresponding priority of that
variable, from mep-defects above, is greater than or equal to the
value of the variable lowestAlarmPri.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="present-rdi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """present_rdi must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="present-rdi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=False)""",
        })

    self.__present_rdi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_present_rdi(self):
    self.__present_rdi = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="present-rdi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=False)


  def _get_config_errors_detected(self):
    """
    Getter method for config_errors_detected, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/config_errors_detected (oc-cfm-types:config-error-type)

    YANG Description: Vector of enums of config error detected. i.e. [cfm-leak]
    """
    return self.__config_errors_detected
      
  def _set_config_errors_detected(self, v, load=False):
    """
    Setter method for config_errors_detected, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/config_errors_detected (oc-cfm-types:config-error-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_errors_detected is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_errors_detected() directly.

    YANG Description: Vector of enums of config error detected. i.e. [cfm-leak]
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'CFM_LEAK': {}, 'CONFLICTING_VIDS': {}, 'EXCESSIVE_LEVELS': {}, 'OVERLAPPED_LEVELS': {}},)), is_leaf=False, yang_name="config-errors-detected", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:config-error-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_errors_detected must be of a type compatible with oc-cfm-types:config-error-type""",
          'defined-type': "oc-cfm-types:config-error-type",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'CFM_LEAK': {}, 'CONFLICTING_VIDS': {}, 'EXCESSIVE_LEVELS': {}, 'OVERLAPPED_LEVELS': {}},)), is_leaf=False, yang_name="config-errors-detected", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:config-error-type', is_config=False)""",
        })

    self.__config_errors_detected = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_errors_detected(self):
    self.__config_errors_detected = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'CFM_LEAK': {}, 'CONFLICTING_VIDS': {}, 'EXCESSIVE_LEVELS': {}, 'OVERLAPPED_LEVELS': {}},)), is_leaf=False, yang_name="config-errors-detected", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:config-error-type', is_config=False)


  def _get_error_ccm_last_failure(self):
    """
    Getter method for error_ccm_last_failure, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/error_ccm_last_failure (binary)

    YANG Description: The last received CCM that triggered a def-error-ccm
 fault.
    """
    return self.__error_ccm_last_failure
      
  def _set_error_ccm_last_failure(self, v, load=False):
    """
    Setter method for error_ccm_last_failure, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/error_ccm_last_failure (binary)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_error_ccm_last_failure is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_error_ccm_last_failure() directly.

    YANG Description: The last received CCM that triggered a def-error-ccm
 fault.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['1..128']}), is_leaf=True, yang_name="error-ccm-last-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='binary', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """error_ccm_last_failure must be of a type compatible with binary""",
          'defined-type': "binary",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['1..128']}), is_leaf=True, yang_name="error-ccm-last-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='binary', is_config=False)""",
        })

    self.__error_ccm_last_failure = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_error_ccm_last_failure(self):
    self.__error_ccm_last_failure = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['1..128']}), is_leaf=True, yang_name="error-ccm-last-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='binary', is_config=False)


  def _get_counters(self):
    """
    Getter method for counters, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/counters (container)

    YANG Description: A collection of mep-related statistics objects.
    """
    return self.__counters
      
  def _set_counters(self, v, load=False):
    """
    Setter method for counters, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/counters (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_counters is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_counters() directly.

    YANG Description: A collection of mep-related statistics objects.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """counters must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)""",
        })

    self.__counters = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_counters(self):
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)

  id = __builtin__.property(_get_id)
  mac_address = __builtin__.property(_get_mac_address)
  oper_state = __builtin__.property(_get_oper_state)
  interface_state = __builtin__.property(_get_interface_state)
  fng_state = __builtin__.property(_get_fng_state)
  highest_priority_defect = __builtin__.property(_get_highest_priority_defect)
  mep_defects = __builtin__.property(_get_mep_defects)
  present_rdi = __builtin__.property(_get_present_rdi)
  config_errors_detected = __builtin__.property(_get_config_errors_detected)
  error_ccm_last_failure = __builtin__.property(_get_error_ccm_last_failure)
  counters = __builtin__.property(_get_counters)


  _pyangbind_elements = OrderedDict([('id', id), ('mac_address', mac_address), ('oper_state', oper_state), ('interface_state', interface_state), ('fng_state', fng_state), ('highest_priority_defect', highest_priority_defect), ('mep_defects', mep_defects), ('present_rdi', present_rdi), ('config_errors_detected', config_errors_detected), ('error_ccm_last_failure', error_ccm_last_failure), ('counters', counters), ])


from . import counters
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/remote-meps/remote-mep/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational data for a remote mep.
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__mac_address','__oper_state','__interface_state','__fng_state','__highest_priority_defect','__mep_defects','__present_rdi','__config_errors_detected','__error_ccm_last_failure','__counters',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['1..8191']}), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:mep-id-type', is_config=False)
    self.__mac_address = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="mac-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:mac-address', is_config=False)
    self.__oper_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ENABLED': {}, 'DISABLED': {}, 'UNKNOWN': {}},), is_leaf=True, yang_name="oper-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:operational-state-type', is_config=False)
    self.__interface_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_STATUS_TLV': {}, 'UP': {}, 'DOWN': {}, 'TESTING': {}, 'UNKNOWN': {}, 'DORMANT': {}, 'NOT_PRESENT': {}, 'LOWER_LAYER_DOWN': {}},), is_leaf=True, yang_name="interface-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:interface-status-type', is_config=False)
    self.__fng_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FNG_RESET': {'value': 1}, 'FNG_DEFECT': {'value': 2}, 'FNG_REPORT_DEFECT': {'value': 3}, 'FNG_DEFECT_REPORTED': {'value': 4}, 'FNG_DEFECT_CLEARING': {'value': 5}},), default=str("FNG_RESET"), is_leaf=True, yang_name="fng-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:fng-state-type', is_config=False)
    self.__highest_priority_defect = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NONE': {'value': 0}, 'DEF_RDI_CCM': {'value': 1}, 'DEF_MAC_STATUS': {'value': 2}, 'DEF_REMOTE_CCM': {'value': 3}, 'DEF_ERROR_CCM': {'value': 4}, 'DEF_XCON_CCM': {'value': 5}},), is_leaf=True, yang_name="highest-priority-defect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:highest-defect-priority-type', is_config=False)
    self.__mep_defects = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'DEF_RDI_CCM': {'value': 1}, 'DEF_MAC_STATUS': {'value': 2}, 'DEF_REMOTE_CCM': {'value': 3}, 'DEF_ERROR_CCM': {'value': 4}, 'DEF_XCON_CCM': {'value': 5}},)), is_leaf=False, yang_name="mep-defects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:mep-defects-type', is_config=False)
    self.__present_rdi = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="present-rdi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=False)
    self.__config_errors_detected = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'CFM_LEAK': {}, 'CONFLICTING_VIDS': {}, 'EXCESSIVE_LEVELS': {}, 'OVERLAPPED_LEVELS': {}},)), is_leaf=False, yang_name="config-errors-detected", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:config-error-type', is_config=False)
    self.__error_ccm_last_failure = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['1..128']}), is_leaf=True, yang_name="error-ccm-last-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='binary', is_config=False)
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'domains', 'maintenance-domain', 'maintenance-associations', 'maintenance-association', 'mep-endpoints', 'mep-endpoint', 'remote-meps', 'remote-mep', 'state']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/id (oc-cfm-types:mep-id-type)

    YANG Description: Remote MEP IDs in full mesh.
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/id (oc-cfm-types:mep-id-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: Remote MEP IDs in full mesh.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['1..8191']}), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:mep-id-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with oc-cfm-types:mep-id-type""",
          'defined-type': "oc-cfm-types:mep-id-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['1..8191']}), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:mep-id-type', is_config=False)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['1..8191']}), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:mep-id-type', is_config=False)


  def _get_mac_address(self):
    """
    Getter method for mac_address, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/mac_address (oc-yang:mac-address)

    YANG Description: Remote MEP IDs in full mesh.
    """
    return self.__mac_address
      
  def _set_mac_address(self, v, load=False):
    """
    Setter method for mac_address, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/mac_address (oc-yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_address() directly.

    YANG Description: Remote MEP IDs in full mesh.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="mac-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:mac-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_address must be of a type compatible with oc-yang:mac-address""",
          'defined-type': "oc-yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="mac-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:mac-address', is_config=False)""",
        })

    self.__mac_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_address(self):
    self.__mac_address = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="mac-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:mac-address', is_config=False)


  def _get_oper_state(self):
    """
    Getter method for oper_state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/oper_state (oc-cfm-types:operational-state-type)

    YANG Description: Operational state of the MEP.
    """
    return self.__oper_state
      
  def _set_oper_state(self, v, load=False):
    """
    Setter method for oper_state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/oper_state (oc-cfm-types:operational-state-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oper_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oper_state() directly.

    YANG Description: Operational state of the MEP.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ENABLED': {}, 'DISABLED': {}, 'UNKNOWN': {}},), is_leaf=True, yang_name="oper-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:operational-state-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oper_state must be of a type compatible with oc-cfm-types:operational-state-type""",
          'defined-type': "oc-cfm-types:operational-state-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ENABLED': {}, 'DISABLED': {}, 'UNKNOWN': {}},), is_leaf=True, yang_name="oper-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:operational-state-type', is_config=False)""",
        })

    self.__oper_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oper_state(self):
    self.__oper_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ENABLED': {}, 'DISABLED': {}, 'UNKNOWN': {}},), is_leaf=True, yang_name="oper-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:operational-state-type', is_config=False)


  def _get_interface_state(self):
    """
    Getter method for interface_state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/interface_state (oc-cfm-types:interface-status-type)

    YANG Description: The state of the interface last reported by the local MEP in the TLV.
    """
    return self.__interface_state
      
  def _set_interface_state(self, v, load=False):
    """
    Setter method for interface_state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/interface_state (oc-cfm-types:interface-status-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_state() directly.

    YANG Description: The state of the interface last reported by the local MEP in the TLV.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_STATUS_TLV': {}, 'UP': {}, 'DOWN': {}, 'TESTING': {}, 'UNKNOWN': {}, 'DORMANT': {}, 'NOT_PRESENT': {}, 'LOWER_LAYER_DOWN': {}},), is_leaf=True, yang_name="interface-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:interface-status-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_state must be of a type compatible with oc-cfm-types:interface-status-type""",
          'defined-type': "oc-cfm-types:interface-status-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_STATUS_TLV': {}, 'UP': {}, 'DOWN': {}, 'TESTING': {}, 'UNKNOWN': {}, 'DORMANT': {}, 'NOT_PRESENT': {}, 'LOWER_LAYER_DOWN': {}},), is_leaf=True, yang_name="interface-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:interface-status-type', is_config=False)""",
        })

    self.__interface_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_state(self):
    self.__interface_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_STATUS_TLV': {}, 'UP': {}, 'DOWN': {}, 'TESTING': {}, 'UNKNOWN': {}, 'DORMANT': {}, 'NOT_PRESENT': {}, 'LOWER_LAYER_DOWN': {}},), is_leaf=True, yang_name="interface-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:interface-status-type', is_config=False)


  def _get_fng_state(self):
    """
    Getter method for fng_state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/fng_state (oc-cfm-types:fng-state-type)

    YANG Description: The current state of the MEP Fault Notification Generator
state machine.
    """
    return self.__fng_state
      
  def _set_fng_state(self, v, load=False):
    """
    Setter method for fng_state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/fng_state (oc-cfm-types:fng-state-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fng_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fng_state() directly.

    YANG Description: The current state of the MEP Fault Notification Generator
state machine.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FNG_RESET': {'value': 1}, 'FNG_DEFECT': {'value': 2}, 'FNG_REPORT_DEFECT': {'value': 3}, 'FNG_DEFECT_REPORTED': {'value': 4}, 'FNG_DEFECT_CLEARING': {'value': 5}},), default=str("FNG_RESET"), is_leaf=True, yang_name="fng-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:fng-state-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fng_state must be of a type compatible with oc-cfm-types:fng-state-type""",
          'defined-type': "oc-cfm-types:fng-state-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FNG_RESET': {'value': 1}, 'FNG_DEFECT': {'value': 2}, 'FNG_REPORT_DEFECT': {'value': 3}, 'FNG_DEFECT_REPORTED': {'value': 4}, 'FNG_DEFECT_CLEARING': {'value': 5}},), default=str("FNG_RESET"), is_leaf=True, yang_name="fng-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:fng-state-type', is_config=False)""",
        })

    self.__fng_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fng_state(self):
    self.__fng_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FNG_RESET': {'value': 1}, 'FNG_DEFECT': {'value': 2}, 'FNG_REPORT_DEFECT': {'value': 3}, 'FNG_DEFECT_REPORTED': {'value': 4}, 'FNG_DEFECT_CLEARING': {'value': 5}},), default=str("FNG_RESET"), is_leaf=True, yang_name="fng-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:fng-state-type', is_config=False)


  def _get_highest_priority_defect(self):
    """
    Getter method for highest_priority_defect, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/highest_priority_defect (oc-cfm-types:highest-defect-priority-type)

    YANG Description: The highest priority defect that has been present since
the MEPs Fault Notification Generator state machine was
last in the FNG_RESET state.
    """
    return self.__highest_priority_defect
      
  def _set_highest_priority_defect(self, v, load=False):
    """
    Setter method for highest_priority_defect, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/highest_priority_defect (oc-cfm-types:highest-defect-priority-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_highest_priority_defect is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_highest_priority_defect() directly.

    YANG Description: The highest priority defect that has been present since
the MEPs Fault Notification Generator state machine was
last in the FNG_RESET state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NONE': {'value': 0}, 'DEF_RDI_CCM': {'value': 1}, 'DEF_MAC_STATUS': {'value': 2}, 'DEF_REMOTE_CCM': {'value': 3}, 'DEF_ERROR_CCM': {'value': 4}, 'DEF_XCON_CCM': {'value': 5}},), is_leaf=True, yang_name="highest-priority-defect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:highest-defect-priority-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """highest_priority_defect must be of a type compatible with oc-cfm-types:highest-defect-priority-type""",
          'defined-type': "oc-cfm-types:highest-defect-priority-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NONE': {'value': 0}, 'DEF_RDI_CCM': {'value': 1}, 'DEF_MAC_STATUS': {'value': 2}, 'DEF_REMOTE_CCM': {'value': 3}, 'DEF_ERROR_CCM': {'value': 4}, 'DEF_XCON_CCM': {'value': 5}},), is_leaf=True, yang_name="highest-priority-defect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:highest-defect-priority-type', is_config=False)""",
        })

    self.__highest_priority_defect = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_highest_priority_defect(self):
    self.__highest_priority_defect = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NONE': {'value': 0}, 'DEF_RDI_CCM': {'value': 1}, 'DEF_MAC_STATUS': {'value': 2}, 'DEF_REMOTE_CCM': {'value': 3}, 'DEF_ERROR_CCM': {'value': 4}, 'DEF_XCON_CCM': {'value': 5}},), is_leaf=True, yang_name="highest-priority-defect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:highest-defect-priority-type', is_config=False)


  def _get_mep_defects(self):
    """
    Getter method for mep_defects, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/mep_defects (oc-cfm-types:mep-defects-type)

    YANG Description: Vector of boolean error conditions.
Multiple defects can be present at the same time.
    """
    return self.__mep_defects
      
  def _set_mep_defects(self, v, load=False):
    """
    Setter method for mep_defects, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/mep_defects (oc-cfm-types:mep-defects-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mep_defects is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mep_defects() directly.

    YANG Description: Vector of boolean error conditions.
Multiple defects can be present at the same time.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'DEF_RDI_CCM': {'value': 1}, 'DEF_MAC_STATUS': {'value': 2}, 'DEF_REMOTE_CCM': {'value': 3}, 'DEF_ERROR_CCM': {'value': 4}, 'DEF_XCON_CCM': {'value': 5}},)), is_leaf=False, yang_name="mep-defects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:mep-defects-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mep_defects must be of a type compatible with oc-cfm-types:mep-defects-type""",
          'defined-type': "oc-cfm-types:mep-defects-type",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'DEF_RDI_CCM': {'value': 1}, 'DEF_MAC_STATUS': {'value': 2}, 'DEF_REMOTE_CCM': {'value': 3}, 'DEF_ERROR_CCM': {'value': 4}, 'DEF_XCON_CCM': {'value': 5}},)), is_leaf=False, yang_name="mep-defects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:mep-defects-type', is_config=False)""",
        })

    self.__mep_defects = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mep_defects(self):
    self.__mep_defects = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'DEF_RDI_CCM': {'value': 1}, 'DEF_MAC_STATUS': {'value': 2}, 'DEF_REMOTE_CCM': {'value': 3}, 'DEF_ERROR_CCM': {'value': 4}, 'DEF_XCON_CCM': {'value': 5}},)), is_leaf=False, yang_name="mep-defects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:mep-defects-type', is_config=False)


  def _get_present_rdi(self):
    """
    Getter method for present_rdi, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/present_rdi (boolean)

    YANG Description: A boolean value indicating the state of the RDI bit in CCMs
transmitted by this MEP. present-rdi is true if and only if one or more
of the variables someRMEPCCMdefect, someMACstatusDefect, errorCCMdefect,
or xconCCMdefect is true, and if the corresponding priority of that
variable, from mep-defects above, is greater than or equal to the
value of the variable lowestAlarmPri.
    """
    return self.__present_rdi
      
  def _set_present_rdi(self, v, load=False):
    """
    Setter method for present_rdi, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/present_rdi (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_present_rdi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_present_rdi() directly.

    YANG Description: A boolean value indicating the state of the RDI bit in CCMs
transmitted by this MEP. present-rdi is true if and only if one or more
of the variables someRMEPCCMdefect, someMACstatusDefect, errorCCMdefect,
or xconCCMdefect is true, and if the corresponding priority of that
variable, from mep-defects above, is greater than or equal to the
value of the variable lowestAlarmPri.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="present-rdi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """present_rdi must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="present-rdi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=False)""",
        })

    self.__present_rdi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_present_rdi(self):
    self.__present_rdi = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="present-rdi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=False)


  def _get_config_errors_detected(self):
    """
    Getter method for config_errors_detected, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/config_errors_detected (oc-cfm-types:config-error-type)

    YANG Description: Vector of enums of config error detected. i.e. [cfm-leak]
    """
    return self.__config_errors_detected
      
  def _set_config_errors_detected(self, v, load=False):
    """
    Setter method for config_errors_detected, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/config_errors_detected (oc-cfm-types:config-error-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_errors_detected is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_errors_detected() directly.

    YANG Description: Vector of enums of config error detected. i.e. [cfm-leak]
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'CFM_LEAK': {}, 'CONFLICTING_VIDS': {}, 'EXCESSIVE_LEVELS': {}, 'OVERLAPPED_LEVELS': {}},)), is_leaf=False, yang_name="config-errors-detected", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:config-error-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_errors_detected must be of a type compatible with oc-cfm-types:config-error-type""",
          'defined-type': "oc-cfm-types:config-error-type",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'CFM_LEAK': {}, 'CONFLICTING_VIDS': {}, 'EXCESSIVE_LEVELS': {}, 'OVERLAPPED_LEVELS': {}},)), is_leaf=False, yang_name="config-errors-detected", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:config-error-type', is_config=False)""",
        })

    self.__config_errors_detected = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_errors_detected(self):
    self.__config_errors_detected = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'CFM_LEAK': {}, 'CONFLICTING_VIDS': {}, 'EXCESSIVE_LEVELS': {}, 'OVERLAPPED_LEVELS': {}},)), is_leaf=False, yang_name="config-errors-detected", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:config-error-type', is_config=False)


  def _get_error_ccm_last_failure(self):
    """
    Getter method for error_ccm_last_failure, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/error_ccm_last_failure (binary)

    YANG Description: The last received CCM that triggered a def-error-ccm
 fault.
    """
    return self.__error_ccm_last_failure
      
  def _set_error_ccm_last_failure(self, v, load=False):
    """
    Setter method for error_ccm_last_failure, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/error_ccm_last_failure (binary)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_error_ccm_last_failure is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_error_ccm_last_failure() directly.

    YANG Description: The last received CCM that triggered a def-error-ccm
 fault.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['1..128']}), is_leaf=True, yang_name="error-ccm-last-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='binary', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """error_ccm_last_failure must be of a type compatible with binary""",
          'defined-type': "binary",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['1..128']}), is_leaf=True, yang_name="error-ccm-last-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='binary', is_config=False)""",
        })

    self.__error_ccm_last_failure = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_error_ccm_last_failure(self):
    self.__error_ccm_last_failure = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['1..128']}), is_leaf=True, yang_name="error-ccm-last-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='binary', is_config=False)


  def _get_counters(self):
    """
    Getter method for counters, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/counters (container)

    YANG Description: A collection of mep-related statistics objects.
    """
    return self.__counters
      
  def _set_counters(self, v, load=False):
    """
    Setter method for counters, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/remote_meps/remote_mep/state/counters (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_counters is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_counters() directly.

    YANG Description: A collection of mep-related statistics objects.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """counters must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)""",
        })

    self.__counters = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_counters(self):
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)

  id = __builtin__.property(_get_id)
  mac_address = __builtin__.property(_get_mac_address)
  oper_state = __builtin__.property(_get_oper_state)
  interface_state = __builtin__.property(_get_interface_state)
  fng_state = __builtin__.property(_get_fng_state)
  highest_priority_defect = __builtin__.property(_get_highest_priority_defect)
  mep_defects = __builtin__.property(_get_mep_defects)
  present_rdi = __builtin__.property(_get_present_rdi)
  config_errors_detected = __builtin__.property(_get_config_errors_detected)
  error_ccm_last_failure = __builtin__.property(_get_error_ccm_last_failure)
  counters = __builtin__.property(_get_counters)


  _pyangbind_elements = OrderedDict([('id', id), ('mac_address', mac_address), ('oper_state', oper_state), ('interface_state', interface_state), ('fng_state', fng_state), ('highest_priority_defect', highest_priority_defect), ('mep_defects', mep_defects), ('present_rdi', present_rdi), ('config_errors_detected', config_errors_detected), ('error_ccm_last_failure', error_ccm_last_failure), ('counters', counters), ])


