# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for a maintenance association.
  """
  __slots__ = ('_path_helper', '_extmethods', '__ma_id','__group_name','__ma_name_type','__primary_vid','__char_string','__unsigned_int16','__vpn_oui','__vpn_index','__ccm_interval','__loss_threshold',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ma_id = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-zA-Z\\-_.]*', 'length': ['1..255']}), is_leaf=True, yang_name="ma-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:name-key-type', is_config=True)
    self.__group_name = YANGDynClass(base=str, is_leaf=True, yang_name="group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)
    self.__ma_name_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'PRIMARY_VID': {}, 'CHARACTER_STRING': {}, 'UINT16': {}, 'RFC2685_VPN_ID': {}},), is_leaf=True, yang_name="ma-name-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    self.__primary_vid = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['1..4094']}), is_leaf=True, yang_name="primary-vid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-vlan-types:vlan-id', is_config=True)
    self.__char_string = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[ -~]*', 'length': ['1..45']}), is_leaf=True, yang_name="char-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)
    self.__unsigned_int16 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="unsigned-int16", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    self.__vpn_oui = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..16777215']}), is_leaf=True, yang_name="vpn-oui", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    self.__vpn_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vpn-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    self.__ccm_interval = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'300MS': {}, '1S': {}, '10S': {}},), is_leaf=True, yang_name="ccm-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    self.__loss_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="loss-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'domains', 'maintenance-domain', 'maintenance-associations', 'maintenance-association', 'config']

  def _get_ma_id(self):
    """
    Getter method for ma_id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/ma_id (oc-cfm-types:name-key-type)

    YANG Description: Key of the Maintenance Association list of entries.
    """
    return self.__ma_id
      
  def _set_ma_id(self, v, load=False):
    """
    Setter method for ma_id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/ma_id (oc-cfm-types:name-key-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ma_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ma_id() directly.

    YANG Description: Key of the Maintenance Association list of entries.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-zA-Z\\-_.]*', 'length': ['1..255']}), is_leaf=True, yang_name="ma-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:name-key-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ma_id must be of a type compatible with oc-cfm-types:name-key-type""",
          'defined-type': "oc-cfm-types:name-key-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-zA-Z\\-_.]*', 'length': ['1..255']}), is_leaf=True, yang_name="ma-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:name-key-type', is_config=True)""",
        })

    self.__ma_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ma_id(self):
    self.__ma_id = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-zA-Z\\-_.]*', 'length': ['1..255']}), is_leaf=True, yang_name="ma-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:name-key-type', is_config=True)


  def _get_group_name(self):
    """
    Getter method for group_name, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/group_name (string)

    YANG Description: Optional Bridge Group or Cross-connect Group name, if
Service Type is BridgeDomain or
CrossConnect
    """
    return self.__group_name
      
  def _set_group_name(self, v, load=False):
    """
    Setter method for group_name, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/group_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_group_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_group_name() directly.

    YANG Description: Optional Bridge Group or Cross-connect Group name, if
Service Type is BridgeDomain or
CrossConnect
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """group_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)""",
        })

    self.__group_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_group_name(self):
    self.__group_name = YANGDynClass(base=str, is_leaf=True, yang_name="group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)


  def _get_ma_name_type(self):
    """
    Getter method for ma_name_type, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/ma_name_type (enumeration)

    YANG Description: Name type discriminator for the 'name' leaf.
    """
    return self.__ma_name_type
      
  def _set_ma_name_type(self, v, load=False):
    """
    Setter method for ma_name_type, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/ma_name_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ma_name_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ma_name_type() directly.

    YANG Description: Name type discriminator for the 'name' leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'PRIMARY_VID': {}, 'CHARACTER_STRING': {}, 'UINT16': {}, 'RFC2685_VPN_ID': {}},), is_leaf=True, yang_name="ma-name-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ma_name_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-oam-cfm:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'PRIMARY_VID': {}, 'CHARACTER_STRING': {}, 'UINT16': {}, 'RFC2685_VPN_ID': {}},), is_leaf=True, yang_name="ma-name-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)""",
        })

    self.__ma_name_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ma_name_type(self):
    self.__ma_name_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'PRIMARY_VID': {}, 'CHARACTER_STRING': {}, 'UINT16': {}, 'RFC2685_VPN_ID': {}},), is_leaf=True, yang_name="ma-name-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)


  def _get_primary_vid(self):
    """
    Getter method for primary_vid, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/primary_vid (oc-vlan-types:vlan-id)

    YANG Description: Primary VLAN ID. 12 bits represented in a 2-octet integer.
    """
    return self.__primary_vid
      
  def _set_primary_vid(self, v, load=False):
    """
    Setter method for primary_vid, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/primary_vid (oc-vlan-types:vlan-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_primary_vid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_primary_vid() directly.

    YANG Description: Primary VLAN ID. 12 bits represented in a 2-octet integer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['1..4094']}), is_leaf=True, yang_name="primary-vid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-vlan-types:vlan-id', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """primary_vid must be of a type compatible with oc-vlan-types:vlan-id""",
          'defined-type': "oc-vlan-types:vlan-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['1..4094']}), is_leaf=True, yang_name="primary-vid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-vlan-types:vlan-id', is_config=True)""",
        })

    self.__primary_vid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_primary_vid(self):
    self.__primary_vid = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['1..4094']}), is_leaf=True, yang_name="primary-vid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-vlan-types:vlan-id', is_config=True)


  def _get_char_string(self):
    """
    Getter method for char_string, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/char_string (string)

    YANG Description: RFC2579 DisplayString, except that the character codes 0-31
(decimal) are not used.
    """
    return self.__char_string
      
  def _set_char_string(self, v, load=False):
    """
    Setter method for char_string, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/char_string (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_char_string is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_char_string() directly.

    YANG Description: RFC2579 DisplayString, except that the character codes 0-31
(decimal) are not used.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[ -~]*', 'length': ['1..45']}), is_leaf=True, yang_name="char-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """char_string must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[ -~]*', 'length': ['1..45']}), is_leaf=True, yang_name="char-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)""",
        })

    self.__char_string = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_char_string(self):
    self.__char_string = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[ -~]*', 'length': ['1..45']}), is_leaf=True, yang_name="char-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)


  def _get_unsigned_int16(self):
    """
    Getter method for unsigned_int16, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/unsigned_int16 (uint16)

    YANG Description: 2-octet integer.
    """
    return self.__unsigned_int16
      
  def _set_unsigned_int16(self, v, load=False):
    """
    Setter method for unsigned_int16, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/unsigned_int16 (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unsigned_int16 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unsigned_int16() directly.

    YANG Description: 2-octet integer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="unsigned-int16", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unsigned_int16 must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="unsigned-int16", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)""",
        })

    self.__unsigned_int16 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unsigned_int16(self):
    self.__unsigned_int16 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="unsigned-int16", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)


  def _get_vpn_oui(self):
    """
    Getter method for vpn_oui, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/vpn_oui (uint32)

    YANG Description: RFC2685 VPN ID. 3 octet VPN authority Organizationally
 Unique Identifier followed by 4 octet VPN index identifying
 VPN according to the OUI. 3 octet VPN authority
 Organizationally Unique Identifier.
    """
    return self.__vpn_oui
      
  def _set_vpn_oui(self, v, load=False):
    """
    Setter method for vpn_oui, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/vpn_oui (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vpn_oui is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vpn_oui() directly.

    YANG Description: RFC2685 VPN ID. 3 octet VPN authority Organizationally
 Unique Identifier followed by 4 octet VPN index identifying
 VPN according to the OUI. 3 octet VPN authority
 Organizationally Unique Identifier.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..16777215']}), is_leaf=True, yang_name="vpn-oui", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vpn_oui must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..16777215']}), is_leaf=True, yang_name="vpn-oui", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)""",
        })

    self.__vpn_oui = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vpn_oui(self):
    self.__vpn_oui = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..16777215']}), is_leaf=True, yang_name="vpn-oui", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)


  def _get_vpn_index(self):
    """
    Getter method for vpn_index, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/vpn_index (uint32)

    YANG Description: RFC2685 VPN ID. 3 octet VPN authority Organizationally
Unique Identifier followed by 4 octet VPN index identifying
VPN according to the OUI.
vpn-index is a 4 octet index identifying VPNaccording to the OUI.
    """
    return self.__vpn_index
      
  def _set_vpn_index(self, v, load=False):
    """
    Setter method for vpn_index, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/vpn_index (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vpn_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vpn_index() directly.

    YANG Description: RFC2685 VPN ID. 3 octet VPN authority Organizationally
Unique Identifier followed by 4 octet VPN index identifying
VPN according to the OUI.
vpn-index is a 4 octet index identifying VPNaccording to the OUI.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vpn-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vpn_index must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vpn-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)""",
        })

    self.__vpn_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vpn_index(self):
    self.__vpn_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vpn-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)


  def _get_ccm_interval(self):
    """
    Getter method for ccm_interval, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/ccm_interval (enumeration)

    YANG Description: CCM transmission interval.
    """
    return self.__ccm_interval
      
  def _set_ccm_interval(self, v, load=False):
    """
    Setter method for ccm_interval, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/ccm_interval (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ccm_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ccm_interval() directly.

    YANG Description: CCM transmission interval.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'300MS': {}, '1S': {}, '10S': {}},), is_leaf=True, yang_name="ccm-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ccm_interval must be of a type compatible with enumeration""",
          'defined-type': "openconfig-oam-cfm:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'300MS': {}, '1S': {}, '10S': {}},), is_leaf=True, yang_name="ccm-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)""",
        })

    self.__ccm_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ccm_interval(self):
    self.__ccm_interval = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'300MS': {}, '1S': {}, '10S': {}},), is_leaf=True, yang_name="ccm-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)


  def _get_loss_threshold(self):
    """
    Getter method for loss_threshold, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/loss_threshold (uint16)

    YANG Description: number of consecutive loss frames to trigger a loss event.
    """
    return self.__loss_threshold
      
  def _set_loss_threshold(self, v, load=False):
    """
    Setter method for loss_threshold, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/loss_threshold (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_loss_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_loss_threshold() directly.

    YANG Description: number of consecutive loss frames to trigger a loss event.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="loss-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """loss_threshold must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="loss-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)""",
        })

    self.__loss_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_loss_threshold(self):
    self.__loss_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="loss-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)

  ma_id = __builtin__.property(_get_ma_id, _set_ma_id)
  group_name = __builtin__.property(_get_group_name, _set_group_name)
  ma_name_type = __builtin__.property(_get_ma_name_type, _set_ma_name_type)
  primary_vid = __builtin__.property(_get_primary_vid, _set_primary_vid)
  char_string = __builtin__.property(_get_char_string, _set_char_string)
  unsigned_int16 = __builtin__.property(_get_unsigned_int16, _set_unsigned_int16)
  vpn_oui = __builtin__.property(_get_vpn_oui, _set_vpn_oui)
  vpn_index = __builtin__.property(_get_vpn_index, _set_vpn_index)
  ccm_interval = __builtin__.property(_get_ccm_interval, _set_ccm_interval)
  loss_threshold = __builtin__.property(_get_loss_threshold, _set_loss_threshold)


  _pyangbind_elements = OrderedDict([('ma_id', ma_id), ('group_name', group_name), ('ma_name_type', ma_name_type), ('primary_vid', primary_vid), ('char_string', char_string), ('unsigned_int16', unsigned_int16), ('vpn_oui', vpn_oui), ('vpn_index', vpn_index), ('ccm_interval', ccm_interval), ('loss_threshold', loss_threshold), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for a maintenance association.
  """
  __slots__ = ('_path_helper', '_extmethods', '__ma_id','__group_name','__ma_name_type','__primary_vid','__char_string','__unsigned_int16','__vpn_oui','__vpn_index','__ccm_interval','__loss_threshold',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ma_id = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-zA-Z\\-_.]*', 'length': ['1..255']}), is_leaf=True, yang_name="ma-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:name-key-type', is_config=True)
    self.__group_name = YANGDynClass(base=str, is_leaf=True, yang_name="group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)
    self.__ma_name_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'PRIMARY_VID': {}, 'CHARACTER_STRING': {}, 'UINT16': {}, 'RFC2685_VPN_ID': {}},), is_leaf=True, yang_name="ma-name-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    self.__primary_vid = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['1..4094']}), is_leaf=True, yang_name="primary-vid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-vlan-types:vlan-id', is_config=True)
    self.__char_string = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[ -~]*', 'length': ['1..45']}), is_leaf=True, yang_name="char-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)
    self.__unsigned_int16 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="unsigned-int16", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    self.__vpn_oui = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..16777215']}), is_leaf=True, yang_name="vpn-oui", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    self.__vpn_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vpn-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    self.__ccm_interval = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'300MS': {}, '1S': {}, '10S': {}},), is_leaf=True, yang_name="ccm-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    self.__loss_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="loss-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'domains', 'maintenance-domain', 'maintenance-associations', 'maintenance-association', 'config']

  def _get_ma_id(self):
    """
    Getter method for ma_id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/ma_id (oc-cfm-types:name-key-type)

    YANG Description: Key of the Maintenance Association list of entries.
    """
    return self.__ma_id
      
  def _set_ma_id(self, v, load=False):
    """
    Setter method for ma_id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/ma_id (oc-cfm-types:name-key-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ma_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ma_id() directly.

    YANG Description: Key of the Maintenance Association list of entries.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-zA-Z\\-_.]*', 'length': ['1..255']}), is_leaf=True, yang_name="ma-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:name-key-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ma_id must be of a type compatible with oc-cfm-types:name-key-type""",
          'defined-type': "oc-cfm-types:name-key-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-zA-Z\\-_.]*', 'length': ['1..255']}), is_leaf=True, yang_name="ma-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:name-key-type', is_config=True)""",
        })

    self.__ma_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ma_id(self):
    self.__ma_id = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-zA-Z\\-_.]*', 'length': ['1..255']}), is_leaf=True, yang_name="ma-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:name-key-type', is_config=True)


  def _get_group_name(self):
    """
    Getter method for group_name, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/group_name (string)

    YANG Description: Optional Bridge Group or Cross-connect Group name, if
Service Type is BridgeDomain or
CrossConnect
    """
    return self.__group_name
      
  def _set_group_name(self, v, load=False):
    """
    Setter method for group_name, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/group_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_group_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_group_name() directly.

    YANG Description: Optional Bridge Group or Cross-connect Group name, if
Service Type is BridgeDomain or
CrossConnect
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """group_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)""",
        })

    self.__group_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_group_name(self):
    self.__group_name = YANGDynClass(base=str, is_leaf=True, yang_name="group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)


  def _get_ma_name_type(self):
    """
    Getter method for ma_name_type, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/ma_name_type (enumeration)

    YANG Description: Name type discriminator for the 'name' leaf.
    """
    return self.__ma_name_type
      
  def _set_ma_name_type(self, v, load=False):
    """
    Setter method for ma_name_type, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/ma_name_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ma_name_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ma_name_type() directly.

    YANG Description: Name type discriminator for the 'name' leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'PRIMARY_VID': {}, 'CHARACTER_STRING': {}, 'UINT16': {}, 'RFC2685_VPN_ID': {}},), is_leaf=True, yang_name="ma-name-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ma_name_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-oam-cfm:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'PRIMARY_VID': {}, 'CHARACTER_STRING': {}, 'UINT16': {}, 'RFC2685_VPN_ID': {}},), is_leaf=True, yang_name="ma-name-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)""",
        })

    self.__ma_name_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ma_name_type(self):
    self.__ma_name_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'PRIMARY_VID': {}, 'CHARACTER_STRING': {}, 'UINT16': {}, 'RFC2685_VPN_ID': {}},), is_leaf=True, yang_name="ma-name-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)


  def _get_primary_vid(self):
    """
    Getter method for primary_vid, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/primary_vid (oc-vlan-types:vlan-id)

    YANG Description: Primary VLAN ID. 12 bits represented in a 2-octet integer.
    """
    return self.__primary_vid
      
  def _set_primary_vid(self, v, load=False):
    """
    Setter method for primary_vid, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/primary_vid (oc-vlan-types:vlan-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_primary_vid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_primary_vid() directly.

    YANG Description: Primary VLAN ID. 12 bits represented in a 2-octet integer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['1..4094']}), is_leaf=True, yang_name="primary-vid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-vlan-types:vlan-id', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """primary_vid must be of a type compatible with oc-vlan-types:vlan-id""",
          'defined-type': "oc-vlan-types:vlan-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['1..4094']}), is_leaf=True, yang_name="primary-vid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-vlan-types:vlan-id', is_config=True)""",
        })

    self.__primary_vid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_primary_vid(self):
    self.__primary_vid = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['1..4094']}), is_leaf=True, yang_name="primary-vid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-vlan-types:vlan-id', is_config=True)


  def _get_char_string(self):
    """
    Getter method for char_string, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/char_string (string)

    YANG Description: RFC2579 DisplayString, except that the character codes 0-31
(decimal) are not used.
    """
    return self.__char_string
      
  def _set_char_string(self, v, load=False):
    """
    Setter method for char_string, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/char_string (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_char_string is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_char_string() directly.

    YANG Description: RFC2579 DisplayString, except that the character codes 0-31
(decimal) are not used.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[ -~]*', 'length': ['1..45']}), is_leaf=True, yang_name="char-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """char_string must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[ -~]*', 'length': ['1..45']}), is_leaf=True, yang_name="char-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)""",
        })

    self.__char_string = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_char_string(self):
    self.__char_string = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[ -~]*', 'length': ['1..45']}), is_leaf=True, yang_name="char-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)


  def _get_unsigned_int16(self):
    """
    Getter method for unsigned_int16, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/unsigned_int16 (uint16)

    YANG Description: 2-octet integer.
    """
    return self.__unsigned_int16
      
  def _set_unsigned_int16(self, v, load=False):
    """
    Setter method for unsigned_int16, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/unsigned_int16 (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unsigned_int16 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unsigned_int16() directly.

    YANG Description: 2-octet integer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="unsigned-int16", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unsigned_int16 must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="unsigned-int16", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)""",
        })

    self.__unsigned_int16 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unsigned_int16(self):
    self.__unsigned_int16 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="unsigned-int16", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)


  def _get_vpn_oui(self):
    """
    Getter method for vpn_oui, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/vpn_oui (uint32)

    YANG Description: RFC2685 VPN ID. 3 octet VPN authority Organizationally
 Unique Identifier followed by 4 octet VPN index identifying
 VPN according to the OUI. 3 octet VPN authority
 Organizationally Unique Identifier.
    """
    return self.__vpn_oui
      
  def _set_vpn_oui(self, v, load=False):
    """
    Setter method for vpn_oui, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/vpn_oui (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vpn_oui is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vpn_oui() directly.

    YANG Description: RFC2685 VPN ID. 3 octet VPN authority Organizationally
 Unique Identifier followed by 4 octet VPN index identifying
 VPN according to the OUI. 3 octet VPN authority
 Organizationally Unique Identifier.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..16777215']}), is_leaf=True, yang_name="vpn-oui", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vpn_oui must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..16777215']}), is_leaf=True, yang_name="vpn-oui", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)""",
        })

    self.__vpn_oui = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vpn_oui(self):
    self.__vpn_oui = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..16777215']}), is_leaf=True, yang_name="vpn-oui", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)


  def _get_vpn_index(self):
    """
    Getter method for vpn_index, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/vpn_index (uint32)

    YANG Description: RFC2685 VPN ID. 3 octet VPN authority Organizationally
Unique Identifier followed by 4 octet VPN index identifying
VPN according to the OUI.
vpn-index is a 4 octet index identifying VPNaccording to the OUI.
    """
    return self.__vpn_index
      
  def _set_vpn_index(self, v, load=False):
    """
    Setter method for vpn_index, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/vpn_index (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vpn_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vpn_index() directly.

    YANG Description: RFC2685 VPN ID. 3 octet VPN authority Organizationally
Unique Identifier followed by 4 octet VPN index identifying
VPN according to the OUI.
vpn-index is a 4 octet index identifying VPNaccording to the OUI.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vpn-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vpn_index must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vpn-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)""",
        })

    self.__vpn_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vpn_index(self):
    self.__vpn_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vpn-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)


  def _get_ccm_interval(self):
    """
    Getter method for ccm_interval, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/ccm_interval (enumeration)

    YANG Description: CCM transmission interval.
    """
    return self.__ccm_interval
      
  def _set_ccm_interval(self, v, load=False):
    """
    Setter method for ccm_interval, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/ccm_interval (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ccm_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ccm_interval() directly.

    YANG Description: CCM transmission interval.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'300MS': {}, '1S': {}, '10S': {}},), is_leaf=True, yang_name="ccm-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ccm_interval must be of a type compatible with enumeration""",
          'defined-type': "openconfig-oam-cfm:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'300MS': {}, '1S': {}, '10S': {}},), is_leaf=True, yang_name="ccm-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)""",
        })

    self.__ccm_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ccm_interval(self):
    self.__ccm_interval = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'300MS': {}, '1S': {}, '10S': {}},), is_leaf=True, yang_name="ccm-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)


  def _get_loss_threshold(self):
    """
    Getter method for loss_threshold, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/loss_threshold (uint16)

    YANG Description: number of consecutive loss frames to trigger a loss event.
    """
    return self.__loss_threshold
      
  def _set_loss_threshold(self, v, load=False):
    """
    Setter method for loss_threshold, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/config/loss_threshold (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_loss_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_loss_threshold() directly.

    YANG Description: number of consecutive loss frames to trigger a loss event.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="loss-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """loss_threshold must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="loss-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)""",
        })

    self.__loss_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_loss_threshold(self):
    self.__loss_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="loss-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)

  ma_id = __builtin__.property(_get_ma_id, _set_ma_id)
  group_name = __builtin__.property(_get_group_name, _set_group_name)
  ma_name_type = __builtin__.property(_get_ma_name_type, _set_ma_name_type)
  primary_vid = __builtin__.property(_get_primary_vid, _set_primary_vid)
  char_string = __builtin__.property(_get_char_string, _set_char_string)
  unsigned_int16 = __builtin__.property(_get_unsigned_int16, _set_unsigned_int16)
  vpn_oui = __builtin__.property(_get_vpn_oui, _set_vpn_oui)
  vpn_index = __builtin__.property(_get_vpn_index, _set_vpn_index)
  ccm_interval = __builtin__.property(_get_ccm_interval, _set_ccm_interval)
  loss_threshold = __builtin__.property(_get_loss_threshold, _set_loss_threshold)


  _pyangbind_elements = OrderedDict([('ma_id', ma_id), ('group_name', group_name), ('ma_name_type', ma_name_type), ('primary_vid', primary_vid), ('char_string', char_string), ('unsigned_int16', unsigned_int16), ('vpn_oui', vpn_oui), ('vpn_index', vpn_index), ('ccm_interval', ccm_interval), ('loss_threshold', loss_threshold), ])


