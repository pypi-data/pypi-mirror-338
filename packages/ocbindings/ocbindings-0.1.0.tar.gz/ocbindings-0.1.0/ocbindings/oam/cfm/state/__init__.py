# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational data for CFM.
  """
  __slots__ = ('_path_helper', '_extmethods', '__local_meps','__local_meps_operational','__cfm_domains','__cfm_services','__down_meps','__up_meps','__disabled_misconfigured','__disabled_operational_errors','__disabled_out_of_resources','__peer_meps','__operational_peer_meps','__peer_meps_with_defects','__peer_meps_timed_out',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__local_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__local_meps_operational = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-meps-operational", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__cfm_domains = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cfm-domains", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__cfm_services = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cfm-services", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__down_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="down-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__up_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="up-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__disabled_misconfigured = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-misconfigured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__disabled_operational_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-operational-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__disabled_out_of_resources = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-out-of-resources", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__peer_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__operational_peer_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="operational-peer-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__peer_meps_with_defects = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps-with-defects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__peer_meps_timed_out = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps-timed-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'state']

  def _get_local_meps(self):
    """
    Getter method for local_meps, mapped from YANG variable /oam/cfm/state/local_meps (uint32)

    YANG Description: The total number of local-meps configured on the local system.
    """
    return self.__local_meps
      
  def _set_local_meps(self, v, load=False):
    """
    Setter method for local_meps, mapped from YANG variable /oam/cfm/state/local_meps (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_meps is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_meps() directly.

    YANG Description: The total number of local-meps configured on the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_meps must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__local_meps = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_meps(self):
    self.__local_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_local_meps_operational(self):
    """
    Getter method for local_meps_operational, mapped from YANG variable /oam/cfm/state/local_meps_operational (uint32)

    YANG Description: The total number of local-meps operational on the local system.
    """
    return self.__local_meps_operational
      
  def _set_local_meps_operational(self, v, load=False):
    """
    Setter method for local_meps_operational, mapped from YANG variable /oam/cfm/state/local_meps_operational (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_meps_operational is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_meps_operational() directly.

    YANG Description: The total number of local-meps operational on the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-meps-operational", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_meps_operational must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-meps-operational", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__local_meps_operational = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_meps_operational(self):
    self.__local_meps_operational = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-meps-operational", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_cfm_domains(self):
    """
    Getter method for cfm_domains, mapped from YANG variable /oam/cfm/state/cfm_domains (uint32)

    YANG Description: The total number cfm domains configured on the local system.
    """
    return self.__cfm_domains
      
  def _set_cfm_domains(self, v, load=False):
    """
    Setter method for cfm_domains, mapped from YANG variable /oam/cfm/state/cfm_domains (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cfm_domains is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cfm_domains() directly.

    YANG Description: The total number cfm domains configured on the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cfm-domains", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cfm_domains must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cfm-domains", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__cfm_domains = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cfm_domains(self):
    self.__cfm_domains = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cfm-domains", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_cfm_services(self):
    """
    Getter method for cfm_services, mapped from YANG variable /oam/cfm/state/cfm_services (uint32)

    YANG Description: The total number cfm services configured on the local system.
    """
    return self.__cfm_services
      
  def _set_cfm_services(self, v, load=False):
    """
    Setter method for cfm_services, mapped from YANG variable /oam/cfm/state/cfm_services (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cfm_services is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cfm_services() directly.

    YANG Description: The total number cfm services configured on the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cfm-services", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cfm_services must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cfm-services", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__cfm_services = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cfm_services(self):
    self.__cfm_services = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cfm-services", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_down_meps(self):
    """
    Getter method for down_meps, mapped from YANG variable /oam/cfm/state/down_meps (uint32)

    YANG Description: The total number cfm down meps configured on the local system.
    """
    return self.__down_meps
      
  def _set_down_meps(self, v, load=False):
    """
    Setter method for down_meps, mapped from YANG variable /oam/cfm/state/down_meps (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_down_meps is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_down_meps() directly.

    YANG Description: The total number cfm down meps configured on the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="down-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """down_meps must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="down-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__down_meps = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_down_meps(self):
    self.__down_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="down-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_up_meps(self):
    """
    Getter method for up_meps, mapped from YANG variable /oam/cfm/state/up_meps (uint32)

    YANG Description: The total number cfm down meps configured on the local system.
    """
    return self.__up_meps
      
  def _set_up_meps(self, v, load=False):
    """
    Setter method for up_meps, mapped from YANG variable /oam/cfm/state/up_meps (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_up_meps is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_up_meps() directly.

    YANG Description: The total number cfm down meps configured on the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="up-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """up_meps must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="up-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__up_meps = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_up_meps(self):
    self.__up_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="up-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_disabled_misconfigured(self):
    """
    Getter method for disabled_misconfigured, mapped from YANG variable /oam/cfm/state/disabled_misconfigured (uint32)

    YANG Description: The total number of disabled cfm  down meps configured on the local system.
    """
    return self.__disabled_misconfigured
      
  def _set_disabled_misconfigured(self, v, load=False):
    """
    Setter method for disabled_misconfigured, mapped from YANG variable /oam/cfm/state/disabled_misconfigured (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_disabled_misconfigured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_disabled_misconfigured() directly.

    YANG Description: The total number of disabled cfm  down meps configured on the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-misconfigured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """disabled_misconfigured must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-misconfigured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__disabled_misconfigured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_disabled_misconfigured(self):
    self.__disabled_misconfigured = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-misconfigured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_disabled_operational_errors(self):
    """
    Getter method for disabled_operational_errors, mapped from YANG variable /oam/cfm/state/disabled_operational_errors (uint32)

    YANG Description: The total number cfm operational errors on the local system.
    """
    return self.__disabled_operational_errors
      
  def _set_disabled_operational_errors(self, v, load=False):
    """
    Setter method for disabled_operational_errors, mapped from YANG variable /oam/cfm/state/disabled_operational_errors (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_disabled_operational_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_disabled_operational_errors() directly.

    YANG Description: The total number cfm operational errors on the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-operational-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """disabled_operational_errors must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-operational-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__disabled_operational_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_disabled_operational_errors(self):
    self.__disabled_operational_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-operational-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_disabled_out_of_resources(self):
    """
    Getter method for disabled_out_of_resources, mapped from YANG variable /oam/cfm/state/disabled_out_of_resources (uint32)

    YANG Description: The total number cfm endpoints disabled due to lack of resources on the local system.
    """
    return self.__disabled_out_of_resources
      
  def _set_disabled_out_of_resources(self, v, load=False):
    """
    Setter method for disabled_out_of_resources, mapped from YANG variable /oam/cfm/state/disabled_out_of_resources (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_disabled_out_of_resources is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_disabled_out_of_resources() directly.

    YANG Description: The total number cfm endpoints disabled due to lack of resources on the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-out-of-resources", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """disabled_out_of_resources must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-out-of-resources", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__disabled_out_of_resources = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_disabled_out_of_resources(self):
    self.__disabled_out_of_resources = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-out-of-resources", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_peer_meps(self):
    """
    Getter method for peer_meps, mapped from YANG variable /oam/cfm/state/peer_meps (uint32)

    YANG Description: The total number cfm peer meps configured.
    """
    return self.__peer_meps
      
  def _set_peer_meps(self, v, load=False):
    """
    Setter method for peer_meps, mapped from YANG variable /oam/cfm/state/peer_meps (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_meps is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_meps() directly.

    YANG Description: The total number cfm peer meps configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_meps must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__peer_meps = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_meps(self):
    self.__peer_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_operational_peer_meps(self):
    """
    Getter method for operational_peer_meps, mapped from YANG variable /oam/cfm/state/operational_peer_meps (uint32)

    YANG Description: The total number cfm peer meps operational.
    """
    return self.__operational_peer_meps
      
  def _set_operational_peer_meps(self, v, load=False):
    """
    Setter method for operational_peer_meps, mapped from YANG variable /oam/cfm/state/operational_peer_meps (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_operational_peer_meps is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_operational_peer_meps() directly.

    YANG Description: The total number cfm peer meps operational.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="operational-peer-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """operational_peer_meps must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="operational-peer-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__operational_peer_meps = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_operational_peer_meps(self):
    self.__operational_peer_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="operational-peer-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_peer_meps_with_defects(self):
    """
    Getter method for peer_meps_with_defects, mapped from YANG variable /oam/cfm/state/peer_meps_with_defects (uint32)

    YANG Description: The total number cfm peer meps with defects.
    """
    return self.__peer_meps_with_defects
      
  def _set_peer_meps_with_defects(self, v, load=False):
    """
    Setter method for peer_meps_with_defects, mapped from YANG variable /oam/cfm/state/peer_meps_with_defects (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_meps_with_defects is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_meps_with_defects() directly.

    YANG Description: The total number cfm peer meps with defects.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps-with-defects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_meps_with_defects must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps-with-defects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__peer_meps_with_defects = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_meps_with_defects(self):
    self.__peer_meps_with_defects = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps-with-defects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_peer_meps_timed_out(self):
    """
    Getter method for peer_meps_timed_out, mapped from YANG variable /oam/cfm/state/peer_meps_timed_out (uint32)

    YANG Description: The total number cfm peer meps timed out.
    """
    return self.__peer_meps_timed_out
      
  def _set_peer_meps_timed_out(self, v, load=False):
    """
    Setter method for peer_meps_timed_out, mapped from YANG variable /oam/cfm/state/peer_meps_timed_out (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_meps_timed_out is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_meps_timed_out() directly.

    YANG Description: The total number cfm peer meps timed out.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps-timed-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_meps_timed_out must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps-timed-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__peer_meps_timed_out = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_meps_timed_out(self):
    self.__peer_meps_timed_out = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps-timed-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)

  local_meps = __builtin__.property(_get_local_meps)
  local_meps_operational = __builtin__.property(_get_local_meps_operational)
  cfm_domains = __builtin__.property(_get_cfm_domains)
  cfm_services = __builtin__.property(_get_cfm_services)
  down_meps = __builtin__.property(_get_down_meps)
  up_meps = __builtin__.property(_get_up_meps)
  disabled_misconfigured = __builtin__.property(_get_disabled_misconfigured)
  disabled_operational_errors = __builtin__.property(_get_disabled_operational_errors)
  disabled_out_of_resources = __builtin__.property(_get_disabled_out_of_resources)
  peer_meps = __builtin__.property(_get_peer_meps)
  operational_peer_meps = __builtin__.property(_get_operational_peer_meps)
  peer_meps_with_defects = __builtin__.property(_get_peer_meps_with_defects)
  peer_meps_timed_out = __builtin__.property(_get_peer_meps_timed_out)


  _pyangbind_elements = OrderedDict([('local_meps', local_meps), ('local_meps_operational', local_meps_operational), ('cfm_domains', cfm_domains), ('cfm_services', cfm_services), ('down_meps', down_meps), ('up_meps', up_meps), ('disabled_misconfigured', disabled_misconfigured), ('disabled_operational_errors', disabled_operational_errors), ('disabled_out_of_resources', disabled_out_of_resources), ('peer_meps', peer_meps), ('operational_peer_meps', operational_peer_meps), ('peer_meps_with_defects', peer_meps_with_defects), ('peer_meps_timed_out', peer_meps_timed_out), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational data for CFM.
  """
  __slots__ = ('_path_helper', '_extmethods', '__local_meps','__local_meps_operational','__cfm_domains','__cfm_services','__down_meps','__up_meps','__disabled_misconfigured','__disabled_operational_errors','__disabled_out_of_resources','__peer_meps','__operational_peer_meps','__peer_meps_with_defects','__peer_meps_timed_out',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__local_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__local_meps_operational = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-meps-operational", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__cfm_domains = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cfm-domains", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__cfm_services = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cfm-services", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__down_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="down-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__up_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="up-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__disabled_misconfigured = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-misconfigured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__disabled_operational_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-operational-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__disabled_out_of_resources = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-out-of-resources", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__peer_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__operational_peer_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="operational-peer-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__peer_meps_with_defects = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps-with-defects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__peer_meps_timed_out = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps-timed-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'state']

  def _get_local_meps(self):
    """
    Getter method for local_meps, mapped from YANG variable /oam/cfm/state/local_meps (uint32)

    YANG Description: The total number of local-meps configured on the local system.
    """
    return self.__local_meps
      
  def _set_local_meps(self, v, load=False):
    """
    Setter method for local_meps, mapped from YANG variable /oam/cfm/state/local_meps (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_meps is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_meps() directly.

    YANG Description: The total number of local-meps configured on the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_meps must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__local_meps = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_meps(self):
    self.__local_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_local_meps_operational(self):
    """
    Getter method for local_meps_operational, mapped from YANG variable /oam/cfm/state/local_meps_operational (uint32)

    YANG Description: The total number of local-meps operational on the local system.
    """
    return self.__local_meps_operational
      
  def _set_local_meps_operational(self, v, load=False):
    """
    Setter method for local_meps_operational, mapped from YANG variable /oam/cfm/state/local_meps_operational (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_meps_operational is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_meps_operational() directly.

    YANG Description: The total number of local-meps operational on the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-meps-operational", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_meps_operational must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-meps-operational", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__local_meps_operational = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_meps_operational(self):
    self.__local_meps_operational = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-meps-operational", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_cfm_domains(self):
    """
    Getter method for cfm_domains, mapped from YANG variable /oam/cfm/state/cfm_domains (uint32)

    YANG Description: The total number cfm domains configured on the local system.
    """
    return self.__cfm_domains
      
  def _set_cfm_domains(self, v, load=False):
    """
    Setter method for cfm_domains, mapped from YANG variable /oam/cfm/state/cfm_domains (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cfm_domains is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cfm_domains() directly.

    YANG Description: The total number cfm domains configured on the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cfm-domains", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cfm_domains must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cfm-domains", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__cfm_domains = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cfm_domains(self):
    self.__cfm_domains = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cfm-domains", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_cfm_services(self):
    """
    Getter method for cfm_services, mapped from YANG variable /oam/cfm/state/cfm_services (uint32)

    YANG Description: The total number cfm services configured on the local system.
    """
    return self.__cfm_services
      
  def _set_cfm_services(self, v, load=False):
    """
    Setter method for cfm_services, mapped from YANG variable /oam/cfm/state/cfm_services (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cfm_services is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cfm_services() directly.

    YANG Description: The total number cfm services configured on the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cfm-services", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cfm_services must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cfm-services", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__cfm_services = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cfm_services(self):
    self.__cfm_services = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cfm-services", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_down_meps(self):
    """
    Getter method for down_meps, mapped from YANG variable /oam/cfm/state/down_meps (uint32)

    YANG Description: The total number cfm down meps configured on the local system.
    """
    return self.__down_meps
      
  def _set_down_meps(self, v, load=False):
    """
    Setter method for down_meps, mapped from YANG variable /oam/cfm/state/down_meps (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_down_meps is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_down_meps() directly.

    YANG Description: The total number cfm down meps configured on the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="down-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """down_meps must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="down-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__down_meps = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_down_meps(self):
    self.__down_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="down-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_up_meps(self):
    """
    Getter method for up_meps, mapped from YANG variable /oam/cfm/state/up_meps (uint32)

    YANG Description: The total number cfm down meps configured on the local system.
    """
    return self.__up_meps
      
  def _set_up_meps(self, v, load=False):
    """
    Setter method for up_meps, mapped from YANG variable /oam/cfm/state/up_meps (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_up_meps is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_up_meps() directly.

    YANG Description: The total number cfm down meps configured on the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="up-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """up_meps must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="up-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__up_meps = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_up_meps(self):
    self.__up_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="up-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_disabled_misconfigured(self):
    """
    Getter method for disabled_misconfigured, mapped from YANG variable /oam/cfm/state/disabled_misconfigured (uint32)

    YANG Description: The total number of disabled cfm  down meps configured on the local system.
    """
    return self.__disabled_misconfigured
      
  def _set_disabled_misconfigured(self, v, load=False):
    """
    Setter method for disabled_misconfigured, mapped from YANG variable /oam/cfm/state/disabled_misconfigured (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_disabled_misconfigured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_disabled_misconfigured() directly.

    YANG Description: The total number of disabled cfm  down meps configured on the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-misconfigured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """disabled_misconfigured must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-misconfigured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__disabled_misconfigured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_disabled_misconfigured(self):
    self.__disabled_misconfigured = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-misconfigured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_disabled_operational_errors(self):
    """
    Getter method for disabled_operational_errors, mapped from YANG variable /oam/cfm/state/disabled_operational_errors (uint32)

    YANG Description: The total number cfm operational errors on the local system.
    """
    return self.__disabled_operational_errors
      
  def _set_disabled_operational_errors(self, v, load=False):
    """
    Setter method for disabled_operational_errors, mapped from YANG variable /oam/cfm/state/disabled_operational_errors (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_disabled_operational_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_disabled_operational_errors() directly.

    YANG Description: The total number cfm operational errors on the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-operational-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """disabled_operational_errors must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-operational-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__disabled_operational_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_disabled_operational_errors(self):
    self.__disabled_operational_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-operational-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_disabled_out_of_resources(self):
    """
    Getter method for disabled_out_of_resources, mapped from YANG variable /oam/cfm/state/disabled_out_of_resources (uint32)

    YANG Description: The total number cfm endpoints disabled due to lack of resources on the local system.
    """
    return self.__disabled_out_of_resources
      
  def _set_disabled_out_of_resources(self, v, load=False):
    """
    Setter method for disabled_out_of_resources, mapped from YANG variable /oam/cfm/state/disabled_out_of_resources (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_disabled_out_of_resources is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_disabled_out_of_resources() directly.

    YANG Description: The total number cfm endpoints disabled due to lack of resources on the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-out-of-resources", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """disabled_out_of_resources must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-out-of-resources", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__disabled_out_of_resources = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_disabled_out_of_resources(self):
    self.__disabled_out_of_resources = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="disabled-out-of-resources", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_peer_meps(self):
    """
    Getter method for peer_meps, mapped from YANG variable /oam/cfm/state/peer_meps (uint32)

    YANG Description: The total number cfm peer meps configured.
    """
    return self.__peer_meps
      
  def _set_peer_meps(self, v, load=False):
    """
    Setter method for peer_meps, mapped from YANG variable /oam/cfm/state/peer_meps (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_meps is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_meps() directly.

    YANG Description: The total number cfm peer meps configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_meps must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__peer_meps = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_meps(self):
    self.__peer_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_operational_peer_meps(self):
    """
    Getter method for operational_peer_meps, mapped from YANG variable /oam/cfm/state/operational_peer_meps (uint32)

    YANG Description: The total number cfm peer meps operational.
    """
    return self.__operational_peer_meps
      
  def _set_operational_peer_meps(self, v, load=False):
    """
    Setter method for operational_peer_meps, mapped from YANG variable /oam/cfm/state/operational_peer_meps (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_operational_peer_meps is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_operational_peer_meps() directly.

    YANG Description: The total number cfm peer meps operational.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="operational-peer-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """operational_peer_meps must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="operational-peer-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__operational_peer_meps = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_operational_peer_meps(self):
    self.__operational_peer_meps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="operational-peer-meps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_peer_meps_with_defects(self):
    """
    Getter method for peer_meps_with_defects, mapped from YANG variable /oam/cfm/state/peer_meps_with_defects (uint32)

    YANG Description: The total number cfm peer meps with defects.
    """
    return self.__peer_meps_with_defects
      
  def _set_peer_meps_with_defects(self, v, load=False):
    """
    Setter method for peer_meps_with_defects, mapped from YANG variable /oam/cfm/state/peer_meps_with_defects (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_meps_with_defects is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_meps_with_defects() directly.

    YANG Description: The total number cfm peer meps with defects.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps-with-defects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_meps_with_defects must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps-with-defects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__peer_meps_with_defects = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_meps_with_defects(self):
    self.__peer_meps_with_defects = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps-with-defects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_peer_meps_timed_out(self):
    """
    Getter method for peer_meps_timed_out, mapped from YANG variable /oam/cfm/state/peer_meps_timed_out (uint32)

    YANG Description: The total number cfm peer meps timed out.
    """
    return self.__peer_meps_timed_out
      
  def _set_peer_meps_timed_out(self, v, load=False):
    """
    Setter method for peer_meps_timed_out, mapped from YANG variable /oam/cfm/state/peer_meps_timed_out (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_meps_timed_out is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_meps_timed_out() directly.

    YANG Description: The total number cfm peer meps timed out.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps-timed-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_meps_timed_out must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps-timed-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__peer_meps_timed_out = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_meps_timed_out(self):
    self.__peer_meps_timed_out = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-meps-timed-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)

  local_meps = __builtin__.property(_get_local_meps)
  local_meps_operational = __builtin__.property(_get_local_meps_operational)
  cfm_domains = __builtin__.property(_get_cfm_domains)
  cfm_services = __builtin__.property(_get_cfm_services)
  down_meps = __builtin__.property(_get_down_meps)
  up_meps = __builtin__.property(_get_up_meps)
  disabled_misconfigured = __builtin__.property(_get_disabled_misconfigured)
  disabled_operational_errors = __builtin__.property(_get_disabled_operational_errors)
  disabled_out_of_resources = __builtin__.property(_get_disabled_out_of_resources)
  peer_meps = __builtin__.property(_get_peer_meps)
  operational_peer_meps = __builtin__.property(_get_operational_peer_meps)
  peer_meps_with_defects = __builtin__.property(_get_peer_meps_with_defects)
  peer_meps_timed_out = __builtin__.property(_get_peer_meps_timed_out)


  _pyangbind_elements = OrderedDict([('local_meps', local_meps), ('local_meps_operational', local_meps_operational), ('cfm_domains', cfm_domains), ('cfm_services', cfm_services), ('down_meps', down_meps), ('up_meps', up_meps), ('disabled_misconfigured', disabled_misconfigured), ('disabled_operational_errors', disabled_operational_errors), ('disabled_out_of_resources', disabled_out_of_resources), ('peer_meps', peer_meps), ('operational_peer_meps', operational_peer_meps), ('peer_meps_with_defects', peer_meps_with_defects), ('peer_meps_timed_out', peer_meps_timed_out), ])


