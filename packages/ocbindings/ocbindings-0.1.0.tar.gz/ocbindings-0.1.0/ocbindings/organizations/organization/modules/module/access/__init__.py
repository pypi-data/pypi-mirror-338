# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class access(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-module-catalog - based on the path /organizations/organization/modules/module/access. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Container for data pertaining to retrieval and usage of the
module
  """
  __slots__ = ('_path_helper', '_extmethods', '__uri','__md5_hash',)

  _yang_name = 'access'
  _yang_namespace = 'http://openconfig.net/yang/module-catalog'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__uri = YANGDynClass(base=str, is_leaf=True, yang_name="uri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/module-catalog', defining_module='openconfig-module-catalog', yang_type='oc-inet:uri', is_config=True)
    self.__md5_hash = YANGDynClass(base=str, is_leaf=True, yang_name="md5-hash", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/module-catalog', defining_module='openconfig-module-catalog', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['organizations', 'organization', 'modules', 'module', 'access']

  def _get_uri(self):
    """
    Getter method for uri, mapped from YANG variable /organizations/organization/modules/module/access/uri (oc-inet:uri)

    YANG Description: URI where module can be downloaded.  Modules may be
made available from the catalog maintainer, or directly
from the publisher
    """
    return self.__uri
      
  def _set_uri(self, v, load=False):
    """
    Setter method for uri, mapped from YANG variable /organizations/organization/modules/module/access/uri (oc-inet:uri)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uri is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uri() directly.

    YANG Description: URI where module can be downloaded.  Modules may be
made available from the catalog maintainer, or directly
from the publisher
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="uri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/module-catalog', defining_module='openconfig-module-catalog', yang_type='oc-inet:uri', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uri must be of a type compatible with oc-inet:uri""",
          'defined-type': "oc-inet:uri",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="uri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/module-catalog', defining_module='openconfig-module-catalog', yang_type='oc-inet:uri', is_config=True)""",
        })

    self.__uri = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uri(self):
    self.__uri = YANGDynClass(base=str, is_leaf=True, yang_name="uri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/module-catalog', defining_module='openconfig-module-catalog', yang_type='oc-inet:uri', is_config=True)


  def _get_md5_hash(self):
    """
    Getter method for md5_hash, mapped from YANG variable /organizations/organization/modules/module/access/md5_hash (string)

    YANG Description: Optional MD5 hash of the module file.  If specified, the
hash may be used by users to validate data integrity
    """
    return self.__md5_hash
      
  def _set_md5_hash(self, v, load=False):
    """
    Setter method for md5_hash, mapped from YANG variable /organizations/organization/modules/module/access/md5_hash (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_md5_hash is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_md5_hash() directly.

    YANG Description: Optional MD5 hash of the module file.  If specified, the
hash may be used by users to validate data integrity
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="md5-hash", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/module-catalog', defining_module='openconfig-module-catalog', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """md5_hash must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="md5-hash", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/module-catalog', defining_module='openconfig-module-catalog', yang_type='string', is_config=True)""",
        })

    self.__md5_hash = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_md5_hash(self):
    self.__md5_hash = YANGDynClass(base=str, is_leaf=True, yang_name="md5-hash", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/module-catalog', defining_module='openconfig-module-catalog', yang_type='string', is_config=True)

  uri = __builtin__.property(_get_uri, _set_uri)
  md5_hash = __builtin__.property(_get_md5_hash, _set_md5_hash)


  _pyangbind_elements = OrderedDict([('uri', uri), ('md5_hash', md5_hash), ])


class access(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-module-catalog - based on the path /organizations/organization/modules/module/access. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Container for data pertaining to retrieval and usage of the
module
  """
  __slots__ = ('_path_helper', '_extmethods', '__uri','__md5_hash',)

  _yang_name = 'access'
  _yang_namespace = 'http://openconfig.net/yang/module-catalog'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__uri = YANGDynClass(base=str, is_leaf=True, yang_name="uri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/module-catalog', defining_module='openconfig-module-catalog', yang_type='oc-inet:uri', is_config=True)
    self.__md5_hash = YANGDynClass(base=str, is_leaf=True, yang_name="md5-hash", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/module-catalog', defining_module='openconfig-module-catalog', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['organizations', 'organization', 'modules', 'module', 'access']

  def _get_uri(self):
    """
    Getter method for uri, mapped from YANG variable /organizations/organization/modules/module/access/uri (oc-inet:uri)

    YANG Description: URI where module can be downloaded.  Modules may be
made available from the catalog maintainer, or directly
from the publisher
    """
    return self.__uri
      
  def _set_uri(self, v, load=False):
    """
    Setter method for uri, mapped from YANG variable /organizations/organization/modules/module/access/uri (oc-inet:uri)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uri is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uri() directly.

    YANG Description: URI where module can be downloaded.  Modules may be
made available from the catalog maintainer, or directly
from the publisher
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="uri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/module-catalog', defining_module='openconfig-module-catalog', yang_type='oc-inet:uri', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uri must be of a type compatible with oc-inet:uri""",
          'defined-type': "oc-inet:uri",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="uri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/module-catalog', defining_module='openconfig-module-catalog', yang_type='oc-inet:uri', is_config=True)""",
        })

    self.__uri = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uri(self):
    self.__uri = YANGDynClass(base=str, is_leaf=True, yang_name="uri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/module-catalog', defining_module='openconfig-module-catalog', yang_type='oc-inet:uri', is_config=True)


  def _get_md5_hash(self):
    """
    Getter method for md5_hash, mapped from YANG variable /organizations/organization/modules/module/access/md5_hash (string)

    YANG Description: Optional MD5 hash of the module file.  If specified, the
hash may be used by users to validate data integrity
    """
    return self.__md5_hash
      
  def _set_md5_hash(self, v, load=False):
    """
    Setter method for md5_hash, mapped from YANG variable /organizations/organization/modules/module/access/md5_hash (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_md5_hash is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_md5_hash() directly.

    YANG Description: Optional MD5 hash of the module file.  If specified, the
hash may be used by users to validate data integrity
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="md5-hash", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/module-catalog', defining_module='openconfig-module-catalog', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """md5_hash must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="md5-hash", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/module-catalog', defining_module='openconfig-module-catalog', yang_type='string', is_config=True)""",
        })

    self.__md5_hash = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_md5_hash(self):
    self.__md5_hash = YANGDynClass(base=str, is_leaf=True, yang_name="md5-hash", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/module-catalog', defining_module='openconfig-module-catalog', yang_type='string', is_config=True)

  uri = __builtin__.property(_get_uri, _set_uri)
  md5_hash = __builtin__.property(_get_md5_hash, _set_md5_hash)


  _pyangbind_elements = OrderedDict([('uri', uri), ('md5_hash', md5_hash), ])


