# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/healthz/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to component health.
  """
  __slots__ = ('_path_helper', '_extmethods', '__status','__last_unhealthy','__unhealthy_count',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {}, 'HEALTHY': {}, 'UNHEALTHY': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='enumeration', is_config=False)
    self.__last_unhealthy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-unhealthy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='oc-types:timeticks64', is_config=False)
    self.__unhealthy_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unhealthy-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'healthz', 'state']

  def _get_status(self):
    """
    Getter method for status, mapped from YANG variable /components/component/healthz/state/status (enumeration)

    YANG Description: The status of the component, indicating its current health.
    """
    return self.__status
      
  def _set_status(self, v, load=False):
    """
    Setter method for status, mapped from YANG variable /components/component/healthz/state/status (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_status() directly.

    YANG Description: The status of the component, indicating its current health.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {}, 'HEALTHY': {}, 'UNHEALTHY': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """status must be of a type compatible with enumeration""",
          'defined-type': "openconfig-platform-healthz:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {}, 'HEALTHY': {}, 'UNHEALTHY': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='enumeration', is_config=False)""",
        })

    self.__status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_status(self):
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {}, 'HEALTHY': {}, 'UNHEALTHY': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='enumeration', is_config=False)


  def _get_last_unhealthy(self):
    """
    Getter method for last_unhealthy, mapped from YANG variable /components/component/healthz/state/last_unhealthy (oc-types:timeticks64)

    YANG Description: The time at which the component as last observed to be unhealthy
represented as nanoseconds since the Unix epoch. Unhealthy is defined
as the component being in a state other than HEALTHY.
    """
    return self.__last_unhealthy
      
  def _set_last_unhealthy(self, v, load=False):
    """
    Setter method for last_unhealthy, mapped from YANG variable /components/component/healthz/state/last_unhealthy (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_unhealthy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_unhealthy() directly.

    YANG Description: The time at which the component as last observed to be unhealthy
represented as nanoseconds since the Unix epoch. Unhealthy is defined
as the component being in a state other than HEALTHY.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-unhealthy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_unhealthy must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-unhealthy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_unhealthy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_unhealthy(self):
    self.__last_unhealthy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-unhealthy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='oc-types:timeticks64', is_config=False)


  def _get_unhealthy_count(self):
    """
    Getter method for unhealthy_count, mapped from YANG variable /components/component/healthz/state/unhealthy_count (uint64)

    YANG Description: The number of status checks that have determined this component
to be in an unhealthy state. This counter should be incremented
when the component transitions from the HEALTHY to any other
state such that the value reflects the number of times the
component has become unhealthy.
    """
    return self.__unhealthy_count
      
  def _set_unhealthy_count(self, v, load=False):
    """
    Setter method for unhealthy_count, mapped from YANG variable /components/component/healthz/state/unhealthy_count (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unhealthy_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unhealthy_count() directly.

    YANG Description: The number of status checks that have determined this component
to be in an unhealthy state. This counter should be incremented
when the component transitions from the HEALTHY to any other
state such that the value reflects the number of times the
component has become unhealthy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unhealthy-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unhealthy_count must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unhealthy-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='uint64', is_config=False)""",
        })

    self.__unhealthy_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unhealthy_count(self):
    self.__unhealthy_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unhealthy-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='uint64', is_config=False)

  status = __builtin__.property(_get_status)
  last_unhealthy = __builtin__.property(_get_last_unhealthy)
  unhealthy_count = __builtin__.property(_get_unhealthy_count)


  _pyangbind_elements = OrderedDict([('status', status), ('last_unhealthy', last_unhealthy), ('unhealthy_count', unhealthy_count), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/healthz/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to component health.
  """
  __slots__ = ('_path_helper', '_extmethods', '__status','__last_unhealthy','__unhealthy_count',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {}, 'HEALTHY': {}, 'UNHEALTHY': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='enumeration', is_config=False)
    self.__last_unhealthy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-unhealthy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='oc-types:timeticks64', is_config=False)
    self.__unhealthy_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unhealthy-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'healthz', 'state']

  def _get_status(self):
    """
    Getter method for status, mapped from YANG variable /components/component/healthz/state/status (enumeration)

    YANG Description: The status of the component, indicating its current health.
    """
    return self.__status
      
  def _set_status(self, v, load=False):
    """
    Setter method for status, mapped from YANG variable /components/component/healthz/state/status (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_status() directly.

    YANG Description: The status of the component, indicating its current health.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {}, 'HEALTHY': {}, 'UNHEALTHY': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """status must be of a type compatible with enumeration""",
          'defined-type': "openconfig-platform-healthz:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {}, 'HEALTHY': {}, 'UNHEALTHY': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='enumeration', is_config=False)""",
        })

    self.__status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_status(self):
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {}, 'HEALTHY': {}, 'UNHEALTHY': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='enumeration', is_config=False)


  def _get_last_unhealthy(self):
    """
    Getter method for last_unhealthy, mapped from YANG variable /components/component/healthz/state/last_unhealthy (oc-types:timeticks64)

    YANG Description: The time at which the component as last observed to be unhealthy
represented as nanoseconds since the Unix epoch. Unhealthy is defined
as the component being in a state other than HEALTHY.
    """
    return self.__last_unhealthy
      
  def _set_last_unhealthy(self, v, load=False):
    """
    Setter method for last_unhealthy, mapped from YANG variable /components/component/healthz/state/last_unhealthy (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_unhealthy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_unhealthy() directly.

    YANG Description: The time at which the component as last observed to be unhealthy
represented as nanoseconds since the Unix epoch. Unhealthy is defined
as the component being in a state other than HEALTHY.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-unhealthy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_unhealthy must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-unhealthy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_unhealthy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_unhealthy(self):
    self.__last_unhealthy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-unhealthy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='oc-types:timeticks64', is_config=False)


  def _get_unhealthy_count(self):
    """
    Getter method for unhealthy_count, mapped from YANG variable /components/component/healthz/state/unhealthy_count (uint64)

    YANG Description: The number of status checks that have determined this component
to be in an unhealthy state. This counter should be incremented
when the component transitions from the HEALTHY to any other
state such that the value reflects the number of times the
component has become unhealthy.
    """
    return self.__unhealthy_count
      
  def _set_unhealthy_count(self, v, load=False):
    """
    Setter method for unhealthy_count, mapped from YANG variable /components/component/healthz/state/unhealthy_count (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unhealthy_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unhealthy_count() directly.

    YANG Description: The number of status checks that have determined this component
to be in an unhealthy state. This counter should be incremented
when the component transitions from the HEALTHY to any other
state such that the value reflects the number of times the
component has become unhealthy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unhealthy-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unhealthy_count must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unhealthy-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='uint64', is_config=False)""",
        })

    self.__unhealthy_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unhealthy_count(self):
    self.__unhealthy_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unhealthy-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='uint64', is_config=False)

  status = __builtin__.property(_get_status)
  last_unhealthy = __builtin__.property(_get_last_unhealthy)
  unhealthy_count = __builtin__.property(_get_unhealthy_count)


  _pyangbind_elements = OrderedDict([('status', status), ('last_unhealthy', last_unhealthy), ('unhealthy_count', unhealthy_count), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/healthz/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to component health.
  """
  __slots__ = ('_path_helper', '_extmethods', '__status','__last_unhealthy','__unhealthy_count',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {}, 'HEALTHY': {}, 'UNHEALTHY': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='enumeration', is_config=False)
    self.__last_unhealthy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-unhealthy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='oc-types:timeticks64', is_config=False)
    self.__unhealthy_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unhealthy-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'healthz', 'state']

  def _get_status(self):
    """
    Getter method for status, mapped from YANG variable /components/component/healthz/state/status (enumeration)

    YANG Description: The status of the component, indicating its current health.
    """
    return self.__status
      
  def _set_status(self, v, load=False):
    """
    Setter method for status, mapped from YANG variable /components/component/healthz/state/status (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_status() directly.

    YANG Description: The status of the component, indicating its current health.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {}, 'HEALTHY': {}, 'UNHEALTHY': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """status must be of a type compatible with enumeration""",
          'defined-type': "openconfig-platform-healthz:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {}, 'HEALTHY': {}, 'UNHEALTHY': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='enumeration', is_config=False)""",
        })

    self.__status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_status(self):
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {}, 'HEALTHY': {}, 'UNHEALTHY': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='enumeration', is_config=False)


  def _get_last_unhealthy(self):
    """
    Getter method for last_unhealthy, mapped from YANG variable /components/component/healthz/state/last_unhealthy (oc-types:timeticks64)

    YANG Description: The time at which the component as last observed to be unhealthy
represented as nanoseconds since the Unix epoch. Unhealthy is defined
as the component being in a state other than HEALTHY.
    """
    return self.__last_unhealthy
      
  def _set_last_unhealthy(self, v, load=False):
    """
    Setter method for last_unhealthy, mapped from YANG variable /components/component/healthz/state/last_unhealthy (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_unhealthy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_unhealthy() directly.

    YANG Description: The time at which the component as last observed to be unhealthy
represented as nanoseconds since the Unix epoch. Unhealthy is defined
as the component being in a state other than HEALTHY.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-unhealthy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_unhealthy must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-unhealthy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_unhealthy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_unhealthy(self):
    self.__last_unhealthy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-unhealthy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='oc-types:timeticks64', is_config=False)


  def _get_unhealthy_count(self):
    """
    Getter method for unhealthy_count, mapped from YANG variable /components/component/healthz/state/unhealthy_count (uint64)

    YANG Description: The number of status checks that have determined this component
to be in an unhealthy state. This counter should be incremented
when the component transitions from the HEALTHY to any other
state such that the value reflects the number of times the
component has become unhealthy.
    """
    return self.__unhealthy_count
      
  def _set_unhealthy_count(self, v, load=False):
    """
    Setter method for unhealthy_count, mapped from YANG variable /components/component/healthz/state/unhealthy_count (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unhealthy_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unhealthy_count() directly.

    YANG Description: The number of status checks that have determined this component
to be in an unhealthy state. This counter should be incremented
when the component transitions from the HEALTHY to any other
state such that the value reflects the number of times the
component has become unhealthy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unhealthy-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unhealthy_count must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unhealthy-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='uint64', is_config=False)""",
        })

    self.__unhealthy_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unhealthy_count(self):
    self.__unhealthy_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unhealthy-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='uint64', is_config=False)

  status = __builtin__.property(_get_status)
  last_unhealthy = __builtin__.property(_get_last_unhealthy)
  unhealthy_count = __builtin__.property(_get_unhealthy_count)


  _pyangbind_elements = OrderedDict([('status', status), ('last_unhealthy', last_unhealthy), ('unhealthy_count', unhealthy_count), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/healthz/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to component health.
  """
  __slots__ = ('_path_helper', '_extmethods', '__status','__last_unhealthy','__unhealthy_count',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {}, 'HEALTHY': {}, 'UNHEALTHY': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='enumeration', is_config=False)
    self.__last_unhealthy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-unhealthy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='oc-types:timeticks64', is_config=False)
    self.__unhealthy_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unhealthy-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'healthz', 'state']

  def _get_status(self):
    """
    Getter method for status, mapped from YANG variable /components/component/healthz/state/status (enumeration)

    YANG Description: The status of the component, indicating its current health.
    """
    return self.__status
      
  def _set_status(self, v, load=False):
    """
    Setter method for status, mapped from YANG variable /components/component/healthz/state/status (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_status() directly.

    YANG Description: The status of the component, indicating its current health.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {}, 'HEALTHY': {}, 'UNHEALTHY': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """status must be of a type compatible with enumeration""",
          'defined-type': "openconfig-platform-healthz:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {}, 'HEALTHY': {}, 'UNHEALTHY': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='enumeration', is_config=False)""",
        })

    self.__status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_status(self):
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNSPECIFIED': {}, 'HEALTHY': {}, 'UNHEALTHY': {}},), is_leaf=True, yang_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='enumeration', is_config=False)


  def _get_last_unhealthy(self):
    """
    Getter method for last_unhealthy, mapped from YANG variable /components/component/healthz/state/last_unhealthy (oc-types:timeticks64)

    YANG Description: The time at which the component as last observed to be unhealthy
represented as nanoseconds since the Unix epoch. Unhealthy is defined
as the component being in a state other than HEALTHY.
    """
    return self.__last_unhealthy
      
  def _set_last_unhealthy(self, v, load=False):
    """
    Setter method for last_unhealthy, mapped from YANG variable /components/component/healthz/state/last_unhealthy (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_unhealthy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_unhealthy() directly.

    YANG Description: The time at which the component as last observed to be unhealthy
represented as nanoseconds since the Unix epoch. Unhealthy is defined
as the component being in a state other than HEALTHY.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-unhealthy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_unhealthy must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-unhealthy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_unhealthy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_unhealthy(self):
    self.__last_unhealthy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-unhealthy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='oc-types:timeticks64', is_config=False)


  def _get_unhealthy_count(self):
    """
    Getter method for unhealthy_count, mapped from YANG variable /components/component/healthz/state/unhealthy_count (uint64)

    YANG Description: The number of status checks that have determined this component
to be in an unhealthy state. This counter should be incremented
when the component transitions from the HEALTHY to any other
state such that the value reflects the number of times the
component has become unhealthy.
    """
    return self.__unhealthy_count
      
  def _set_unhealthy_count(self, v, load=False):
    """
    Setter method for unhealthy_count, mapped from YANG variable /components/component/healthz/state/unhealthy_count (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unhealthy_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unhealthy_count() directly.

    YANG Description: The number of status checks that have determined this component
to be in an unhealthy state. This counter should be incremented
when the component transitions from the HEALTHY to any other
state such that the value reflects the number of times the
component has become unhealthy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unhealthy-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unhealthy_count must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unhealthy-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='uint64', is_config=False)""",
        })

    self.__unhealthy_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unhealthy_count(self):
    self.__unhealthy_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unhealthy-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/healthz', defining_module='openconfig-platform-healthz', yang_type='uint64', is_config=False)

  status = __builtin__.property(_get_status)
  last_unhealthy = __builtin__.property(_get_last_unhealthy)
  unhealthy_count = __builtin__.property(_get_unhealthy_count)


  _pyangbind_elements = OrderedDict([('status', status), ('last_unhealthy', last_unhealthy), ('unhealthy_count', unhealthy_count), ])


