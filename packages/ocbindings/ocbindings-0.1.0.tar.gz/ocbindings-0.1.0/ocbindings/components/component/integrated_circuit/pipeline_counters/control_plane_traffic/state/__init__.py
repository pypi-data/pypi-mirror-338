# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State container for control-plane traffic counters.
  """
  __slots__ = ('_path_helper', '_extmethods', '__queued_aggregate','__queued_bytes_aggregate','__dropped_aggregate','__dropped_bytes_aggregate',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queued_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__queued_bytes_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__dropped_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__dropped_bytes_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'control-plane-traffic', 'state']

  def _get_queued_aggregate(self):
    """
    Getter method for queued_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/queued_aggregate (oc-yang:counter64)

    YANG Description: This captures the aggregation of all counters where the switch has enqueued
traffic related to the control-plane.
    """
    return self.__queued_aggregate
      
  def _set_queued_aggregate(self, v, load=False):
    """
    Setter method for queued_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/queued_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queued_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queued_aggregate() directly.

    YANG Description: This captures the aggregation of all counters where the switch has enqueued
traffic related to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queued_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__queued_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queued_aggregate(self):
    self.__queued_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_queued_bytes_aggregate(self):
    """
    Getter method for queued_bytes_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/queued_bytes_aggregate (oc-yang:counter64)

    YANG Description: This captures the aggregation of all counters in bytes where the switch has
enqueued traffic related to the control-plane.
    """
    return self.__queued_bytes_aggregate
      
  def _set_queued_bytes_aggregate(self, v, load=False):
    """
    Setter method for queued_bytes_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/queued_bytes_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queued_bytes_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queued_bytes_aggregate() directly.

    YANG Description: This captures the aggregation of all counters in bytes where the switch has
enqueued traffic related to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queued_bytes_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__queued_bytes_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queued_bytes_aggregate(self):
    self.__queued_bytes_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_dropped_aggregate(self):
    """
    Getter method for dropped_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/dropped_aggregate (oc-yang:counter64)

    YANG Description: This captures the aggregation of all counters where the switch has dropped
traffic related to the control-plane.
    """
    return self.__dropped_aggregate
      
  def _set_dropped_aggregate(self, v, load=False):
    """
    Setter method for dropped_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/dropped_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dropped_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dropped_aggregate() directly.

    YANG Description: This captures the aggregation of all counters where the switch has dropped
traffic related to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dropped_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__dropped_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dropped_aggregate(self):
    self.__dropped_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_dropped_bytes_aggregate(self):
    """
    Getter method for dropped_bytes_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/dropped_bytes_aggregate (oc-yang:counter64)

    YANG Description: This captures the aggregation of all counters in bytes where the switch has
dropped traffic related to the control-plane.
    """
    return self.__dropped_bytes_aggregate
      
  def _set_dropped_bytes_aggregate(self, v, load=False):
    """
    Setter method for dropped_bytes_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/dropped_bytes_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dropped_bytes_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dropped_bytes_aggregate() directly.

    YANG Description: This captures the aggregation of all counters in bytes where the switch has
dropped traffic related to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dropped_bytes_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__dropped_bytes_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dropped_bytes_aggregate(self):
    self.__dropped_bytes_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  queued_aggregate = __builtin__.property(_get_queued_aggregate)
  queued_bytes_aggregate = __builtin__.property(_get_queued_bytes_aggregate)
  dropped_aggregate = __builtin__.property(_get_dropped_aggregate)
  dropped_bytes_aggregate = __builtin__.property(_get_dropped_bytes_aggregate)


  _pyangbind_elements = OrderedDict([('queued_aggregate', queued_aggregate), ('queued_bytes_aggregate', queued_bytes_aggregate), ('dropped_aggregate', dropped_aggregate), ('dropped_bytes_aggregate', dropped_bytes_aggregate), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State container for control-plane traffic counters.
  """
  __slots__ = ('_path_helper', '_extmethods', '__queued_aggregate','__queued_bytes_aggregate','__dropped_aggregate','__dropped_bytes_aggregate',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queued_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__queued_bytes_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__dropped_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__dropped_bytes_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'control-plane-traffic', 'state']

  def _get_queued_aggregate(self):
    """
    Getter method for queued_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/queued_aggregate (oc-yang:counter64)

    YANG Description: This captures the aggregation of all counters where the switch has enqueued
traffic related to the control-plane.
    """
    return self.__queued_aggregate
      
  def _set_queued_aggregate(self, v, load=False):
    """
    Setter method for queued_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/queued_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queued_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queued_aggregate() directly.

    YANG Description: This captures the aggregation of all counters where the switch has enqueued
traffic related to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queued_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__queued_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queued_aggregate(self):
    self.__queued_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_queued_bytes_aggregate(self):
    """
    Getter method for queued_bytes_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/queued_bytes_aggregate (oc-yang:counter64)

    YANG Description: This captures the aggregation of all counters in bytes where the switch has
enqueued traffic related to the control-plane.
    """
    return self.__queued_bytes_aggregate
      
  def _set_queued_bytes_aggregate(self, v, load=False):
    """
    Setter method for queued_bytes_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/queued_bytes_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queued_bytes_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queued_bytes_aggregate() directly.

    YANG Description: This captures the aggregation of all counters in bytes where the switch has
enqueued traffic related to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queued_bytes_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__queued_bytes_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queued_bytes_aggregate(self):
    self.__queued_bytes_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_dropped_aggregate(self):
    """
    Getter method for dropped_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/dropped_aggregate (oc-yang:counter64)

    YANG Description: This captures the aggregation of all counters where the switch has dropped
traffic related to the control-plane.
    """
    return self.__dropped_aggregate
      
  def _set_dropped_aggregate(self, v, load=False):
    """
    Setter method for dropped_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/dropped_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dropped_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dropped_aggregate() directly.

    YANG Description: This captures the aggregation of all counters where the switch has dropped
traffic related to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dropped_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__dropped_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dropped_aggregate(self):
    self.__dropped_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_dropped_bytes_aggregate(self):
    """
    Getter method for dropped_bytes_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/dropped_bytes_aggregate (oc-yang:counter64)

    YANG Description: This captures the aggregation of all counters in bytes where the switch has
dropped traffic related to the control-plane.
    """
    return self.__dropped_bytes_aggregate
      
  def _set_dropped_bytes_aggregate(self, v, load=False):
    """
    Setter method for dropped_bytes_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/dropped_bytes_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dropped_bytes_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dropped_bytes_aggregate() directly.

    YANG Description: This captures the aggregation of all counters in bytes where the switch has
dropped traffic related to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dropped_bytes_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__dropped_bytes_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dropped_bytes_aggregate(self):
    self.__dropped_bytes_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  queued_aggregate = __builtin__.property(_get_queued_aggregate)
  queued_bytes_aggregate = __builtin__.property(_get_queued_bytes_aggregate)
  dropped_aggregate = __builtin__.property(_get_dropped_aggregate)
  dropped_bytes_aggregate = __builtin__.property(_get_dropped_bytes_aggregate)


  _pyangbind_elements = OrderedDict([('queued_aggregate', queued_aggregate), ('queued_bytes_aggregate', queued_bytes_aggregate), ('dropped_aggregate', dropped_aggregate), ('dropped_bytes_aggregate', dropped_bytes_aggregate), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State container for control-plane traffic counters.
  """
  __slots__ = ('_path_helper', '_extmethods', '__queued_aggregate','__queued_bytes_aggregate','__dropped_aggregate','__dropped_bytes_aggregate',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queued_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__queued_bytes_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__dropped_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__dropped_bytes_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'control-plane-traffic', 'state']

  def _get_queued_aggregate(self):
    """
    Getter method for queued_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/queued_aggregate (oc-yang:counter64)

    YANG Description: This captures the aggregation of all counters where the switch has enqueued
traffic related to the control-plane.
    """
    return self.__queued_aggregate
      
  def _set_queued_aggregate(self, v, load=False):
    """
    Setter method for queued_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/queued_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queued_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queued_aggregate() directly.

    YANG Description: This captures the aggregation of all counters where the switch has enqueued
traffic related to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queued_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__queued_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queued_aggregate(self):
    self.__queued_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_queued_bytes_aggregate(self):
    """
    Getter method for queued_bytes_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/queued_bytes_aggregate (oc-yang:counter64)

    YANG Description: This captures the aggregation of all counters in bytes where the switch has
enqueued traffic related to the control-plane.
    """
    return self.__queued_bytes_aggregate
      
  def _set_queued_bytes_aggregate(self, v, load=False):
    """
    Setter method for queued_bytes_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/queued_bytes_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queued_bytes_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queued_bytes_aggregate() directly.

    YANG Description: This captures the aggregation of all counters in bytes where the switch has
enqueued traffic related to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queued_bytes_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__queued_bytes_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queued_bytes_aggregate(self):
    self.__queued_bytes_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_dropped_aggregate(self):
    """
    Getter method for dropped_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/dropped_aggregate (oc-yang:counter64)

    YANG Description: This captures the aggregation of all counters where the switch has dropped
traffic related to the control-plane.
    """
    return self.__dropped_aggregate
      
  def _set_dropped_aggregate(self, v, load=False):
    """
    Setter method for dropped_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/dropped_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dropped_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dropped_aggregate() directly.

    YANG Description: This captures the aggregation of all counters where the switch has dropped
traffic related to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dropped_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__dropped_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dropped_aggregate(self):
    self.__dropped_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_dropped_bytes_aggregate(self):
    """
    Getter method for dropped_bytes_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/dropped_bytes_aggregate (oc-yang:counter64)

    YANG Description: This captures the aggregation of all counters in bytes where the switch has
dropped traffic related to the control-plane.
    """
    return self.__dropped_bytes_aggregate
      
  def _set_dropped_bytes_aggregate(self, v, load=False):
    """
    Setter method for dropped_bytes_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/dropped_bytes_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dropped_bytes_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dropped_bytes_aggregate() directly.

    YANG Description: This captures the aggregation of all counters in bytes where the switch has
dropped traffic related to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dropped_bytes_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__dropped_bytes_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dropped_bytes_aggregate(self):
    self.__dropped_bytes_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  queued_aggregate = __builtin__.property(_get_queued_aggregate)
  queued_bytes_aggregate = __builtin__.property(_get_queued_bytes_aggregate)
  dropped_aggregate = __builtin__.property(_get_dropped_aggregate)
  dropped_bytes_aggregate = __builtin__.property(_get_dropped_bytes_aggregate)


  _pyangbind_elements = OrderedDict([('queued_aggregate', queued_aggregate), ('queued_bytes_aggregate', queued_bytes_aggregate), ('dropped_aggregate', dropped_aggregate), ('dropped_bytes_aggregate', dropped_bytes_aggregate), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State container for control-plane traffic counters.
  """
  __slots__ = ('_path_helper', '_extmethods', '__queued_aggregate','__queued_bytes_aggregate','__dropped_aggregate','__dropped_bytes_aggregate',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queued_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__queued_bytes_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__dropped_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__dropped_bytes_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'control-plane-traffic', 'state']

  def _get_queued_aggregate(self):
    """
    Getter method for queued_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/queued_aggregate (oc-yang:counter64)

    YANG Description: This captures the aggregation of all counters where the switch has enqueued
traffic related to the control-plane.
    """
    return self.__queued_aggregate
      
  def _set_queued_aggregate(self, v, load=False):
    """
    Setter method for queued_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/queued_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queued_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queued_aggregate() directly.

    YANG Description: This captures the aggregation of all counters where the switch has enqueued
traffic related to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queued_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__queued_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queued_aggregate(self):
    self.__queued_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_queued_bytes_aggregate(self):
    """
    Getter method for queued_bytes_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/queued_bytes_aggregate (oc-yang:counter64)

    YANG Description: This captures the aggregation of all counters in bytes where the switch has
enqueued traffic related to the control-plane.
    """
    return self.__queued_bytes_aggregate
      
  def _set_queued_bytes_aggregate(self, v, load=False):
    """
    Setter method for queued_bytes_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/queued_bytes_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queued_bytes_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queued_bytes_aggregate() directly.

    YANG Description: This captures the aggregation of all counters in bytes where the switch has
enqueued traffic related to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queued_bytes_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__queued_bytes_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queued_bytes_aggregate(self):
    self.__queued_bytes_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="queued-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_dropped_aggregate(self):
    """
    Getter method for dropped_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/dropped_aggregate (oc-yang:counter64)

    YANG Description: This captures the aggregation of all counters where the switch has dropped
traffic related to the control-plane.
    """
    return self.__dropped_aggregate
      
  def _set_dropped_aggregate(self, v, load=False):
    """
    Setter method for dropped_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/dropped_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dropped_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dropped_aggregate() directly.

    YANG Description: This captures the aggregation of all counters where the switch has dropped
traffic related to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dropped_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__dropped_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dropped_aggregate(self):
    self.__dropped_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_dropped_bytes_aggregate(self):
    """
    Getter method for dropped_bytes_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/dropped_bytes_aggregate (oc-yang:counter64)

    YANG Description: This captures the aggregation of all counters in bytes where the switch has
dropped traffic related to the control-plane.
    """
    return self.__dropped_bytes_aggregate
      
  def _set_dropped_bytes_aggregate(self, v, load=False):
    """
    Setter method for dropped_bytes_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic/state/dropped_bytes_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dropped_bytes_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dropped_bytes_aggregate() directly.

    YANG Description: This captures the aggregation of all counters in bytes where the switch has
dropped traffic related to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dropped_bytes_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__dropped_bytes_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dropped_bytes_aggregate(self):
    self.__dropped_bytes_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-bytes-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  queued_aggregate = __builtin__.property(_get_queued_aggregate)
  queued_bytes_aggregate = __builtin__.property(_get_queued_bytes_aggregate)
  dropped_aggregate = __builtin__.property(_get_dropped_aggregate)
  dropped_bytes_aggregate = __builtin__.property(_get_dropped_bytes_aggregate)


  _pyangbind_elements = OrderedDict([('queued_aggregate', queued_aggregate), ('queued_bytes_aggregate', queued_bytes_aggregate), ('dropped_aggregate', dropped_aggregate), ('dropped_bytes_aggregate', dropped_bytes_aggregate), ])


