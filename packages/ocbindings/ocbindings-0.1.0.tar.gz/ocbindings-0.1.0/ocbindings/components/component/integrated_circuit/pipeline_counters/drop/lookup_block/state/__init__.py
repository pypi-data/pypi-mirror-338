# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Drop counters corresponding to the lookup subsystem of the IC.
  """
  __slots__ = ('_path_helper', '_extmethods', '__oversubscription','__no_route','__no_label','__no_nexthop','__invalid_packet','__forwarding_policy','__incorrect_software_state','__rate_limit','__fragment_total_drops','__lookup_aggregate','__acl_drops',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__oversubscription = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__no_route = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__no_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__no_nexthop = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__invalid_packet = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__forwarding_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="forwarding-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__incorrect_software_state = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="incorrect-software-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__rate_limit = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rate-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__fragment_total_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__lookup_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__acl_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'drop', 'lookup-block', 'state']

  def _get_oversubscription(self):
    """
    Getter method for oversubscription, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/oversubscription (oc-yang:counter64)

    YANG Description: Number of packets dropped due to oversubscription of the
integrated-circuit subsystem block.
    """
    return self.__oversubscription
      
  def _set_oversubscription(self, v, load=False):
    """
    Setter method for oversubscription, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/oversubscription (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oversubscription is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oversubscription() directly.

    YANG Description: Number of packets dropped due to oversubscription of the
integrated-circuit subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oversubscription must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__oversubscription = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oversubscription(self):
    self.__oversubscription = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_no_route(self):
    """
    Getter method for no_route, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_route (oc-yang:counter64)

    YANG Description: Packets dropped due to no FIB entry for this ipv4 or ipv6 lookup.
    """
    return self.__no_route
      
  def _set_no_route(self, v, load=False):
    """
    Setter method for no_route, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_route (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_no_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_no_route() directly.

    YANG Description: Packets dropped due to no FIB entry for this ipv4 or ipv6 lookup.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """no_route must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__no_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_no_route(self):
    self.__no_route = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_no_label(self):
    """
    Getter method for no_label, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_label (oc-yang:counter64)

    YANG Description: Packets dropped due to no FIB entry for this MPLS label.
    """
    return self.__no_label
      
  def _set_no_label(self, v, load=False):
    """
    Setter method for no_label, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_label (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_no_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_no_label() directly.

    YANG Description: Packets dropped due to no FIB entry for this MPLS label.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """no_label must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__no_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_no_label(self):
    self.__no_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_no_nexthop(self):
    """
    Getter method for no_nexthop, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_nexthop (oc-yang:counter64)

    YANG Description: Packets dropped due to no nexthop information - either the nexthop is
not programmed, or there is an invalid nexthop, or there is no ARP
information so the nexthop is in invalid state.
    """
    return self.__no_nexthop
      
  def _set_no_nexthop(self, v, load=False):
    """
    Setter method for no_nexthop, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_nexthop (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_no_nexthop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_no_nexthop() directly.

    YANG Description: Packets dropped due to no nexthop information - either the nexthop is
not programmed, or there is an invalid nexthop, or there is no ARP
information so the nexthop is in invalid state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """no_nexthop must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__no_nexthop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_no_nexthop(self):
    self.__no_nexthop = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_invalid_packet(self):
    """
    Getter method for invalid_packet, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/invalid_packet (oc-yang:counter64)

    YANG Description: Packets dropped due to invalid packet format for ipv4, ipv6, or MPLS.
    """
    return self.__invalid_packet
      
  def _set_invalid_packet(self, v, load=False):
    """
    Setter method for invalid_packet, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/invalid_packet (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_packet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_packet() directly.

    YANG Description: Packets dropped due to invalid packet format for ipv4, ipv6, or MPLS.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_packet must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__invalid_packet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_packet(self):
    self.__invalid_packet = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_forwarding_policy(self):
    """
    Getter method for forwarding_policy, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/forwarding_policy (oc-yang:counter64)

    YANG Description: Packets dropped due to either a filter applied as part of a forwarding
policy or dropped due to a policy-based-routing policy lookup.
    """
    return self.__forwarding_policy
      
  def _set_forwarding_policy(self, v, load=False):
    """
    Setter method for forwarding_policy, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/forwarding_policy (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_forwarding_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_forwarding_policy() directly.

    YANG Description: Packets dropped due to either a filter applied as part of a forwarding
policy or dropped due to a policy-based-routing policy lookup.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="forwarding-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """forwarding_policy must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="forwarding-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__forwarding_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_forwarding_policy(self):
    self.__forwarding_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="forwarding-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_incorrect_software_state(self):
    """
    Getter method for incorrect_software_state, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/incorrect_software_state (oc-yang:counter64)

    YANG Description: Packets dropped due to any incorrect or invalid software state of the
forwarding structures during lookup.
    """
    return self.__incorrect_software_state
      
  def _set_incorrect_software_state(self, v, load=False):
    """
    Setter method for incorrect_software_state, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/incorrect_software_state (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_incorrect_software_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_incorrect_software_state() directly.

    YANG Description: Packets dropped due to any incorrect or invalid software state of the
forwarding structures during lookup.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="incorrect-software-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """incorrect_software_state must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="incorrect-software-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__incorrect_software_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_incorrect_software_state(self):
    self.__incorrect_software_state = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="incorrect-software-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_rate_limit(self):
    """
    Getter method for rate_limit, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/rate_limit (oc-yang:counter64)

    YANG Description: Packets dropped due to rate limiters - either user configured rate
limiters or system rate limiters in the forwarding path.
    """
    return self.__rate_limit
      
  def _set_rate_limit(self, v, load=False):
    """
    Setter method for rate_limit, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/rate_limit (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rate_limit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rate_limit() directly.

    YANG Description: Packets dropped due to rate limiters - either user configured rate
limiters or system rate limiters in the forwarding path.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rate-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rate_limit must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rate-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rate_limit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rate_limit(self):
    self.__rate_limit = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rate-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_fragment_total_drops(self):
    """
    Getter method for fragment_total_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/fragment_total_drops (oc-yang:counter64)

    YANG Description: Total number of packets dropped that could not be fragmented by NPU
due to DF bit.
    """
    return self.__fragment_total_drops
      
  def _set_fragment_total_drops(self, v, load=False):
    """
    Setter method for fragment_total_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/fragment_total_drops (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fragment_total_drops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fragment_total_drops() directly.

    YANG Description: Total number of packets dropped that could not be fragmented by NPU
due to DF bit.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fragment_total_drops must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__fragment_total_drops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fragment_total_drops(self):
    self.__fragment_total_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_lookup_aggregate(self):
    """
    Getter method for lookup_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/lookup_aggregate (oc-yang:counter64)

    YANG Description: Packets dropped due to aggregate lookup drop counters - this counter
is sometimes referred to as Normal Discards or
ENQ_DISCARDED_PACKET_COUNTER.
    """
    return self.__lookup_aggregate
      
  def _set_lookup_aggregate(self, v, load=False):
    """
    Setter method for lookup_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/lookup_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_aggregate() directly.

    YANG Description: Packets dropped due to aggregate lookup drop counters - this counter
is sometimes referred to as Normal Discards or
ENQ_DISCARDED_PACKET_COUNTER.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__lookup_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_aggregate(self):
    self.__lookup_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_acl_drops(self):
    """
    Getter method for acl_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/acl_drops (oc-yang:counter64)

    YANG Description: Packets dropped due to firewall or acl terms.
    """
    return self.__acl_drops
      
  def _set_acl_drops(self, v, load=False):
    """
    Setter method for acl_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/acl_drops (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_drops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_drops() directly.

    YANG Description: Packets dropped due to firewall or acl terms.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_drops must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__acl_drops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_drops(self):
    self.__acl_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  oversubscription = __builtin__.property(_get_oversubscription)
  no_route = __builtin__.property(_get_no_route)
  no_label = __builtin__.property(_get_no_label)
  no_nexthop = __builtin__.property(_get_no_nexthop)
  invalid_packet = __builtin__.property(_get_invalid_packet)
  forwarding_policy = __builtin__.property(_get_forwarding_policy)
  incorrect_software_state = __builtin__.property(_get_incorrect_software_state)
  rate_limit = __builtin__.property(_get_rate_limit)
  fragment_total_drops = __builtin__.property(_get_fragment_total_drops)
  lookup_aggregate = __builtin__.property(_get_lookup_aggregate)
  acl_drops = __builtin__.property(_get_acl_drops)


  _pyangbind_elements = OrderedDict([('oversubscription', oversubscription), ('no_route', no_route), ('no_label', no_label), ('no_nexthop', no_nexthop), ('invalid_packet', invalid_packet), ('forwarding_policy', forwarding_policy), ('incorrect_software_state', incorrect_software_state), ('rate_limit', rate_limit), ('fragment_total_drops', fragment_total_drops), ('lookup_aggregate', lookup_aggregate), ('acl_drops', acl_drops), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Drop counters corresponding to the lookup subsystem of the IC.
  """
  __slots__ = ('_path_helper', '_extmethods', '__oversubscription','__no_route','__no_label','__no_nexthop','__invalid_packet','__forwarding_policy','__incorrect_software_state','__rate_limit','__fragment_total_drops','__lookup_aggregate','__acl_drops',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__oversubscription = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__no_route = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__no_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__no_nexthop = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__invalid_packet = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__forwarding_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="forwarding-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__incorrect_software_state = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="incorrect-software-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__rate_limit = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rate-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__fragment_total_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__lookup_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__acl_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'drop', 'lookup-block', 'state']

  def _get_oversubscription(self):
    """
    Getter method for oversubscription, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/oversubscription (oc-yang:counter64)

    YANG Description: Number of packets dropped due to oversubscription of the
integrated-circuit subsystem block.
    """
    return self.__oversubscription
      
  def _set_oversubscription(self, v, load=False):
    """
    Setter method for oversubscription, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/oversubscription (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oversubscription is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oversubscription() directly.

    YANG Description: Number of packets dropped due to oversubscription of the
integrated-circuit subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oversubscription must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__oversubscription = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oversubscription(self):
    self.__oversubscription = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_no_route(self):
    """
    Getter method for no_route, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_route (oc-yang:counter64)

    YANG Description: Packets dropped due to no FIB entry for this ipv4 or ipv6 lookup.
    """
    return self.__no_route
      
  def _set_no_route(self, v, load=False):
    """
    Setter method for no_route, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_route (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_no_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_no_route() directly.

    YANG Description: Packets dropped due to no FIB entry for this ipv4 or ipv6 lookup.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """no_route must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__no_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_no_route(self):
    self.__no_route = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_no_label(self):
    """
    Getter method for no_label, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_label (oc-yang:counter64)

    YANG Description: Packets dropped due to no FIB entry for this MPLS label.
    """
    return self.__no_label
      
  def _set_no_label(self, v, load=False):
    """
    Setter method for no_label, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_label (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_no_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_no_label() directly.

    YANG Description: Packets dropped due to no FIB entry for this MPLS label.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """no_label must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__no_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_no_label(self):
    self.__no_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_no_nexthop(self):
    """
    Getter method for no_nexthop, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_nexthop (oc-yang:counter64)

    YANG Description: Packets dropped due to no nexthop information - either the nexthop is
not programmed, or there is an invalid nexthop, or there is no ARP
information so the nexthop is in invalid state.
    """
    return self.__no_nexthop
      
  def _set_no_nexthop(self, v, load=False):
    """
    Setter method for no_nexthop, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_nexthop (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_no_nexthop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_no_nexthop() directly.

    YANG Description: Packets dropped due to no nexthop information - either the nexthop is
not programmed, or there is an invalid nexthop, or there is no ARP
information so the nexthop is in invalid state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """no_nexthop must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__no_nexthop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_no_nexthop(self):
    self.__no_nexthop = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_invalid_packet(self):
    """
    Getter method for invalid_packet, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/invalid_packet (oc-yang:counter64)

    YANG Description: Packets dropped due to invalid packet format for ipv4, ipv6, or MPLS.
    """
    return self.__invalid_packet
      
  def _set_invalid_packet(self, v, load=False):
    """
    Setter method for invalid_packet, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/invalid_packet (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_packet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_packet() directly.

    YANG Description: Packets dropped due to invalid packet format for ipv4, ipv6, or MPLS.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_packet must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__invalid_packet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_packet(self):
    self.__invalid_packet = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_forwarding_policy(self):
    """
    Getter method for forwarding_policy, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/forwarding_policy (oc-yang:counter64)

    YANG Description: Packets dropped due to either a filter applied as part of a forwarding
policy or dropped due to a policy-based-routing policy lookup.
    """
    return self.__forwarding_policy
      
  def _set_forwarding_policy(self, v, load=False):
    """
    Setter method for forwarding_policy, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/forwarding_policy (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_forwarding_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_forwarding_policy() directly.

    YANG Description: Packets dropped due to either a filter applied as part of a forwarding
policy or dropped due to a policy-based-routing policy lookup.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="forwarding-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """forwarding_policy must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="forwarding-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__forwarding_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_forwarding_policy(self):
    self.__forwarding_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="forwarding-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_incorrect_software_state(self):
    """
    Getter method for incorrect_software_state, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/incorrect_software_state (oc-yang:counter64)

    YANG Description: Packets dropped due to any incorrect or invalid software state of the
forwarding structures during lookup.
    """
    return self.__incorrect_software_state
      
  def _set_incorrect_software_state(self, v, load=False):
    """
    Setter method for incorrect_software_state, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/incorrect_software_state (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_incorrect_software_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_incorrect_software_state() directly.

    YANG Description: Packets dropped due to any incorrect or invalid software state of the
forwarding structures during lookup.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="incorrect-software-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """incorrect_software_state must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="incorrect-software-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__incorrect_software_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_incorrect_software_state(self):
    self.__incorrect_software_state = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="incorrect-software-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_rate_limit(self):
    """
    Getter method for rate_limit, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/rate_limit (oc-yang:counter64)

    YANG Description: Packets dropped due to rate limiters - either user configured rate
limiters or system rate limiters in the forwarding path.
    """
    return self.__rate_limit
      
  def _set_rate_limit(self, v, load=False):
    """
    Setter method for rate_limit, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/rate_limit (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rate_limit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rate_limit() directly.

    YANG Description: Packets dropped due to rate limiters - either user configured rate
limiters or system rate limiters in the forwarding path.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rate-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rate_limit must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rate-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rate_limit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rate_limit(self):
    self.__rate_limit = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rate-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_fragment_total_drops(self):
    """
    Getter method for fragment_total_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/fragment_total_drops (oc-yang:counter64)

    YANG Description: Total number of packets dropped that could not be fragmented by NPU
due to DF bit.
    """
    return self.__fragment_total_drops
      
  def _set_fragment_total_drops(self, v, load=False):
    """
    Setter method for fragment_total_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/fragment_total_drops (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fragment_total_drops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fragment_total_drops() directly.

    YANG Description: Total number of packets dropped that could not be fragmented by NPU
due to DF bit.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fragment_total_drops must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__fragment_total_drops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fragment_total_drops(self):
    self.__fragment_total_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_lookup_aggregate(self):
    """
    Getter method for lookup_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/lookup_aggregate (oc-yang:counter64)

    YANG Description: Packets dropped due to aggregate lookup drop counters - this counter
is sometimes referred to as Normal Discards or
ENQ_DISCARDED_PACKET_COUNTER.
    """
    return self.__lookup_aggregate
      
  def _set_lookup_aggregate(self, v, load=False):
    """
    Setter method for lookup_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/lookup_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_aggregate() directly.

    YANG Description: Packets dropped due to aggregate lookup drop counters - this counter
is sometimes referred to as Normal Discards or
ENQ_DISCARDED_PACKET_COUNTER.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__lookup_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_aggregate(self):
    self.__lookup_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_acl_drops(self):
    """
    Getter method for acl_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/acl_drops (oc-yang:counter64)

    YANG Description: Packets dropped due to firewall or acl terms.
    """
    return self.__acl_drops
      
  def _set_acl_drops(self, v, load=False):
    """
    Setter method for acl_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/acl_drops (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_drops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_drops() directly.

    YANG Description: Packets dropped due to firewall or acl terms.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_drops must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__acl_drops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_drops(self):
    self.__acl_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  oversubscription = __builtin__.property(_get_oversubscription)
  no_route = __builtin__.property(_get_no_route)
  no_label = __builtin__.property(_get_no_label)
  no_nexthop = __builtin__.property(_get_no_nexthop)
  invalid_packet = __builtin__.property(_get_invalid_packet)
  forwarding_policy = __builtin__.property(_get_forwarding_policy)
  incorrect_software_state = __builtin__.property(_get_incorrect_software_state)
  rate_limit = __builtin__.property(_get_rate_limit)
  fragment_total_drops = __builtin__.property(_get_fragment_total_drops)
  lookup_aggregate = __builtin__.property(_get_lookup_aggregate)
  acl_drops = __builtin__.property(_get_acl_drops)


  _pyangbind_elements = OrderedDict([('oversubscription', oversubscription), ('no_route', no_route), ('no_label', no_label), ('no_nexthop', no_nexthop), ('invalid_packet', invalid_packet), ('forwarding_policy', forwarding_policy), ('incorrect_software_state', incorrect_software_state), ('rate_limit', rate_limit), ('fragment_total_drops', fragment_total_drops), ('lookup_aggregate', lookup_aggregate), ('acl_drops', acl_drops), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Drop counters corresponding to the lookup subsystem of the IC.
  """
  __slots__ = ('_path_helper', '_extmethods', '__oversubscription','__no_route','__no_label','__no_nexthop','__invalid_packet','__forwarding_policy','__incorrect_software_state','__rate_limit','__fragment_total_drops','__lookup_aggregate','__acl_drops',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__oversubscription = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__no_route = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__no_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__no_nexthop = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__invalid_packet = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__forwarding_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="forwarding-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__incorrect_software_state = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="incorrect-software-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__rate_limit = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rate-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__fragment_total_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__lookup_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__acl_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'drop', 'lookup-block', 'state']

  def _get_oversubscription(self):
    """
    Getter method for oversubscription, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/oversubscription (oc-yang:counter64)

    YANG Description: Number of packets dropped due to oversubscription of the
integrated-circuit subsystem block.
    """
    return self.__oversubscription
      
  def _set_oversubscription(self, v, load=False):
    """
    Setter method for oversubscription, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/oversubscription (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oversubscription is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oversubscription() directly.

    YANG Description: Number of packets dropped due to oversubscription of the
integrated-circuit subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oversubscription must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__oversubscription = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oversubscription(self):
    self.__oversubscription = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_no_route(self):
    """
    Getter method for no_route, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_route (oc-yang:counter64)

    YANG Description: Packets dropped due to no FIB entry for this ipv4 or ipv6 lookup.
    """
    return self.__no_route
      
  def _set_no_route(self, v, load=False):
    """
    Setter method for no_route, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_route (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_no_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_no_route() directly.

    YANG Description: Packets dropped due to no FIB entry for this ipv4 or ipv6 lookup.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """no_route must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__no_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_no_route(self):
    self.__no_route = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_no_label(self):
    """
    Getter method for no_label, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_label (oc-yang:counter64)

    YANG Description: Packets dropped due to no FIB entry for this MPLS label.
    """
    return self.__no_label
      
  def _set_no_label(self, v, load=False):
    """
    Setter method for no_label, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_label (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_no_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_no_label() directly.

    YANG Description: Packets dropped due to no FIB entry for this MPLS label.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """no_label must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__no_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_no_label(self):
    self.__no_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_no_nexthop(self):
    """
    Getter method for no_nexthop, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_nexthop (oc-yang:counter64)

    YANG Description: Packets dropped due to no nexthop information - either the nexthop is
not programmed, or there is an invalid nexthop, or there is no ARP
information so the nexthop is in invalid state.
    """
    return self.__no_nexthop
      
  def _set_no_nexthop(self, v, load=False):
    """
    Setter method for no_nexthop, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_nexthop (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_no_nexthop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_no_nexthop() directly.

    YANG Description: Packets dropped due to no nexthop information - either the nexthop is
not programmed, or there is an invalid nexthop, or there is no ARP
information so the nexthop is in invalid state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """no_nexthop must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__no_nexthop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_no_nexthop(self):
    self.__no_nexthop = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_invalid_packet(self):
    """
    Getter method for invalid_packet, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/invalid_packet (oc-yang:counter64)

    YANG Description: Packets dropped due to invalid packet format for ipv4, ipv6, or MPLS.
    """
    return self.__invalid_packet
      
  def _set_invalid_packet(self, v, load=False):
    """
    Setter method for invalid_packet, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/invalid_packet (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_packet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_packet() directly.

    YANG Description: Packets dropped due to invalid packet format for ipv4, ipv6, or MPLS.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_packet must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__invalid_packet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_packet(self):
    self.__invalid_packet = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_forwarding_policy(self):
    """
    Getter method for forwarding_policy, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/forwarding_policy (oc-yang:counter64)

    YANG Description: Packets dropped due to either a filter applied as part of a forwarding
policy or dropped due to a policy-based-routing policy lookup.
    """
    return self.__forwarding_policy
      
  def _set_forwarding_policy(self, v, load=False):
    """
    Setter method for forwarding_policy, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/forwarding_policy (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_forwarding_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_forwarding_policy() directly.

    YANG Description: Packets dropped due to either a filter applied as part of a forwarding
policy or dropped due to a policy-based-routing policy lookup.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="forwarding-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """forwarding_policy must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="forwarding-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__forwarding_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_forwarding_policy(self):
    self.__forwarding_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="forwarding-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_incorrect_software_state(self):
    """
    Getter method for incorrect_software_state, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/incorrect_software_state (oc-yang:counter64)

    YANG Description: Packets dropped due to any incorrect or invalid software state of the
forwarding structures during lookup.
    """
    return self.__incorrect_software_state
      
  def _set_incorrect_software_state(self, v, load=False):
    """
    Setter method for incorrect_software_state, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/incorrect_software_state (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_incorrect_software_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_incorrect_software_state() directly.

    YANG Description: Packets dropped due to any incorrect or invalid software state of the
forwarding structures during lookup.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="incorrect-software-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """incorrect_software_state must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="incorrect-software-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__incorrect_software_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_incorrect_software_state(self):
    self.__incorrect_software_state = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="incorrect-software-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_rate_limit(self):
    """
    Getter method for rate_limit, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/rate_limit (oc-yang:counter64)

    YANG Description: Packets dropped due to rate limiters - either user configured rate
limiters or system rate limiters in the forwarding path.
    """
    return self.__rate_limit
      
  def _set_rate_limit(self, v, load=False):
    """
    Setter method for rate_limit, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/rate_limit (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rate_limit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rate_limit() directly.

    YANG Description: Packets dropped due to rate limiters - either user configured rate
limiters or system rate limiters in the forwarding path.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rate-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rate_limit must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rate-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rate_limit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rate_limit(self):
    self.__rate_limit = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rate-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_fragment_total_drops(self):
    """
    Getter method for fragment_total_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/fragment_total_drops (oc-yang:counter64)

    YANG Description: Total number of packets dropped that could not be fragmented by NPU
due to DF bit.
    """
    return self.__fragment_total_drops
      
  def _set_fragment_total_drops(self, v, load=False):
    """
    Setter method for fragment_total_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/fragment_total_drops (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fragment_total_drops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fragment_total_drops() directly.

    YANG Description: Total number of packets dropped that could not be fragmented by NPU
due to DF bit.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fragment_total_drops must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__fragment_total_drops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fragment_total_drops(self):
    self.__fragment_total_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_lookup_aggregate(self):
    """
    Getter method for lookup_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/lookup_aggregate (oc-yang:counter64)

    YANG Description: Packets dropped due to aggregate lookup drop counters - this counter
is sometimes referred to as Normal Discards or
ENQ_DISCARDED_PACKET_COUNTER.
    """
    return self.__lookup_aggregate
      
  def _set_lookup_aggregate(self, v, load=False):
    """
    Setter method for lookup_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/lookup_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_aggregate() directly.

    YANG Description: Packets dropped due to aggregate lookup drop counters - this counter
is sometimes referred to as Normal Discards or
ENQ_DISCARDED_PACKET_COUNTER.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__lookup_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_aggregate(self):
    self.__lookup_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_acl_drops(self):
    """
    Getter method for acl_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/acl_drops (oc-yang:counter64)

    YANG Description: Packets dropped due to firewall or acl terms.
    """
    return self.__acl_drops
      
  def _set_acl_drops(self, v, load=False):
    """
    Setter method for acl_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/acl_drops (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_drops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_drops() directly.

    YANG Description: Packets dropped due to firewall or acl terms.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_drops must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__acl_drops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_drops(self):
    self.__acl_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  oversubscription = __builtin__.property(_get_oversubscription)
  no_route = __builtin__.property(_get_no_route)
  no_label = __builtin__.property(_get_no_label)
  no_nexthop = __builtin__.property(_get_no_nexthop)
  invalid_packet = __builtin__.property(_get_invalid_packet)
  forwarding_policy = __builtin__.property(_get_forwarding_policy)
  incorrect_software_state = __builtin__.property(_get_incorrect_software_state)
  rate_limit = __builtin__.property(_get_rate_limit)
  fragment_total_drops = __builtin__.property(_get_fragment_total_drops)
  lookup_aggregate = __builtin__.property(_get_lookup_aggregate)
  acl_drops = __builtin__.property(_get_acl_drops)


  _pyangbind_elements = OrderedDict([('oversubscription', oversubscription), ('no_route', no_route), ('no_label', no_label), ('no_nexthop', no_nexthop), ('invalid_packet', invalid_packet), ('forwarding_policy', forwarding_policy), ('incorrect_software_state', incorrect_software_state), ('rate_limit', rate_limit), ('fragment_total_drops', fragment_total_drops), ('lookup_aggregate', lookup_aggregate), ('acl_drops', acl_drops), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Drop counters corresponding to the lookup subsystem of the IC.
  """
  __slots__ = ('_path_helper', '_extmethods', '__oversubscription','__no_route','__no_label','__no_nexthop','__invalid_packet','__forwarding_policy','__incorrect_software_state','__rate_limit','__fragment_total_drops','__lookup_aggregate','__acl_drops',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__oversubscription = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__no_route = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__no_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__no_nexthop = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__invalid_packet = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__forwarding_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="forwarding-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__incorrect_software_state = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="incorrect-software-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__rate_limit = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rate-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__fragment_total_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__lookup_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__acl_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'drop', 'lookup-block', 'state']

  def _get_oversubscription(self):
    """
    Getter method for oversubscription, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/oversubscription (oc-yang:counter64)

    YANG Description: Number of packets dropped due to oversubscription of the
integrated-circuit subsystem block.
    """
    return self.__oversubscription
      
  def _set_oversubscription(self, v, load=False):
    """
    Setter method for oversubscription, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/oversubscription (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oversubscription is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oversubscription() directly.

    YANG Description: Number of packets dropped due to oversubscription of the
integrated-circuit subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oversubscription must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__oversubscription = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oversubscription(self):
    self.__oversubscription = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_no_route(self):
    """
    Getter method for no_route, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_route (oc-yang:counter64)

    YANG Description: Packets dropped due to no FIB entry for this ipv4 or ipv6 lookup.
    """
    return self.__no_route
      
  def _set_no_route(self, v, load=False):
    """
    Setter method for no_route, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_route (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_no_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_no_route() directly.

    YANG Description: Packets dropped due to no FIB entry for this ipv4 or ipv6 lookup.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """no_route must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__no_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_no_route(self):
    self.__no_route = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_no_label(self):
    """
    Getter method for no_label, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_label (oc-yang:counter64)

    YANG Description: Packets dropped due to no FIB entry for this MPLS label.
    """
    return self.__no_label
      
  def _set_no_label(self, v, load=False):
    """
    Setter method for no_label, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_label (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_no_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_no_label() directly.

    YANG Description: Packets dropped due to no FIB entry for this MPLS label.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """no_label must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__no_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_no_label(self):
    self.__no_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_no_nexthop(self):
    """
    Getter method for no_nexthop, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_nexthop (oc-yang:counter64)

    YANG Description: Packets dropped due to no nexthop information - either the nexthop is
not programmed, or there is an invalid nexthop, or there is no ARP
information so the nexthop is in invalid state.
    """
    return self.__no_nexthop
      
  def _set_no_nexthop(self, v, load=False):
    """
    Setter method for no_nexthop, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/no_nexthop (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_no_nexthop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_no_nexthop() directly.

    YANG Description: Packets dropped due to no nexthop information - either the nexthop is
not programmed, or there is an invalid nexthop, or there is no ARP
information so the nexthop is in invalid state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """no_nexthop must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__no_nexthop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_no_nexthop(self):
    self.__no_nexthop = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="no-nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_invalid_packet(self):
    """
    Getter method for invalid_packet, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/invalid_packet (oc-yang:counter64)

    YANG Description: Packets dropped due to invalid packet format for ipv4, ipv6, or MPLS.
    """
    return self.__invalid_packet
      
  def _set_invalid_packet(self, v, load=False):
    """
    Setter method for invalid_packet, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/invalid_packet (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_packet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_packet() directly.

    YANG Description: Packets dropped due to invalid packet format for ipv4, ipv6, or MPLS.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_packet must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__invalid_packet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_packet(self):
    self.__invalid_packet = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_forwarding_policy(self):
    """
    Getter method for forwarding_policy, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/forwarding_policy (oc-yang:counter64)

    YANG Description: Packets dropped due to either a filter applied as part of a forwarding
policy or dropped due to a policy-based-routing policy lookup.
    """
    return self.__forwarding_policy
      
  def _set_forwarding_policy(self, v, load=False):
    """
    Setter method for forwarding_policy, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/forwarding_policy (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_forwarding_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_forwarding_policy() directly.

    YANG Description: Packets dropped due to either a filter applied as part of a forwarding
policy or dropped due to a policy-based-routing policy lookup.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="forwarding-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """forwarding_policy must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="forwarding-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__forwarding_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_forwarding_policy(self):
    self.__forwarding_policy = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="forwarding-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_incorrect_software_state(self):
    """
    Getter method for incorrect_software_state, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/incorrect_software_state (oc-yang:counter64)

    YANG Description: Packets dropped due to any incorrect or invalid software state of the
forwarding structures during lookup.
    """
    return self.__incorrect_software_state
      
  def _set_incorrect_software_state(self, v, load=False):
    """
    Setter method for incorrect_software_state, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/incorrect_software_state (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_incorrect_software_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_incorrect_software_state() directly.

    YANG Description: Packets dropped due to any incorrect or invalid software state of the
forwarding structures during lookup.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="incorrect-software-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """incorrect_software_state must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="incorrect-software-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__incorrect_software_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_incorrect_software_state(self):
    self.__incorrect_software_state = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="incorrect-software-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_rate_limit(self):
    """
    Getter method for rate_limit, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/rate_limit (oc-yang:counter64)

    YANG Description: Packets dropped due to rate limiters - either user configured rate
limiters or system rate limiters in the forwarding path.
    """
    return self.__rate_limit
      
  def _set_rate_limit(self, v, load=False):
    """
    Setter method for rate_limit, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/rate_limit (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rate_limit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rate_limit() directly.

    YANG Description: Packets dropped due to rate limiters - either user configured rate
limiters or system rate limiters in the forwarding path.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rate-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rate_limit must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rate-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rate_limit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rate_limit(self):
    self.__rate_limit = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rate-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_fragment_total_drops(self):
    """
    Getter method for fragment_total_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/fragment_total_drops (oc-yang:counter64)

    YANG Description: Total number of packets dropped that could not be fragmented by NPU
due to DF bit.
    """
    return self.__fragment_total_drops
      
  def _set_fragment_total_drops(self, v, load=False):
    """
    Setter method for fragment_total_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/fragment_total_drops (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fragment_total_drops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fragment_total_drops() directly.

    YANG Description: Total number of packets dropped that could not be fragmented by NPU
due to DF bit.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fragment_total_drops must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__fragment_total_drops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fragment_total_drops(self):
    self.__fragment_total_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_lookup_aggregate(self):
    """
    Getter method for lookup_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/lookup_aggregate (oc-yang:counter64)

    YANG Description: Packets dropped due to aggregate lookup drop counters - this counter
is sometimes referred to as Normal Discards or
ENQ_DISCARDED_PACKET_COUNTER.
    """
    return self.__lookup_aggregate
      
  def _set_lookup_aggregate(self, v, load=False):
    """
    Setter method for lookup_aggregate, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/lookup_aggregate (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_aggregate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_aggregate() directly.

    YANG Description: Packets dropped due to aggregate lookup drop counters - this counter
is sometimes referred to as Normal Discards or
ENQ_DISCARDED_PACKET_COUNTER.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_aggregate must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__lookup_aggregate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_aggregate(self):
    self.__lookup_aggregate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-aggregate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_acl_drops(self):
    """
    Getter method for acl_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/acl_drops (oc-yang:counter64)

    YANG Description: Packets dropped due to firewall or acl terms.
    """
    return self.__acl_drops
      
  def _set_acl_drops(self, v, load=False):
    """
    Setter method for acl_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/lookup_block/state/acl_drops (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_drops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_drops() directly.

    YANG Description: Packets dropped due to firewall or acl terms.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_drops must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__acl_drops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_drops(self):
    self.__acl_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  oversubscription = __builtin__.property(_get_oversubscription)
  no_route = __builtin__.property(_get_no_route)
  no_label = __builtin__.property(_get_no_label)
  no_nexthop = __builtin__.property(_get_no_nexthop)
  invalid_packet = __builtin__.property(_get_invalid_packet)
  forwarding_policy = __builtin__.property(_get_forwarding_policy)
  incorrect_software_state = __builtin__.property(_get_incorrect_software_state)
  rate_limit = __builtin__.property(_get_rate_limit)
  fragment_total_drops = __builtin__.property(_get_fragment_total_drops)
  lookup_aggregate = __builtin__.property(_get_lookup_aggregate)
  acl_drops = __builtin__.property(_get_acl_drops)


  _pyangbind_elements = OrderedDict([('oversubscription', oversubscription), ('no_route', no_route), ('no_label', no_label), ('no_nexthop', no_nexthop), ('invalid_packet', invalid_packet), ('forwarding_policy', forwarding_policy), ('incorrect_software_state', incorrect_software_state), ('rate_limit', rate_limit), ('fragment_total_drops', fragment_total_drops), ('lookup_aggregate', lookup_aggregate), ('acl_drops', acl_drops), ])


