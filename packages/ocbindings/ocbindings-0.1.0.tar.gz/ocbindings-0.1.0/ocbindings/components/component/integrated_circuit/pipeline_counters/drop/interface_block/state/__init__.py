# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/integrated-circuit/pipeline-counters/drop/interface-block/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Drop counters corresponding to the interface subsystem of the
IC.
  """
  __slots__ = ('_path_helper', '_extmethods', '__oversubscription','__in_drops','__out_drops',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__oversubscription = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__in_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'drop', 'interface-block', 'state']

  def _get_oversubscription(self):
    """
    Getter method for oversubscription, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/oversubscription (oc-yang:counter64)

    YANG Description: Number of packets dropped due to oversubscription of the
integrated-circuit subsystem block.
    """
    return self.__oversubscription
      
  def _set_oversubscription(self, v, load=False):
    """
    Setter method for oversubscription, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/oversubscription (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oversubscription is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oversubscription() directly.

    YANG Description: Number of packets dropped due to oversubscription of the
integrated-circuit subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oversubscription must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__oversubscription = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oversubscription(self):
    self.__oversubscription = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_in_drops(self):
    """
    Getter method for in_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/in_drops (oc-yang:counter64)

    YANG Description: Incoming drops towards the integrated-circuit interface
subsystem block from the interfaces due to any reason.
    """
    return self.__in_drops
      
  def _set_in_drops(self, v, load=False):
    """
    Setter method for in_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/in_drops (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_drops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_drops() directly.

    YANG Description: Incoming drops towards the integrated-circuit interface
subsystem block from the interfaces due to any reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_drops must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_drops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_drops(self):
    self.__in_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_drops(self):
    """
    Getter method for out_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/out_drops (oc-yang:counter64)

    YANG Description: Outgoing drops towards the interfaces from the
integrated-circuit interface subsystem block due to any reason.
    """
    return self.__out_drops
      
  def _set_out_drops(self, v, load=False):
    """
    Setter method for out_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/out_drops (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_drops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_drops() directly.

    YANG Description: Outgoing drops towards the interfaces from the
integrated-circuit interface subsystem block due to any reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_drops must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_drops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_drops(self):
    self.__out_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  oversubscription = __builtin__.property(_get_oversubscription)
  in_drops = __builtin__.property(_get_in_drops)
  out_drops = __builtin__.property(_get_out_drops)


  _pyangbind_elements = OrderedDict([('oversubscription', oversubscription), ('in_drops', in_drops), ('out_drops', out_drops), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/integrated-circuit/pipeline-counters/drop/interface-block/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Drop counters corresponding to the interface subsystem of the
IC.
  """
  __slots__ = ('_path_helper', '_extmethods', '__oversubscription','__in_drops','__out_drops',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__oversubscription = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__in_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'drop', 'interface-block', 'state']

  def _get_oversubscription(self):
    """
    Getter method for oversubscription, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/oversubscription (oc-yang:counter64)

    YANG Description: Number of packets dropped due to oversubscription of the
integrated-circuit subsystem block.
    """
    return self.__oversubscription
      
  def _set_oversubscription(self, v, load=False):
    """
    Setter method for oversubscription, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/oversubscription (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oversubscription is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oversubscription() directly.

    YANG Description: Number of packets dropped due to oversubscription of the
integrated-circuit subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oversubscription must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__oversubscription = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oversubscription(self):
    self.__oversubscription = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_in_drops(self):
    """
    Getter method for in_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/in_drops (oc-yang:counter64)

    YANG Description: Incoming drops towards the integrated-circuit interface
subsystem block from the interfaces due to any reason.
    """
    return self.__in_drops
      
  def _set_in_drops(self, v, load=False):
    """
    Setter method for in_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/in_drops (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_drops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_drops() directly.

    YANG Description: Incoming drops towards the integrated-circuit interface
subsystem block from the interfaces due to any reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_drops must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_drops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_drops(self):
    self.__in_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_drops(self):
    """
    Getter method for out_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/out_drops (oc-yang:counter64)

    YANG Description: Outgoing drops towards the interfaces from the
integrated-circuit interface subsystem block due to any reason.
    """
    return self.__out_drops
      
  def _set_out_drops(self, v, load=False):
    """
    Setter method for out_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/out_drops (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_drops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_drops() directly.

    YANG Description: Outgoing drops towards the interfaces from the
integrated-circuit interface subsystem block due to any reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_drops must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_drops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_drops(self):
    self.__out_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  oversubscription = __builtin__.property(_get_oversubscription)
  in_drops = __builtin__.property(_get_in_drops)
  out_drops = __builtin__.property(_get_out_drops)


  _pyangbind_elements = OrderedDict([('oversubscription', oversubscription), ('in_drops', in_drops), ('out_drops', out_drops), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/integrated-circuit/pipeline-counters/drop/interface-block/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Drop counters corresponding to the interface subsystem of the
IC.
  """
  __slots__ = ('_path_helper', '_extmethods', '__oversubscription','__in_drops','__out_drops',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__oversubscription = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__in_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'drop', 'interface-block', 'state']

  def _get_oversubscription(self):
    """
    Getter method for oversubscription, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/oversubscription (oc-yang:counter64)

    YANG Description: Number of packets dropped due to oversubscription of the
integrated-circuit subsystem block.
    """
    return self.__oversubscription
      
  def _set_oversubscription(self, v, load=False):
    """
    Setter method for oversubscription, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/oversubscription (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oversubscription is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oversubscription() directly.

    YANG Description: Number of packets dropped due to oversubscription of the
integrated-circuit subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oversubscription must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__oversubscription = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oversubscription(self):
    self.__oversubscription = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_in_drops(self):
    """
    Getter method for in_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/in_drops (oc-yang:counter64)

    YANG Description: Incoming drops towards the integrated-circuit interface
subsystem block from the interfaces due to any reason.
    """
    return self.__in_drops
      
  def _set_in_drops(self, v, load=False):
    """
    Setter method for in_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/in_drops (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_drops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_drops() directly.

    YANG Description: Incoming drops towards the integrated-circuit interface
subsystem block from the interfaces due to any reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_drops must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_drops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_drops(self):
    self.__in_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_drops(self):
    """
    Getter method for out_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/out_drops (oc-yang:counter64)

    YANG Description: Outgoing drops towards the interfaces from the
integrated-circuit interface subsystem block due to any reason.
    """
    return self.__out_drops
      
  def _set_out_drops(self, v, load=False):
    """
    Setter method for out_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/out_drops (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_drops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_drops() directly.

    YANG Description: Outgoing drops towards the interfaces from the
integrated-circuit interface subsystem block due to any reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_drops must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_drops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_drops(self):
    self.__out_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  oversubscription = __builtin__.property(_get_oversubscription)
  in_drops = __builtin__.property(_get_in_drops)
  out_drops = __builtin__.property(_get_out_drops)


  _pyangbind_elements = OrderedDict([('oversubscription', oversubscription), ('in_drops', in_drops), ('out_drops', out_drops), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/integrated-circuit/pipeline-counters/drop/interface-block/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Drop counters corresponding to the interface subsystem of the
IC.
  """
  __slots__ = ('_path_helper', '_extmethods', '__oversubscription','__in_drops','__out_drops',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__oversubscription = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__in_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'drop', 'interface-block', 'state']

  def _get_oversubscription(self):
    """
    Getter method for oversubscription, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/oversubscription (oc-yang:counter64)

    YANG Description: Number of packets dropped due to oversubscription of the
integrated-circuit subsystem block.
    """
    return self.__oversubscription
      
  def _set_oversubscription(self, v, load=False):
    """
    Setter method for oversubscription, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/oversubscription (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oversubscription is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oversubscription() directly.

    YANG Description: Number of packets dropped due to oversubscription of the
integrated-circuit subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oversubscription must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__oversubscription = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oversubscription(self):
    self.__oversubscription = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="oversubscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_in_drops(self):
    """
    Getter method for in_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/in_drops (oc-yang:counter64)

    YANG Description: Incoming drops towards the integrated-circuit interface
subsystem block from the interfaces due to any reason.
    """
    return self.__in_drops
      
  def _set_in_drops(self, v, load=False):
    """
    Setter method for in_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/in_drops (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_drops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_drops() directly.

    YANG Description: Incoming drops towards the integrated-circuit interface
subsystem block from the interfaces due to any reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_drops must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_drops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_drops(self):
    self.__in_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_drops(self):
    """
    Getter method for out_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/out_drops (oc-yang:counter64)

    YANG Description: Outgoing drops towards the interfaces from the
integrated-circuit interface subsystem block due to any reason.
    """
    return self.__out_drops
      
  def _set_out_drops(self, v, load=False):
    """
    Setter method for out_drops, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop/interface_block/state/out_drops (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_drops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_drops() directly.

    YANG Description: Outgoing drops towards the interfaces from the
integrated-circuit interface subsystem block due to any reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_drops must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_drops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_drops(self):
    self.__out_drops = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-drops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  oversubscription = __builtin__.property(_get_oversubscription)
  in_drops = __builtin__.property(_get_in_drops)
  out_drops = __builtin__.property(_get_out_drops)


  _pyangbind_elements = OrderedDict([('oversubscription', oversubscription), ('in_drops', in_drops), ('out_drops', out_drops), ])


