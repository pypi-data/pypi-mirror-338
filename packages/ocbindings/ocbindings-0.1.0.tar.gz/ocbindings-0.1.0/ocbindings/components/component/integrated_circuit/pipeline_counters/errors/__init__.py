# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import interface_block
from . import lookup_block
from . import queueing_block
from . import fabric_block
from . import host_interface_block
class errors(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/integrated-circuit/pipeline-counters/errors. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: IC errors for all five NPU sub-blocks.
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_block','__lookup_block','__queueing_block','__fabric_block','__host_interface_block',)

  _yang_name = 'errors'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface_block = YANGDynClass(base=interface_block.interface_block, is_container='container', yang_name="interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__lookup_block = YANGDynClass(base=lookup_block.lookup_block, is_container='container', yang_name="lookup-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__queueing_block = YANGDynClass(base=queueing_block.queueing_block, is_container='container', yang_name="queueing-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__fabric_block = YANGDynClass(base=fabric_block.fabric_block, is_container='container', yang_name="fabric-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__host_interface_block = YANGDynClass(base=host_interface_block.host_interface_block, is_container='container', yang_name="host-interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'errors']

  def _get_interface_block(self):
    """
    Getter method for interface_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/interface_block (container)

    YANG Description: The IC interface subsystem connects the IC to the external PHY or
MAC.
    """
    return self.__interface_block
      
  def _set_interface_block(self, v, load=False):
    """
    Setter method for interface_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/interface_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_block() directly.

    YANG Description: The IC interface subsystem connects the IC to the external PHY or
MAC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interface_block.interface_block, is_container='container', yang_name="interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interface_block.interface_block, is_container='container', yang_name="interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__interface_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_block(self):
    self.__interface_block = YANGDynClass(base=interface_block.interface_block, is_container='container', yang_name="interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_lookup_block(self):
    """
    Getter method for lookup_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/lookup_block (container)

    YANG Description: The IC lookup subsystem perform the next hop lookup of the packet
and other forwarding features such as firewall filters.
    """
    return self.__lookup_block
      
  def _set_lookup_block(self, v, load=False):
    """
    Setter method for lookup_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/lookup_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_block() directly.

    YANG Description: The IC lookup subsystem perform the next hop lookup of the packet
and other forwarding features such as firewall filters.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=lookup_block.lookup_block, is_container='container', yang_name="lookup-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=lookup_block.lookup_block, is_container='container', yang_name="lookup-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__lookup_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_block(self):
    self.__lookup_block = YANGDynClass(base=lookup_block.lookup_block, is_container='container', yang_name="lookup-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_queueing_block(self):
    """
    Getter method for queueing_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/queueing_block (container)

    YANG Description: The IC queueing subsystem buffers the packet while processing it
and queues the packet for delivery to the next stage
    """
    return self.__queueing_block
      
  def _set_queueing_block(self, v, load=False):
    """
    Setter method for queueing_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/queueing_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queueing_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queueing_block() directly.

    YANG Description: The IC queueing subsystem buffers the packet while processing it
and queues the packet for delivery to the next stage
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queueing_block.queueing_block, is_container='container', yang_name="queueing-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queueing_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queueing_block.queueing_block, is_container='container', yang_name="queueing-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__queueing_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queueing_block(self):
    self.__queueing_block = YANGDynClass(base=queueing_block.queueing_block, is_container='container', yang_name="queueing-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_fabric_block(self):
    """
    Getter method for fabric_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/fabric_block (container)

    YANG Description: The IC fabric block subsystem connects the IC to the external
systems fabric subsystem
    """
    return self.__fabric_block
      
  def _set_fabric_block(self, v, load=False):
    """
    Setter method for fabric_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/fabric_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fabric_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fabric_block() directly.

    YANG Description: The IC fabric block subsystem connects the IC to the external
systems fabric subsystem
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=fabric_block.fabric_block, is_container='container', yang_name="fabric-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fabric_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=fabric_block.fabric_block, is_container='container', yang_name="fabric-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__fabric_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fabric_block(self):
    self.__fabric_block = YANGDynClass(base=fabric_block.fabric_block, is_container='container', yang_name="fabric-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_host_interface_block(self):
    """
    Getter method for host_interface_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/host_interface_block (container)

    YANG Description: The IC host interface block subsystem connects the IC to the
external systems host or control subsystem
    """
    return self.__host_interface_block
      
  def _set_host_interface_block(self, v, load=False):
    """
    Setter method for host_interface_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/host_interface_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_host_interface_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_host_interface_block() directly.

    YANG Description: The IC host interface block subsystem connects the IC to the
external systems host or control subsystem
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=host_interface_block.host_interface_block, is_container='container', yang_name="host-interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """host_interface_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=host_interface_block.host_interface_block, is_container='container', yang_name="host-interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__host_interface_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_host_interface_block(self):
    self.__host_interface_block = YANGDynClass(base=host_interface_block.host_interface_block, is_container='container', yang_name="host-interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)

  interface_block = __builtin__.property(_get_interface_block)
  lookup_block = __builtin__.property(_get_lookup_block)
  queueing_block = __builtin__.property(_get_queueing_block)
  fabric_block = __builtin__.property(_get_fabric_block)
  host_interface_block = __builtin__.property(_get_host_interface_block)


  _pyangbind_elements = OrderedDict([('interface_block', interface_block), ('lookup_block', lookup_block), ('queueing_block', queueing_block), ('fabric_block', fabric_block), ('host_interface_block', host_interface_block), ])


from . import interface_block
from . import lookup_block
from . import queueing_block
from . import fabric_block
from . import host_interface_block
class errors(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/integrated-circuit/pipeline-counters/errors. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: IC errors for all five NPU sub-blocks.
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_block','__lookup_block','__queueing_block','__fabric_block','__host_interface_block',)

  _yang_name = 'errors'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface_block = YANGDynClass(base=interface_block.interface_block, is_container='container', yang_name="interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__lookup_block = YANGDynClass(base=lookup_block.lookup_block, is_container='container', yang_name="lookup-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__queueing_block = YANGDynClass(base=queueing_block.queueing_block, is_container='container', yang_name="queueing-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__fabric_block = YANGDynClass(base=fabric_block.fabric_block, is_container='container', yang_name="fabric-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__host_interface_block = YANGDynClass(base=host_interface_block.host_interface_block, is_container='container', yang_name="host-interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'errors']

  def _get_interface_block(self):
    """
    Getter method for interface_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/interface_block (container)

    YANG Description: The IC interface subsystem connects the IC to the external PHY or
MAC.
    """
    return self.__interface_block
      
  def _set_interface_block(self, v, load=False):
    """
    Setter method for interface_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/interface_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_block() directly.

    YANG Description: The IC interface subsystem connects the IC to the external PHY or
MAC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interface_block.interface_block, is_container='container', yang_name="interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interface_block.interface_block, is_container='container', yang_name="interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__interface_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_block(self):
    self.__interface_block = YANGDynClass(base=interface_block.interface_block, is_container='container', yang_name="interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_lookup_block(self):
    """
    Getter method for lookup_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/lookup_block (container)

    YANG Description: The IC lookup subsystem perform the next hop lookup of the packet
and other forwarding features such as firewall filters.
    """
    return self.__lookup_block
      
  def _set_lookup_block(self, v, load=False):
    """
    Setter method for lookup_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/lookup_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_block() directly.

    YANG Description: The IC lookup subsystem perform the next hop lookup of the packet
and other forwarding features such as firewall filters.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=lookup_block.lookup_block, is_container='container', yang_name="lookup-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=lookup_block.lookup_block, is_container='container', yang_name="lookup-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__lookup_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_block(self):
    self.__lookup_block = YANGDynClass(base=lookup_block.lookup_block, is_container='container', yang_name="lookup-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_queueing_block(self):
    """
    Getter method for queueing_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/queueing_block (container)

    YANG Description: The IC queueing subsystem buffers the packet while processing it
and queues the packet for delivery to the next stage
    """
    return self.__queueing_block
      
  def _set_queueing_block(self, v, load=False):
    """
    Setter method for queueing_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/queueing_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queueing_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queueing_block() directly.

    YANG Description: The IC queueing subsystem buffers the packet while processing it
and queues the packet for delivery to the next stage
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queueing_block.queueing_block, is_container='container', yang_name="queueing-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queueing_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queueing_block.queueing_block, is_container='container', yang_name="queueing-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__queueing_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queueing_block(self):
    self.__queueing_block = YANGDynClass(base=queueing_block.queueing_block, is_container='container', yang_name="queueing-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_fabric_block(self):
    """
    Getter method for fabric_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/fabric_block (container)

    YANG Description: The IC fabric block subsystem connects the IC to the external
systems fabric subsystem
    """
    return self.__fabric_block
      
  def _set_fabric_block(self, v, load=False):
    """
    Setter method for fabric_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/fabric_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fabric_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fabric_block() directly.

    YANG Description: The IC fabric block subsystem connects the IC to the external
systems fabric subsystem
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=fabric_block.fabric_block, is_container='container', yang_name="fabric-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fabric_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=fabric_block.fabric_block, is_container='container', yang_name="fabric-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__fabric_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fabric_block(self):
    self.__fabric_block = YANGDynClass(base=fabric_block.fabric_block, is_container='container', yang_name="fabric-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_host_interface_block(self):
    """
    Getter method for host_interface_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/host_interface_block (container)

    YANG Description: The IC host interface block subsystem connects the IC to the
external systems host or control subsystem
    """
    return self.__host_interface_block
      
  def _set_host_interface_block(self, v, load=False):
    """
    Setter method for host_interface_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/host_interface_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_host_interface_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_host_interface_block() directly.

    YANG Description: The IC host interface block subsystem connects the IC to the
external systems host or control subsystem
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=host_interface_block.host_interface_block, is_container='container', yang_name="host-interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """host_interface_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=host_interface_block.host_interface_block, is_container='container', yang_name="host-interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__host_interface_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_host_interface_block(self):
    self.__host_interface_block = YANGDynClass(base=host_interface_block.host_interface_block, is_container='container', yang_name="host-interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)

  interface_block = __builtin__.property(_get_interface_block)
  lookup_block = __builtin__.property(_get_lookup_block)
  queueing_block = __builtin__.property(_get_queueing_block)
  fabric_block = __builtin__.property(_get_fabric_block)
  host_interface_block = __builtin__.property(_get_host_interface_block)


  _pyangbind_elements = OrderedDict([('interface_block', interface_block), ('lookup_block', lookup_block), ('queueing_block', queueing_block), ('fabric_block', fabric_block), ('host_interface_block', host_interface_block), ])


from . import interface_block
from . import lookup_block
from . import queueing_block
from . import fabric_block
from . import host_interface_block
class errors(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/integrated-circuit/pipeline-counters/errors. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: IC errors for all five NPU sub-blocks.
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_block','__lookup_block','__queueing_block','__fabric_block','__host_interface_block',)

  _yang_name = 'errors'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface_block = YANGDynClass(base=interface_block.interface_block, is_container='container', yang_name="interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__lookup_block = YANGDynClass(base=lookup_block.lookup_block, is_container='container', yang_name="lookup-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__queueing_block = YANGDynClass(base=queueing_block.queueing_block, is_container='container', yang_name="queueing-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__fabric_block = YANGDynClass(base=fabric_block.fabric_block, is_container='container', yang_name="fabric-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__host_interface_block = YANGDynClass(base=host_interface_block.host_interface_block, is_container='container', yang_name="host-interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'errors']

  def _get_interface_block(self):
    """
    Getter method for interface_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/interface_block (container)

    YANG Description: The IC interface subsystem connects the IC to the external PHY or
MAC.
    """
    return self.__interface_block
      
  def _set_interface_block(self, v, load=False):
    """
    Setter method for interface_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/interface_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_block() directly.

    YANG Description: The IC interface subsystem connects the IC to the external PHY or
MAC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interface_block.interface_block, is_container='container', yang_name="interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interface_block.interface_block, is_container='container', yang_name="interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__interface_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_block(self):
    self.__interface_block = YANGDynClass(base=interface_block.interface_block, is_container='container', yang_name="interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_lookup_block(self):
    """
    Getter method for lookup_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/lookup_block (container)

    YANG Description: The IC lookup subsystem perform the next hop lookup of the packet
and other forwarding features such as firewall filters.
    """
    return self.__lookup_block
      
  def _set_lookup_block(self, v, load=False):
    """
    Setter method for lookup_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/lookup_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_block() directly.

    YANG Description: The IC lookup subsystem perform the next hop lookup of the packet
and other forwarding features such as firewall filters.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=lookup_block.lookup_block, is_container='container', yang_name="lookup-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=lookup_block.lookup_block, is_container='container', yang_name="lookup-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__lookup_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_block(self):
    self.__lookup_block = YANGDynClass(base=lookup_block.lookup_block, is_container='container', yang_name="lookup-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_queueing_block(self):
    """
    Getter method for queueing_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/queueing_block (container)

    YANG Description: The IC queueing subsystem buffers the packet while processing it
and queues the packet for delivery to the next stage
    """
    return self.__queueing_block
      
  def _set_queueing_block(self, v, load=False):
    """
    Setter method for queueing_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/queueing_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queueing_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queueing_block() directly.

    YANG Description: The IC queueing subsystem buffers the packet while processing it
and queues the packet for delivery to the next stage
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queueing_block.queueing_block, is_container='container', yang_name="queueing-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queueing_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queueing_block.queueing_block, is_container='container', yang_name="queueing-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__queueing_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queueing_block(self):
    self.__queueing_block = YANGDynClass(base=queueing_block.queueing_block, is_container='container', yang_name="queueing-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_fabric_block(self):
    """
    Getter method for fabric_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/fabric_block (container)

    YANG Description: The IC fabric block subsystem connects the IC to the external
systems fabric subsystem
    """
    return self.__fabric_block
      
  def _set_fabric_block(self, v, load=False):
    """
    Setter method for fabric_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/fabric_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fabric_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fabric_block() directly.

    YANG Description: The IC fabric block subsystem connects the IC to the external
systems fabric subsystem
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=fabric_block.fabric_block, is_container='container', yang_name="fabric-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fabric_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=fabric_block.fabric_block, is_container='container', yang_name="fabric-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__fabric_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fabric_block(self):
    self.__fabric_block = YANGDynClass(base=fabric_block.fabric_block, is_container='container', yang_name="fabric-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_host_interface_block(self):
    """
    Getter method for host_interface_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/host_interface_block (container)

    YANG Description: The IC host interface block subsystem connects the IC to the
external systems host or control subsystem
    """
    return self.__host_interface_block
      
  def _set_host_interface_block(self, v, load=False):
    """
    Setter method for host_interface_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/host_interface_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_host_interface_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_host_interface_block() directly.

    YANG Description: The IC host interface block subsystem connects the IC to the
external systems host or control subsystem
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=host_interface_block.host_interface_block, is_container='container', yang_name="host-interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """host_interface_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=host_interface_block.host_interface_block, is_container='container', yang_name="host-interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__host_interface_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_host_interface_block(self):
    self.__host_interface_block = YANGDynClass(base=host_interface_block.host_interface_block, is_container='container', yang_name="host-interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)

  interface_block = __builtin__.property(_get_interface_block)
  lookup_block = __builtin__.property(_get_lookup_block)
  queueing_block = __builtin__.property(_get_queueing_block)
  fabric_block = __builtin__.property(_get_fabric_block)
  host_interface_block = __builtin__.property(_get_host_interface_block)


  _pyangbind_elements = OrderedDict([('interface_block', interface_block), ('lookup_block', lookup_block), ('queueing_block', queueing_block), ('fabric_block', fabric_block), ('host_interface_block', host_interface_block), ])


from . import interface_block
from . import lookup_block
from . import queueing_block
from . import fabric_block
from . import host_interface_block
class errors(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/integrated-circuit/pipeline-counters/errors. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: IC errors for all five NPU sub-blocks.
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_block','__lookup_block','__queueing_block','__fabric_block','__host_interface_block',)

  _yang_name = 'errors'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface_block = YANGDynClass(base=interface_block.interface_block, is_container='container', yang_name="interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__lookup_block = YANGDynClass(base=lookup_block.lookup_block, is_container='container', yang_name="lookup-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__queueing_block = YANGDynClass(base=queueing_block.queueing_block, is_container='container', yang_name="queueing-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__fabric_block = YANGDynClass(base=fabric_block.fabric_block, is_container='container', yang_name="fabric-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__host_interface_block = YANGDynClass(base=host_interface_block.host_interface_block, is_container='container', yang_name="host-interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'errors']

  def _get_interface_block(self):
    """
    Getter method for interface_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/interface_block (container)

    YANG Description: The IC interface subsystem connects the IC to the external PHY or
MAC.
    """
    return self.__interface_block
      
  def _set_interface_block(self, v, load=False):
    """
    Setter method for interface_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/interface_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_block() directly.

    YANG Description: The IC interface subsystem connects the IC to the external PHY or
MAC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interface_block.interface_block, is_container='container', yang_name="interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interface_block.interface_block, is_container='container', yang_name="interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__interface_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_block(self):
    self.__interface_block = YANGDynClass(base=interface_block.interface_block, is_container='container', yang_name="interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_lookup_block(self):
    """
    Getter method for lookup_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/lookup_block (container)

    YANG Description: The IC lookup subsystem perform the next hop lookup of the packet
and other forwarding features such as firewall filters.
    """
    return self.__lookup_block
      
  def _set_lookup_block(self, v, load=False):
    """
    Setter method for lookup_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/lookup_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_block() directly.

    YANG Description: The IC lookup subsystem perform the next hop lookup of the packet
and other forwarding features such as firewall filters.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=lookup_block.lookup_block, is_container='container', yang_name="lookup-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=lookup_block.lookup_block, is_container='container', yang_name="lookup-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__lookup_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_block(self):
    self.__lookup_block = YANGDynClass(base=lookup_block.lookup_block, is_container='container', yang_name="lookup-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_queueing_block(self):
    """
    Getter method for queueing_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/queueing_block (container)

    YANG Description: The IC queueing subsystem buffers the packet while processing it
and queues the packet for delivery to the next stage
    """
    return self.__queueing_block
      
  def _set_queueing_block(self, v, load=False):
    """
    Setter method for queueing_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/queueing_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queueing_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queueing_block() directly.

    YANG Description: The IC queueing subsystem buffers the packet while processing it
and queues the packet for delivery to the next stage
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queueing_block.queueing_block, is_container='container', yang_name="queueing-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queueing_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queueing_block.queueing_block, is_container='container', yang_name="queueing-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__queueing_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queueing_block(self):
    self.__queueing_block = YANGDynClass(base=queueing_block.queueing_block, is_container='container', yang_name="queueing-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_fabric_block(self):
    """
    Getter method for fabric_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/fabric_block (container)

    YANG Description: The IC fabric block subsystem connects the IC to the external
systems fabric subsystem
    """
    return self.__fabric_block
      
  def _set_fabric_block(self, v, load=False):
    """
    Setter method for fabric_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/fabric_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fabric_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fabric_block() directly.

    YANG Description: The IC fabric block subsystem connects the IC to the external
systems fabric subsystem
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=fabric_block.fabric_block, is_container='container', yang_name="fabric-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fabric_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=fabric_block.fabric_block, is_container='container', yang_name="fabric-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__fabric_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fabric_block(self):
    self.__fabric_block = YANGDynClass(base=fabric_block.fabric_block, is_container='container', yang_name="fabric-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_host_interface_block(self):
    """
    Getter method for host_interface_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/host_interface_block (container)

    YANG Description: The IC host interface block subsystem connects the IC to the
external systems host or control subsystem
    """
    return self.__host_interface_block
      
  def _set_host_interface_block(self, v, load=False):
    """
    Setter method for host_interface_block, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/host_interface_block (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_host_interface_block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_host_interface_block() directly.

    YANG Description: The IC host interface block subsystem connects the IC to the
external systems host or control subsystem
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=host_interface_block.host_interface_block, is_container='container', yang_name="host-interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """host_interface_block must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=host_interface_block.host_interface_block, is_container='container', yang_name="host-interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__host_interface_block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_host_interface_block(self):
    self.__host_interface_block = YANGDynClass(base=host_interface_block.host_interface_block, is_container='container', yang_name="host-interface-block", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)

  interface_block = __builtin__.property(_get_interface_block)
  lookup_block = __builtin__.property(_get_lookup_block)
  queueing_block = __builtin__.property(_get_queueing_block)
  fabric_block = __builtin__.property(_get_fabric_block)
  host_interface_block = __builtin__.property(_get_host_interface_block)


  _pyangbind_elements = OrderedDict([('interface_block', interface_block), ('lookup_block', lookup_block), ('queueing_block', queueing_block), ('fabric_block', fabric_block), ('host_interface_block', host_interface_block), ])


