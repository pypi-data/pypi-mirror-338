# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/integrated-circuit/memory/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to integrated circuit memory.
  """
  __slots__ = ('_path_helper', '_extmethods', '__corrected_parity_errors','__uncorrected_parity_errors','__total_parity_errors',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__corrected_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="corrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    self.__uncorrected_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uncorrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    self.__total_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'memory', 'state']

  def _get_corrected_parity_errors(self):
    """
    Getter method for corrected_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/corrected_parity_errors (uint64)

    YANG Description: Number of corrected parity errors. Single bit ECC errors can be
detected and corrected by most integrated circuits.
    """
    return self.__corrected_parity_errors
      
  def _set_corrected_parity_errors(self, v, load=False):
    """
    Setter method for corrected_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/corrected_parity_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_corrected_parity_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_corrected_parity_errors() directly.

    YANG Description: Number of corrected parity errors. Single bit ECC errors can be
detected and corrected by most integrated circuits.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="corrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """corrected_parity_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="corrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)""",
        })

    self.__corrected_parity_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_corrected_parity_errors(self):
    self.__corrected_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="corrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)


  def _get_uncorrected_parity_errors(self):
    """
    Getter method for uncorrected_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/uncorrected_parity_errors (uint64)

    YANG Description: Number of uncorrected parity errors. Multi-bit ECC errors can be
detected but cannot be corrected by most integrated circuits.
    """
    return self.__uncorrected_parity_errors
      
  def _set_uncorrected_parity_errors(self, v, load=False):
    """
    Setter method for uncorrected_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/uncorrected_parity_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uncorrected_parity_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uncorrected_parity_errors() directly.

    YANG Description: Number of uncorrected parity errors. Multi-bit ECC errors can be
detected but cannot be corrected by most integrated circuits.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uncorrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uncorrected_parity_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uncorrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)""",
        })

    self.__uncorrected_parity_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uncorrected_parity_errors(self):
    self.__uncorrected_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uncorrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)


  def _get_total_parity_errors(self):
    """
    Getter method for total_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/total_parity_errors (uint64)

    YANG Description: Total number of parity errors. This includes both the corrected and
uncorrected parity errors.
    """
    return self.__total_parity_errors
      
  def _set_total_parity_errors(self, v, load=False):
    """
    Setter method for total_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/total_parity_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_parity_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_parity_errors() directly.

    YANG Description: Total number of parity errors. This includes both the corrected and
uncorrected parity errors.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_parity_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)""",
        })

    self.__total_parity_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_parity_errors(self):
    self.__total_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)

  corrected_parity_errors = __builtin__.property(_get_corrected_parity_errors)
  uncorrected_parity_errors = __builtin__.property(_get_uncorrected_parity_errors)
  total_parity_errors = __builtin__.property(_get_total_parity_errors)


  _pyangbind_elements = OrderedDict([('corrected_parity_errors', corrected_parity_errors), ('uncorrected_parity_errors', uncorrected_parity_errors), ('total_parity_errors', total_parity_errors), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/integrated-circuit/memory/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to integrated circuit memory.
  """
  __slots__ = ('_path_helper', '_extmethods', '__corrected_parity_errors','__uncorrected_parity_errors','__total_parity_errors',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__corrected_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="corrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    self.__uncorrected_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uncorrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    self.__total_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'memory', 'state']

  def _get_corrected_parity_errors(self):
    """
    Getter method for corrected_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/corrected_parity_errors (uint64)

    YANG Description: Number of corrected parity errors. Single bit ECC errors can be
detected and corrected by most integrated circuits.
    """
    return self.__corrected_parity_errors
      
  def _set_corrected_parity_errors(self, v, load=False):
    """
    Setter method for corrected_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/corrected_parity_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_corrected_parity_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_corrected_parity_errors() directly.

    YANG Description: Number of corrected parity errors. Single bit ECC errors can be
detected and corrected by most integrated circuits.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="corrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """corrected_parity_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="corrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)""",
        })

    self.__corrected_parity_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_corrected_parity_errors(self):
    self.__corrected_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="corrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)


  def _get_uncorrected_parity_errors(self):
    """
    Getter method for uncorrected_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/uncorrected_parity_errors (uint64)

    YANG Description: Number of uncorrected parity errors. Multi-bit ECC errors can be
detected but cannot be corrected by most integrated circuits.
    """
    return self.__uncorrected_parity_errors
      
  def _set_uncorrected_parity_errors(self, v, load=False):
    """
    Setter method for uncorrected_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/uncorrected_parity_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uncorrected_parity_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uncorrected_parity_errors() directly.

    YANG Description: Number of uncorrected parity errors. Multi-bit ECC errors can be
detected but cannot be corrected by most integrated circuits.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uncorrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uncorrected_parity_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uncorrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)""",
        })

    self.__uncorrected_parity_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uncorrected_parity_errors(self):
    self.__uncorrected_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uncorrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)


  def _get_total_parity_errors(self):
    """
    Getter method for total_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/total_parity_errors (uint64)

    YANG Description: Total number of parity errors. This includes both the corrected and
uncorrected parity errors.
    """
    return self.__total_parity_errors
      
  def _set_total_parity_errors(self, v, load=False):
    """
    Setter method for total_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/total_parity_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_parity_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_parity_errors() directly.

    YANG Description: Total number of parity errors. This includes both the corrected and
uncorrected parity errors.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_parity_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)""",
        })

    self.__total_parity_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_parity_errors(self):
    self.__total_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)

  corrected_parity_errors = __builtin__.property(_get_corrected_parity_errors)
  uncorrected_parity_errors = __builtin__.property(_get_uncorrected_parity_errors)
  total_parity_errors = __builtin__.property(_get_total_parity_errors)


  _pyangbind_elements = OrderedDict([('corrected_parity_errors', corrected_parity_errors), ('uncorrected_parity_errors', uncorrected_parity_errors), ('total_parity_errors', total_parity_errors), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/integrated-circuit/memory/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to integrated circuit memory.
  """
  __slots__ = ('_path_helper', '_extmethods', '__corrected_parity_errors','__uncorrected_parity_errors','__total_parity_errors',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__corrected_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="corrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    self.__uncorrected_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uncorrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    self.__total_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'memory', 'state']

  def _get_corrected_parity_errors(self):
    """
    Getter method for corrected_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/corrected_parity_errors (uint64)

    YANG Description: Number of corrected parity errors. Single bit ECC errors can be
detected and corrected by most integrated circuits.
    """
    return self.__corrected_parity_errors
      
  def _set_corrected_parity_errors(self, v, load=False):
    """
    Setter method for corrected_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/corrected_parity_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_corrected_parity_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_corrected_parity_errors() directly.

    YANG Description: Number of corrected parity errors. Single bit ECC errors can be
detected and corrected by most integrated circuits.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="corrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """corrected_parity_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="corrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)""",
        })

    self.__corrected_parity_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_corrected_parity_errors(self):
    self.__corrected_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="corrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)


  def _get_uncorrected_parity_errors(self):
    """
    Getter method for uncorrected_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/uncorrected_parity_errors (uint64)

    YANG Description: Number of uncorrected parity errors. Multi-bit ECC errors can be
detected but cannot be corrected by most integrated circuits.
    """
    return self.__uncorrected_parity_errors
      
  def _set_uncorrected_parity_errors(self, v, load=False):
    """
    Setter method for uncorrected_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/uncorrected_parity_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uncorrected_parity_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uncorrected_parity_errors() directly.

    YANG Description: Number of uncorrected parity errors. Multi-bit ECC errors can be
detected but cannot be corrected by most integrated circuits.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uncorrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uncorrected_parity_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uncorrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)""",
        })

    self.__uncorrected_parity_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uncorrected_parity_errors(self):
    self.__uncorrected_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uncorrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)


  def _get_total_parity_errors(self):
    """
    Getter method for total_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/total_parity_errors (uint64)

    YANG Description: Total number of parity errors. This includes both the corrected and
uncorrected parity errors.
    """
    return self.__total_parity_errors
      
  def _set_total_parity_errors(self, v, load=False):
    """
    Setter method for total_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/total_parity_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_parity_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_parity_errors() directly.

    YANG Description: Total number of parity errors. This includes both the corrected and
uncorrected parity errors.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_parity_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)""",
        })

    self.__total_parity_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_parity_errors(self):
    self.__total_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)

  corrected_parity_errors = __builtin__.property(_get_corrected_parity_errors)
  uncorrected_parity_errors = __builtin__.property(_get_uncorrected_parity_errors)
  total_parity_errors = __builtin__.property(_get_total_parity_errors)


  _pyangbind_elements = OrderedDict([('corrected_parity_errors', corrected_parity_errors), ('uncorrected_parity_errors', uncorrected_parity_errors), ('total_parity_errors', total_parity_errors), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/integrated-circuit/memory/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to integrated circuit memory.
  """
  __slots__ = ('_path_helper', '_extmethods', '__corrected_parity_errors','__uncorrected_parity_errors','__total_parity_errors',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__corrected_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="corrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    self.__uncorrected_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uncorrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    self.__total_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'memory', 'state']

  def _get_corrected_parity_errors(self):
    """
    Getter method for corrected_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/corrected_parity_errors (uint64)

    YANG Description: Number of corrected parity errors. Single bit ECC errors can be
detected and corrected by most integrated circuits.
    """
    return self.__corrected_parity_errors
      
  def _set_corrected_parity_errors(self, v, load=False):
    """
    Setter method for corrected_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/corrected_parity_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_corrected_parity_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_corrected_parity_errors() directly.

    YANG Description: Number of corrected parity errors. Single bit ECC errors can be
detected and corrected by most integrated circuits.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="corrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """corrected_parity_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="corrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)""",
        })

    self.__corrected_parity_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_corrected_parity_errors(self):
    self.__corrected_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="corrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)


  def _get_uncorrected_parity_errors(self):
    """
    Getter method for uncorrected_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/uncorrected_parity_errors (uint64)

    YANG Description: Number of uncorrected parity errors. Multi-bit ECC errors can be
detected but cannot be corrected by most integrated circuits.
    """
    return self.__uncorrected_parity_errors
      
  def _set_uncorrected_parity_errors(self, v, load=False):
    """
    Setter method for uncorrected_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/uncorrected_parity_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uncorrected_parity_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uncorrected_parity_errors() directly.

    YANG Description: Number of uncorrected parity errors. Multi-bit ECC errors can be
detected but cannot be corrected by most integrated circuits.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uncorrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uncorrected_parity_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uncorrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)""",
        })

    self.__uncorrected_parity_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uncorrected_parity_errors(self):
    self.__uncorrected_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uncorrected-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)


  def _get_total_parity_errors(self):
    """
    Getter method for total_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/total_parity_errors (uint64)

    YANG Description: Total number of parity errors. This includes both the corrected and
uncorrected parity errors.
    """
    return self.__total_parity_errors
      
  def _set_total_parity_errors(self, v, load=False):
    """
    Setter method for total_parity_errors, mapped from YANG variable /components/component/integrated_circuit/memory/state/total_parity_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_parity_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_parity_errors() directly.

    YANG Description: Total number of parity errors. This includes both the corrected and
uncorrected parity errors.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_parity_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)""",
        })

    self.__total_parity_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_parity_errors(self):
    self.__total_parity_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-parity-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/integrated-circuit', defining_module='openconfig-platform-integrated-circuit', yang_type='uint64', is_config=False)

  corrected_parity_errors = __builtin__.property(_get_corrected_parity_errors)
  uncorrected_parity_errors = __builtin__.property(_get_uncorrected_parity_errors)
  total_parity_errors = __builtin__.property(_get_total_parity_errors)


  _pyangbind_elements = OrderedDict([('corrected_parity_errors', corrected_parity_errors), ('uncorrected_parity_errors', uncorrected_parity_errors), ('total_parity_errors', total_parity_errors), ])


