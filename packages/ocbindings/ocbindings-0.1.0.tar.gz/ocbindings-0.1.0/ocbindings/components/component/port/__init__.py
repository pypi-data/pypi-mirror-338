# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import breakout_mode
from . import optical_port
class port(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/port. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Data for physical port components
  """
  __slots__ = ('_path_helper', '_extmethods', '__breakout_mode','__optical_port',)

  _yang_name = 'port'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__breakout_mode = YANGDynClass(base=breakout_mode.breakout_mode, is_container='container', yang_name="breakout-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform/port', defining_module='openconfig-platform-port', yang_type='container', is_config=True)
    self.__optical_port = YANGDynClass(base=optical_port.optical_port, is_container='container', yang_name="optical-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/transport-line-common', defining_module='openconfig-transport-line-common', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'port']

  def _get_breakout_mode(self):
    """
    Getter method for breakout_mode, mapped from YANG variable /components/component/port/breakout_mode (container)

    YANG Description: Top-level container for port breakout-mode data.
    """
    return self.__breakout_mode
      
  def _set_breakout_mode(self, v, load=False):
    """
    Setter method for breakout_mode, mapped from YANG variable /components/component/port/breakout_mode (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_breakout_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_breakout_mode() directly.

    YANG Description: Top-level container for port breakout-mode data.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=breakout_mode.breakout_mode, is_container='container', yang_name="breakout-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform/port', defining_module='openconfig-platform-port', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """breakout_mode must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=breakout_mode.breakout_mode, is_container='container', yang_name="breakout-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform/port', defining_module='openconfig-platform-port', yang_type='container', is_config=True)""",
        })

    self.__breakout_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_breakout_mode(self):
    self.__breakout_mode = YANGDynClass(base=breakout_mode.breakout_mode, is_container='container', yang_name="breakout-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform/port', defining_module='openconfig-platform-port', yang_type='container', is_config=True)


  def _get_optical_port(self):
    """
    Getter method for optical_port, mapped from YANG variable /components/component/port/optical_port (container)

    YANG Description: Contains data specific to ports on optical transport
devices.
    """
    return self.__optical_port
      
  def _set_optical_port(self, v, load=False):
    """
    Setter method for optical_port, mapped from YANG variable /components/component/port/optical_port (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_optical_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_optical_port() directly.

    YANG Description: Contains data specific to ports on optical transport
devices.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=optical_port.optical_port, is_container='container', yang_name="optical-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/transport-line-common', defining_module='openconfig-transport-line-common', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """optical_port must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=optical_port.optical_port, is_container='container', yang_name="optical-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/transport-line-common', defining_module='openconfig-transport-line-common', yang_type='container', is_config=True)""",
        })

    self.__optical_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_optical_port(self):
    self.__optical_port = YANGDynClass(base=optical_port.optical_port, is_container='container', yang_name="optical-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/transport-line-common', defining_module='openconfig-transport-line-common', yang_type='container', is_config=True)

  breakout_mode = __builtin__.property(_get_breakout_mode, _set_breakout_mode)
  optical_port = __builtin__.property(_get_optical_port, _set_optical_port)


  _pyangbind_elements = OrderedDict([('breakout_mode', breakout_mode), ('optical_port', optical_port), ])


from . import breakout_mode
from . import optical_port
class port(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/port. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Data for physical port components
  """
  __slots__ = ('_path_helper', '_extmethods', '__breakout_mode','__optical_port',)

  _yang_name = 'port'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__breakout_mode = YANGDynClass(base=breakout_mode.breakout_mode, is_container='container', yang_name="breakout-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform/port', defining_module='openconfig-platform-port', yang_type='container', is_config=True)
    self.__optical_port = YANGDynClass(base=optical_port.optical_port, is_container='container', yang_name="optical-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/transport-line-common', defining_module='openconfig-transport-line-common', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'port']

  def _get_breakout_mode(self):
    """
    Getter method for breakout_mode, mapped from YANG variable /components/component/port/breakout_mode (container)

    YANG Description: Top-level container for port breakout-mode data.
    """
    return self.__breakout_mode
      
  def _set_breakout_mode(self, v, load=False):
    """
    Setter method for breakout_mode, mapped from YANG variable /components/component/port/breakout_mode (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_breakout_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_breakout_mode() directly.

    YANG Description: Top-level container for port breakout-mode data.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=breakout_mode.breakout_mode, is_container='container', yang_name="breakout-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform/port', defining_module='openconfig-platform-port', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """breakout_mode must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=breakout_mode.breakout_mode, is_container='container', yang_name="breakout-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform/port', defining_module='openconfig-platform-port', yang_type='container', is_config=True)""",
        })

    self.__breakout_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_breakout_mode(self):
    self.__breakout_mode = YANGDynClass(base=breakout_mode.breakout_mode, is_container='container', yang_name="breakout-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform/port', defining_module='openconfig-platform-port', yang_type='container', is_config=True)


  def _get_optical_port(self):
    """
    Getter method for optical_port, mapped from YANG variable /components/component/port/optical_port (container)

    YANG Description: Contains data specific to ports on optical transport
devices.
    """
    return self.__optical_port
      
  def _set_optical_port(self, v, load=False):
    """
    Setter method for optical_port, mapped from YANG variable /components/component/port/optical_port (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_optical_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_optical_port() directly.

    YANG Description: Contains data specific to ports on optical transport
devices.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=optical_port.optical_port, is_container='container', yang_name="optical-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/transport-line-common', defining_module='openconfig-transport-line-common', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """optical_port must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=optical_port.optical_port, is_container='container', yang_name="optical-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/transport-line-common', defining_module='openconfig-transport-line-common', yang_type='container', is_config=True)""",
        })

    self.__optical_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_optical_port(self):
    self.__optical_port = YANGDynClass(base=optical_port.optical_port, is_container='container', yang_name="optical-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/transport-line-common', defining_module='openconfig-transport-line-common', yang_type='container', is_config=True)

  breakout_mode = __builtin__.property(_get_breakout_mode, _set_breakout_mode)
  optical_port = __builtin__.property(_get_optical_port, _set_optical_port)


  _pyangbind_elements = OrderedDict([('breakout_mode', breakout_mode), ('optical_port', optical_port), ])


from . import breakout_mode
from . import optical_port
class port(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/port. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Data for physical port components
  """
  __slots__ = ('_path_helper', '_extmethods', '__breakout_mode','__optical_port',)

  _yang_name = 'port'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__breakout_mode = YANGDynClass(base=breakout_mode.breakout_mode, is_container='container', yang_name="breakout-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform/port', defining_module='openconfig-platform-port', yang_type='container', is_config=True)
    self.__optical_port = YANGDynClass(base=optical_port.optical_port, is_container='container', yang_name="optical-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/transport-line-common', defining_module='openconfig-transport-line-common', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'port']

  def _get_breakout_mode(self):
    """
    Getter method for breakout_mode, mapped from YANG variable /components/component/port/breakout_mode (container)

    YANG Description: Top-level container for port breakout-mode data.
    """
    return self.__breakout_mode
      
  def _set_breakout_mode(self, v, load=False):
    """
    Setter method for breakout_mode, mapped from YANG variable /components/component/port/breakout_mode (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_breakout_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_breakout_mode() directly.

    YANG Description: Top-level container for port breakout-mode data.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=breakout_mode.breakout_mode, is_container='container', yang_name="breakout-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform/port', defining_module='openconfig-platform-port', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """breakout_mode must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=breakout_mode.breakout_mode, is_container='container', yang_name="breakout-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform/port', defining_module='openconfig-platform-port', yang_type='container', is_config=True)""",
        })

    self.__breakout_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_breakout_mode(self):
    self.__breakout_mode = YANGDynClass(base=breakout_mode.breakout_mode, is_container='container', yang_name="breakout-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform/port', defining_module='openconfig-platform-port', yang_type='container', is_config=True)


  def _get_optical_port(self):
    """
    Getter method for optical_port, mapped from YANG variable /components/component/port/optical_port (container)

    YANG Description: Contains data specific to ports on optical transport
devices.
    """
    return self.__optical_port
      
  def _set_optical_port(self, v, load=False):
    """
    Setter method for optical_port, mapped from YANG variable /components/component/port/optical_port (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_optical_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_optical_port() directly.

    YANG Description: Contains data specific to ports on optical transport
devices.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=optical_port.optical_port, is_container='container', yang_name="optical-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/transport-line-common', defining_module='openconfig-transport-line-common', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """optical_port must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=optical_port.optical_port, is_container='container', yang_name="optical-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/transport-line-common', defining_module='openconfig-transport-line-common', yang_type='container', is_config=True)""",
        })

    self.__optical_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_optical_port(self):
    self.__optical_port = YANGDynClass(base=optical_port.optical_port, is_container='container', yang_name="optical-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/transport-line-common', defining_module='openconfig-transport-line-common', yang_type='container', is_config=True)

  breakout_mode = __builtin__.property(_get_breakout_mode, _set_breakout_mode)
  optical_port = __builtin__.property(_get_optical_port, _set_optical_port)


  _pyangbind_elements = OrderedDict([('breakout_mode', breakout_mode), ('optical_port', optical_port), ])


from . import breakout_mode
from . import optical_port
class port(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/port. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Data for physical port components
  """
  __slots__ = ('_path_helper', '_extmethods', '__breakout_mode','__optical_port',)

  _yang_name = 'port'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__breakout_mode = YANGDynClass(base=breakout_mode.breakout_mode, is_container='container', yang_name="breakout-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform/port', defining_module='openconfig-platform-port', yang_type='container', is_config=True)
    self.__optical_port = YANGDynClass(base=optical_port.optical_port, is_container='container', yang_name="optical-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/transport-line-common', defining_module='openconfig-transport-line-common', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'port']

  def _get_breakout_mode(self):
    """
    Getter method for breakout_mode, mapped from YANG variable /components/component/port/breakout_mode (container)

    YANG Description: Top-level container for port breakout-mode data.
    """
    return self.__breakout_mode
      
  def _set_breakout_mode(self, v, load=False):
    """
    Setter method for breakout_mode, mapped from YANG variable /components/component/port/breakout_mode (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_breakout_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_breakout_mode() directly.

    YANG Description: Top-level container for port breakout-mode data.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=breakout_mode.breakout_mode, is_container='container', yang_name="breakout-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform/port', defining_module='openconfig-platform-port', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """breakout_mode must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=breakout_mode.breakout_mode, is_container='container', yang_name="breakout-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform/port', defining_module='openconfig-platform-port', yang_type='container', is_config=True)""",
        })

    self.__breakout_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_breakout_mode(self):
    self.__breakout_mode = YANGDynClass(base=breakout_mode.breakout_mode, is_container='container', yang_name="breakout-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform/port', defining_module='openconfig-platform-port', yang_type='container', is_config=True)


  def _get_optical_port(self):
    """
    Getter method for optical_port, mapped from YANG variable /components/component/port/optical_port (container)

    YANG Description: Contains data specific to ports on optical transport
devices.
    """
    return self.__optical_port
      
  def _set_optical_port(self, v, load=False):
    """
    Setter method for optical_port, mapped from YANG variable /components/component/port/optical_port (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_optical_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_optical_port() directly.

    YANG Description: Contains data specific to ports on optical transport
devices.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=optical_port.optical_port, is_container='container', yang_name="optical-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/transport-line-common', defining_module='openconfig-transport-line-common', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """optical_port must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=optical_port.optical_port, is_container='container', yang_name="optical-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/transport-line-common', defining_module='openconfig-transport-line-common', yang_type='container', is_config=True)""",
        })

    self.__optical_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_optical_port(self):
    self.__optical_port = YANGDynClass(base=optical_port.optical_port, is_container='container', yang_name="optical-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/transport-line-common', defining_module='openconfig-transport-line-common', yang_type='container', is_config=True)

  breakout_mode = __builtin__.property(_get_breakout_mode, _set_breakout_mode)
  optical_port = __builtin__.property(_get_optical_port, _set_optical_port)


  _pyangbind_elements = OrderedDict([('breakout_mode', breakout_mode), ('optical_port', optical_port), ])


