# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import ingress_tracking_
class ingress_tracking(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ate-flow - based on the path /flows/flow/ingress-tracking. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Flow statistics grouped by ingress tracking filter.
  """
  __slots__ = ('_path_helper', '_extmethods', '__ingress_tracking',)

  _yang_name = 'ingress-tracking'
  _yang_namespace = 'http://openconfig.net/yang/ate-flow'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ingress_tracking = YANGDynClass(base=YANGListType("src_port dst_port mpls_label src_ipv4 dst_ipv4 src_ipv6 dst_ipv6 vlan_id",ingress_tracking_.ingress_tracking, yang_name="ingress-tracking", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-port dst-port mpls-label src-ipv4 dst-ipv4 src-ipv6 dst-ipv6 vlan-id', extensions=None), is_container='list', yang_name="ingress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['flows', 'flow', 'ingress-tracking']

  def _get_ingress_tracking(self):
    """
    Getter method for ingress_tracking, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking (list)

    YANG Description: If the ATE is configured to track incoming frames by their header
fields, this list will map combinations of values of those header
fields to the flow statistics specific to frames that match that
combination.
    """
    return self.__ingress_tracking
      
  def _set_ingress_tracking(self, v, load=False):
    """
    Setter method for ingress_tracking, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ingress_tracking is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ingress_tracking() directly.

    YANG Description: If the ATE is configured to track incoming frames by their header
fields, this list will map combinations of values of those header
fields to the flow statistics specific to frames that match that
combination.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("src_port dst_port mpls_label src_ipv4 dst_ipv4 src_ipv6 dst_ipv6 vlan_id",ingress_tracking_.ingress_tracking, yang_name="ingress-tracking", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-port dst-port mpls-label src-ipv4 dst-ipv4 src-ipv6 dst-ipv6 vlan-id', extensions=None), is_container='list', yang_name="ingress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ingress_tracking must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("src_port dst_port mpls_label src_ipv4 dst_ipv4 src_ipv6 dst_ipv6 vlan_id",ingress_tracking_.ingress_tracking, yang_name="ingress-tracking", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-port dst-port mpls-label src-ipv4 dst-ipv4 src-ipv6 dst-ipv6 vlan-id', extensions=None), is_container='list', yang_name="ingress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='list', is_config=False)""",
        })

    self.__ingress_tracking = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ingress_tracking(self):
    self.__ingress_tracking = YANGDynClass(base=YANGListType("src_port dst_port mpls_label src_ipv4 dst_ipv4 src_ipv6 dst_ipv6 vlan_id",ingress_tracking_.ingress_tracking, yang_name="ingress-tracking", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-port dst-port mpls-label src-ipv4 dst-ipv4 src-ipv6 dst-ipv6 vlan-id', extensions=None), is_container='list', yang_name="ingress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='list', is_config=False)

  ingress_tracking = __builtin__.property(_get_ingress_tracking)


  _pyangbind_elements = OrderedDict([('ingress_tracking', ingress_tracking), ])


from . import ingress_tracking_
class ingress_tracking(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ate-flow - based on the path /flows/flow/ingress-tracking. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Flow statistics grouped by ingress tracking filter.
  """
  __slots__ = ('_path_helper', '_extmethods', '__ingress_tracking',)

  _yang_name = 'ingress-tracking'
  _yang_namespace = 'http://openconfig.net/yang/ate-flow'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ingress_tracking = YANGDynClass(base=YANGListType("src_port dst_port mpls_label src_ipv4 dst_ipv4 src_ipv6 dst_ipv6 vlan_id",ingress_tracking_.ingress_tracking, yang_name="ingress-tracking", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-port dst-port mpls-label src-ipv4 dst-ipv4 src-ipv6 dst-ipv6 vlan-id', extensions=None), is_container='list', yang_name="ingress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['flows', 'flow', 'ingress-tracking']

  def _get_ingress_tracking(self):
    """
    Getter method for ingress_tracking, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking (list)

    YANG Description: If the ATE is configured to track incoming frames by their header
fields, this list will map combinations of values of those header
fields to the flow statistics specific to frames that match that
combination.
    """
    return self.__ingress_tracking
      
  def _set_ingress_tracking(self, v, load=False):
    """
    Setter method for ingress_tracking, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ingress_tracking is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ingress_tracking() directly.

    YANG Description: If the ATE is configured to track incoming frames by their header
fields, this list will map combinations of values of those header
fields to the flow statistics specific to frames that match that
combination.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("src_port dst_port mpls_label src_ipv4 dst_ipv4 src_ipv6 dst_ipv6 vlan_id",ingress_tracking_.ingress_tracking, yang_name="ingress-tracking", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-port dst-port mpls-label src-ipv4 dst-ipv4 src-ipv6 dst-ipv6 vlan-id', extensions=None), is_container='list', yang_name="ingress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ingress_tracking must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("src_port dst_port mpls_label src_ipv4 dst_ipv4 src_ipv6 dst_ipv6 vlan_id",ingress_tracking_.ingress_tracking, yang_name="ingress-tracking", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-port dst-port mpls-label src-ipv4 dst-ipv4 src-ipv6 dst-ipv6 vlan-id', extensions=None), is_container='list', yang_name="ingress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='list', is_config=False)""",
        })

    self.__ingress_tracking = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ingress_tracking(self):
    self.__ingress_tracking = YANGDynClass(base=YANGListType("src_port dst_port mpls_label src_ipv4 dst_ipv4 src_ipv6 dst_ipv6 vlan_id",ingress_tracking_.ingress_tracking, yang_name="ingress-tracking", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-port dst-port mpls-label src-ipv4 dst-ipv4 src-ipv6 dst-ipv6 vlan-id', extensions=None), is_container='list', yang_name="ingress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='list', is_config=False)

  ingress_tracking = __builtin__.property(_get_ingress_tracking)


  _pyangbind_elements = OrderedDict([('ingress_tracking', ingress_tracking), ])


