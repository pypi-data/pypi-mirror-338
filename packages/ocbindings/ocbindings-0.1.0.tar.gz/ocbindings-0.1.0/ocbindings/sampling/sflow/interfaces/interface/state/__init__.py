# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-sampling - based on the path /sampling/sflow/interfaces/interface/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for sFlow data on interfaces.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__enabled','__polling_interval','__ingress_sampling_rate','__egress_sampling_rate','__packets_sampled',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/sampling'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='oc-if:base-interface-ref', is_config=False)
    self.__enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='boolean', is_config=False)
    self.__polling_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="polling-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint16', is_config=False)
    self.__ingress_sampling_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ingress-sampling-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint32', is_config=False)
    self.__egress_sampling_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="egress-sampling-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint32', is_config=False)
    self.__packets_sampled = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packets-sampled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['sampling', 'sflow', 'interfaces', 'interface', 'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /sampling/sflow/interfaces/interface/state/name (oc-if:base-interface-ref)

    YANG Description: Reference to the interface for sFlow configuration and
state.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /sampling/sflow/interfaces/interface/state/name (oc-if:base-interface-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the interface for sFlow configuration and
state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='oc-if:base-interface-ref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with oc-if:base-interface-ref""",
          'defined-type': "oc-if:base-interface-ref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='oc-if:base-interface-ref', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='oc-if:base-interface-ref', is_config=False)


  def _get_enabled(self):
    """
    Getter method for enabled, mapped from YANG variable /sampling/sflow/interfaces/interface/state/enabled (boolean)

    YANG Description: Enables or disables sFlow on the interface.  If sFlow is
globally disabled, this leaf is ignored.  If sFlow
is globally enabled, this leaf may be used to disable it
for a specific interface.
    """
    return self.__enabled
      
  def _set_enabled(self, v, load=False):
    """
    Setter method for enabled, mapped from YANG variable /sampling/sflow/interfaces/interface/state/enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enabled() directly.

    YANG Description: Enables or disables sFlow on the interface.  If sFlow is
globally disabled, this leaf is ignored.  If sFlow
is globally enabled, this leaf may be used to disable it
for a specific interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='boolean', is_config=False)""",
        })

    self.__enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enabled(self):
    self.__enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='boolean', is_config=False)


  def _get_polling_interval(self):
    """
    Getter method for polling_interval, mapped from YANG variable /sampling/sflow/interfaces/interface/state/polling_interval (uint16)

    YANG Description: Sets the traffic sampling polling interval.
    """
    return self.__polling_interval
      
  def _set_polling_interval(self, v, load=False):
    """
    Setter method for polling_interval, mapped from YANG variable /sampling/sflow/interfaces/interface/state/polling_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_polling_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_polling_interval() directly.

    YANG Description: Sets the traffic sampling polling interval.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="polling-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """polling_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="polling-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint16', is_config=False)""",
        })

    self.__polling_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_polling_interval(self):
    self.__polling_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="polling-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint16', is_config=False)


  def _get_ingress_sampling_rate(self):
    """
    Getter method for ingress_sampling_rate, mapped from YANG variable /sampling/sflow/interfaces/interface/state/ingress_sampling_rate (uint32)

    YANG Description: Sets the ingress packet sampling rate.  The rate is expressed
as an integer N, where the intended sampling rate is 1/N
packets.  An implementation may implement the sampling rate as
a statistical average, rather than a strict periodic sampling.

The allowable sampling rate range is generally a property of
the system, e.g., determined by the capability of the
hardware.
    """
    return self.__ingress_sampling_rate
      
  def _set_ingress_sampling_rate(self, v, load=False):
    """
    Setter method for ingress_sampling_rate, mapped from YANG variable /sampling/sflow/interfaces/interface/state/ingress_sampling_rate (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ingress_sampling_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ingress_sampling_rate() directly.

    YANG Description: Sets the ingress packet sampling rate.  The rate is expressed
as an integer N, where the intended sampling rate is 1/N
packets.  An implementation may implement the sampling rate as
a statistical average, rather than a strict periodic sampling.

The allowable sampling rate range is generally a property of
the system, e.g., determined by the capability of the
hardware.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ingress-sampling-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ingress_sampling_rate must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ingress-sampling-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint32', is_config=False)""",
        })

    self.__ingress_sampling_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ingress_sampling_rate(self):
    self.__ingress_sampling_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ingress-sampling-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint32', is_config=False)


  def _get_egress_sampling_rate(self):
    """
    Getter method for egress_sampling_rate, mapped from YANG variable /sampling/sflow/interfaces/interface/state/egress_sampling_rate (uint32)

    YANG Description: Sets the egress packet sampling rate.  The rate is expressed
as an integer N, where the intended sampling rate is 1/N
packets.  An implementation may implement the sampling rate as
a statistical average, rather than a strict periodic sampling.

The allowable sampling rate range is generally a property of
the system, e.g., determined by the capability of the
hardware.
    """
    return self.__egress_sampling_rate
      
  def _set_egress_sampling_rate(self, v, load=False):
    """
    Setter method for egress_sampling_rate, mapped from YANG variable /sampling/sflow/interfaces/interface/state/egress_sampling_rate (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_egress_sampling_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_egress_sampling_rate() directly.

    YANG Description: Sets the egress packet sampling rate.  The rate is expressed
as an integer N, where the intended sampling rate is 1/N
packets.  An implementation may implement the sampling rate as
a statistical average, rather than a strict periodic sampling.

The allowable sampling rate range is generally a property of
the system, e.g., determined by the capability of the
hardware.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="egress-sampling-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """egress_sampling_rate must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="egress-sampling-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint32', is_config=False)""",
        })

    self.__egress_sampling_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_egress_sampling_rate(self):
    self.__egress_sampling_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="egress-sampling-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint32', is_config=False)


  def _get_packets_sampled(self):
    """
    Getter method for packets_sampled, mapped from YANG variable /sampling/sflow/interfaces/interface/state/packets_sampled (oc-yang:counter64)

    YANG Description: Total number of packets sampled from the interface.
    """
    return self.__packets_sampled
      
  def _set_packets_sampled(self, v, load=False):
    """
    Setter method for packets_sampled, mapped from YANG variable /sampling/sflow/interfaces/interface/state/packets_sampled (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_packets_sampled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_packets_sampled() directly.

    YANG Description: Total number of packets sampled from the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packets-sampled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """packets_sampled must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packets-sampled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__packets_sampled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_packets_sampled(self):
    self.__packets_sampled = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packets-sampled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='oc-yang:counter64', is_config=False)

  name = __builtin__.property(_get_name)
  enabled = __builtin__.property(_get_enabled)
  polling_interval = __builtin__.property(_get_polling_interval)
  ingress_sampling_rate = __builtin__.property(_get_ingress_sampling_rate)
  egress_sampling_rate = __builtin__.property(_get_egress_sampling_rate)
  packets_sampled = __builtin__.property(_get_packets_sampled)


  _pyangbind_elements = OrderedDict([('name', name), ('enabled', enabled), ('polling_interval', polling_interval), ('ingress_sampling_rate', ingress_sampling_rate), ('egress_sampling_rate', egress_sampling_rate), ('packets_sampled', packets_sampled), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-sampling - based on the path /sampling/sflow/interfaces/interface/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for sFlow data on interfaces.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__enabled','__polling_interval','__ingress_sampling_rate','__egress_sampling_rate','__packets_sampled',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/sampling'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='oc-if:base-interface-ref', is_config=False)
    self.__enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='boolean', is_config=False)
    self.__polling_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="polling-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint16', is_config=False)
    self.__ingress_sampling_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ingress-sampling-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint32', is_config=False)
    self.__egress_sampling_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="egress-sampling-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint32', is_config=False)
    self.__packets_sampled = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packets-sampled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['sampling', 'sflow', 'interfaces', 'interface', 'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /sampling/sflow/interfaces/interface/state/name (oc-if:base-interface-ref)

    YANG Description: Reference to the interface for sFlow configuration and
state.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /sampling/sflow/interfaces/interface/state/name (oc-if:base-interface-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the interface for sFlow configuration and
state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='oc-if:base-interface-ref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with oc-if:base-interface-ref""",
          'defined-type': "oc-if:base-interface-ref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='oc-if:base-interface-ref', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='oc-if:base-interface-ref', is_config=False)


  def _get_enabled(self):
    """
    Getter method for enabled, mapped from YANG variable /sampling/sflow/interfaces/interface/state/enabled (boolean)

    YANG Description: Enables or disables sFlow on the interface.  If sFlow is
globally disabled, this leaf is ignored.  If sFlow
is globally enabled, this leaf may be used to disable it
for a specific interface.
    """
    return self.__enabled
      
  def _set_enabled(self, v, load=False):
    """
    Setter method for enabled, mapped from YANG variable /sampling/sflow/interfaces/interface/state/enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enabled() directly.

    YANG Description: Enables or disables sFlow on the interface.  If sFlow is
globally disabled, this leaf is ignored.  If sFlow
is globally enabled, this leaf may be used to disable it
for a specific interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='boolean', is_config=False)""",
        })

    self.__enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enabled(self):
    self.__enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='boolean', is_config=False)


  def _get_polling_interval(self):
    """
    Getter method for polling_interval, mapped from YANG variable /sampling/sflow/interfaces/interface/state/polling_interval (uint16)

    YANG Description: Sets the traffic sampling polling interval.
    """
    return self.__polling_interval
      
  def _set_polling_interval(self, v, load=False):
    """
    Setter method for polling_interval, mapped from YANG variable /sampling/sflow/interfaces/interface/state/polling_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_polling_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_polling_interval() directly.

    YANG Description: Sets the traffic sampling polling interval.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="polling-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """polling_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="polling-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint16', is_config=False)""",
        })

    self.__polling_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_polling_interval(self):
    self.__polling_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="polling-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint16', is_config=False)


  def _get_ingress_sampling_rate(self):
    """
    Getter method for ingress_sampling_rate, mapped from YANG variable /sampling/sflow/interfaces/interface/state/ingress_sampling_rate (uint32)

    YANG Description: Sets the ingress packet sampling rate.  The rate is expressed
as an integer N, where the intended sampling rate is 1/N
packets.  An implementation may implement the sampling rate as
a statistical average, rather than a strict periodic sampling.

The allowable sampling rate range is generally a property of
the system, e.g., determined by the capability of the
hardware.
    """
    return self.__ingress_sampling_rate
      
  def _set_ingress_sampling_rate(self, v, load=False):
    """
    Setter method for ingress_sampling_rate, mapped from YANG variable /sampling/sflow/interfaces/interface/state/ingress_sampling_rate (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ingress_sampling_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ingress_sampling_rate() directly.

    YANG Description: Sets the ingress packet sampling rate.  The rate is expressed
as an integer N, where the intended sampling rate is 1/N
packets.  An implementation may implement the sampling rate as
a statistical average, rather than a strict periodic sampling.

The allowable sampling rate range is generally a property of
the system, e.g., determined by the capability of the
hardware.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ingress-sampling-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ingress_sampling_rate must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ingress-sampling-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint32', is_config=False)""",
        })

    self.__ingress_sampling_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ingress_sampling_rate(self):
    self.__ingress_sampling_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ingress-sampling-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint32', is_config=False)


  def _get_egress_sampling_rate(self):
    """
    Getter method for egress_sampling_rate, mapped from YANG variable /sampling/sflow/interfaces/interface/state/egress_sampling_rate (uint32)

    YANG Description: Sets the egress packet sampling rate.  The rate is expressed
as an integer N, where the intended sampling rate is 1/N
packets.  An implementation may implement the sampling rate as
a statistical average, rather than a strict periodic sampling.

The allowable sampling rate range is generally a property of
the system, e.g., determined by the capability of the
hardware.
    """
    return self.__egress_sampling_rate
      
  def _set_egress_sampling_rate(self, v, load=False):
    """
    Setter method for egress_sampling_rate, mapped from YANG variable /sampling/sflow/interfaces/interface/state/egress_sampling_rate (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_egress_sampling_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_egress_sampling_rate() directly.

    YANG Description: Sets the egress packet sampling rate.  The rate is expressed
as an integer N, where the intended sampling rate is 1/N
packets.  An implementation may implement the sampling rate as
a statistical average, rather than a strict periodic sampling.

The allowable sampling rate range is generally a property of
the system, e.g., determined by the capability of the
hardware.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="egress-sampling-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """egress_sampling_rate must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="egress-sampling-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint32', is_config=False)""",
        })

    self.__egress_sampling_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_egress_sampling_rate(self):
    self.__egress_sampling_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="egress-sampling-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='uint32', is_config=False)


  def _get_packets_sampled(self):
    """
    Getter method for packets_sampled, mapped from YANG variable /sampling/sflow/interfaces/interface/state/packets_sampled (oc-yang:counter64)

    YANG Description: Total number of packets sampled from the interface.
    """
    return self.__packets_sampled
      
  def _set_packets_sampled(self, v, load=False):
    """
    Setter method for packets_sampled, mapped from YANG variable /sampling/sflow/interfaces/interface/state/packets_sampled (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_packets_sampled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_packets_sampled() directly.

    YANG Description: Total number of packets sampled from the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packets-sampled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """packets_sampled must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packets-sampled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__packets_sampled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_packets_sampled(self):
    self.__packets_sampled = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packets-sampled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/sampling/sflow', defining_module='openconfig-sampling-sflow', yang_type='oc-yang:counter64', is_config=False)

  name = __builtin__.property(_get_name)
  enabled = __builtin__.property(_get_enabled)
  polling_interval = __builtin__.property(_get_polling_interval)
  ingress_sampling_rate = __builtin__.property(_get_ingress_sampling_rate)
  egress_sampling_rate = __builtin__.property(_get_egress_sampling_rate)
  packets_sampled = __builtin__.property(_get_packets_sampled)


  _pyangbind_elements = OrderedDict([('name', name), ('enabled', enabled), ('polling_interval', polling_interval), ('ingress_sampling_rate', ingress_sampling_rate), ('egress_sampling_rate', egress_sampling_rate), ('packets_sampled', packets_sampled), ])


