# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import echo
from . import async_
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bfd - based on the path /bfd/interfaces/interface/peers/peer/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters for the BFD session.
  """
  __slots__ = ('_path_helper', '_extmethods', '__local_address','__remote_address','__subscribed_protocols','__session_state','__remote_session_state','__last_failure_time','__failure_transitions','__up_transitions','__local_discriminator','__remote_discriminator','__local_diagnostic_code','__remote_diagnostic_code','__remote_minimum_receive_interval','__demand_mode_requested','__remote_authentication_enabled','__remote_control_plane_independent','__echo','__async_',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/bfd'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__local_address = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="local-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-inet:ip-address', is_config=False)
    self.__remote_address = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="remote-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-inet:ip-address', is_config=False)
    self.__subscribed_protocols = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},)), is_leaf=False, yang_name="subscribed-protocols", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='identityref', is_config=False)
    self.__session_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}, 'ADMIN_DOWN': {}, 'INIT': {}},), is_leaf=True, yang_name="session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-session-state', is_config=False)
    self.__remote_session_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}, 'ADMIN_DOWN': {}, 'INIT': {}},), is_leaf=True, yang_name="remote-session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-session-state', is_config=False)
    self.__last_failure_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-failure-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-types:timeticks64', is_config=False)
    self.__failure_transitions = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="failure-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint64', is_config=False)
    self.__up_transitions = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="up-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint64', is_config=False)
    self.__local_discriminator = YANGDynClass(base=str, is_leaf=True, yang_name="local-discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='string', is_config=False)
    self.__remote_discriminator = YANGDynClass(base=str, is_leaf=True, yang_name="remote-discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='string', is_config=False)
    self.__local_diagnostic_code = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_DIAGNOSTIC': {'value': 0}, 'DETECTION_TIMEOUT': {'value': 1}, 'ECHO_FAILED': {'value': 2}, 'FORWARDING_RESET': {'value': 3}, 'PATH_DOWN': {'value': 4}, 'CONCATENATED_PATH_DOWN': {'value': 5}, 'ADMIN_DOWN': {'value': 6}, 'REVERSE_CONCATENATED_PATH_DOWN': {'value': 7}, 'NEIGHBOR_DOWN': {'value': 8}},), is_leaf=True, yang_name="local-diagnostic-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-diagnostic-code', is_config=False)
    self.__remote_diagnostic_code = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_DIAGNOSTIC': {'value': 0}, 'DETECTION_TIMEOUT': {'value': 1}, 'ECHO_FAILED': {'value': 2}, 'FORWARDING_RESET': {'value': 3}, 'PATH_DOWN': {'value': 4}, 'CONCATENATED_PATH_DOWN': {'value': 5}, 'ADMIN_DOWN': {'value': 6}, 'REVERSE_CONCATENATED_PATH_DOWN': {'value': 7}, 'NEIGHBOR_DOWN': {'value': 8}},), is_leaf=True, yang_name="remote-diagnostic-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-diagnostic-code', is_config=False)
    self.__remote_minimum_receive_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="remote-minimum-receive-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint32', is_config=False)
    self.__demand_mode_requested = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="demand-mode-requested", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)
    self.__remote_authentication_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="remote-authentication-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)
    self.__remote_control_plane_independent = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="remote-control-plane-independent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)
    self.__echo = YANGDynClass(base=echo.echo, is_container='container', yang_name="echo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='container', is_config=False)
    self.__async_ = YANGDynClass(base=async_.async_, is_container='container', yang_name="async", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bfd', 'interfaces', 'interface', 'peers', 'peer', 'state']

  def _get_local_address(self):
    """
    Getter method for local_address, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/local_address (oc-inet:ip-address)

    YANG Description: The IP address used by the local system for this BFD session.
    """
    return self.__local_address
      
  def _set_local_address(self, v, load=False):
    """
    Setter method for local_address, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/local_address (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_address() directly.

    YANG Description: The IP address used by the local system for this BFD session.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="local-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_address must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="local-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__local_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_address(self):
    self.__local_address = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="local-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-inet:ip-address', is_config=False)


  def _get_remote_address(self):
    """
    Getter method for remote_address, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_address (oc-inet:ip-address)

    YANG Description: The IP address used by the remote system for this BFD session.
    """
    return self.__remote_address
      
  def _set_remote_address(self, v, load=False):
    """
    Setter method for remote_address, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_address (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_address() directly.

    YANG Description: The IP address used by the remote system for this BFD session.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="remote-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_address must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="remote-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__remote_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_address(self):
    self.__remote_address = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="remote-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-inet:ip-address', is_config=False)


  def _get_subscribed_protocols(self):
    """
    Getter method for subscribed_protocols, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/subscribed_protocols (identityref)

    YANG Description: Indicates the set of protocols that currently use
this BFD session for liveliness detection.
    """
    return self.__subscribed_protocols
      
  def _set_subscribed_protocols(self, v, load=False):
    """
    Setter method for subscribed_protocols, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/subscribed_protocols (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subscribed_protocols is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subscribed_protocols() directly.

    YANG Description: Indicates the set of protocols that currently use
this BFD session for liveliness detection.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},)), is_leaf=False, yang_name="subscribed-protocols", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subscribed_protocols must be of a type compatible with identityref""",
          'defined-type': "openconfig-bfd:identityref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},)), is_leaf=False, yang_name="subscribed-protocols", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='identityref', is_config=False)""",
        })

    self.__subscribed_protocols = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subscribed_protocols(self):
    self.__subscribed_protocols = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},)), is_leaf=False, yang_name="subscribed-protocols", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='identityref', is_config=False)


  def _get_session_state(self):
    """
    Getter method for session_state, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/session_state (bfd-session-state)

    YANG Description: The state of the BFD session perceived by the local system.
    """
    return self.__session_state
      
  def _set_session_state(self, v, load=False):
    """
    Setter method for session_state, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/session_state (bfd-session-state)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_session_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_session_state() directly.

    YANG Description: The state of the BFD session perceived by the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}, 'ADMIN_DOWN': {}, 'INIT': {}},), is_leaf=True, yang_name="session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-session-state', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """session_state must be of a type compatible with bfd-session-state""",
          'defined-type': "openconfig-bfd:bfd-session-state",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}, 'ADMIN_DOWN': {}, 'INIT': {}},), is_leaf=True, yang_name="session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-session-state', is_config=False)""",
        })

    self.__session_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_session_state(self):
    self.__session_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}, 'ADMIN_DOWN': {}, 'INIT': {}},), is_leaf=True, yang_name="session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-session-state', is_config=False)


  def _get_remote_session_state(self):
    """
    Getter method for remote_session_state, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_session_state (bfd-session-state)

    YANG Description: The reported state of the BFD session according to the remote
system. This state reflects the last state reported in a BFD
control packet.
    """
    return self.__remote_session_state
      
  def _set_remote_session_state(self, v, load=False):
    """
    Setter method for remote_session_state, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_session_state (bfd-session-state)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_session_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_session_state() directly.

    YANG Description: The reported state of the BFD session according to the remote
system. This state reflects the last state reported in a BFD
control packet.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}, 'ADMIN_DOWN': {}, 'INIT': {}},), is_leaf=True, yang_name="remote-session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-session-state', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_session_state must be of a type compatible with bfd-session-state""",
          'defined-type': "openconfig-bfd:bfd-session-state",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}, 'ADMIN_DOWN': {}, 'INIT': {}},), is_leaf=True, yang_name="remote-session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-session-state', is_config=False)""",
        })

    self.__remote_session_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_session_state(self):
    self.__remote_session_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}, 'ADMIN_DOWN': {}, 'INIT': {}},), is_leaf=True, yang_name="remote-session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-session-state', is_config=False)


  def _get_last_failure_time(self):
    """
    Getter method for last_failure_time, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/last_failure_time (oc-types:timeticks64)

    YANG Description: The time of the last transition of the BFD session out of
the UP state, expressed as the number of nanoseconds since
the Unix epoch.
    """
    return self.__last_failure_time
      
  def _set_last_failure_time(self, v, load=False):
    """
    Setter method for last_failure_time, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/last_failure_time (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_failure_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_failure_time() directly.

    YANG Description: The time of the last transition of the BFD session out of
the UP state, expressed as the number of nanoseconds since
the Unix epoch.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-failure-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_failure_time must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-failure-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_failure_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_failure_time(self):
    self.__last_failure_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-failure-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-types:timeticks64', is_config=False)


  def _get_failure_transitions(self):
    """
    Getter method for failure_transitions, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/failure_transitions (uint64)

    YANG Description: The number of times that the BFD session has transitioned
out of the UP state.
    """
    return self.__failure_transitions
      
  def _set_failure_transitions(self, v, load=False):
    """
    Setter method for failure_transitions, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/failure_transitions (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_failure_transitions is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_failure_transitions() directly.

    YANG Description: The number of times that the BFD session has transitioned
out of the UP state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="failure-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """failure_transitions must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="failure-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint64', is_config=False)""",
        })

    self.__failure_transitions = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_failure_transitions(self):
    self.__failure_transitions = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="failure-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint64', is_config=False)


  def _get_up_transitions(self):
    """
    Getter method for up_transitions, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/up_transitions (uint64)

    YANG Description: The number of times that the adjacency with the neighbor
has transitioned into the up state.
    """
    return self.__up_transitions
      
  def _set_up_transitions(self, v, load=False):
    """
    Setter method for up_transitions, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/up_transitions (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_up_transitions is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_up_transitions() directly.

    YANG Description: The number of times that the adjacency with the neighbor
has transitioned into the up state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="up-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """up_transitions must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="up-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint64', is_config=False)""",
        })

    self.__up_transitions = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_up_transitions(self):
    self.__up_transitions = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="up-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint64', is_config=False)


  def _get_local_discriminator(self):
    """
    Getter method for local_discriminator, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/local_discriminator (string)

    YANG Description: A unique identifier used by the local system to identify this
BFD session.
    """
    return self.__local_discriminator
      
  def _set_local_discriminator(self, v, load=False):
    """
    Setter method for local_discriminator, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/local_discriminator (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_discriminator is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_discriminator() directly.

    YANG Description: A unique identifier used by the local system to identify this
BFD session.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="local-discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_discriminator must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="local-discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='string', is_config=False)""",
        })

    self.__local_discriminator = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_discriminator(self):
    self.__local_discriminator = YANGDynClass(base=str, is_leaf=True, yang_name="local-discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='string', is_config=False)


  def _get_remote_discriminator(self):
    """
    Getter method for remote_discriminator, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_discriminator (string)

    YANG Description: A unique identified used by the remote system to identify this
BFD session.
    """
    return self.__remote_discriminator
      
  def _set_remote_discriminator(self, v, load=False):
    """
    Setter method for remote_discriminator, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_discriminator (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_discriminator is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_discriminator() directly.

    YANG Description: A unique identified used by the remote system to identify this
BFD session.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="remote-discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_discriminator must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="remote-discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='string', is_config=False)""",
        })

    self.__remote_discriminator = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_discriminator(self):
    self.__remote_discriminator = YANGDynClass(base=str, is_leaf=True, yang_name="remote-discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='string', is_config=False)


  def _get_local_diagnostic_code(self):
    """
    Getter method for local_diagnostic_code, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/local_diagnostic_code (bfd-diagnostic-code)

    YANG Description: The local BFD diagnostic code indicating the most recent
reason for failure of this BFD session.
    """
    return self.__local_diagnostic_code
      
  def _set_local_diagnostic_code(self, v, load=False):
    """
    Setter method for local_diagnostic_code, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/local_diagnostic_code (bfd-diagnostic-code)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_diagnostic_code is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_diagnostic_code() directly.

    YANG Description: The local BFD diagnostic code indicating the most recent
reason for failure of this BFD session.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_DIAGNOSTIC': {'value': 0}, 'DETECTION_TIMEOUT': {'value': 1}, 'ECHO_FAILED': {'value': 2}, 'FORWARDING_RESET': {'value': 3}, 'PATH_DOWN': {'value': 4}, 'CONCATENATED_PATH_DOWN': {'value': 5}, 'ADMIN_DOWN': {'value': 6}, 'REVERSE_CONCATENATED_PATH_DOWN': {'value': 7}, 'NEIGHBOR_DOWN': {'value': 8}},), is_leaf=True, yang_name="local-diagnostic-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-diagnostic-code', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_diagnostic_code must be of a type compatible with bfd-diagnostic-code""",
          'defined-type': "openconfig-bfd:bfd-diagnostic-code",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_DIAGNOSTIC': {'value': 0}, 'DETECTION_TIMEOUT': {'value': 1}, 'ECHO_FAILED': {'value': 2}, 'FORWARDING_RESET': {'value': 3}, 'PATH_DOWN': {'value': 4}, 'CONCATENATED_PATH_DOWN': {'value': 5}, 'ADMIN_DOWN': {'value': 6}, 'REVERSE_CONCATENATED_PATH_DOWN': {'value': 7}, 'NEIGHBOR_DOWN': {'value': 8}},), is_leaf=True, yang_name="local-diagnostic-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-diagnostic-code', is_config=False)""",
        })

    self.__local_diagnostic_code = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_diagnostic_code(self):
    self.__local_diagnostic_code = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_DIAGNOSTIC': {'value': 0}, 'DETECTION_TIMEOUT': {'value': 1}, 'ECHO_FAILED': {'value': 2}, 'FORWARDING_RESET': {'value': 3}, 'PATH_DOWN': {'value': 4}, 'CONCATENATED_PATH_DOWN': {'value': 5}, 'ADMIN_DOWN': {'value': 6}, 'REVERSE_CONCATENATED_PATH_DOWN': {'value': 7}, 'NEIGHBOR_DOWN': {'value': 8}},), is_leaf=True, yang_name="local-diagnostic-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-diagnostic-code', is_config=False)


  def _get_remote_diagnostic_code(self):
    """
    Getter method for remote_diagnostic_code, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_diagnostic_code (bfd-diagnostic-code)

    YANG Description: The remote BFD diagnostic code indicating the remote system's
reason for failure of the BFD session
    """
    return self.__remote_diagnostic_code
      
  def _set_remote_diagnostic_code(self, v, load=False):
    """
    Setter method for remote_diagnostic_code, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_diagnostic_code (bfd-diagnostic-code)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_diagnostic_code is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_diagnostic_code() directly.

    YANG Description: The remote BFD diagnostic code indicating the remote system's
reason for failure of the BFD session
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_DIAGNOSTIC': {'value': 0}, 'DETECTION_TIMEOUT': {'value': 1}, 'ECHO_FAILED': {'value': 2}, 'FORWARDING_RESET': {'value': 3}, 'PATH_DOWN': {'value': 4}, 'CONCATENATED_PATH_DOWN': {'value': 5}, 'ADMIN_DOWN': {'value': 6}, 'REVERSE_CONCATENATED_PATH_DOWN': {'value': 7}, 'NEIGHBOR_DOWN': {'value': 8}},), is_leaf=True, yang_name="remote-diagnostic-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-diagnostic-code', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_diagnostic_code must be of a type compatible with bfd-diagnostic-code""",
          'defined-type': "openconfig-bfd:bfd-diagnostic-code",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_DIAGNOSTIC': {'value': 0}, 'DETECTION_TIMEOUT': {'value': 1}, 'ECHO_FAILED': {'value': 2}, 'FORWARDING_RESET': {'value': 3}, 'PATH_DOWN': {'value': 4}, 'CONCATENATED_PATH_DOWN': {'value': 5}, 'ADMIN_DOWN': {'value': 6}, 'REVERSE_CONCATENATED_PATH_DOWN': {'value': 7}, 'NEIGHBOR_DOWN': {'value': 8}},), is_leaf=True, yang_name="remote-diagnostic-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-diagnostic-code', is_config=False)""",
        })

    self.__remote_diagnostic_code = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_diagnostic_code(self):
    self.__remote_diagnostic_code = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_DIAGNOSTIC': {'value': 0}, 'DETECTION_TIMEOUT': {'value': 1}, 'ECHO_FAILED': {'value': 2}, 'FORWARDING_RESET': {'value': 3}, 'PATH_DOWN': {'value': 4}, 'CONCATENATED_PATH_DOWN': {'value': 5}, 'ADMIN_DOWN': {'value': 6}, 'REVERSE_CONCATENATED_PATH_DOWN': {'value': 7}, 'NEIGHBOR_DOWN': {'value': 8}},), is_leaf=True, yang_name="remote-diagnostic-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-diagnostic-code', is_config=False)


  def _get_remote_minimum_receive_interval(self):
    """
    Getter method for remote_minimum_receive_interval, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_minimum_receive_interval (uint32)

    YANG Description: The value of the minimum receive interval that was specified
in the most recent BFD control packet received from the peer.
    """
    return self.__remote_minimum_receive_interval
      
  def _set_remote_minimum_receive_interval(self, v, load=False):
    """
    Setter method for remote_minimum_receive_interval, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_minimum_receive_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_minimum_receive_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_minimum_receive_interval() directly.

    YANG Description: The value of the minimum receive interval that was specified
in the most recent BFD control packet received from the peer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="remote-minimum-receive-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_minimum_receive_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="remote-minimum-receive-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint32', is_config=False)""",
        })

    self.__remote_minimum_receive_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_minimum_receive_interval(self):
    self.__remote_minimum_receive_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="remote-minimum-receive-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint32', is_config=False)


  def _get_demand_mode_requested(self):
    """
    Getter method for demand_mode_requested, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/demand_mode_requested (boolean)

    YANG Description: This leaf is set to true when the remote system has requested
demand mode be run for this session.
    """
    return self.__demand_mode_requested
      
  def _set_demand_mode_requested(self, v, load=False):
    """
    Setter method for demand_mode_requested, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/demand_mode_requested (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_demand_mode_requested is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_demand_mode_requested() directly.

    YANG Description: This leaf is set to true when the remote system has requested
demand mode be run for this session.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="demand-mode-requested", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """demand_mode_requested must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="demand-mode-requested", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)""",
        })

    self.__demand_mode_requested = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_demand_mode_requested(self):
    self.__demand_mode_requested = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="demand-mode-requested", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)


  def _get_remote_authentication_enabled(self):
    """
    Getter method for remote_authentication_enabled, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_authentication_enabled (boolean)

    YANG Description: This leaf is set to true when the remote system has specified
that authentication is present for the BFD session.
    """
    return self.__remote_authentication_enabled
      
  def _set_remote_authentication_enabled(self, v, load=False):
    """
    Setter method for remote_authentication_enabled, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_authentication_enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_authentication_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_authentication_enabled() directly.

    YANG Description: This leaf is set to true when the remote system has specified
that authentication is present for the BFD session.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="remote-authentication-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_authentication_enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="remote-authentication-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)""",
        })

    self.__remote_authentication_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_authentication_enabled(self):
    self.__remote_authentication_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="remote-authentication-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)


  def _get_remote_control_plane_independent(self):
    """
    Getter method for remote_control_plane_independent, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_control_plane_independent (boolean)

    YANG Description: This leaf is set to true when the remote system has specified
that the hardware implementing this BFD session is independent
of the control plane's liveliness.
    """
    return self.__remote_control_plane_independent
      
  def _set_remote_control_plane_independent(self, v, load=False):
    """
    Setter method for remote_control_plane_independent, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_control_plane_independent (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_control_plane_independent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_control_plane_independent() directly.

    YANG Description: This leaf is set to true when the remote system has specified
that the hardware implementing this BFD session is independent
of the control plane's liveliness.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="remote-control-plane-independent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_control_plane_independent must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="remote-control-plane-independent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)""",
        })

    self.__remote_control_plane_independent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_control_plane_independent(self):
    self.__remote_control_plane_independent = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="remote-control-plane-independent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)


  def _get_echo(self):
    """
    Getter method for echo, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/echo (container)

    YANG Description: Operational state parameters specifically relating to the
echo mode of BFD.
    """
    return self.__echo
      
  def _set_echo(self, v, load=False):
    """
    Setter method for echo, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/echo (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_echo is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_echo() directly.

    YANG Description: Operational state parameters specifically relating to the
echo mode of BFD.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=echo.echo, is_container='container', yang_name="echo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """echo must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=echo.echo, is_container='container', yang_name="echo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='container', is_config=False)""",
        })

    self.__echo = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_echo(self):
    self.__echo = YANGDynClass(base=echo.echo, is_container='container', yang_name="echo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='container', is_config=False)


  def _get_async_(self):
    """
    Getter method for async_, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/async (container)

    YANG Description: Operational state parameters specifically relating to
asynchronous mode of BFD.
    """
    return self.__async_
      
  def _set_async_(self, v, load=False):
    """
    Setter method for async_, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/async (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_async_ is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_async_() directly.

    YANG Description: Operational state parameters specifically relating to
asynchronous mode of BFD.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=async_.async_, is_container='container', yang_name="async", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """async_ must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=async_.async_, is_container='container', yang_name="async", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='container', is_config=False)""",
        })

    self.__async_ = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_async_(self):
    self.__async_ = YANGDynClass(base=async_.async_, is_container='container', yang_name="async", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='container', is_config=False)

  local_address = __builtin__.property(_get_local_address)
  remote_address = __builtin__.property(_get_remote_address)
  subscribed_protocols = __builtin__.property(_get_subscribed_protocols)
  session_state = __builtin__.property(_get_session_state)
  remote_session_state = __builtin__.property(_get_remote_session_state)
  last_failure_time = __builtin__.property(_get_last_failure_time)
  failure_transitions = __builtin__.property(_get_failure_transitions)
  up_transitions = __builtin__.property(_get_up_transitions)
  local_discriminator = __builtin__.property(_get_local_discriminator)
  remote_discriminator = __builtin__.property(_get_remote_discriminator)
  local_diagnostic_code = __builtin__.property(_get_local_diagnostic_code)
  remote_diagnostic_code = __builtin__.property(_get_remote_diagnostic_code)
  remote_minimum_receive_interval = __builtin__.property(_get_remote_minimum_receive_interval)
  demand_mode_requested = __builtin__.property(_get_demand_mode_requested)
  remote_authentication_enabled = __builtin__.property(_get_remote_authentication_enabled)
  remote_control_plane_independent = __builtin__.property(_get_remote_control_plane_independent)
  echo = __builtin__.property(_get_echo)
  async_ = __builtin__.property(_get_async_)


  _pyangbind_elements = OrderedDict([('local_address', local_address), ('remote_address', remote_address), ('subscribed_protocols', subscribed_protocols), ('session_state', session_state), ('remote_session_state', remote_session_state), ('last_failure_time', last_failure_time), ('failure_transitions', failure_transitions), ('up_transitions', up_transitions), ('local_discriminator', local_discriminator), ('remote_discriminator', remote_discriminator), ('local_diagnostic_code', local_diagnostic_code), ('remote_diagnostic_code', remote_diagnostic_code), ('remote_minimum_receive_interval', remote_minimum_receive_interval), ('demand_mode_requested', demand_mode_requested), ('remote_authentication_enabled', remote_authentication_enabled), ('remote_control_plane_independent', remote_control_plane_independent), ('echo', echo), ('async_', async_), ])


from . import echo
from . import async_
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-bfd - based on the path /bfd/interfaces/interface/peers/peer/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters for the BFD session.
  """
  __slots__ = ('_path_helper', '_extmethods', '__local_address','__remote_address','__subscribed_protocols','__session_state','__remote_session_state','__last_failure_time','__failure_transitions','__up_transitions','__local_discriminator','__remote_discriminator','__local_diagnostic_code','__remote_diagnostic_code','__remote_minimum_receive_interval','__demand_mode_requested','__remote_authentication_enabled','__remote_control_plane_independent','__echo','__async_',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/bfd'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__local_address = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="local-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-inet:ip-address', is_config=False)
    self.__remote_address = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="remote-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-inet:ip-address', is_config=False)
    self.__subscribed_protocols = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},)), is_leaf=False, yang_name="subscribed-protocols", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='identityref', is_config=False)
    self.__session_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}, 'ADMIN_DOWN': {}, 'INIT': {}},), is_leaf=True, yang_name="session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-session-state', is_config=False)
    self.__remote_session_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}, 'ADMIN_DOWN': {}, 'INIT': {}},), is_leaf=True, yang_name="remote-session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-session-state', is_config=False)
    self.__last_failure_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-failure-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-types:timeticks64', is_config=False)
    self.__failure_transitions = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="failure-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint64', is_config=False)
    self.__up_transitions = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="up-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint64', is_config=False)
    self.__local_discriminator = YANGDynClass(base=str, is_leaf=True, yang_name="local-discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='string', is_config=False)
    self.__remote_discriminator = YANGDynClass(base=str, is_leaf=True, yang_name="remote-discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='string', is_config=False)
    self.__local_diagnostic_code = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_DIAGNOSTIC': {'value': 0}, 'DETECTION_TIMEOUT': {'value': 1}, 'ECHO_FAILED': {'value': 2}, 'FORWARDING_RESET': {'value': 3}, 'PATH_DOWN': {'value': 4}, 'CONCATENATED_PATH_DOWN': {'value': 5}, 'ADMIN_DOWN': {'value': 6}, 'REVERSE_CONCATENATED_PATH_DOWN': {'value': 7}, 'NEIGHBOR_DOWN': {'value': 8}},), is_leaf=True, yang_name="local-diagnostic-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-diagnostic-code', is_config=False)
    self.__remote_diagnostic_code = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_DIAGNOSTIC': {'value': 0}, 'DETECTION_TIMEOUT': {'value': 1}, 'ECHO_FAILED': {'value': 2}, 'FORWARDING_RESET': {'value': 3}, 'PATH_DOWN': {'value': 4}, 'CONCATENATED_PATH_DOWN': {'value': 5}, 'ADMIN_DOWN': {'value': 6}, 'REVERSE_CONCATENATED_PATH_DOWN': {'value': 7}, 'NEIGHBOR_DOWN': {'value': 8}},), is_leaf=True, yang_name="remote-diagnostic-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-diagnostic-code', is_config=False)
    self.__remote_minimum_receive_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="remote-minimum-receive-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint32', is_config=False)
    self.__demand_mode_requested = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="demand-mode-requested", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)
    self.__remote_authentication_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="remote-authentication-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)
    self.__remote_control_plane_independent = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="remote-control-plane-independent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)
    self.__echo = YANGDynClass(base=echo.echo, is_container='container', yang_name="echo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='container', is_config=False)
    self.__async_ = YANGDynClass(base=async_.async_, is_container='container', yang_name="async", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['bfd', 'interfaces', 'interface', 'peers', 'peer', 'state']

  def _get_local_address(self):
    """
    Getter method for local_address, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/local_address (oc-inet:ip-address)

    YANG Description: The IP address used by the local system for this BFD session.
    """
    return self.__local_address
      
  def _set_local_address(self, v, load=False):
    """
    Setter method for local_address, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/local_address (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_address() directly.

    YANG Description: The IP address used by the local system for this BFD session.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="local-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_address must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="local-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__local_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_address(self):
    self.__local_address = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="local-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-inet:ip-address', is_config=False)


  def _get_remote_address(self):
    """
    Getter method for remote_address, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_address (oc-inet:ip-address)

    YANG Description: The IP address used by the remote system for this BFD session.
    """
    return self.__remote_address
      
  def _set_remote_address(self, v, load=False):
    """
    Setter method for remote_address, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_address (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_address() directly.

    YANG Description: The IP address used by the remote system for this BFD session.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="remote-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_address must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="remote-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__remote_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_address(self):
    self.__remote_address = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="remote-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-inet:ip-address', is_config=False)


  def _get_subscribed_protocols(self):
    """
    Getter method for subscribed_protocols, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/subscribed_protocols (identityref)

    YANG Description: Indicates the set of protocols that currently use
this BFD session for liveliness detection.
    """
    return self.__subscribed_protocols
      
  def _set_subscribed_protocols(self, v, load=False):
    """
    Setter method for subscribed_protocols, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/subscribed_protocols (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subscribed_protocols is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subscribed_protocols() directly.

    YANG Description: Indicates the set of protocols that currently use
this BFD session for liveliness detection.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},)), is_leaf=False, yang_name="subscribed-protocols", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subscribed_protocols must be of a type compatible with identityref""",
          'defined-type': "openconfig-bfd:identityref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},)), is_leaf=False, yang_name="subscribed-protocols", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='identityref', is_config=False)""",
        })

    self.__subscribed_protocols = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subscribed_protocols(self):
    self.__subscribed_protocols = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},)), is_leaf=False, yang_name="subscribed-protocols", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='identityref', is_config=False)


  def _get_session_state(self):
    """
    Getter method for session_state, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/session_state (bfd-session-state)

    YANG Description: The state of the BFD session perceived by the local system.
    """
    return self.__session_state
      
  def _set_session_state(self, v, load=False):
    """
    Setter method for session_state, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/session_state (bfd-session-state)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_session_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_session_state() directly.

    YANG Description: The state of the BFD session perceived by the local system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}, 'ADMIN_DOWN': {}, 'INIT': {}},), is_leaf=True, yang_name="session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-session-state', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """session_state must be of a type compatible with bfd-session-state""",
          'defined-type': "openconfig-bfd:bfd-session-state",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}, 'ADMIN_DOWN': {}, 'INIT': {}},), is_leaf=True, yang_name="session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-session-state', is_config=False)""",
        })

    self.__session_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_session_state(self):
    self.__session_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}, 'ADMIN_DOWN': {}, 'INIT': {}},), is_leaf=True, yang_name="session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-session-state', is_config=False)


  def _get_remote_session_state(self):
    """
    Getter method for remote_session_state, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_session_state (bfd-session-state)

    YANG Description: The reported state of the BFD session according to the remote
system. This state reflects the last state reported in a BFD
control packet.
    """
    return self.__remote_session_state
      
  def _set_remote_session_state(self, v, load=False):
    """
    Setter method for remote_session_state, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_session_state (bfd-session-state)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_session_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_session_state() directly.

    YANG Description: The reported state of the BFD session according to the remote
system. This state reflects the last state reported in a BFD
control packet.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}, 'ADMIN_DOWN': {}, 'INIT': {}},), is_leaf=True, yang_name="remote-session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-session-state', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_session_state must be of a type compatible with bfd-session-state""",
          'defined-type': "openconfig-bfd:bfd-session-state",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}, 'ADMIN_DOWN': {}, 'INIT': {}},), is_leaf=True, yang_name="remote-session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-session-state', is_config=False)""",
        })

    self.__remote_session_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_session_state(self):
    self.__remote_session_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}, 'ADMIN_DOWN': {}, 'INIT': {}},), is_leaf=True, yang_name="remote-session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-session-state', is_config=False)


  def _get_last_failure_time(self):
    """
    Getter method for last_failure_time, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/last_failure_time (oc-types:timeticks64)

    YANG Description: The time of the last transition of the BFD session out of
the UP state, expressed as the number of nanoseconds since
the Unix epoch.
    """
    return self.__last_failure_time
      
  def _set_last_failure_time(self, v, load=False):
    """
    Setter method for last_failure_time, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/last_failure_time (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_failure_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_failure_time() directly.

    YANG Description: The time of the last transition of the BFD session out of
the UP state, expressed as the number of nanoseconds since
the Unix epoch.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-failure-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_failure_time must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-failure-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_failure_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_failure_time(self):
    self.__last_failure_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-failure-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='oc-types:timeticks64', is_config=False)


  def _get_failure_transitions(self):
    """
    Getter method for failure_transitions, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/failure_transitions (uint64)

    YANG Description: The number of times that the BFD session has transitioned
out of the UP state.
    """
    return self.__failure_transitions
      
  def _set_failure_transitions(self, v, load=False):
    """
    Setter method for failure_transitions, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/failure_transitions (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_failure_transitions is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_failure_transitions() directly.

    YANG Description: The number of times that the BFD session has transitioned
out of the UP state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="failure-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """failure_transitions must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="failure-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint64', is_config=False)""",
        })

    self.__failure_transitions = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_failure_transitions(self):
    self.__failure_transitions = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="failure-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint64', is_config=False)


  def _get_up_transitions(self):
    """
    Getter method for up_transitions, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/up_transitions (uint64)

    YANG Description: The number of times that the adjacency with the neighbor
has transitioned into the up state.
    """
    return self.__up_transitions
      
  def _set_up_transitions(self, v, load=False):
    """
    Setter method for up_transitions, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/up_transitions (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_up_transitions is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_up_transitions() directly.

    YANG Description: The number of times that the adjacency with the neighbor
has transitioned into the up state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="up-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """up_transitions must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="up-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint64', is_config=False)""",
        })

    self.__up_transitions = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_up_transitions(self):
    self.__up_transitions = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="up-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint64', is_config=False)


  def _get_local_discriminator(self):
    """
    Getter method for local_discriminator, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/local_discriminator (string)

    YANG Description: A unique identifier used by the local system to identify this
BFD session.
    """
    return self.__local_discriminator
      
  def _set_local_discriminator(self, v, load=False):
    """
    Setter method for local_discriminator, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/local_discriminator (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_discriminator is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_discriminator() directly.

    YANG Description: A unique identifier used by the local system to identify this
BFD session.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="local-discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_discriminator must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="local-discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='string', is_config=False)""",
        })

    self.__local_discriminator = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_discriminator(self):
    self.__local_discriminator = YANGDynClass(base=str, is_leaf=True, yang_name="local-discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='string', is_config=False)


  def _get_remote_discriminator(self):
    """
    Getter method for remote_discriminator, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_discriminator (string)

    YANG Description: A unique identified used by the remote system to identify this
BFD session.
    """
    return self.__remote_discriminator
      
  def _set_remote_discriminator(self, v, load=False):
    """
    Setter method for remote_discriminator, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_discriminator (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_discriminator is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_discriminator() directly.

    YANG Description: A unique identified used by the remote system to identify this
BFD session.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="remote-discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_discriminator must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="remote-discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='string', is_config=False)""",
        })

    self.__remote_discriminator = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_discriminator(self):
    self.__remote_discriminator = YANGDynClass(base=str, is_leaf=True, yang_name="remote-discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='string', is_config=False)


  def _get_local_diagnostic_code(self):
    """
    Getter method for local_diagnostic_code, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/local_diagnostic_code (bfd-diagnostic-code)

    YANG Description: The local BFD diagnostic code indicating the most recent
reason for failure of this BFD session.
    """
    return self.__local_diagnostic_code
      
  def _set_local_diagnostic_code(self, v, load=False):
    """
    Setter method for local_diagnostic_code, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/local_diagnostic_code (bfd-diagnostic-code)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_diagnostic_code is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_diagnostic_code() directly.

    YANG Description: The local BFD diagnostic code indicating the most recent
reason for failure of this BFD session.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_DIAGNOSTIC': {'value': 0}, 'DETECTION_TIMEOUT': {'value': 1}, 'ECHO_FAILED': {'value': 2}, 'FORWARDING_RESET': {'value': 3}, 'PATH_DOWN': {'value': 4}, 'CONCATENATED_PATH_DOWN': {'value': 5}, 'ADMIN_DOWN': {'value': 6}, 'REVERSE_CONCATENATED_PATH_DOWN': {'value': 7}, 'NEIGHBOR_DOWN': {'value': 8}},), is_leaf=True, yang_name="local-diagnostic-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-diagnostic-code', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_diagnostic_code must be of a type compatible with bfd-diagnostic-code""",
          'defined-type': "openconfig-bfd:bfd-diagnostic-code",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_DIAGNOSTIC': {'value': 0}, 'DETECTION_TIMEOUT': {'value': 1}, 'ECHO_FAILED': {'value': 2}, 'FORWARDING_RESET': {'value': 3}, 'PATH_DOWN': {'value': 4}, 'CONCATENATED_PATH_DOWN': {'value': 5}, 'ADMIN_DOWN': {'value': 6}, 'REVERSE_CONCATENATED_PATH_DOWN': {'value': 7}, 'NEIGHBOR_DOWN': {'value': 8}},), is_leaf=True, yang_name="local-diagnostic-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-diagnostic-code', is_config=False)""",
        })

    self.__local_diagnostic_code = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_diagnostic_code(self):
    self.__local_diagnostic_code = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_DIAGNOSTIC': {'value': 0}, 'DETECTION_TIMEOUT': {'value': 1}, 'ECHO_FAILED': {'value': 2}, 'FORWARDING_RESET': {'value': 3}, 'PATH_DOWN': {'value': 4}, 'CONCATENATED_PATH_DOWN': {'value': 5}, 'ADMIN_DOWN': {'value': 6}, 'REVERSE_CONCATENATED_PATH_DOWN': {'value': 7}, 'NEIGHBOR_DOWN': {'value': 8}},), is_leaf=True, yang_name="local-diagnostic-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-diagnostic-code', is_config=False)


  def _get_remote_diagnostic_code(self):
    """
    Getter method for remote_diagnostic_code, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_diagnostic_code (bfd-diagnostic-code)

    YANG Description: The remote BFD diagnostic code indicating the remote system's
reason for failure of the BFD session
    """
    return self.__remote_diagnostic_code
      
  def _set_remote_diagnostic_code(self, v, load=False):
    """
    Setter method for remote_diagnostic_code, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_diagnostic_code (bfd-diagnostic-code)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_diagnostic_code is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_diagnostic_code() directly.

    YANG Description: The remote BFD diagnostic code indicating the remote system's
reason for failure of the BFD session
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_DIAGNOSTIC': {'value': 0}, 'DETECTION_TIMEOUT': {'value': 1}, 'ECHO_FAILED': {'value': 2}, 'FORWARDING_RESET': {'value': 3}, 'PATH_DOWN': {'value': 4}, 'CONCATENATED_PATH_DOWN': {'value': 5}, 'ADMIN_DOWN': {'value': 6}, 'REVERSE_CONCATENATED_PATH_DOWN': {'value': 7}, 'NEIGHBOR_DOWN': {'value': 8}},), is_leaf=True, yang_name="remote-diagnostic-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-diagnostic-code', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_diagnostic_code must be of a type compatible with bfd-diagnostic-code""",
          'defined-type': "openconfig-bfd:bfd-diagnostic-code",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_DIAGNOSTIC': {'value': 0}, 'DETECTION_TIMEOUT': {'value': 1}, 'ECHO_FAILED': {'value': 2}, 'FORWARDING_RESET': {'value': 3}, 'PATH_DOWN': {'value': 4}, 'CONCATENATED_PATH_DOWN': {'value': 5}, 'ADMIN_DOWN': {'value': 6}, 'REVERSE_CONCATENATED_PATH_DOWN': {'value': 7}, 'NEIGHBOR_DOWN': {'value': 8}},), is_leaf=True, yang_name="remote-diagnostic-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-diagnostic-code', is_config=False)""",
        })

    self.__remote_diagnostic_code = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_diagnostic_code(self):
    self.__remote_diagnostic_code = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NO_DIAGNOSTIC': {'value': 0}, 'DETECTION_TIMEOUT': {'value': 1}, 'ECHO_FAILED': {'value': 2}, 'FORWARDING_RESET': {'value': 3}, 'PATH_DOWN': {'value': 4}, 'CONCATENATED_PATH_DOWN': {'value': 5}, 'ADMIN_DOWN': {'value': 6}, 'REVERSE_CONCATENATED_PATH_DOWN': {'value': 7}, 'NEIGHBOR_DOWN': {'value': 8}},), is_leaf=True, yang_name="remote-diagnostic-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='bfd-diagnostic-code', is_config=False)


  def _get_remote_minimum_receive_interval(self):
    """
    Getter method for remote_minimum_receive_interval, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_minimum_receive_interval (uint32)

    YANG Description: The value of the minimum receive interval that was specified
in the most recent BFD control packet received from the peer.
    """
    return self.__remote_minimum_receive_interval
      
  def _set_remote_minimum_receive_interval(self, v, load=False):
    """
    Setter method for remote_minimum_receive_interval, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_minimum_receive_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_minimum_receive_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_minimum_receive_interval() directly.

    YANG Description: The value of the minimum receive interval that was specified
in the most recent BFD control packet received from the peer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="remote-minimum-receive-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_minimum_receive_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="remote-minimum-receive-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint32', is_config=False)""",
        })

    self.__remote_minimum_receive_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_minimum_receive_interval(self):
    self.__remote_minimum_receive_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="remote-minimum-receive-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='uint32', is_config=False)


  def _get_demand_mode_requested(self):
    """
    Getter method for demand_mode_requested, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/demand_mode_requested (boolean)

    YANG Description: This leaf is set to true when the remote system has requested
demand mode be run for this session.
    """
    return self.__demand_mode_requested
      
  def _set_demand_mode_requested(self, v, load=False):
    """
    Setter method for demand_mode_requested, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/demand_mode_requested (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_demand_mode_requested is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_demand_mode_requested() directly.

    YANG Description: This leaf is set to true when the remote system has requested
demand mode be run for this session.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="demand-mode-requested", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """demand_mode_requested must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="demand-mode-requested", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)""",
        })

    self.__demand_mode_requested = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_demand_mode_requested(self):
    self.__demand_mode_requested = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="demand-mode-requested", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)


  def _get_remote_authentication_enabled(self):
    """
    Getter method for remote_authentication_enabled, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_authentication_enabled (boolean)

    YANG Description: This leaf is set to true when the remote system has specified
that authentication is present for the BFD session.
    """
    return self.__remote_authentication_enabled
      
  def _set_remote_authentication_enabled(self, v, load=False):
    """
    Setter method for remote_authentication_enabled, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_authentication_enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_authentication_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_authentication_enabled() directly.

    YANG Description: This leaf is set to true when the remote system has specified
that authentication is present for the BFD session.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="remote-authentication-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_authentication_enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="remote-authentication-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)""",
        })

    self.__remote_authentication_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_authentication_enabled(self):
    self.__remote_authentication_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="remote-authentication-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)


  def _get_remote_control_plane_independent(self):
    """
    Getter method for remote_control_plane_independent, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_control_plane_independent (boolean)

    YANG Description: This leaf is set to true when the remote system has specified
that the hardware implementing this BFD session is independent
of the control plane's liveliness.
    """
    return self.__remote_control_plane_independent
      
  def _set_remote_control_plane_independent(self, v, load=False):
    """
    Setter method for remote_control_plane_independent, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/remote_control_plane_independent (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_control_plane_independent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_control_plane_independent() directly.

    YANG Description: This leaf is set to true when the remote system has specified
that the hardware implementing this BFD session is independent
of the control plane's liveliness.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="remote-control-plane-independent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_control_plane_independent must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="remote-control-plane-independent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)""",
        })

    self.__remote_control_plane_independent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_control_plane_independent(self):
    self.__remote_control_plane_independent = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="remote-control-plane-independent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='boolean', is_config=False)


  def _get_echo(self):
    """
    Getter method for echo, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/echo (container)

    YANG Description: Operational state parameters specifically relating to the
echo mode of BFD.
    """
    return self.__echo
      
  def _set_echo(self, v, load=False):
    """
    Setter method for echo, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/echo (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_echo is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_echo() directly.

    YANG Description: Operational state parameters specifically relating to the
echo mode of BFD.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=echo.echo, is_container='container', yang_name="echo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """echo must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=echo.echo, is_container='container', yang_name="echo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='container', is_config=False)""",
        })

    self.__echo = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_echo(self):
    self.__echo = YANGDynClass(base=echo.echo, is_container='container', yang_name="echo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='container', is_config=False)


  def _get_async_(self):
    """
    Getter method for async_, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/async (container)

    YANG Description: Operational state parameters specifically relating to
asynchronous mode of BFD.
    """
    return self.__async_
      
  def _set_async_(self, v, load=False):
    """
    Setter method for async_, mapped from YANG variable /bfd/interfaces/interface/peers/peer/state/async (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_async_ is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_async_() directly.

    YANG Description: Operational state parameters specifically relating to
asynchronous mode of BFD.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=async_.async_, is_container='container', yang_name="async", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """async_ must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=async_.async_, is_container='container', yang_name="async", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='container', is_config=False)""",
        })

    self.__async_ = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_async_(self):
    self.__async_ = YANGDynClass(base=async_.async_, is_container='container', yang_name="async", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bfd', defining_module='openconfig-bfd', yang_type='container', is_config=False)

  local_address = __builtin__.property(_get_local_address)
  remote_address = __builtin__.property(_get_remote_address)
  subscribed_protocols = __builtin__.property(_get_subscribed_protocols)
  session_state = __builtin__.property(_get_session_state)
  remote_session_state = __builtin__.property(_get_remote_session_state)
  last_failure_time = __builtin__.property(_get_last_failure_time)
  failure_transitions = __builtin__.property(_get_failure_transitions)
  up_transitions = __builtin__.property(_get_up_transitions)
  local_discriminator = __builtin__.property(_get_local_discriminator)
  remote_discriminator = __builtin__.property(_get_remote_discriminator)
  local_diagnostic_code = __builtin__.property(_get_local_diagnostic_code)
  remote_diagnostic_code = __builtin__.property(_get_remote_diagnostic_code)
  remote_minimum_receive_interval = __builtin__.property(_get_remote_minimum_receive_interval)
  demand_mode_requested = __builtin__.property(_get_demand_mode_requested)
  remote_authentication_enabled = __builtin__.property(_get_remote_authentication_enabled)
  remote_control_plane_independent = __builtin__.property(_get_remote_control_plane_independent)
  echo = __builtin__.property(_get_echo)
  async_ = __builtin__.property(_get_async_)


  _pyangbind_elements = OrderedDict([('local_address', local_address), ('remote_address', remote_address), ('subscribed_protocols', subscribed_protocols), ('session_state', session_state), ('remote_session_state', remote_session_state), ('last_failure_time', last_failure_time), ('failure_transitions', failure_transitions), ('up_transitions', up_transitions), ('local_discriminator', local_discriminator), ('remote_discriminator', remote_discriminator), ('local_diagnostic_code', local_diagnostic_code), ('remote_diagnostic_code', remote_diagnostic_code), ('remote_minimum_receive_interval', remote_minimum_receive_interval), ('demand_mode_requested', demand_mode_requested), ('remote_authentication_enabled', remote_authentication_enabled), ('remote_control_plane_independent', remote_control_plane_independent), ('echo', echo), ('async_', async_), ])


