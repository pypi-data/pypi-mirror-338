# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import media_channels
from . import port_spectrum_power_profiles
class wavelength_router(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-wavelength-router - based on the path /wavelength-router. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for wavelength router device
  """
  __slots__ = ('_path_helper', '_extmethods', '__media_channels','__port_spectrum_power_profiles',)

  _yang_name = 'wavelength-router'
  _yang_namespace = 'http://openconfig.net/yang/wavelength-router'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__media_channels = YANGDynClass(base=media_channels.media_channels, is_container='container', yang_name="media-channels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='container', is_config=True)
    self.__port_spectrum_power_profiles = YANGDynClass(base=port_spectrum_power_profiles.port_spectrum_power_profiles, is_container='container', yang_name="port-spectrum-power-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['wavelength-router']

  def _get_media_channels(self):
    """
    Getter method for media_channels, mapped from YANG variable /wavelength_router/media_channels (container)

    YANG Description: Enclosing container for media channel list
    """
    return self.__media_channels
      
  def _set_media_channels(self, v, load=False):
    """
    Setter method for media_channels, mapped from YANG variable /wavelength_router/media_channels (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_media_channels is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_media_channels() directly.

    YANG Description: Enclosing container for media channel list
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=media_channels.media_channels, is_container='container', yang_name="media-channels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """media_channels must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=media_channels.media_channels, is_container='container', yang_name="media-channels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='container', is_config=True)""",
        })

    self.__media_channels = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_media_channels(self):
    self.__media_channels = YANGDynClass(base=media_channels.media_channels, is_container='container', yang_name="media-channels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='container', is_config=True)


  def _get_port_spectrum_power_profiles(self):
    """
    Getter method for port_spectrum_power_profiles, mapped from YANG variable /wavelength_router/port_spectrum_power_profiles (container)

    YANG Description: Enclosing container for wavelength-router port spectrum
power profiles
    """
    return self.__port_spectrum_power_profiles
      
  def _set_port_spectrum_power_profiles(self, v, load=False):
    """
    Setter method for port_spectrum_power_profiles, mapped from YANG variable /wavelength_router/port_spectrum_power_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_spectrum_power_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_spectrum_power_profiles() directly.

    YANG Description: Enclosing container for wavelength-router port spectrum
power profiles
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=port_spectrum_power_profiles.port_spectrum_power_profiles, is_container='container', yang_name="port-spectrum-power-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_spectrum_power_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=port_spectrum_power_profiles.port_spectrum_power_profiles, is_container='container', yang_name="port-spectrum-power-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='container', is_config=True)""",
        })

    self.__port_spectrum_power_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_spectrum_power_profiles(self):
    self.__port_spectrum_power_profiles = YANGDynClass(base=port_spectrum_power_profiles.port_spectrum_power_profiles, is_container='container', yang_name="port-spectrum-power-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='container', is_config=True)

  media_channels = __builtin__.property(_get_media_channels, _set_media_channels)
  port_spectrum_power_profiles = __builtin__.property(_get_port_spectrum_power_profiles, _set_port_spectrum_power_profiles)


  _pyangbind_elements = OrderedDict([('media_channels', media_channels), ('port_spectrum_power_profiles', port_spectrum_power_profiles), ])


from . import media_channels
from . import port_spectrum_power_profiles
class wavelength_router(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-wavelength-router - based on the path /wavelength-router. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for wavelength router device
  """
  __slots__ = ('_path_helper', '_extmethods', '__media_channels','__port_spectrum_power_profiles',)

  _yang_name = 'wavelength-router'
  _yang_namespace = 'http://openconfig.net/yang/wavelength-router'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__media_channels = YANGDynClass(base=media_channels.media_channels, is_container='container', yang_name="media-channels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='container', is_config=True)
    self.__port_spectrum_power_profiles = YANGDynClass(base=port_spectrum_power_profiles.port_spectrum_power_profiles, is_container='container', yang_name="port-spectrum-power-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['wavelength-router']

  def _get_media_channels(self):
    """
    Getter method for media_channels, mapped from YANG variable /wavelength_router/media_channels (container)

    YANG Description: Enclosing container for media channel list
    """
    return self.__media_channels
      
  def _set_media_channels(self, v, load=False):
    """
    Setter method for media_channels, mapped from YANG variable /wavelength_router/media_channels (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_media_channels is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_media_channels() directly.

    YANG Description: Enclosing container for media channel list
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=media_channels.media_channels, is_container='container', yang_name="media-channels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """media_channels must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=media_channels.media_channels, is_container='container', yang_name="media-channels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='container', is_config=True)""",
        })

    self.__media_channels = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_media_channels(self):
    self.__media_channels = YANGDynClass(base=media_channels.media_channels, is_container='container', yang_name="media-channels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='container', is_config=True)


  def _get_port_spectrum_power_profiles(self):
    """
    Getter method for port_spectrum_power_profiles, mapped from YANG variable /wavelength_router/port_spectrum_power_profiles (container)

    YANG Description: Enclosing container for wavelength-router port spectrum
power profiles
    """
    return self.__port_spectrum_power_profiles
      
  def _set_port_spectrum_power_profiles(self, v, load=False):
    """
    Setter method for port_spectrum_power_profiles, mapped from YANG variable /wavelength_router/port_spectrum_power_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_spectrum_power_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_spectrum_power_profiles() directly.

    YANG Description: Enclosing container for wavelength-router port spectrum
power profiles
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=port_spectrum_power_profiles.port_spectrum_power_profiles, is_container='container', yang_name="port-spectrum-power-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_spectrum_power_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=port_spectrum_power_profiles.port_spectrum_power_profiles, is_container='container', yang_name="port-spectrum-power-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='container', is_config=True)""",
        })

    self.__port_spectrum_power_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_spectrum_power_profiles(self):
    self.__port_spectrum_power_profiles = YANGDynClass(base=port_spectrum_power_profiles.port_spectrum_power_profiles, is_container='container', yang_name="port-spectrum-power-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='container', is_config=True)

  media_channels = __builtin__.property(_get_media_channels, _set_media_channels)
  port_spectrum_power_profiles = __builtin__.property(_get_port_spectrum_power_profiles, _set_port_spectrum_power_profiles)


  _pyangbind_elements = OrderedDict([('media_channels', media_channels), ('port_spectrum_power_profiles', port_spectrum_power_profiles), ])


