# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import config
from . import state
from . import failed_routes
from . import stale_routes
from . import drop_routes
class ip_routes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/programming-errors/ip-routes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The IP AFT/routes hardware programming status within the network-instance.
IP Route programming reports are divided into a set of sub-categories:
- failed programming -- A prefix which is not present in the AFT state is
  attempted to be added into the hardware but failed.  Traffic destined for
  this prefix will not be matched.
- stale programming -- A prefix is already in the AFT is requested to
  be updated but failed.  Traffic destined for this prefix will be
  forwarded to the old next-hop.  AFT telemetry should continue to
  reflect the old next-hop for the prefix.
- drop programming - these routes are explicitly programmed into hardware
  to point to a destination that discards packets.

Lifecycle of entries/prefixes in the above 3 containers is tied to AFT
telemetry data. When the route gets removed from AFT telemetry data
corresponding entry/prefix will be deleted from above containers as well
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__failed_routes','__stale_routes','__drop_routes',)

  _yang_name = 'ip-routes'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    self.__failed_routes = YANGDynClass(base=failed_routes.failed_routes, is_container='container', yang_name="failed-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    self.__stale_routes = YANGDynClass(base=stale_routes.stale_routes, is_container='container', yang_name="stale-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    self.__drop_routes = YANGDynClass(base=drop_routes.drop_routes, is_container='container', yang_name="drop-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'programming-errors', 'ip-routes']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/config (container)

    YANG Description: IP route hardware programming errors Configuration parameters
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: IP route hardware programming errors Configuration parameters
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/state (container)

    YANG Description: IP route hardware programming errors State parameters
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: IP route hardware programming errors State parameters
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)


  def _get_failed_routes(self):
    """
    Getter method for failed_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/failed_routes (container)

    YANG Description: Surrounding container for the list of routes that failed hardware
programming.
    """
    return self.__failed_routes
      
  def _set_failed_routes(self, v, load=False):
    """
    Setter method for failed_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/failed_routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_failed_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_failed_routes() directly.

    YANG Description: Surrounding container for the list of routes that failed hardware
programming.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=failed_routes.failed_routes, is_container='container', yang_name="failed-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """failed_routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=failed_routes.failed_routes, is_container='container', yang_name="failed-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)""",
        })

    self.__failed_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_failed_routes(self):
    self.__failed_routes = YANGDynClass(base=failed_routes.failed_routes, is_container='container', yang_name="failed-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)


  def _get_stale_routes(self):
    """
    Getter method for stale_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/stale_routes (container)

    YANG Description: Surrounding container for the list of routes that are currently in
a stale state.
    """
    return self.__stale_routes
      
  def _set_stale_routes(self, v, load=False):
    """
    Setter method for stale_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/stale_routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_stale_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_stale_routes() directly.

    YANG Description: Surrounding container for the list of routes that are currently in
a stale state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=stale_routes.stale_routes, is_container='container', yang_name="stale-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """stale_routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=stale_routes.stale_routes, is_container='container', yang_name="stale-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)""",
        })

    self.__stale_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_stale_routes(self):
    self.__stale_routes = YANGDynClass(base=stale_routes.stale_routes, is_container='container', yang_name="stale-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)


  def _get_drop_routes(self):
    """
    Getter method for drop_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/drop_routes (container)

    YANG Description: Surrounding container for the list of routes that are currently in
a drop state.
    """
    return self.__drop_routes
      
  def _set_drop_routes(self, v, load=False):
    """
    Setter method for drop_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/drop_routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop_routes() directly.

    YANG Description: Surrounding container for the list of routes that are currently in
a drop state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=drop_routes.drop_routes, is_container='container', yang_name="drop-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop_routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=drop_routes.drop_routes, is_container='container', yang_name="drop-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)""",
        })

    self.__drop_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop_routes(self):
    self.__drop_routes = YANGDynClass(base=drop_routes.drop_routes, is_container='container', yang_name="drop-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  failed_routes = __builtin__.property(_get_failed_routes)
  stale_routes = __builtin__.property(_get_stale_routes)
  drop_routes = __builtin__.property(_get_drop_routes)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('failed_routes', failed_routes), ('stale_routes', stale_routes), ('drop_routes', drop_routes), ])


from . import config
from . import state
from . import failed_routes
from . import stale_routes
from . import drop_routes
class ip_routes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/programming-errors/ip-routes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The IP AFT/routes hardware programming status within the network-instance.
IP Route programming reports are divided into a set of sub-categories:
- failed programming -- A prefix which is not present in the AFT state is
  attempted to be added into the hardware but failed.  Traffic destined for
  this prefix will not be matched.
- stale programming -- A prefix is already in the AFT is requested to
  be updated but failed.  Traffic destined for this prefix will be
  forwarded to the old next-hop.  AFT telemetry should continue to
  reflect the old next-hop for the prefix.
- drop programming - these routes are explicitly programmed into hardware
  to point to a destination that discards packets.

Lifecycle of entries/prefixes in the above 3 containers is tied to AFT
telemetry data. When the route gets removed from AFT telemetry data
corresponding entry/prefix will be deleted from above containers as well
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__failed_routes','__stale_routes','__drop_routes',)

  _yang_name = 'ip-routes'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    self.__failed_routes = YANGDynClass(base=failed_routes.failed_routes, is_container='container', yang_name="failed-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    self.__stale_routes = YANGDynClass(base=stale_routes.stale_routes, is_container='container', yang_name="stale-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    self.__drop_routes = YANGDynClass(base=drop_routes.drop_routes, is_container='container', yang_name="drop-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'programming-errors', 'ip-routes']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/config (container)

    YANG Description: IP route hardware programming errors Configuration parameters
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: IP route hardware programming errors Configuration parameters
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/state (container)

    YANG Description: IP route hardware programming errors State parameters
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: IP route hardware programming errors State parameters
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)


  def _get_failed_routes(self):
    """
    Getter method for failed_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/failed_routes (container)

    YANG Description: Surrounding container for the list of routes that failed hardware
programming.
    """
    return self.__failed_routes
      
  def _set_failed_routes(self, v, load=False):
    """
    Setter method for failed_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/failed_routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_failed_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_failed_routes() directly.

    YANG Description: Surrounding container for the list of routes that failed hardware
programming.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=failed_routes.failed_routes, is_container='container', yang_name="failed-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """failed_routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=failed_routes.failed_routes, is_container='container', yang_name="failed-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)""",
        })

    self.__failed_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_failed_routes(self):
    self.__failed_routes = YANGDynClass(base=failed_routes.failed_routes, is_container='container', yang_name="failed-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)


  def _get_stale_routes(self):
    """
    Getter method for stale_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/stale_routes (container)

    YANG Description: Surrounding container for the list of routes that are currently in
a stale state.
    """
    return self.__stale_routes
      
  def _set_stale_routes(self, v, load=False):
    """
    Setter method for stale_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/stale_routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_stale_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_stale_routes() directly.

    YANG Description: Surrounding container for the list of routes that are currently in
a stale state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=stale_routes.stale_routes, is_container='container', yang_name="stale-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """stale_routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=stale_routes.stale_routes, is_container='container', yang_name="stale-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)""",
        })

    self.__stale_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_stale_routes(self):
    self.__stale_routes = YANGDynClass(base=stale_routes.stale_routes, is_container='container', yang_name="stale-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)


  def _get_drop_routes(self):
    """
    Getter method for drop_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/drop_routes (container)

    YANG Description: Surrounding container for the list of routes that are currently in
a drop state.
    """
    return self.__drop_routes
      
  def _set_drop_routes(self, v, load=False):
    """
    Setter method for drop_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/drop_routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop_routes() directly.

    YANG Description: Surrounding container for the list of routes that are currently in
a drop state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=drop_routes.drop_routes, is_container='container', yang_name="drop-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop_routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=drop_routes.drop_routes, is_container='container', yang_name="drop-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)""",
        })

    self.__drop_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop_routes(self):
    self.__drop_routes = YANGDynClass(base=drop_routes.drop_routes, is_container='container', yang_name="drop-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  failed_routes = __builtin__.property(_get_failed_routes)
  stale_routes = __builtin__.property(_get_stale_routes)
  drop_routes = __builtin__.property(_get_drop_routes)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('failed_routes', failed_routes), ('stale_routes', stale_routes), ('drop_routes', drop_routes), ])


from . import config
from . import state
from . import failed_routes
from . import stale_routes
from . import drop_routes
class ip_routes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/programming-errors/ip-routes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The IP AFT/routes hardware programming status within the network-instance.
IP Route programming reports are divided into a set of sub-categories:
- failed programming -- A prefix which is not present in the AFT state is
  attempted to be added into the hardware but failed.  Traffic destined for
  this prefix will not be matched.
- stale programming -- A prefix is already in the AFT is requested to
  be updated but failed.  Traffic destined for this prefix will be
  forwarded to the old next-hop.  AFT telemetry should continue to
  reflect the old next-hop for the prefix.
- drop programming - these routes are explicitly programmed into hardware
  to point to a destination that discards packets.

Lifecycle of entries/prefixes in the above 3 containers is tied to AFT
telemetry data. When the route gets removed from AFT telemetry data
corresponding entry/prefix will be deleted from above containers as well
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__failed_routes','__stale_routes','__drop_routes',)

  _yang_name = 'ip-routes'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    self.__failed_routes = YANGDynClass(base=failed_routes.failed_routes, is_container='container', yang_name="failed-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    self.__stale_routes = YANGDynClass(base=stale_routes.stale_routes, is_container='container', yang_name="stale-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    self.__drop_routes = YANGDynClass(base=drop_routes.drop_routes, is_container='container', yang_name="drop-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'programming-errors', 'ip-routes']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/config (container)

    YANG Description: IP route hardware programming errors Configuration parameters
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: IP route hardware programming errors Configuration parameters
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/state (container)

    YANG Description: IP route hardware programming errors State parameters
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: IP route hardware programming errors State parameters
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)


  def _get_failed_routes(self):
    """
    Getter method for failed_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/failed_routes (container)

    YANG Description: Surrounding container for the list of routes that failed hardware
programming.
    """
    return self.__failed_routes
      
  def _set_failed_routes(self, v, load=False):
    """
    Setter method for failed_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/failed_routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_failed_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_failed_routes() directly.

    YANG Description: Surrounding container for the list of routes that failed hardware
programming.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=failed_routes.failed_routes, is_container='container', yang_name="failed-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """failed_routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=failed_routes.failed_routes, is_container='container', yang_name="failed-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)""",
        })

    self.__failed_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_failed_routes(self):
    self.__failed_routes = YANGDynClass(base=failed_routes.failed_routes, is_container='container', yang_name="failed-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)


  def _get_stale_routes(self):
    """
    Getter method for stale_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/stale_routes (container)

    YANG Description: Surrounding container for the list of routes that are currently in
a stale state.
    """
    return self.__stale_routes
      
  def _set_stale_routes(self, v, load=False):
    """
    Setter method for stale_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/stale_routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_stale_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_stale_routes() directly.

    YANG Description: Surrounding container for the list of routes that are currently in
a stale state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=stale_routes.stale_routes, is_container='container', yang_name="stale-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """stale_routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=stale_routes.stale_routes, is_container='container', yang_name="stale-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)""",
        })

    self.__stale_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_stale_routes(self):
    self.__stale_routes = YANGDynClass(base=stale_routes.stale_routes, is_container='container', yang_name="stale-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)


  def _get_drop_routes(self):
    """
    Getter method for drop_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/drop_routes (container)

    YANG Description: Surrounding container for the list of routes that are currently in
a drop state.
    """
    return self.__drop_routes
      
  def _set_drop_routes(self, v, load=False):
    """
    Setter method for drop_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/drop_routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop_routes() directly.

    YANG Description: Surrounding container for the list of routes that are currently in
a drop state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=drop_routes.drop_routes, is_container='container', yang_name="drop-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop_routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=drop_routes.drop_routes, is_container='container', yang_name="drop-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)""",
        })

    self.__drop_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop_routes(self):
    self.__drop_routes = YANGDynClass(base=drop_routes.drop_routes, is_container='container', yang_name="drop-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  failed_routes = __builtin__.property(_get_failed_routes)
  stale_routes = __builtin__.property(_get_stale_routes)
  drop_routes = __builtin__.property(_get_drop_routes)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('failed_routes', failed_routes), ('stale_routes', stale_routes), ('drop_routes', drop_routes), ])


from . import config
from . import state
from . import failed_routes
from . import stale_routes
from . import drop_routes
class ip_routes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/programming-errors/ip-routes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The IP AFT/routes hardware programming status within the network-instance.
IP Route programming reports are divided into a set of sub-categories:
- failed programming -- A prefix which is not present in the AFT state is
  attempted to be added into the hardware but failed.  Traffic destined for
  this prefix will not be matched.
- stale programming -- A prefix is already in the AFT is requested to
  be updated but failed.  Traffic destined for this prefix will be
  forwarded to the old next-hop.  AFT telemetry should continue to
  reflect the old next-hop for the prefix.
- drop programming - these routes are explicitly programmed into hardware
  to point to a destination that discards packets.

Lifecycle of entries/prefixes in the above 3 containers is tied to AFT
telemetry data. When the route gets removed from AFT telemetry data
corresponding entry/prefix will be deleted from above containers as well
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__failed_routes','__stale_routes','__drop_routes',)

  _yang_name = 'ip-routes'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    self.__failed_routes = YANGDynClass(base=failed_routes.failed_routes, is_container='container', yang_name="failed-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    self.__stale_routes = YANGDynClass(base=stale_routes.stale_routes, is_container='container', yang_name="stale-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    self.__drop_routes = YANGDynClass(base=drop_routes.drop_routes, is_container='container', yang_name="drop-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'programming-errors', 'ip-routes']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/config (container)

    YANG Description: IP route hardware programming errors Configuration parameters
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: IP route hardware programming errors Configuration parameters
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/state (container)

    YANG Description: IP route hardware programming errors State parameters
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: IP route hardware programming errors State parameters
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)


  def _get_failed_routes(self):
    """
    Getter method for failed_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/failed_routes (container)

    YANG Description: Surrounding container for the list of routes that failed hardware
programming.
    """
    return self.__failed_routes
      
  def _set_failed_routes(self, v, load=False):
    """
    Setter method for failed_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/failed_routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_failed_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_failed_routes() directly.

    YANG Description: Surrounding container for the list of routes that failed hardware
programming.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=failed_routes.failed_routes, is_container='container', yang_name="failed-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """failed_routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=failed_routes.failed_routes, is_container='container', yang_name="failed-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)""",
        })

    self.__failed_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_failed_routes(self):
    self.__failed_routes = YANGDynClass(base=failed_routes.failed_routes, is_container='container', yang_name="failed-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)


  def _get_stale_routes(self):
    """
    Getter method for stale_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/stale_routes (container)

    YANG Description: Surrounding container for the list of routes that are currently in
a stale state.
    """
    return self.__stale_routes
      
  def _set_stale_routes(self, v, load=False):
    """
    Setter method for stale_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/stale_routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_stale_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_stale_routes() directly.

    YANG Description: Surrounding container for the list of routes that are currently in
a stale state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=stale_routes.stale_routes, is_container='container', yang_name="stale-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """stale_routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=stale_routes.stale_routes, is_container='container', yang_name="stale-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)""",
        })

    self.__stale_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_stale_routes(self):
    self.__stale_routes = YANGDynClass(base=stale_routes.stale_routes, is_container='container', yang_name="stale-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)


  def _get_drop_routes(self):
    """
    Getter method for drop_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/drop_routes (container)

    YANG Description: Surrounding container for the list of routes that are currently in
a drop state.
    """
    return self.__drop_routes
      
  def _set_drop_routes(self, v, load=False):
    """
    Setter method for drop_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes/drop_routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop_routes() directly.

    YANG Description: Surrounding container for the list of routes that are currently in
a drop state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=drop_routes.drop_routes, is_container='container', yang_name="drop-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop_routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=drop_routes.drop_routes, is_container='container', yang_name="drop-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)""",
        })

    self.__drop_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop_routes(self):
    self.__drop_routes = YANGDynClass(base=drop_routes.drop_routes, is_container='container', yang_name="drop-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=False)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  failed_routes = __builtin__.property(_get_failed_routes)
  stale_routes = __builtin__.property(_get_stale_routes)
  drop_routes = __builtin__.property(_get_drop_routes)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('failed_routes', failed_routes), ('stale_routes', stale_routes), ('drop_routes', drop_routes), ])


