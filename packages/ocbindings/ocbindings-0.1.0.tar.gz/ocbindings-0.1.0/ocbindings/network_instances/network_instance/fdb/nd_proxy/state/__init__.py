# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/fdb/nd-proxy/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State data related to ND-Proxy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__enable','__nd_suppression','__ip_mobility_threshold','__duplicate_ip_detection_interval',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__enable = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__nd_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__ip_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    self.__duplicate_ip_detection_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'nd-proxy', 'state']

  def _get_enable(self):
    """
    Getter method for enable, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/enable (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
proxy. If true a proxy server on the network answers the
NDP packets for an IP address that is not on that network.
    """
    return self.__enable
      
  def _set_enable(self, v, load=False):
    """
    Setter method for enable, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/enable (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
proxy. If true a proxy server on the network answers the
NDP packets for an IP address that is not on that network.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable(self):
    self.__enable = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_nd_suppression(self):
    """
    Getter method for nd_suppression, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/nd_suppression (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
If true the NDP queries for an IP address that is not on that
network are suppressed. NDP suppression is a
technique used to reduce the amount of NDP Packets
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    return self.__nd_suppression
      
  def _set_nd_suppression(self, v, load=False):
    """
    Setter method for nd_suppression, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/nd_suppression (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nd_suppression is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nd_suppression() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
If true the NDP queries for an IP address that is not on that
network are suppressed. NDP suppression is a
technique used to reduce the amount of NDP Packets
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nd_suppression must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__nd_suppression = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nd_suppression(self):
    self.__nd_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_ip_mobility_threshold(self):
    """
    Getter method for ip_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/ip_mobility_threshold (uint16)

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its IP address) to move from one
Ethernet segment to another. The number of IP mobility events that
are detected for a given IP address within the detection-threshold
before it is identified as a duplicate IP address.
Once the detection threshold is reached, updates for the IP address
are suppressed.
    """
    return self.__ip_mobility_threshold
      
  def _set_ip_mobility_threshold(self, v, load=False):
    """
    Setter method for ip_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/ip_mobility_threshold (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_mobility_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_mobility_threshold() directly.

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its IP address) to move from one
Ethernet segment to another. The number of IP mobility events that
are detected for a given IP address within the detection-threshold
before it is identified as a duplicate IP address.
Once the detection threshold is reached, updates for the IP address
are suppressed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_mobility_threshold must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__ip_mobility_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_mobility_threshold(self):
    self.__ip_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)


  def _get_duplicate_ip_detection_interval(self):
    """
    Getter method for duplicate_ip_detection_interval, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/duplicate_ip_detection_interval (uint16)

    YANG Description: The time interval used in detecting a duplicate IP address.
Duplicate ip detection number of host moves
allowed within interval period
    """
    return self.__duplicate_ip_detection_interval
      
  def _set_duplicate_ip_detection_interval(self, v, load=False):
    """
    Setter method for duplicate_ip_detection_interval, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/duplicate_ip_detection_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_duplicate_ip_detection_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_duplicate_ip_detection_interval() directly.

    YANG Description: The time interval used in detecting a duplicate IP address.
Duplicate ip detection number of host moves
allowed within interval period
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """duplicate_ip_detection_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__duplicate_ip_detection_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_duplicate_ip_detection_interval(self):
    self.__duplicate_ip_detection_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)

  enable = __builtin__.property(_get_enable)
  nd_suppression = __builtin__.property(_get_nd_suppression)
  ip_mobility_threshold = __builtin__.property(_get_ip_mobility_threshold)
  duplicate_ip_detection_interval = __builtin__.property(_get_duplicate_ip_detection_interval)


  _pyangbind_elements = OrderedDict([('enable', enable), ('nd_suppression', nd_suppression), ('ip_mobility_threshold', ip_mobility_threshold), ('duplicate_ip_detection_interval', duplicate_ip_detection_interval), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/fdb/nd-proxy/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State data related to ND-Proxy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__enable','__nd_suppression','__ip_mobility_threshold','__duplicate_ip_detection_interval',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__enable = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__nd_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__ip_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    self.__duplicate_ip_detection_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'nd-proxy', 'state']

  def _get_enable(self):
    """
    Getter method for enable, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/enable (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
proxy. If true a proxy server on the network answers the
NDP packets for an IP address that is not on that network.
    """
    return self.__enable
      
  def _set_enable(self, v, load=False):
    """
    Setter method for enable, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/enable (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
proxy. If true a proxy server on the network answers the
NDP packets for an IP address that is not on that network.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable(self):
    self.__enable = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_nd_suppression(self):
    """
    Getter method for nd_suppression, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/nd_suppression (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
If true the NDP queries for an IP address that is not on that
network are suppressed. NDP suppression is a
technique used to reduce the amount of NDP Packets
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    return self.__nd_suppression
      
  def _set_nd_suppression(self, v, load=False):
    """
    Setter method for nd_suppression, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/nd_suppression (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nd_suppression is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nd_suppression() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
If true the NDP queries for an IP address that is not on that
network are suppressed. NDP suppression is a
technique used to reduce the amount of NDP Packets
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nd_suppression must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__nd_suppression = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nd_suppression(self):
    self.__nd_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_ip_mobility_threshold(self):
    """
    Getter method for ip_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/ip_mobility_threshold (uint16)

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its IP address) to move from one
Ethernet segment to another. The number of IP mobility events that
are detected for a given IP address within the detection-threshold
before it is identified as a duplicate IP address.
Once the detection threshold is reached, updates for the IP address
are suppressed.
    """
    return self.__ip_mobility_threshold
      
  def _set_ip_mobility_threshold(self, v, load=False):
    """
    Setter method for ip_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/ip_mobility_threshold (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_mobility_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_mobility_threshold() directly.

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its IP address) to move from one
Ethernet segment to another. The number of IP mobility events that
are detected for a given IP address within the detection-threshold
before it is identified as a duplicate IP address.
Once the detection threshold is reached, updates for the IP address
are suppressed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_mobility_threshold must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__ip_mobility_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_mobility_threshold(self):
    self.__ip_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)


  def _get_duplicate_ip_detection_interval(self):
    """
    Getter method for duplicate_ip_detection_interval, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/duplicate_ip_detection_interval (uint16)

    YANG Description: The time interval used in detecting a duplicate IP address.
Duplicate ip detection number of host moves
allowed within interval period
    """
    return self.__duplicate_ip_detection_interval
      
  def _set_duplicate_ip_detection_interval(self, v, load=False):
    """
    Setter method for duplicate_ip_detection_interval, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/duplicate_ip_detection_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_duplicate_ip_detection_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_duplicate_ip_detection_interval() directly.

    YANG Description: The time interval used in detecting a duplicate IP address.
Duplicate ip detection number of host moves
allowed within interval period
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """duplicate_ip_detection_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__duplicate_ip_detection_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_duplicate_ip_detection_interval(self):
    self.__duplicate_ip_detection_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)

  enable = __builtin__.property(_get_enable)
  nd_suppression = __builtin__.property(_get_nd_suppression)
  ip_mobility_threshold = __builtin__.property(_get_ip_mobility_threshold)
  duplicate_ip_detection_interval = __builtin__.property(_get_duplicate_ip_detection_interval)


  _pyangbind_elements = OrderedDict([('enable', enable), ('nd_suppression', nd_suppression), ('ip_mobility_threshold', ip_mobility_threshold), ('duplicate_ip_detection_interval', duplicate_ip_detection_interval), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/fdb/nd-proxy/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State data related to ND-Proxy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__enable','__nd_suppression','__ip_mobility_threshold','__duplicate_ip_detection_interval',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__enable = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__nd_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__ip_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    self.__duplicate_ip_detection_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'nd-proxy', 'state']

  def _get_enable(self):
    """
    Getter method for enable, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/enable (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
proxy. If true a proxy server on the network answers the
NDP packets for an IP address that is not on that network.
    """
    return self.__enable
      
  def _set_enable(self, v, load=False):
    """
    Setter method for enable, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/enable (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
proxy. If true a proxy server on the network answers the
NDP packets for an IP address that is not on that network.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable(self):
    self.__enable = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_nd_suppression(self):
    """
    Getter method for nd_suppression, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/nd_suppression (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
If true the NDP queries for an IP address that is not on that
network are suppressed. NDP suppression is a
technique used to reduce the amount of NDP Packets
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    return self.__nd_suppression
      
  def _set_nd_suppression(self, v, load=False):
    """
    Setter method for nd_suppression, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/nd_suppression (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nd_suppression is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nd_suppression() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
If true the NDP queries for an IP address that is not on that
network are suppressed. NDP suppression is a
technique used to reduce the amount of NDP Packets
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nd_suppression must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__nd_suppression = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nd_suppression(self):
    self.__nd_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_ip_mobility_threshold(self):
    """
    Getter method for ip_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/ip_mobility_threshold (uint16)

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its IP address) to move from one
Ethernet segment to another. The number of IP mobility events that
are detected for a given IP address within the detection-threshold
before it is identified as a duplicate IP address.
Once the detection threshold is reached, updates for the IP address
are suppressed.
    """
    return self.__ip_mobility_threshold
      
  def _set_ip_mobility_threshold(self, v, load=False):
    """
    Setter method for ip_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/ip_mobility_threshold (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_mobility_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_mobility_threshold() directly.

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its IP address) to move from one
Ethernet segment to another. The number of IP mobility events that
are detected for a given IP address within the detection-threshold
before it is identified as a duplicate IP address.
Once the detection threshold is reached, updates for the IP address
are suppressed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_mobility_threshold must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__ip_mobility_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_mobility_threshold(self):
    self.__ip_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)


  def _get_duplicate_ip_detection_interval(self):
    """
    Getter method for duplicate_ip_detection_interval, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/duplicate_ip_detection_interval (uint16)

    YANG Description: The time interval used in detecting a duplicate IP address.
Duplicate ip detection number of host moves
allowed within interval period
    """
    return self.__duplicate_ip_detection_interval
      
  def _set_duplicate_ip_detection_interval(self, v, load=False):
    """
    Setter method for duplicate_ip_detection_interval, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/duplicate_ip_detection_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_duplicate_ip_detection_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_duplicate_ip_detection_interval() directly.

    YANG Description: The time interval used in detecting a duplicate IP address.
Duplicate ip detection number of host moves
allowed within interval period
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """duplicate_ip_detection_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__duplicate_ip_detection_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_duplicate_ip_detection_interval(self):
    self.__duplicate_ip_detection_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)

  enable = __builtin__.property(_get_enable)
  nd_suppression = __builtin__.property(_get_nd_suppression)
  ip_mobility_threshold = __builtin__.property(_get_ip_mobility_threshold)
  duplicate_ip_detection_interval = __builtin__.property(_get_duplicate_ip_detection_interval)


  _pyangbind_elements = OrderedDict([('enable', enable), ('nd_suppression', nd_suppression), ('ip_mobility_threshold', ip_mobility_threshold), ('duplicate_ip_detection_interval', duplicate_ip_detection_interval), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/fdb/nd-proxy/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State data related to ND-Proxy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__enable','__nd_suppression','__ip_mobility_threshold','__duplicate_ip_detection_interval',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__enable = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__nd_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__ip_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    self.__duplicate_ip_detection_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'nd-proxy', 'state']

  def _get_enable(self):
    """
    Getter method for enable, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/enable (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
proxy. If true a proxy server on the network answers the
NDP packets for an IP address that is not on that network.
    """
    return self.__enable
      
  def _set_enable(self, v, load=False):
    """
    Setter method for enable, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/enable (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
proxy. If true a proxy server on the network answers the
NDP packets for an IP address that is not on that network.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable(self):
    self.__enable = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_nd_suppression(self):
    """
    Getter method for nd_suppression, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/nd_suppression (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
If true the NDP queries for an IP address that is not on that
network are suppressed. NDP suppression is a
technique used to reduce the amount of NDP Packets
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    return self.__nd_suppression
      
  def _set_nd_suppression(self, v, load=False):
    """
    Setter method for nd_suppression, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/nd_suppression (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nd_suppression is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nd_suppression() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
If true the NDP queries for an IP address that is not on that
network are suppressed. NDP suppression is a
technique used to reduce the amount of NDP Packets
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nd_suppression must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__nd_suppression = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nd_suppression(self):
    self.__nd_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_ip_mobility_threshold(self):
    """
    Getter method for ip_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/ip_mobility_threshold (uint16)

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its IP address) to move from one
Ethernet segment to another. The number of IP mobility events that
are detected for a given IP address within the detection-threshold
before it is identified as a duplicate IP address.
Once the detection threshold is reached, updates for the IP address
are suppressed.
    """
    return self.__ip_mobility_threshold
      
  def _set_ip_mobility_threshold(self, v, load=False):
    """
    Setter method for ip_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/ip_mobility_threshold (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_mobility_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_mobility_threshold() directly.

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its IP address) to move from one
Ethernet segment to another. The number of IP mobility events that
are detected for a given IP address within the detection-threshold
before it is identified as a duplicate IP address.
Once the detection threshold is reached, updates for the IP address
are suppressed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_mobility_threshold must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__ip_mobility_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_mobility_threshold(self):
    self.__ip_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)


  def _get_duplicate_ip_detection_interval(self):
    """
    Getter method for duplicate_ip_detection_interval, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/duplicate_ip_detection_interval (uint16)

    YANG Description: The time interval used in detecting a duplicate IP address.
Duplicate ip detection number of host moves
allowed within interval period
    """
    return self.__duplicate_ip_detection_interval
      
  def _set_duplicate_ip_detection_interval(self, v, load=False):
    """
    Setter method for duplicate_ip_detection_interval, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy/state/duplicate_ip_detection_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_duplicate_ip_detection_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_duplicate_ip_detection_interval() directly.

    YANG Description: The time interval used in detecting a duplicate IP address.
Duplicate ip detection number of host moves
allowed within interval period
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """duplicate_ip_detection_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__duplicate_ip_detection_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_duplicate_ip_detection_interval(self):
    self.__duplicate_ip_detection_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)

  enable = __builtin__.property(_get_enable)
  nd_suppression = __builtin__.property(_get_nd_suppression)
  ip_mobility_threshold = __builtin__.property(_get_ip_mobility_threshold)
  duplicate_ip_detection_interval = __builtin__.property(_get_duplicate_ip_detection_interval)


  _pyangbind_elements = OrderedDict([('enable', enable), ('nd_suppression', nd_suppression), ('ip_mobility_threshold', ip_mobility_threshold), ('duplicate_ip_detection_interval', duplicate_ip_detection_interval), ])


