# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import mac_table
from . import mac_ip_table
class l2rib(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/fdb/l2rib. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state container for MAC address and MAC-IP address
information that is learned and installed into the MAC VRF Layer 2
Routing Information Base (L2RIB)
  """
  __slots__ = ('_path_helper', '_extmethods', '__mac_table','__mac_ip_table',)

  _yang_name = 'l2rib'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mac_table = YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__mac_ip_table = YANGDynClass(base=mac_ip_table.mac_ip_table, is_container='container', yang_name="mac-ip-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'l2rib']

  def _get_mac_table(self):
    """
    Getter method for mac_table, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_table (container)

    YANG Description: Operational state container for MAC address information installed
into the MAC VRF of the L2RIB
    """
    return self.__mac_table
      
  def _set_mac_table(self, v, load=False):
    """
    Setter method for mac_table, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_table (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_table is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_table() directly.

    YANG Description: Operational state container for MAC address information installed
into the MAC VRF of the L2RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_table must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__mac_table = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_table(self):
    self.__mac_table = YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_mac_ip_table(self):
    """
    Getter method for mac_ip_table, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table (container)

    YANG Description: Operational state container for MAC-IP address information installed
into the MAC VRF of the L2RIB
    """
    return self.__mac_ip_table
      
  def _set_mac_ip_table(self, v, load=False):
    """
    Setter method for mac_ip_table, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_ip_table is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_ip_table() directly.

    YANG Description: Operational state container for MAC-IP address information installed
into the MAC VRF of the L2RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mac_ip_table.mac_ip_table, is_container='container', yang_name="mac-ip-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_ip_table must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mac_ip_table.mac_ip_table, is_container='container', yang_name="mac-ip-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__mac_ip_table = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_ip_table(self):
    self.__mac_ip_table = YANGDynClass(base=mac_ip_table.mac_ip_table, is_container='container', yang_name="mac-ip-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  mac_table = __builtin__.property(_get_mac_table)
  mac_ip_table = __builtin__.property(_get_mac_ip_table)


  _pyangbind_elements = OrderedDict([('mac_table', mac_table), ('mac_ip_table', mac_ip_table), ])


from . import mac_table
from . import mac_ip_table
class l2rib(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/fdb/l2rib. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state container for MAC address and MAC-IP address
information that is learned and installed into the MAC VRF Layer 2
Routing Information Base (L2RIB)
  """
  __slots__ = ('_path_helper', '_extmethods', '__mac_table','__mac_ip_table',)

  _yang_name = 'l2rib'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mac_table = YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__mac_ip_table = YANGDynClass(base=mac_ip_table.mac_ip_table, is_container='container', yang_name="mac-ip-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'l2rib']

  def _get_mac_table(self):
    """
    Getter method for mac_table, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_table (container)

    YANG Description: Operational state container for MAC address information installed
into the MAC VRF of the L2RIB
    """
    return self.__mac_table
      
  def _set_mac_table(self, v, load=False):
    """
    Setter method for mac_table, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_table (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_table is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_table() directly.

    YANG Description: Operational state container for MAC address information installed
into the MAC VRF of the L2RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_table must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__mac_table = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_table(self):
    self.__mac_table = YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_mac_ip_table(self):
    """
    Getter method for mac_ip_table, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table (container)

    YANG Description: Operational state container for MAC-IP address information installed
into the MAC VRF of the L2RIB
    """
    return self.__mac_ip_table
      
  def _set_mac_ip_table(self, v, load=False):
    """
    Setter method for mac_ip_table, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_ip_table is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_ip_table() directly.

    YANG Description: Operational state container for MAC-IP address information installed
into the MAC VRF of the L2RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mac_ip_table.mac_ip_table, is_container='container', yang_name="mac-ip-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_ip_table must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mac_ip_table.mac_ip_table, is_container='container', yang_name="mac-ip-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__mac_ip_table = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_ip_table(self):
    self.__mac_ip_table = YANGDynClass(base=mac_ip_table.mac_ip_table, is_container='container', yang_name="mac-ip-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  mac_table = __builtin__.property(_get_mac_table)
  mac_ip_table = __builtin__.property(_get_mac_ip_table)


  _pyangbind_elements = OrderedDict([('mac_table', mac_table), ('mac_ip_table', mac_ip_table), ])


from . import mac_table
from . import mac_ip_table
class l2rib(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/fdb/l2rib. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state container for MAC address and MAC-IP address
information that is learned and installed into the MAC VRF Layer 2
Routing Information Base (L2RIB)
  """
  __slots__ = ('_path_helper', '_extmethods', '__mac_table','__mac_ip_table',)

  _yang_name = 'l2rib'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mac_table = YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__mac_ip_table = YANGDynClass(base=mac_ip_table.mac_ip_table, is_container='container', yang_name="mac-ip-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'l2rib']

  def _get_mac_table(self):
    """
    Getter method for mac_table, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_table (container)

    YANG Description: Operational state container for MAC address information installed
into the MAC VRF of the L2RIB
    """
    return self.__mac_table
      
  def _set_mac_table(self, v, load=False):
    """
    Setter method for mac_table, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_table (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_table is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_table() directly.

    YANG Description: Operational state container for MAC address information installed
into the MAC VRF of the L2RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_table must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__mac_table = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_table(self):
    self.__mac_table = YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_mac_ip_table(self):
    """
    Getter method for mac_ip_table, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table (container)

    YANG Description: Operational state container for MAC-IP address information installed
into the MAC VRF of the L2RIB
    """
    return self.__mac_ip_table
      
  def _set_mac_ip_table(self, v, load=False):
    """
    Setter method for mac_ip_table, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_ip_table is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_ip_table() directly.

    YANG Description: Operational state container for MAC-IP address information installed
into the MAC VRF of the L2RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mac_ip_table.mac_ip_table, is_container='container', yang_name="mac-ip-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_ip_table must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mac_ip_table.mac_ip_table, is_container='container', yang_name="mac-ip-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__mac_ip_table = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_ip_table(self):
    self.__mac_ip_table = YANGDynClass(base=mac_ip_table.mac_ip_table, is_container='container', yang_name="mac-ip-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  mac_table = __builtin__.property(_get_mac_table)
  mac_ip_table = __builtin__.property(_get_mac_ip_table)


  _pyangbind_elements = OrderedDict([('mac_table', mac_table), ('mac_ip_table', mac_ip_table), ])


from . import mac_table
from . import mac_ip_table
class l2rib(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/fdb/l2rib. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state container for MAC address and MAC-IP address
information that is learned and installed into the MAC VRF Layer 2
Routing Information Base (L2RIB)
  """
  __slots__ = ('_path_helper', '_extmethods', '__mac_table','__mac_ip_table',)

  _yang_name = 'l2rib'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mac_table = YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__mac_ip_table = YANGDynClass(base=mac_ip_table.mac_ip_table, is_container='container', yang_name="mac-ip-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'l2rib']

  def _get_mac_table(self):
    """
    Getter method for mac_table, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_table (container)

    YANG Description: Operational state container for MAC address information installed
into the MAC VRF of the L2RIB
    """
    return self.__mac_table
      
  def _set_mac_table(self, v, load=False):
    """
    Setter method for mac_table, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_table (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_table is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_table() directly.

    YANG Description: Operational state container for MAC address information installed
into the MAC VRF of the L2RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_table must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__mac_table = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_table(self):
    self.__mac_table = YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_mac_ip_table(self):
    """
    Getter method for mac_ip_table, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table (container)

    YANG Description: Operational state container for MAC-IP address information installed
into the MAC VRF of the L2RIB
    """
    return self.__mac_ip_table
      
  def _set_mac_ip_table(self, v, load=False):
    """
    Setter method for mac_ip_table, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_ip_table is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_ip_table() directly.

    YANG Description: Operational state container for MAC-IP address information installed
into the MAC VRF of the L2RIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mac_ip_table.mac_ip_table, is_container='container', yang_name="mac-ip-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_ip_table must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mac_ip_table.mac_ip_table, is_container='container', yang_name="mac-ip-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__mac_ip_table = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_ip_table(self):
    self.__mac_ip_table = YANGDynClass(base=mac_ip_table.mac_ip_table, is_container='container', yang_name="mac-ip-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  mac_table = __builtin__.property(_get_mac_table)
  mac_ip_table = __builtin__.property(_get_mac_ip_table)


  _pyangbind_elements = OrderedDict([('mac_table', mac_table), ('mac_ip_table', mac_ip_table), ])


