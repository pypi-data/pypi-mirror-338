# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State container for L2RIB MAC Table Entries
  """
  __slots__ = ('_path_helper', '_extmethods', '__producer','__seq_number','__mobility_state','__esi','__sticky','__next_hop','__next_hop_group',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__producer = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LOCAL': {}, 'STATIC': {}, 'BGP': {}},), is_leaf=True, yang_name="producer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    self.__seq_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__mobility_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FROZEN': {}, 'DUPLICATE': {}},), is_leaf=True, yang_name="mobility-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    self.__esi = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}), is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:esi', is_config=False)
    self.__sticky = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sticky", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__next_hop = YANGDynClass(base=str, is_leaf=True, yang_name="next-hop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__next_hop_group = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'l2rib', 'mac-ip-table', 'entries', 'entry', 'producers', 'producer', 'state']

  def _get_producer(self):
    """
    Getter method for producer, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/producer (enumeration)

    YANG Description: Source of the learned L2RIB route
    """
    return self.__producer
      
  def _set_producer(self, v, load=False):
    """
    Setter method for producer, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/producer (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_producer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_producer() directly.

    YANG Description: Source of the learned L2RIB route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LOCAL': {}, 'STATIC': {}, 'BGP': {}},), is_leaf=True, yang_name="producer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """producer must be of a type compatible with enumeration""",
          'defined-type': "openconfig-network-instance:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LOCAL': {}, 'STATIC': {}, 'BGP': {}},), is_leaf=True, yang_name="producer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)""",
        })

    self.__producer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_producer(self):
    self.__producer = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LOCAL': {}, 'STATIC': {}, 'BGP': {}},), is_leaf=True, yang_name="producer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)


  def _get_seq_number(self):
    """
    Getter method for seq_number, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/seq_number (uint32)

    YANG Description: The sequence number is used to ensure that PEs retain the correct
MAC/IP Advertisement route when multiple updates occur for the same
MAC address
    """
    return self.__seq_number
      
  def _set_seq_number(self, v, load=False):
    """
    Setter method for seq_number, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/seq_number (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_seq_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_seq_number() directly.

    YANG Description: The sequence number is used to ensure that PEs retain the correct
MAC/IP Advertisement route when multiple updates occur for the same
MAC address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """seq_number must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__seq_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_seq_number(self):
    self.__seq_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_mobility_state(self):
    """
    Getter method for mobility_state, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/mobility_state (enumeration)

    YANG Description: Indicates if learned MAC address is duplicate or frozen
    """
    return self.__mobility_state
      
  def _set_mobility_state(self, v, load=False):
    """
    Setter method for mobility_state, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/mobility_state (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mobility_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mobility_state() directly.

    YANG Description: Indicates if learned MAC address is duplicate or frozen
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FROZEN': {}, 'DUPLICATE': {}},), is_leaf=True, yang_name="mobility-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mobility_state must be of a type compatible with enumeration""",
          'defined-type': "openconfig-network-instance:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FROZEN': {}, 'DUPLICATE': {}},), is_leaf=True, yang_name="mobility-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)""",
        })

    self.__mobility_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mobility_state(self):
    self.__mobility_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FROZEN': {}, 'DUPLICATE': {}},), is_leaf=True, yang_name="mobility-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)


  def _get_esi(self):
    """
    Getter method for esi, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/esi (oc-evpn-types:esi)

    YANG Description: Ethernet Segment Identifier (ESI) for local and remote routes.
ESI is used to resolve the next-hop-group. All mac-addresses
learned with the same ESI should point to the same next-hop-group
    """
    return self.__esi
      
  def _set_esi(self, v, load=False):
    """
    Setter method for esi, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/esi (oc-evpn-types:esi)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_esi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_esi() directly.

    YANG Description: Ethernet Segment Identifier (ESI) for local and remote routes.
ESI is used to resolve the next-hop-group. All mac-addresses
learned with the same ESI should point to the same next-hop-group
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}), is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:esi', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """esi must be of a type compatible with oc-evpn-types:esi""",
          'defined-type': "oc-evpn-types:esi",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}), is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:esi', is_config=False)""",
        })

    self.__esi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_esi(self):
    self.__esi = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}), is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:esi', is_config=False)


  def _get_sticky(self):
    """
    Getter method for sticky, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/sticky (boolean)

    YANG Description: MAC address is sticky and not subjected to MAC moves
    """
    return self.__sticky
      
  def _set_sticky(self, v, load=False):
    """
    Setter method for sticky, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/sticky (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sticky is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sticky() directly.

    YANG Description: MAC address is sticky and not subjected to MAC moves
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="sticky", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sticky must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sticky", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__sticky = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sticky(self):
    self.__sticky = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sticky", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_next_hop(self):
    """
    Getter method for next_hop, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/next_hop (leafref)

    YANG Description: Leafref next-hop for the MAC-IP table entry
    """
    return self.__next_hop
      
  def _set_next_hop(self, v, load=False):
    """
    Setter method for next_hop, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/next_hop (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_next_hop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_next_hop() directly.

    YANG Description: Leafref next-hop for the MAC-IP table entry
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="next-hop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """next_hop must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="next-hop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__next_hop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_next_hop(self):
    self.__next_hop = YANGDynClass(base=str, is_leaf=True, yang_name="next-hop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_next_hop_group(self):
    """
    Getter method for next_hop_group, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/next_hop_group (leafref)

    YANG Description: Leafref next-hop-group for the MAC-IP table entry
    """
    return self.__next_hop_group
      
  def _set_next_hop_group(self, v, load=False):
    """
    Setter method for next_hop_group, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/next_hop_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_next_hop_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_next_hop_group() directly.

    YANG Description: Leafref next-hop-group for the MAC-IP table entry
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """next_hop_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__next_hop_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_next_hop_group(self):
    self.__next_hop_group = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)

  producer = __builtin__.property(_get_producer)
  seq_number = __builtin__.property(_get_seq_number)
  mobility_state = __builtin__.property(_get_mobility_state)
  esi = __builtin__.property(_get_esi)
  sticky = __builtin__.property(_get_sticky)
  next_hop = __builtin__.property(_get_next_hop)
  next_hop_group = __builtin__.property(_get_next_hop_group)


  _pyangbind_elements = OrderedDict([('producer', producer), ('seq_number', seq_number), ('mobility_state', mobility_state), ('esi', esi), ('sticky', sticky), ('next_hop', next_hop), ('next_hop_group', next_hop_group), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State container for L2RIB MAC Table Entries
  """
  __slots__ = ('_path_helper', '_extmethods', '__producer','__seq_number','__mobility_state','__esi','__sticky','__next_hop','__next_hop_group',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__producer = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LOCAL': {}, 'STATIC': {}, 'BGP': {}},), is_leaf=True, yang_name="producer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    self.__seq_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__mobility_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FROZEN': {}, 'DUPLICATE': {}},), is_leaf=True, yang_name="mobility-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    self.__esi = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}), is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:esi', is_config=False)
    self.__sticky = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sticky", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__next_hop = YANGDynClass(base=str, is_leaf=True, yang_name="next-hop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__next_hop_group = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'l2rib', 'mac-ip-table', 'entries', 'entry', 'producers', 'producer', 'state']

  def _get_producer(self):
    """
    Getter method for producer, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/producer (enumeration)

    YANG Description: Source of the learned L2RIB route
    """
    return self.__producer
      
  def _set_producer(self, v, load=False):
    """
    Setter method for producer, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/producer (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_producer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_producer() directly.

    YANG Description: Source of the learned L2RIB route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LOCAL': {}, 'STATIC': {}, 'BGP': {}},), is_leaf=True, yang_name="producer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """producer must be of a type compatible with enumeration""",
          'defined-type': "openconfig-network-instance:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LOCAL': {}, 'STATIC': {}, 'BGP': {}},), is_leaf=True, yang_name="producer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)""",
        })

    self.__producer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_producer(self):
    self.__producer = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LOCAL': {}, 'STATIC': {}, 'BGP': {}},), is_leaf=True, yang_name="producer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)


  def _get_seq_number(self):
    """
    Getter method for seq_number, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/seq_number (uint32)

    YANG Description: The sequence number is used to ensure that PEs retain the correct
MAC/IP Advertisement route when multiple updates occur for the same
MAC address
    """
    return self.__seq_number
      
  def _set_seq_number(self, v, load=False):
    """
    Setter method for seq_number, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/seq_number (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_seq_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_seq_number() directly.

    YANG Description: The sequence number is used to ensure that PEs retain the correct
MAC/IP Advertisement route when multiple updates occur for the same
MAC address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """seq_number must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__seq_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_seq_number(self):
    self.__seq_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_mobility_state(self):
    """
    Getter method for mobility_state, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/mobility_state (enumeration)

    YANG Description: Indicates if learned MAC address is duplicate or frozen
    """
    return self.__mobility_state
      
  def _set_mobility_state(self, v, load=False):
    """
    Setter method for mobility_state, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/mobility_state (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mobility_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mobility_state() directly.

    YANG Description: Indicates if learned MAC address is duplicate or frozen
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FROZEN': {}, 'DUPLICATE': {}},), is_leaf=True, yang_name="mobility-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mobility_state must be of a type compatible with enumeration""",
          'defined-type': "openconfig-network-instance:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FROZEN': {}, 'DUPLICATE': {}},), is_leaf=True, yang_name="mobility-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)""",
        })

    self.__mobility_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mobility_state(self):
    self.__mobility_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FROZEN': {}, 'DUPLICATE': {}},), is_leaf=True, yang_name="mobility-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)


  def _get_esi(self):
    """
    Getter method for esi, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/esi (oc-evpn-types:esi)

    YANG Description: Ethernet Segment Identifier (ESI) for local and remote routes.
ESI is used to resolve the next-hop-group. All mac-addresses
learned with the same ESI should point to the same next-hop-group
    """
    return self.__esi
      
  def _set_esi(self, v, load=False):
    """
    Setter method for esi, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/esi (oc-evpn-types:esi)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_esi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_esi() directly.

    YANG Description: Ethernet Segment Identifier (ESI) for local and remote routes.
ESI is used to resolve the next-hop-group. All mac-addresses
learned with the same ESI should point to the same next-hop-group
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}), is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:esi', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """esi must be of a type compatible with oc-evpn-types:esi""",
          'defined-type': "oc-evpn-types:esi",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}), is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:esi', is_config=False)""",
        })

    self.__esi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_esi(self):
    self.__esi = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}), is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:esi', is_config=False)


  def _get_sticky(self):
    """
    Getter method for sticky, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/sticky (boolean)

    YANG Description: MAC address is sticky and not subjected to MAC moves
    """
    return self.__sticky
      
  def _set_sticky(self, v, load=False):
    """
    Setter method for sticky, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/sticky (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sticky is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sticky() directly.

    YANG Description: MAC address is sticky and not subjected to MAC moves
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="sticky", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sticky must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sticky", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__sticky = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sticky(self):
    self.__sticky = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sticky", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_next_hop(self):
    """
    Getter method for next_hop, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/next_hop (leafref)

    YANG Description: Leafref next-hop for the MAC-IP table entry
    """
    return self.__next_hop
      
  def _set_next_hop(self, v, load=False):
    """
    Setter method for next_hop, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/next_hop (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_next_hop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_next_hop() directly.

    YANG Description: Leafref next-hop for the MAC-IP table entry
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="next-hop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """next_hop must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="next-hop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__next_hop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_next_hop(self):
    self.__next_hop = YANGDynClass(base=str, is_leaf=True, yang_name="next-hop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_next_hop_group(self):
    """
    Getter method for next_hop_group, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/next_hop_group (leafref)

    YANG Description: Leafref next-hop-group for the MAC-IP table entry
    """
    return self.__next_hop_group
      
  def _set_next_hop_group(self, v, load=False):
    """
    Setter method for next_hop_group, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/next_hop_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_next_hop_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_next_hop_group() directly.

    YANG Description: Leafref next-hop-group for the MAC-IP table entry
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """next_hop_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__next_hop_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_next_hop_group(self):
    self.__next_hop_group = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)

  producer = __builtin__.property(_get_producer)
  seq_number = __builtin__.property(_get_seq_number)
  mobility_state = __builtin__.property(_get_mobility_state)
  esi = __builtin__.property(_get_esi)
  sticky = __builtin__.property(_get_sticky)
  next_hop = __builtin__.property(_get_next_hop)
  next_hop_group = __builtin__.property(_get_next_hop_group)


  _pyangbind_elements = OrderedDict([('producer', producer), ('seq_number', seq_number), ('mobility_state', mobility_state), ('esi', esi), ('sticky', sticky), ('next_hop', next_hop), ('next_hop_group', next_hop_group), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State container for L2RIB MAC Table Entries
  """
  __slots__ = ('_path_helper', '_extmethods', '__producer','__seq_number','__mobility_state','__esi','__sticky','__next_hop','__next_hop_group',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__producer = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LOCAL': {}, 'STATIC': {}, 'BGP': {}},), is_leaf=True, yang_name="producer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    self.__seq_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__mobility_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FROZEN': {}, 'DUPLICATE': {}},), is_leaf=True, yang_name="mobility-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    self.__esi = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}), is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:esi', is_config=False)
    self.__sticky = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sticky", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__next_hop = YANGDynClass(base=str, is_leaf=True, yang_name="next-hop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__next_hop_group = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'l2rib', 'mac-ip-table', 'entries', 'entry', 'producers', 'producer', 'state']

  def _get_producer(self):
    """
    Getter method for producer, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/producer (enumeration)

    YANG Description: Source of the learned L2RIB route
    """
    return self.__producer
      
  def _set_producer(self, v, load=False):
    """
    Setter method for producer, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/producer (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_producer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_producer() directly.

    YANG Description: Source of the learned L2RIB route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LOCAL': {}, 'STATIC': {}, 'BGP': {}},), is_leaf=True, yang_name="producer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """producer must be of a type compatible with enumeration""",
          'defined-type': "openconfig-network-instance:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LOCAL': {}, 'STATIC': {}, 'BGP': {}},), is_leaf=True, yang_name="producer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)""",
        })

    self.__producer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_producer(self):
    self.__producer = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LOCAL': {}, 'STATIC': {}, 'BGP': {}},), is_leaf=True, yang_name="producer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)


  def _get_seq_number(self):
    """
    Getter method for seq_number, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/seq_number (uint32)

    YANG Description: The sequence number is used to ensure that PEs retain the correct
MAC/IP Advertisement route when multiple updates occur for the same
MAC address
    """
    return self.__seq_number
      
  def _set_seq_number(self, v, load=False):
    """
    Setter method for seq_number, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/seq_number (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_seq_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_seq_number() directly.

    YANG Description: The sequence number is used to ensure that PEs retain the correct
MAC/IP Advertisement route when multiple updates occur for the same
MAC address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """seq_number must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__seq_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_seq_number(self):
    self.__seq_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_mobility_state(self):
    """
    Getter method for mobility_state, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/mobility_state (enumeration)

    YANG Description: Indicates if learned MAC address is duplicate or frozen
    """
    return self.__mobility_state
      
  def _set_mobility_state(self, v, load=False):
    """
    Setter method for mobility_state, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/mobility_state (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mobility_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mobility_state() directly.

    YANG Description: Indicates if learned MAC address is duplicate or frozen
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FROZEN': {}, 'DUPLICATE': {}},), is_leaf=True, yang_name="mobility-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mobility_state must be of a type compatible with enumeration""",
          'defined-type': "openconfig-network-instance:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FROZEN': {}, 'DUPLICATE': {}},), is_leaf=True, yang_name="mobility-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)""",
        })

    self.__mobility_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mobility_state(self):
    self.__mobility_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FROZEN': {}, 'DUPLICATE': {}},), is_leaf=True, yang_name="mobility-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)


  def _get_esi(self):
    """
    Getter method for esi, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/esi (oc-evpn-types:esi)

    YANG Description: Ethernet Segment Identifier (ESI) for local and remote routes.
ESI is used to resolve the next-hop-group. All mac-addresses
learned with the same ESI should point to the same next-hop-group
    """
    return self.__esi
      
  def _set_esi(self, v, load=False):
    """
    Setter method for esi, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/esi (oc-evpn-types:esi)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_esi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_esi() directly.

    YANG Description: Ethernet Segment Identifier (ESI) for local and remote routes.
ESI is used to resolve the next-hop-group. All mac-addresses
learned with the same ESI should point to the same next-hop-group
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}), is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:esi', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """esi must be of a type compatible with oc-evpn-types:esi""",
          'defined-type': "oc-evpn-types:esi",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}), is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:esi', is_config=False)""",
        })

    self.__esi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_esi(self):
    self.__esi = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}), is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:esi', is_config=False)


  def _get_sticky(self):
    """
    Getter method for sticky, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/sticky (boolean)

    YANG Description: MAC address is sticky and not subjected to MAC moves
    """
    return self.__sticky
      
  def _set_sticky(self, v, load=False):
    """
    Setter method for sticky, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/sticky (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sticky is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sticky() directly.

    YANG Description: MAC address is sticky and not subjected to MAC moves
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="sticky", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sticky must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sticky", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__sticky = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sticky(self):
    self.__sticky = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sticky", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_next_hop(self):
    """
    Getter method for next_hop, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/next_hop (leafref)

    YANG Description: Leafref next-hop for the MAC-IP table entry
    """
    return self.__next_hop
      
  def _set_next_hop(self, v, load=False):
    """
    Setter method for next_hop, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/next_hop (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_next_hop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_next_hop() directly.

    YANG Description: Leafref next-hop for the MAC-IP table entry
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="next-hop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """next_hop must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="next-hop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__next_hop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_next_hop(self):
    self.__next_hop = YANGDynClass(base=str, is_leaf=True, yang_name="next-hop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_next_hop_group(self):
    """
    Getter method for next_hop_group, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/next_hop_group (leafref)

    YANG Description: Leafref next-hop-group for the MAC-IP table entry
    """
    return self.__next_hop_group
      
  def _set_next_hop_group(self, v, load=False):
    """
    Setter method for next_hop_group, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/next_hop_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_next_hop_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_next_hop_group() directly.

    YANG Description: Leafref next-hop-group for the MAC-IP table entry
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """next_hop_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__next_hop_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_next_hop_group(self):
    self.__next_hop_group = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)

  producer = __builtin__.property(_get_producer)
  seq_number = __builtin__.property(_get_seq_number)
  mobility_state = __builtin__.property(_get_mobility_state)
  esi = __builtin__.property(_get_esi)
  sticky = __builtin__.property(_get_sticky)
  next_hop = __builtin__.property(_get_next_hop)
  next_hop_group = __builtin__.property(_get_next_hop_group)


  _pyangbind_elements = OrderedDict([('producer', producer), ('seq_number', seq_number), ('mobility_state', mobility_state), ('esi', esi), ('sticky', sticky), ('next_hop', next_hop), ('next_hop_group', next_hop_group), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State container for L2RIB MAC Table Entries
  """
  __slots__ = ('_path_helper', '_extmethods', '__producer','__seq_number','__mobility_state','__esi','__sticky','__next_hop','__next_hop_group',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__producer = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LOCAL': {}, 'STATIC': {}, 'BGP': {}},), is_leaf=True, yang_name="producer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    self.__seq_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__mobility_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FROZEN': {}, 'DUPLICATE': {}},), is_leaf=True, yang_name="mobility-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    self.__esi = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}), is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:esi', is_config=False)
    self.__sticky = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sticky", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__next_hop = YANGDynClass(base=str, is_leaf=True, yang_name="next-hop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__next_hop_group = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'l2rib', 'mac-ip-table', 'entries', 'entry', 'producers', 'producer', 'state']

  def _get_producer(self):
    """
    Getter method for producer, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/producer (enumeration)

    YANG Description: Source of the learned L2RIB route
    """
    return self.__producer
      
  def _set_producer(self, v, load=False):
    """
    Setter method for producer, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/producer (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_producer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_producer() directly.

    YANG Description: Source of the learned L2RIB route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LOCAL': {}, 'STATIC': {}, 'BGP': {}},), is_leaf=True, yang_name="producer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """producer must be of a type compatible with enumeration""",
          'defined-type': "openconfig-network-instance:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LOCAL': {}, 'STATIC': {}, 'BGP': {}},), is_leaf=True, yang_name="producer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)""",
        })

    self.__producer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_producer(self):
    self.__producer = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LOCAL': {}, 'STATIC': {}, 'BGP': {}},), is_leaf=True, yang_name="producer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)


  def _get_seq_number(self):
    """
    Getter method for seq_number, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/seq_number (uint32)

    YANG Description: The sequence number is used to ensure that PEs retain the correct
MAC/IP Advertisement route when multiple updates occur for the same
MAC address
    """
    return self.__seq_number
      
  def _set_seq_number(self, v, load=False):
    """
    Setter method for seq_number, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/seq_number (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_seq_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_seq_number() directly.

    YANG Description: The sequence number is used to ensure that PEs retain the correct
MAC/IP Advertisement route when multiple updates occur for the same
MAC address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """seq_number must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__seq_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_seq_number(self):
    self.__seq_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_mobility_state(self):
    """
    Getter method for mobility_state, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/mobility_state (enumeration)

    YANG Description: Indicates if learned MAC address is duplicate or frozen
    """
    return self.__mobility_state
      
  def _set_mobility_state(self, v, load=False):
    """
    Setter method for mobility_state, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/mobility_state (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mobility_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mobility_state() directly.

    YANG Description: Indicates if learned MAC address is duplicate or frozen
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FROZEN': {}, 'DUPLICATE': {}},), is_leaf=True, yang_name="mobility-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mobility_state must be of a type compatible with enumeration""",
          'defined-type': "openconfig-network-instance:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FROZEN': {}, 'DUPLICATE': {}},), is_leaf=True, yang_name="mobility-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)""",
        })

    self.__mobility_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mobility_state(self):
    self.__mobility_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'FROZEN': {}, 'DUPLICATE': {}},), is_leaf=True, yang_name="mobility-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)


  def _get_esi(self):
    """
    Getter method for esi, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/esi (oc-evpn-types:esi)

    YANG Description: Ethernet Segment Identifier (ESI) for local and remote routes.
ESI is used to resolve the next-hop-group. All mac-addresses
learned with the same ESI should point to the same next-hop-group
    """
    return self.__esi
      
  def _set_esi(self, v, load=False):
    """
    Setter method for esi, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/esi (oc-evpn-types:esi)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_esi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_esi() directly.

    YANG Description: Ethernet Segment Identifier (ESI) for local and remote routes.
ESI is used to resolve the next-hop-group. All mac-addresses
learned with the same ESI should point to the same next-hop-group
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}), is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:esi', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """esi must be of a type compatible with oc-evpn-types:esi""",
          'defined-type': "oc-evpn-types:esi",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}), is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:esi', is_config=False)""",
        })

    self.__esi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_esi(self):
    self.__esi = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}), is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:esi', is_config=False)


  def _get_sticky(self):
    """
    Getter method for sticky, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/sticky (boolean)

    YANG Description: MAC address is sticky and not subjected to MAC moves
    """
    return self.__sticky
      
  def _set_sticky(self, v, load=False):
    """
    Setter method for sticky, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/sticky (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sticky is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sticky() directly.

    YANG Description: MAC address is sticky and not subjected to MAC moves
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="sticky", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sticky must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sticky", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__sticky = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sticky(self):
    self.__sticky = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sticky", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_next_hop(self):
    """
    Getter method for next_hop, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/next_hop (leafref)

    YANG Description: Leafref next-hop for the MAC-IP table entry
    """
    return self.__next_hop
      
  def _set_next_hop(self, v, load=False):
    """
    Setter method for next_hop, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/next_hop (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_next_hop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_next_hop() directly.

    YANG Description: Leafref next-hop for the MAC-IP table entry
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="next-hop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """next_hop must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="next-hop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__next_hop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_next_hop(self):
    self.__next_hop = YANGDynClass(base=str, is_leaf=True, yang_name="next-hop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_next_hop_group(self):
    """
    Getter method for next_hop_group, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/next_hop_group (leafref)

    YANG Description: Leafref next-hop-group for the MAC-IP table entry
    """
    return self.__next_hop_group
      
  def _set_next_hop_group(self, v, load=False):
    """
    Setter method for next_hop_group, mapped from YANG variable /network_instances/network_instance/fdb/l2rib/mac_ip_table/entries/entry/producers/producer/state/next_hop_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_next_hop_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_next_hop_group() directly.

    YANG Description: Leafref next-hop-group for the MAC-IP table entry
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """next_hop_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__next_hop_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_next_hop_group(self):
    self.__next_hop_group = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)

  producer = __builtin__.property(_get_producer)
  seq_number = __builtin__.property(_get_seq_number)
  mobility_state = __builtin__.property(_get_mobility_state)
  esi = __builtin__.property(_get_esi)
  sticky = __builtin__.property(_get_sticky)
  next_hop = __builtin__.property(_get_next_hop)
  next_hop_group = __builtin__.property(_get_next_hop_group)


  _pyangbind_elements = OrderedDict([('producer', producer), ('seq_number', seq_number), ('mobility_state', mobility_state), ('esi', esi), ('sticky', sticky), ('next_hop', next_hop), ('next_hop_group', next_hop_group), ])


