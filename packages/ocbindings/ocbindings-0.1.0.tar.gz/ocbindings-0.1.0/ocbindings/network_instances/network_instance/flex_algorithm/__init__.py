# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import flex_algorithm_definition
from . import flex_algo_global_attributes
from . import flex_algo_interface_attributes
class flex_algorithm(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/flex-algorithm. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Flex Algorithms definitions and the attributes
  """
  __slots__ = ('_path_helper', '_extmethods', '__flex_algorithm_definition','__flex_algo_global_attributes','__flex_algo_interface_attributes',)

  _yang_name = 'flex-algorithm'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__flex_algorithm_definition = YANGDynClass(base=flex_algorithm_definition.flex_algorithm_definition, is_container='container', yang_name="flex-algorithm-definition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    self.__flex_algo_global_attributes = YANGDynClass(base=flex_algo_global_attributes.flex_algo_global_attributes, is_container='container', yang_name="flex-algo-global-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    self.__flex_algo_interface_attributes = YANGDynClass(base=flex_algo_interface_attributes.flex_algo_interface_attributes, is_container='container', yang_name="flex-algo-interface-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'flex-algorithm']

  def _get_flex_algorithm_definition(self):
    """
    Getter method for flex_algorithm_definition, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algorithm_definition (container)

    YANG Description: Flexible Algorithms and their definitions
    """
    return self.__flex_algorithm_definition
      
  def _set_flex_algorithm_definition(self, v, load=False):
    """
    Setter method for flex_algorithm_definition, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algorithm_definition (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algorithm_definition is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algorithm_definition() directly.

    YANG Description: Flexible Algorithms and their definitions
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=flex_algorithm_definition.flex_algorithm_definition, is_container='container', yang_name="flex-algorithm-definition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algorithm_definition must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=flex_algorithm_definition.flex_algorithm_definition, is_container='container', yang_name="flex-algorithm-definition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__flex_algorithm_definition = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algorithm_definition(self):
    self.__flex_algorithm_definition = YANGDynClass(base=flex_algorithm_definition.flex_algorithm_definition, is_container='container', yang_name="flex-algorithm-definition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)


  def _get_flex_algo_global_attributes(self):
    """
    Getter method for flex_algo_global_attributes, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes (container)

    YANG Description: Flexible Algorithm global attributes
    """
    return self.__flex_algo_global_attributes
      
  def _set_flex_algo_global_attributes(self, v, load=False):
    """
    Setter method for flex_algo_global_attributes, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algo_global_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algo_global_attributes() directly.

    YANG Description: Flexible Algorithm global attributes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=flex_algo_global_attributes.flex_algo_global_attributes, is_container='container', yang_name="flex-algo-global-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algo_global_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=flex_algo_global_attributes.flex_algo_global_attributes, is_container='container', yang_name="flex-algo-global-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__flex_algo_global_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algo_global_attributes(self):
    self.__flex_algo_global_attributes = YANGDynClass(base=flex_algo_global_attributes.flex_algo_global_attributes, is_container='container', yang_name="flex-algo-global-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)


  def _get_flex_algo_interface_attributes(self):
    """
    Getter method for flex_algo_interface_attributes, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes (container)

    YANG Description: Flexible Algorithm attributes for interfaces
    """
    return self.__flex_algo_interface_attributes
      
  def _set_flex_algo_interface_attributes(self, v, load=False):
    """
    Setter method for flex_algo_interface_attributes, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algo_interface_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algo_interface_attributes() directly.

    YANG Description: Flexible Algorithm attributes for interfaces
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=flex_algo_interface_attributes.flex_algo_interface_attributes, is_container='container', yang_name="flex-algo-interface-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algo_interface_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=flex_algo_interface_attributes.flex_algo_interface_attributes, is_container='container', yang_name="flex-algo-interface-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__flex_algo_interface_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algo_interface_attributes(self):
    self.__flex_algo_interface_attributes = YANGDynClass(base=flex_algo_interface_attributes.flex_algo_interface_attributes, is_container='container', yang_name="flex-algo-interface-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)

  flex_algorithm_definition = __builtin__.property(_get_flex_algorithm_definition, _set_flex_algorithm_definition)
  flex_algo_global_attributes = __builtin__.property(_get_flex_algo_global_attributes, _set_flex_algo_global_attributes)
  flex_algo_interface_attributes = __builtin__.property(_get_flex_algo_interface_attributes, _set_flex_algo_interface_attributes)


  _pyangbind_elements = OrderedDict([('flex_algorithm_definition', flex_algorithm_definition), ('flex_algo_global_attributes', flex_algo_global_attributes), ('flex_algo_interface_attributes', flex_algo_interface_attributes), ])


from . import flex_algorithm_definition
from . import flex_algo_global_attributes
from . import flex_algo_interface_attributes
class flex_algorithm(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/flex-algorithm. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Flex Algorithms definitions and the attributes
  """
  __slots__ = ('_path_helper', '_extmethods', '__flex_algorithm_definition','__flex_algo_global_attributes','__flex_algo_interface_attributes',)

  _yang_name = 'flex-algorithm'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__flex_algorithm_definition = YANGDynClass(base=flex_algorithm_definition.flex_algorithm_definition, is_container='container', yang_name="flex-algorithm-definition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    self.__flex_algo_global_attributes = YANGDynClass(base=flex_algo_global_attributes.flex_algo_global_attributes, is_container='container', yang_name="flex-algo-global-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    self.__flex_algo_interface_attributes = YANGDynClass(base=flex_algo_interface_attributes.flex_algo_interface_attributes, is_container='container', yang_name="flex-algo-interface-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'flex-algorithm']

  def _get_flex_algorithm_definition(self):
    """
    Getter method for flex_algorithm_definition, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algorithm_definition (container)

    YANG Description: Flexible Algorithms and their definitions
    """
    return self.__flex_algorithm_definition
      
  def _set_flex_algorithm_definition(self, v, load=False):
    """
    Setter method for flex_algorithm_definition, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algorithm_definition (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algorithm_definition is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algorithm_definition() directly.

    YANG Description: Flexible Algorithms and their definitions
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=flex_algorithm_definition.flex_algorithm_definition, is_container='container', yang_name="flex-algorithm-definition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algorithm_definition must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=flex_algorithm_definition.flex_algorithm_definition, is_container='container', yang_name="flex-algorithm-definition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__flex_algorithm_definition = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algorithm_definition(self):
    self.__flex_algorithm_definition = YANGDynClass(base=flex_algorithm_definition.flex_algorithm_definition, is_container='container', yang_name="flex-algorithm-definition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)


  def _get_flex_algo_global_attributes(self):
    """
    Getter method for flex_algo_global_attributes, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes (container)

    YANG Description: Flexible Algorithm global attributes
    """
    return self.__flex_algo_global_attributes
      
  def _set_flex_algo_global_attributes(self, v, load=False):
    """
    Setter method for flex_algo_global_attributes, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algo_global_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algo_global_attributes() directly.

    YANG Description: Flexible Algorithm global attributes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=flex_algo_global_attributes.flex_algo_global_attributes, is_container='container', yang_name="flex-algo-global-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algo_global_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=flex_algo_global_attributes.flex_algo_global_attributes, is_container='container', yang_name="flex-algo-global-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__flex_algo_global_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algo_global_attributes(self):
    self.__flex_algo_global_attributes = YANGDynClass(base=flex_algo_global_attributes.flex_algo_global_attributes, is_container='container', yang_name="flex-algo-global-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)


  def _get_flex_algo_interface_attributes(self):
    """
    Getter method for flex_algo_interface_attributes, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes (container)

    YANG Description: Flexible Algorithm attributes for interfaces
    """
    return self.__flex_algo_interface_attributes
      
  def _set_flex_algo_interface_attributes(self, v, load=False):
    """
    Setter method for flex_algo_interface_attributes, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algo_interface_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algo_interface_attributes() directly.

    YANG Description: Flexible Algorithm attributes for interfaces
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=flex_algo_interface_attributes.flex_algo_interface_attributes, is_container='container', yang_name="flex-algo-interface-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algo_interface_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=flex_algo_interface_attributes.flex_algo_interface_attributes, is_container='container', yang_name="flex-algo-interface-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__flex_algo_interface_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algo_interface_attributes(self):
    self.__flex_algo_interface_attributes = YANGDynClass(base=flex_algo_interface_attributes.flex_algo_interface_attributes, is_container='container', yang_name="flex-algo-interface-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)

  flex_algorithm_definition = __builtin__.property(_get_flex_algorithm_definition, _set_flex_algorithm_definition)
  flex_algo_global_attributes = __builtin__.property(_get_flex_algo_global_attributes, _set_flex_algo_global_attributes)
  flex_algo_interface_attributes = __builtin__.property(_get_flex_algo_interface_attributes, _set_flex_algo_interface_attributes)


  _pyangbind_elements = OrderedDict([('flex_algorithm_definition', flex_algorithm_definition), ('flex_algo_global_attributes', flex_algo_global_attributes), ('flex_algo_interface_attributes', flex_algo_interface_attributes), ])


from . import flex_algorithm_definition
from . import flex_algo_global_attributes
from . import flex_algo_interface_attributes
class flex_algorithm(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/flex-algorithm. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Flex Algorithms definitions and the attributes
  """
  __slots__ = ('_path_helper', '_extmethods', '__flex_algorithm_definition','__flex_algo_global_attributes','__flex_algo_interface_attributes',)

  _yang_name = 'flex-algorithm'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__flex_algorithm_definition = YANGDynClass(base=flex_algorithm_definition.flex_algorithm_definition, is_container='container', yang_name="flex-algorithm-definition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    self.__flex_algo_global_attributes = YANGDynClass(base=flex_algo_global_attributes.flex_algo_global_attributes, is_container='container', yang_name="flex-algo-global-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    self.__flex_algo_interface_attributes = YANGDynClass(base=flex_algo_interface_attributes.flex_algo_interface_attributes, is_container='container', yang_name="flex-algo-interface-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'flex-algorithm']

  def _get_flex_algorithm_definition(self):
    """
    Getter method for flex_algorithm_definition, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algorithm_definition (container)

    YANG Description: Flexible Algorithms and their definitions
    """
    return self.__flex_algorithm_definition
      
  def _set_flex_algorithm_definition(self, v, load=False):
    """
    Setter method for flex_algorithm_definition, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algorithm_definition (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algorithm_definition is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algorithm_definition() directly.

    YANG Description: Flexible Algorithms and their definitions
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=flex_algorithm_definition.flex_algorithm_definition, is_container='container', yang_name="flex-algorithm-definition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algorithm_definition must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=flex_algorithm_definition.flex_algorithm_definition, is_container='container', yang_name="flex-algorithm-definition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__flex_algorithm_definition = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algorithm_definition(self):
    self.__flex_algorithm_definition = YANGDynClass(base=flex_algorithm_definition.flex_algorithm_definition, is_container='container', yang_name="flex-algorithm-definition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)


  def _get_flex_algo_global_attributes(self):
    """
    Getter method for flex_algo_global_attributes, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes (container)

    YANG Description: Flexible Algorithm global attributes
    """
    return self.__flex_algo_global_attributes
      
  def _set_flex_algo_global_attributes(self, v, load=False):
    """
    Setter method for flex_algo_global_attributes, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algo_global_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algo_global_attributes() directly.

    YANG Description: Flexible Algorithm global attributes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=flex_algo_global_attributes.flex_algo_global_attributes, is_container='container', yang_name="flex-algo-global-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algo_global_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=flex_algo_global_attributes.flex_algo_global_attributes, is_container='container', yang_name="flex-algo-global-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__flex_algo_global_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algo_global_attributes(self):
    self.__flex_algo_global_attributes = YANGDynClass(base=flex_algo_global_attributes.flex_algo_global_attributes, is_container='container', yang_name="flex-algo-global-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)


  def _get_flex_algo_interface_attributes(self):
    """
    Getter method for flex_algo_interface_attributes, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes (container)

    YANG Description: Flexible Algorithm attributes for interfaces
    """
    return self.__flex_algo_interface_attributes
      
  def _set_flex_algo_interface_attributes(self, v, load=False):
    """
    Setter method for flex_algo_interface_attributes, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algo_interface_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algo_interface_attributes() directly.

    YANG Description: Flexible Algorithm attributes for interfaces
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=flex_algo_interface_attributes.flex_algo_interface_attributes, is_container='container', yang_name="flex-algo-interface-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algo_interface_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=flex_algo_interface_attributes.flex_algo_interface_attributes, is_container='container', yang_name="flex-algo-interface-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__flex_algo_interface_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algo_interface_attributes(self):
    self.__flex_algo_interface_attributes = YANGDynClass(base=flex_algo_interface_attributes.flex_algo_interface_attributes, is_container='container', yang_name="flex-algo-interface-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)

  flex_algorithm_definition = __builtin__.property(_get_flex_algorithm_definition, _set_flex_algorithm_definition)
  flex_algo_global_attributes = __builtin__.property(_get_flex_algo_global_attributes, _set_flex_algo_global_attributes)
  flex_algo_interface_attributes = __builtin__.property(_get_flex_algo_interface_attributes, _set_flex_algo_interface_attributes)


  _pyangbind_elements = OrderedDict([('flex_algorithm_definition', flex_algorithm_definition), ('flex_algo_global_attributes', flex_algo_global_attributes), ('flex_algo_interface_attributes', flex_algo_interface_attributes), ])


from . import flex_algorithm_definition
from . import flex_algo_global_attributes
from . import flex_algo_interface_attributes
class flex_algorithm(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/flex-algorithm. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Flex Algorithms definitions and the attributes
  """
  __slots__ = ('_path_helper', '_extmethods', '__flex_algorithm_definition','__flex_algo_global_attributes','__flex_algo_interface_attributes',)

  _yang_name = 'flex-algorithm'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__flex_algorithm_definition = YANGDynClass(base=flex_algorithm_definition.flex_algorithm_definition, is_container='container', yang_name="flex-algorithm-definition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    self.__flex_algo_global_attributes = YANGDynClass(base=flex_algo_global_attributes.flex_algo_global_attributes, is_container='container', yang_name="flex-algo-global-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    self.__flex_algo_interface_attributes = YANGDynClass(base=flex_algo_interface_attributes.flex_algo_interface_attributes, is_container='container', yang_name="flex-algo-interface-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'flex-algorithm']

  def _get_flex_algorithm_definition(self):
    """
    Getter method for flex_algorithm_definition, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algorithm_definition (container)

    YANG Description: Flexible Algorithms and their definitions
    """
    return self.__flex_algorithm_definition
      
  def _set_flex_algorithm_definition(self, v, load=False):
    """
    Setter method for flex_algorithm_definition, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algorithm_definition (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algorithm_definition is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algorithm_definition() directly.

    YANG Description: Flexible Algorithms and their definitions
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=flex_algorithm_definition.flex_algorithm_definition, is_container='container', yang_name="flex-algorithm-definition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algorithm_definition must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=flex_algorithm_definition.flex_algorithm_definition, is_container='container', yang_name="flex-algorithm-definition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__flex_algorithm_definition = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algorithm_definition(self):
    self.__flex_algorithm_definition = YANGDynClass(base=flex_algorithm_definition.flex_algorithm_definition, is_container='container', yang_name="flex-algorithm-definition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)


  def _get_flex_algo_global_attributes(self):
    """
    Getter method for flex_algo_global_attributes, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes (container)

    YANG Description: Flexible Algorithm global attributes
    """
    return self.__flex_algo_global_attributes
      
  def _set_flex_algo_global_attributes(self, v, load=False):
    """
    Setter method for flex_algo_global_attributes, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algo_global_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algo_global_attributes() directly.

    YANG Description: Flexible Algorithm global attributes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=flex_algo_global_attributes.flex_algo_global_attributes, is_container='container', yang_name="flex-algo-global-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algo_global_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=flex_algo_global_attributes.flex_algo_global_attributes, is_container='container', yang_name="flex-algo-global-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__flex_algo_global_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algo_global_attributes(self):
    self.__flex_algo_global_attributes = YANGDynClass(base=flex_algo_global_attributes.flex_algo_global_attributes, is_container='container', yang_name="flex-algo-global-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)


  def _get_flex_algo_interface_attributes(self):
    """
    Getter method for flex_algo_interface_attributes, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes (container)

    YANG Description: Flexible Algorithm attributes for interfaces
    """
    return self.__flex_algo_interface_attributes
      
  def _set_flex_algo_interface_attributes(self, v, load=False):
    """
    Setter method for flex_algo_interface_attributes, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algo_interface_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algo_interface_attributes() directly.

    YANG Description: Flexible Algorithm attributes for interfaces
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=flex_algo_interface_attributes.flex_algo_interface_attributes, is_container='container', yang_name="flex-algo-interface-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algo_interface_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=flex_algo_interface_attributes.flex_algo_interface_attributes, is_container='container', yang_name="flex-algo-interface-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__flex_algo_interface_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algo_interface_attributes(self):
    self.__flex_algo_interface_attributes = YANGDynClass(base=flex_algo_interface_attributes.flex_algo_interface_attributes, is_container='container', yang_name="flex-algo-interface-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)

  flex_algorithm_definition = __builtin__.property(_get_flex_algorithm_definition, _set_flex_algorithm_definition)
  flex_algo_global_attributes = __builtin__.property(_get_flex_algo_global_attributes, _set_flex_algo_global_attributes)
  flex_algo_interface_attributes = __builtin__.property(_get_flex_algo_interface_attributes, _set_flex_algo_interface_attributes)


  _pyangbind_elements = OrderedDict([('flex_algorithm_definition', flex_algorithm_definition), ('flex_algo_global_attributes', flex_algo_global_attributes), ('flex_algo_interface_attributes', flex_algo_interface_attributes), ])


