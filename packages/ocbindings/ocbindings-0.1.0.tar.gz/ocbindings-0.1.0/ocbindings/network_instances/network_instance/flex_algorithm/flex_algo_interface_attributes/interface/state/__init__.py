# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State parameters related to flex-algo interfaces
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_id','__te_metric','__min_delay','__srlg_membership','__admin_group',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface_id = YANGDynClass(base=str, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='oc-if:interface-id', is_config=False)
    self.__te_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)
    self.__min_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)
    self.__srlg_membership = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="srlg-membership", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)
    self.__admin_group = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'flex-algorithm', 'flex-algo-interface-attributes', 'interface', 'state']

  def _get_interface_id(self):
    """
    Getter method for interface_id, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/interface_id (oc-if:interface-id)

    YANG Description: Id of the interface
    """
    return self.__interface_id
      
  def _set_interface_id(self, v, load=False):
    """
    Setter method for interface_id, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/interface_id (oc-if:interface-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_id() directly.

    YANG Description: Id of the interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='oc-if:interface-id', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_id must be of a type compatible with oc-if:interface-id""",
          'defined-type': "oc-if:interface-id",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='oc-if:interface-id', is_config=False)""",
        })

    self.__interface_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_id(self):
    self.__interface_id = YANGDynClass(base=str, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='oc-if:interface-id', is_config=False)


  def _get_te_metric(self):
    """
    Getter method for te_metric, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/te_metric (uint32)

    YANG Description: TE specific metric for the link
    """
    return self.__te_metric
      
  def _set_te_metric(self, v, load=False):
    """
    Setter method for te_metric, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/te_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_te_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_te_metric() directly.

    YANG Description: TE specific metric for the link
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """te_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)""",
        })

    self.__te_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_te_metric(self):
    self.__te_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)


  def _get_min_delay(self):
    """
    Getter method for min_delay, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/min_delay (uint32)

    YANG Description: Min delay for the link
    """
    return self.__min_delay
      
  def _set_min_delay(self, v, load=False):
    """
    Setter method for min_delay, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/min_delay (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_delay() directly.

    YANG Description: Min delay for the link
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_delay must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)""",
        })

    self.__min_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_delay(self):
    self.__min_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)


  def _get_srlg_membership(self):
    """
    Getter method for srlg_membership, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/srlg_membership (leafref)

    YANG Description: list of references to named shared risk link groups that the
interface belongs to.
    """
    return self.__srlg_membership
      
  def _set_srlg_membership(self, v, load=False):
    """
    Setter method for srlg_membership, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/srlg_membership (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srlg_membership is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srlg_membership() directly.

    YANG Description: list of references to named shared risk link groups that the
interface belongs to.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="srlg-membership", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srlg_membership must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="srlg-membership", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)""",
        })

    self.__srlg_membership = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srlg_membership(self):
    self.__srlg_membership = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="srlg-membership", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)


  def _get_admin_group(self):
    """
    Getter method for admin_group, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/admin_group (leafref)

    YANG Description: list of admin groups (by name) on the interface
    """
    return self.__admin_group
      
  def _set_admin_group(self, v, load=False):
    """
    Setter method for admin_group, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/admin_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_group() directly.

    YANG Description: list of admin groups (by name) on the interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)""",
        })

    self.__admin_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_group(self):
    self.__admin_group = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)

  interface_id = __builtin__.property(_get_interface_id)
  te_metric = __builtin__.property(_get_te_metric)
  min_delay = __builtin__.property(_get_min_delay)
  srlg_membership = __builtin__.property(_get_srlg_membership)
  admin_group = __builtin__.property(_get_admin_group)


  _pyangbind_elements = OrderedDict([('interface_id', interface_id), ('te_metric', te_metric), ('min_delay', min_delay), ('srlg_membership', srlg_membership), ('admin_group', admin_group), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State parameters related to flex-algo interfaces
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_id','__te_metric','__min_delay','__srlg_membership','__admin_group',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface_id = YANGDynClass(base=str, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='oc-if:interface-id', is_config=False)
    self.__te_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)
    self.__min_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)
    self.__srlg_membership = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="srlg-membership", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)
    self.__admin_group = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'flex-algorithm', 'flex-algo-interface-attributes', 'interface', 'state']

  def _get_interface_id(self):
    """
    Getter method for interface_id, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/interface_id (oc-if:interface-id)

    YANG Description: Id of the interface
    """
    return self.__interface_id
      
  def _set_interface_id(self, v, load=False):
    """
    Setter method for interface_id, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/interface_id (oc-if:interface-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_id() directly.

    YANG Description: Id of the interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='oc-if:interface-id', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_id must be of a type compatible with oc-if:interface-id""",
          'defined-type': "oc-if:interface-id",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='oc-if:interface-id', is_config=False)""",
        })

    self.__interface_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_id(self):
    self.__interface_id = YANGDynClass(base=str, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='oc-if:interface-id', is_config=False)


  def _get_te_metric(self):
    """
    Getter method for te_metric, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/te_metric (uint32)

    YANG Description: TE specific metric for the link
    """
    return self.__te_metric
      
  def _set_te_metric(self, v, load=False):
    """
    Setter method for te_metric, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/te_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_te_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_te_metric() directly.

    YANG Description: TE specific metric for the link
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """te_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)""",
        })

    self.__te_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_te_metric(self):
    self.__te_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)


  def _get_min_delay(self):
    """
    Getter method for min_delay, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/min_delay (uint32)

    YANG Description: Min delay for the link
    """
    return self.__min_delay
      
  def _set_min_delay(self, v, load=False):
    """
    Setter method for min_delay, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/min_delay (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_delay() directly.

    YANG Description: Min delay for the link
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_delay must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)""",
        })

    self.__min_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_delay(self):
    self.__min_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)


  def _get_srlg_membership(self):
    """
    Getter method for srlg_membership, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/srlg_membership (leafref)

    YANG Description: list of references to named shared risk link groups that the
interface belongs to.
    """
    return self.__srlg_membership
      
  def _set_srlg_membership(self, v, load=False):
    """
    Setter method for srlg_membership, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/srlg_membership (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srlg_membership is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srlg_membership() directly.

    YANG Description: list of references to named shared risk link groups that the
interface belongs to.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="srlg-membership", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srlg_membership must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="srlg-membership", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)""",
        })

    self.__srlg_membership = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srlg_membership(self):
    self.__srlg_membership = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="srlg-membership", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)


  def _get_admin_group(self):
    """
    Getter method for admin_group, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/admin_group (leafref)

    YANG Description: list of admin groups (by name) on the interface
    """
    return self.__admin_group
      
  def _set_admin_group(self, v, load=False):
    """
    Setter method for admin_group, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/admin_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_group() directly.

    YANG Description: list of admin groups (by name) on the interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)""",
        })

    self.__admin_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_group(self):
    self.__admin_group = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)

  interface_id = __builtin__.property(_get_interface_id)
  te_metric = __builtin__.property(_get_te_metric)
  min_delay = __builtin__.property(_get_min_delay)
  srlg_membership = __builtin__.property(_get_srlg_membership)
  admin_group = __builtin__.property(_get_admin_group)


  _pyangbind_elements = OrderedDict([('interface_id', interface_id), ('te_metric', te_metric), ('min_delay', min_delay), ('srlg_membership', srlg_membership), ('admin_group', admin_group), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State parameters related to flex-algo interfaces
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_id','__te_metric','__min_delay','__srlg_membership','__admin_group',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface_id = YANGDynClass(base=str, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='oc-if:interface-id', is_config=False)
    self.__te_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)
    self.__min_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)
    self.__srlg_membership = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="srlg-membership", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)
    self.__admin_group = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'flex-algorithm', 'flex-algo-interface-attributes', 'interface', 'state']

  def _get_interface_id(self):
    """
    Getter method for interface_id, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/interface_id (oc-if:interface-id)

    YANG Description: Id of the interface
    """
    return self.__interface_id
      
  def _set_interface_id(self, v, load=False):
    """
    Setter method for interface_id, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/interface_id (oc-if:interface-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_id() directly.

    YANG Description: Id of the interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='oc-if:interface-id', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_id must be of a type compatible with oc-if:interface-id""",
          'defined-type': "oc-if:interface-id",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='oc-if:interface-id', is_config=False)""",
        })

    self.__interface_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_id(self):
    self.__interface_id = YANGDynClass(base=str, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='oc-if:interface-id', is_config=False)


  def _get_te_metric(self):
    """
    Getter method for te_metric, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/te_metric (uint32)

    YANG Description: TE specific metric for the link
    """
    return self.__te_metric
      
  def _set_te_metric(self, v, load=False):
    """
    Setter method for te_metric, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/te_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_te_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_te_metric() directly.

    YANG Description: TE specific metric for the link
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """te_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)""",
        })

    self.__te_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_te_metric(self):
    self.__te_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)


  def _get_min_delay(self):
    """
    Getter method for min_delay, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/min_delay (uint32)

    YANG Description: Min delay for the link
    """
    return self.__min_delay
      
  def _set_min_delay(self, v, load=False):
    """
    Setter method for min_delay, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/min_delay (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_delay() directly.

    YANG Description: Min delay for the link
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_delay must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)""",
        })

    self.__min_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_delay(self):
    self.__min_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)


  def _get_srlg_membership(self):
    """
    Getter method for srlg_membership, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/srlg_membership (leafref)

    YANG Description: list of references to named shared risk link groups that the
interface belongs to.
    """
    return self.__srlg_membership
      
  def _set_srlg_membership(self, v, load=False):
    """
    Setter method for srlg_membership, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/srlg_membership (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srlg_membership is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srlg_membership() directly.

    YANG Description: list of references to named shared risk link groups that the
interface belongs to.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="srlg-membership", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srlg_membership must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="srlg-membership", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)""",
        })

    self.__srlg_membership = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srlg_membership(self):
    self.__srlg_membership = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="srlg-membership", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)


  def _get_admin_group(self):
    """
    Getter method for admin_group, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/admin_group (leafref)

    YANG Description: list of admin groups (by name) on the interface
    """
    return self.__admin_group
      
  def _set_admin_group(self, v, load=False):
    """
    Setter method for admin_group, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/admin_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_group() directly.

    YANG Description: list of admin groups (by name) on the interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)""",
        })

    self.__admin_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_group(self):
    self.__admin_group = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)

  interface_id = __builtin__.property(_get_interface_id)
  te_metric = __builtin__.property(_get_te_metric)
  min_delay = __builtin__.property(_get_min_delay)
  srlg_membership = __builtin__.property(_get_srlg_membership)
  admin_group = __builtin__.property(_get_admin_group)


  _pyangbind_elements = OrderedDict([('interface_id', interface_id), ('te_metric', te_metric), ('min_delay', min_delay), ('srlg_membership', srlg_membership), ('admin_group', admin_group), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State parameters related to flex-algo interfaces
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_id','__te_metric','__min_delay','__srlg_membership','__admin_group',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface_id = YANGDynClass(base=str, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='oc-if:interface-id', is_config=False)
    self.__te_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)
    self.__min_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)
    self.__srlg_membership = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="srlg-membership", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)
    self.__admin_group = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'flex-algorithm', 'flex-algo-interface-attributes', 'interface', 'state']

  def _get_interface_id(self):
    """
    Getter method for interface_id, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/interface_id (oc-if:interface-id)

    YANG Description: Id of the interface
    """
    return self.__interface_id
      
  def _set_interface_id(self, v, load=False):
    """
    Setter method for interface_id, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/interface_id (oc-if:interface-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_id() directly.

    YANG Description: Id of the interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='oc-if:interface-id', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_id must be of a type compatible with oc-if:interface-id""",
          'defined-type': "oc-if:interface-id",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='oc-if:interface-id', is_config=False)""",
        })

    self.__interface_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_id(self):
    self.__interface_id = YANGDynClass(base=str, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='oc-if:interface-id', is_config=False)


  def _get_te_metric(self):
    """
    Getter method for te_metric, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/te_metric (uint32)

    YANG Description: TE specific metric for the link
    """
    return self.__te_metric
      
  def _set_te_metric(self, v, load=False):
    """
    Setter method for te_metric, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/te_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_te_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_te_metric() directly.

    YANG Description: TE specific metric for the link
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """te_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)""",
        })

    self.__te_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_te_metric(self):
    self.__te_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)


  def _get_min_delay(self):
    """
    Getter method for min_delay, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/min_delay (uint32)

    YANG Description: Min delay for the link
    """
    return self.__min_delay
      
  def _set_min_delay(self, v, load=False):
    """
    Setter method for min_delay, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/min_delay (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_delay() directly.

    YANG Description: Min delay for the link
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_delay must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)""",
        })

    self.__min_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_delay(self):
    self.__min_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='uint32', is_config=False)


  def _get_srlg_membership(self):
    """
    Getter method for srlg_membership, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/srlg_membership (leafref)

    YANG Description: list of references to named shared risk link groups that the
interface belongs to.
    """
    return self.__srlg_membership
      
  def _set_srlg_membership(self, v, load=False):
    """
    Setter method for srlg_membership, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/srlg_membership (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srlg_membership is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srlg_membership() directly.

    YANG Description: list of references to named shared risk link groups that the
interface belongs to.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="srlg-membership", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srlg_membership must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="srlg-membership", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)""",
        })

    self.__srlg_membership = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srlg_membership(self):
    self.__srlg_membership = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="srlg-membership", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)


  def _get_admin_group(self):
    """
    Getter method for admin_group, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/admin_group (leafref)

    YANG Description: list of admin groups (by name) on the interface
    """
    return self.__admin_group
      
  def _set_admin_group(self, v, load=False):
    """
    Setter method for admin_group, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_interface_attributes/interface/state/admin_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_group() directly.

    YANG Description: list of admin groups (by name) on the interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)""",
        })

    self.__admin_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_group(self):
    self.__admin_group = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='leafref', is_config=False)

  interface_id = __builtin__.property(_get_interface_id)
  te_metric = __builtin__.property(_get_te_metric)
  min_delay = __builtin__.property(_get_min_delay)
  srlg_membership = __builtin__.property(_get_srlg_membership)
  admin_group = __builtin__.property(_get_admin_group)


  _pyangbind_elements = OrderedDict([('interface_id', interface_id), ('te_metric', te_metric), ('min_delay', min_delay), ('srlg_membership', srlg_membership), ('admin_group', admin_group), ])


