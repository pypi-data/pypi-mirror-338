# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import config
from . import state
from . import endpoint_peers
from . import endpoint_vnis
from . import local_endpoint_vnis
class vxlan(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration and operational state parameters
relating to a VXLAN tunnel end-point interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__endpoint_peers','__endpoint_vnis','__local_endpoint_vnis',)

  _yang_name = 'vxlan'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__endpoint_peers = YANGDynClass(base=endpoint_peers.endpoint_peers, is_container='container', yang_name="endpoint-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__endpoint_vnis = YANGDynClass(base=endpoint_vnis.endpoint_vnis, is_container='container', yang_name="endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__local_endpoint_vnis = YANGDynClass(base=local_endpoint_vnis.local_endpoint_vnis, is_container='container', yang_name="local-endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'connection-points', 'connection-point', 'endpoints', 'endpoint', 'vxlan']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/config (container)

    YANG Description: Configuration parameters relating to the overlay tunnel
endpoints of the network instance
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to the overlay tunnel
endpoints of the network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/state (container)

    YANG Description: State parameters relating to the overlay tunnel endpoints of
the network instance
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters relating to the overlay tunnel endpoints of
the network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_endpoint_peers(self):
    """
    Getter method for endpoint_peers, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers (container)

    YANG Description: Top level container for state information related to peer VXLAN Tunnel
Endpoints(VTEPs) learned by the local VTEP in the default network
instance
    """
    return self.__endpoint_peers
      
  def _set_endpoint_peers(self, v, load=False):
    """
    Setter method for endpoint_peers, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_endpoint_peers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_endpoint_peers() directly.

    YANG Description: Top level container for state information related to peer VXLAN Tunnel
Endpoints(VTEPs) learned by the local VTEP in the default network
instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=endpoint_peers.endpoint_peers, is_container='container', yang_name="endpoint-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """endpoint_peers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=endpoint_peers.endpoint_peers, is_container='container', yang_name="endpoint-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__endpoint_peers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_endpoint_peers(self):
    self.__endpoint_peers = YANGDynClass(base=endpoint_peers.endpoint_peers, is_container='container', yang_name="endpoint-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_endpoint_vnis(self):
    """
    Getter method for endpoint_vnis, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_vnis (container)

    YANG Description: Top level container for state information related to Layer 2 virtual
network identifiers (L2VNIs) and Layer 3 virtual network identifiers
(L3VNIs) that are learned on the local VXLAN Tunnel End Point from
remote VTEPs in the default network instance
    """
    return self.__endpoint_vnis
      
  def _set_endpoint_vnis(self, v, load=False):
    """
    Setter method for endpoint_vnis, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_vnis (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_endpoint_vnis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_endpoint_vnis() directly.

    YANG Description: Top level container for state information related to Layer 2 virtual
network identifiers (L2VNIs) and Layer 3 virtual network identifiers
(L3VNIs) that are learned on the local VXLAN Tunnel End Point from
remote VTEPs in the default network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=endpoint_vnis.endpoint_vnis, is_container='container', yang_name="endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """endpoint_vnis must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=endpoint_vnis.endpoint_vnis, is_container='container', yang_name="endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__endpoint_vnis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_endpoint_vnis(self):
    self.__endpoint_vnis = YANGDynClass(base=endpoint_vnis.endpoint_vnis, is_container='container', yang_name="endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_local_endpoint_vnis(self):
    """
    Getter method for local_endpoint_vnis, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/local_endpoint_vnis (container)

    YANG Description: Top level container for local configuration related to Layer 2 virtual
network identifiers (L2VNIs) and Layer 3 virtual network identifiers
(L3VNIs) in the default network instance
    """
    return self.__local_endpoint_vnis
      
  def _set_local_endpoint_vnis(self, v, load=False):
    """
    Setter method for local_endpoint_vnis, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/local_endpoint_vnis (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_endpoint_vnis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_endpoint_vnis() directly.

    YANG Description: Top level container for local configuration related to Layer 2 virtual
network identifiers (L2VNIs) and Layer 3 virtual network identifiers
(L3VNIs) in the default network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=local_endpoint_vnis.local_endpoint_vnis, is_container='container', yang_name="local-endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_endpoint_vnis must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=local_endpoint_vnis.local_endpoint_vnis, is_container='container', yang_name="local-endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__local_endpoint_vnis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_endpoint_vnis(self):
    self.__local_endpoint_vnis = YANGDynClass(base=local_endpoint_vnis.local_endpoint_vnis, is_container='container', yang_name="local-endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  endpoint_peers = __builtin__.property(_get_endpoint_peers)
  endpoint_vnis = __builtin__.property(_get_endpoint_vnis)
  local_endpoint_vnis = __builtin__.property(_get_local_endpoint_vnis, _set_local_endpoint_vnis)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('endpoint_peers', endpoint_peers), ('endpoint_vnis', endpoint_vnis), ('local_endpoint_vnis', local_endpoint_vnis), ])


from . import config
from . import state
from . import endpoint_peers
from . import endpoint_vnis
from . import local_endpoint_vnis
class vxlan(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration and operational state parameters
relating to a VXLAN tunnel end-point interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__endpoint_peers','__endpoint_vnis','__local_endpoint_vnis',)

  _yang_name = 'vxlan'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__endpoint_peers = YANGDynClass(base=endpoint_peers.endpoint_peers, is_container='container', yang_name="endpoint-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__endpoint_vnis = YANGDynClass(base=endpoint_vnis.endpoint_vnis, is_container='container', yang_name="endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__local_endpoint_vnis = YANGDynClass(base=local_endpoint_vnis.local_endpoint_vnis, is_container='container', yang_name="local-endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'connection-points', 'connection-point', 'endpoints', 'endpoint', 'vxlan']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/config (container)

    YANG Description: Configuration parameters relating to the overlay tunnel
endpoints of the network instance
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to the overlay tunnel
endpoints of the network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/state (container)

    YANG Description: State parameters relating to the overlay tunnel endpoints of
the network instance
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters relating to the overlay tunnel endpoints of
the network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_endpoint_peers(self):
    """
    Getter method for endpoint_peers, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers (container)

    YANG Description: Top level container for state information related to peer VXLAN Tunnel
Endpoints(VTEPs) learned by the local VTEP in the default network
instance
    """
    return self.__endpoint_peers
      
  def _set_endpoint_peers(self, v, load=False):
    """
    Setter method for endpoint_peers, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_endpoint_peers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_endpoint_peers() directly.

    YANG Description: Top level container for state information related to peer VXLAN Tunnel
Endpoints(VTEPs) learned by the local VTEP in the default network
instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=endpoint_peers.endpoint_peers, is_container='container', yang_name="endpoint-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """endpoint_peers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=endpoint_peers.endpoint_peers, is_container='container', yang_name="endpoint-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__endpoint_peers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_endpoint_peers(self):
    self.__endpoint_peers = YANGDynClass(base=endpoint_peers.endpoint_peers, is_container='container', yang_name="endpoint-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_endpoint_vnis(self):
    """
    Getter method for endpoint_vnis, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_vnis (container)

    YANG Description: Top level container for state information related to Layer 2 virtual
network identifiers (L2VNIs) and Layer 3 virtual network identifiers
(L3VNIs) that are learned on the local VXLAN Tunnel End Point from
remote VTEPs in the default network instance
    """
    return self.__endpoint_vnis
      
  def _set_endpoint_vnis(self, v, load=False):
    """
    Setter method for endpoint_vnis, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_vnis (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_endpoint_vnis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_endpoint_vnis() directly.

    YANG Description: Top level container for state information related to Layer 2 virtual
network identifiers (L2VNIs) and Layer 3 virtual network identifiers
(L3VNIs) that are learned on the local VXLAN Tunnel End Point from
remote VTEPs in the default network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=endpoint_vnis.endpoint_vnis, is_container='container', yang_name="endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """endpoint_vnis must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=endpoint_vnis.endpoint_vnis, is_container='container', yang_name="endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__endpoint_vnis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_endpoint_vnis(self):
    self.__endpoint_vnis = YANGDynClass(base=endpoint_vnis.endpoint_vnis, is_container='container', yang_name="endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_local_endpoint_vnis(self):
    """
    Getter method for local_endpoint_vnis, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/local_endpoint_vnis (container)

    YANG Description: Top level container for local configuration related to Layer 2 virtual
network identifiers (L2VNIs) and Layer 3 virtual network identifiers
(L3VNIs) in the default network instance
    """
    return self.__local_endpoint_vnis
      
  def _set_local_endpoint_vnis(self, v, load=False):
    """
    Setter method for local_endpoint_vnis, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/local_endpoint_vnis (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_endpoint_vnis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_endpoint_vnis() directly.

    YANG Description: Top level container for local configuration related to Layer 2 virtual
network identifiers (L2VNIs) and Layer 3 virtual network identifiers
(L3VNIs) in the default network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=local_endpoint_vnis.local_endpoint_vnis, is_container='container', yang_name="local-endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_endpoint_vnis must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=local_endpoint_vnis.local_endpoint_vnis, is_container='container', yang_name="local-endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__local_endpoint_vnis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_endpoint_vnis(self):
    self.__local_endpoint_vnis = YANGDynClass(base=local_endpoint_vnis.local_endpoint_vnis, is_container='container', yang_name="local-endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  endpoint_peers = __builtin__.property(_get_endpoint_peers)
  endpoint_vnis = __builtin__.property(_get_endpoint_vnis)
  local_endpoint_vnis = __builtin__.property(_get_local_endpoint_vnis, _set_local_endpoint_vnis)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('endpoint_peers', endpoint_peers), ('endpoint_vnis', endpoint_vnis), ('local_endpoint_vnis', local_endpoint_vnis), ])


from . import config
from . import state
from . import endpoint_peers
from . import endpoint_vnis
from . import local_endpoint_vnis
class vxlan(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration and operational state parameters
relating to a VXLAN tunnel end-point interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__endpoint_peers','__endpoint_vnis','__local_endpoint_vnis',)

  _yang_name = 'vxlan'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__endpoint_peers = YANGDynClass(base=endpoint_peers.endpoint_peers, is_container='container', yang_name="endpoint-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__endpoint_vnis = YANGDynClass(base=endpoint_vnis.endpoint_vnis, is_container='container', yang_name="endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__local_endpoint_vnis = YANGDynClass(base=local_endpoint_vnis.local_endpoint_vnis, is_container='container', yang_name="local-endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'connection-points', 'connection-point', 'endpoints', 'endpoint', 'vxlan']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/config (container)

    YANG Description: Configuration parameters relating to the overlay tunnel
endpoints of the network instance
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to the overlay tunnel
endpoints of the network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/state (container)

    YANG Description: State parameters relating to the overlay tunnel endpoints of
the network instance
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters relating to the overlay tunnel endpoints of
the network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_endpoint_peers(self):
    """
    Getter method for endpoint_peers, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers (container)

    YANG Description: Top level container for state information related to peer VXLAN Tunnel
Endpoints(VTEPs) learned by the local VTEP in the default network
instance
    """
    return self.__endpoint_peers
      
  def _set_endpoint_peers(self, v, load=False):
    """
    Setter method for endpoint_peers, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_endpoint_peers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_endpoint_peers() directly.

    YANG Description: Top level container for state information related to peer VXLAN Tunnel
Endpoints(VTEPs) learned by the local VTEP in the default network
instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=endpoint_peers.endpoint_peers, is_container='container', yang_name="endpoint-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """endpoint_peers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=endpoint_peers.endpoint_peers, is_container='container', yang_name="endpoint-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__endpoint_peers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_endpoint_peers(self):
    self.__endpoint_peers = YANGDynClass(base=endpoint_peers.endpoint_peers, is_container='container', yang_name="endpoint-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_endpoint_vnis(self):
    """
    Getter method for endpoint_vnis, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_vnis (container)

    YANG Description: Top level container for state information related to Layer 2 virtual
network identifiers (L2VNIs) and Layer 3 virtual network identifiers
(L3VNIs) that are learned on the local VXLAN Tunnel End Point from
remote VTEPs in the default network instance
    """
    return self.__endpoint_vnis
      
  def _set_endpoint_vnis(self, v, load=False):
    """
    Setter method for endpoint_vnis, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_vnis (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_endpoint_vnis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_endpoint_vnis() directly.

    YANG Description: Top level container for state information related to Layer 2 virtual
network identifiers (L2VNIs) and Layer 3 virtual network identifiers
(L3VNIs) that are learned on the local VXLAN Tunnel End Point from
remote VTEPs in the default network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=endpoint_vnis.endpoint_vnis, is_container='container', yang_name="endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """endpoint_vnis must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=endpoint_vnis.endpoint_vnis, is_container='container', yang_name="endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__endpoint_vnis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_endpoint_vnis(self):
    self.__endpoint_vnis = YANGDynClass(base=endpoint_vnis.endpoint_vnis, is_container='container', yang_name="endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_local_endpoint_vnis(self):
    """
    Getter method for local_endpoint_vnis, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/local_endpoint_vnis (container)

    YANG Description: Top level container for local configuration related to Layer 2 virtual
network identifiers (L2VNIs) and Layer 3 virtual network identifiers
(L3VNIs) in the default network instance
    """
    return self.__local_endpoint_vnis
      
  def _set_local_endpoint_vnis(self, v, load=False):
    """
    Setter method for local_endpoint_vnis, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/local_endpoint_vnis (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_endpoint_vnis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_endpoint_vnis() directly.

    YANG Description: Top level container for local configuration related to Layer 2 virtual
network identifiers (L2VNIs) and Layer 3 virtual network identifiers
(L3VNIs) in the default network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=local_endpoint_vnis.local_endpoint_vnis, is_container='container', yang_name="local-endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_endpoint_vnis must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=local_endpoint_vnis.local_endpoint_vnis, is_container='container', yang_name="local-endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__local_endpoint_vnis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_endpoint_vnis(self):
    self.__local_endpoint_vnis = YANGDynClass(base=local_endpoint_vnis.local_endpoint_vnis, is_container='container', yang_name="local-endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  endpoint_peers = __builtin__.property(_get_endpoint_peers)
  endpoint_vnis = __builtin__.property(_get_endpoint_vnis)
  local_endpoint_vnis = __builtin__.property(_get_local_endpoint_vnis, _set_local_endpoint_vnis)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('endpoint_peers', endpoint_peers), ('endpoint_vnis', endpoint_vnis), ('local_endpoint_vnis', local_endpoint_vnis), ])


from . import config
from . import state
from . import endpoint_peers
from . import endpoint_vnis
from . import local_endpoint_vnis
class vxlan(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration and operational state parameters
relating to a VXLAN tunnel end-point interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__endpoint_peers','__endpoint_vnis','__local_endpoint_vnis',)

  _yang_name = 'vxlan'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__endpoint_peers = YANGDynClass(base=endpoint_peers.endpoint_peers, is_container='container', yang_name="endpoint-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__endpoint_vnis = YANGDynClass(base=endpoint_vnis.endpoint_vnis, is_container='container', yang_name="endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__local_endpoint_vnis = YANGDynClass(base=local_endpoint_vnis.local_endpoint_vnis, is_container='container', yang_name="local-endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'connection-points', 'connection-point', 'endpoints', 'endpoint', 'vxlan']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/config (container)

    YANG Description: Configuration parameters relating to the overlay tunnel
endpoints of the network instance
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to the overlay tunnel
endpoints of the network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/state (container)

    YANG Description: State parameters relating to the overlay tunnel endpoints of
the network instance
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters relating to the overlay tunnel endpoints of
the network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_endpoint_peers(self):
    """
    Getter method for endpoint_peers, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers (container)

    YANG Description: Top level container for state information related to peer VXLAN Tunnel
Endpoints(VTEPs) learned by the local VTEP in the default network
instance
    """
    return self.__endpoint_peers
      
  def _set_endpoint_peers(self, v, load=False):
    """
    Setter method for endpoint_peers, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_endpoint_peers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_endpoint_peers() directly.

    YANG Description: Top level container for state information related to peer VXLAN Tunnel
Endpoints(VTEPs) learned by the local VTEP in the default network
instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=endpoint_peers.endpoint_peers, is_container='container', yang_name="endpoint-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """endpoint_peers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=endpoint_peers.endpoint_peers, is_container='container', yang_name="endpoint-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__endpoint_peers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_endpoint_peers(self):
    self.__endpoint_peers = YANGDynClass(base=endpoint_peers.endpoint_peers, is_container='container', yang_name="endpoint-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_endpoint_vnis(self):
    """
    Getter method for endpoint_vnis, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_vnis (container)

    YANG Description: Top level container for state information related to Layer 2 virtual
network identifiers (L2VNIs) and Layer 3 virtual network identifiers
(L3VNIs) that are learned on the local VXLAN Tunnel End Point from
remote VTEPs in the default network instance
    """
    return self.__endpoint_vnis
      
  def _set_endpoint_vnis(self, v, load=False):
    """
    Setter method for endpoint_vnis, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_vnis (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_endpoint_vnis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_endpoint_vnis() directly.

    YANG Description: Top level container for state information related to Layer 2 virtual
network identifiers (L2VNIs) and Layer 3 virtual network identifiers
(L3VNIs) that are learned on the local VXLAN Tunnel End Point from
remote VTEPs in the default network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=endpoint_vnis.endpoint_vnis, is_container='container', yang_name="endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """endpoint_vnis must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=endpoint_vnis.endpoint_vnis, is_container='container', yang_name="endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__endpoint_vnis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_endpoint_vnis(self):
    self.__endpoint_vnis = YANGDynClass(base=endpoint_vnis.endpoint_vnis, is_container='container', yang_name="endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_local_endpoint_vnis(self):
    """
    Getter method for local_endpoint_vnis, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/local_endpoint_vnis (container)

    YANG Description: Top level container for local configuration related to Layer 2 virtual
network identifiers (L2VNIs) and Layer 3 virtual network identifiers
(L3VNIs) in the default network instance
    """
    return self.__local_endpoint_vnis
      
  def _set_local_endpoint_vnis(self, v, load=False):
    """
    Setter method for local_endpoint_vnis, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/local_endpoint_vnis (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_endpoint_vnis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_endpoint_vnis() directly.

    YANG Description: Top level container for local configuration related to Layer 2 virtual
network identifiers (L2VNIs) and Layer 3 virtual network identifiers
(L3VNIs) in the default network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=local_endpoint_vnis.local_endpoint_vnis, is_container='container', yang_name="local-endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_endpoint_vnis must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=local_endpoint_vnis.local_endpoint_vnis, is_container='container', yang_name="local-endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__local_endpoint_vnis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_endpoint_vnis(self):
    self.__local_endpoint_vnis = YANGDynClass(base=local_endpoint_vnis.local_endpoint_vnis, is_container='container', yang_name="local-endpoint-vnis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  endpoint_peers = __builtin__.property(_get_endpoint_peers)
  endpoint_vnis = __builtin__.property(_get_endpoint_vnis)
  local_endpoint_vnis = __builtin__.property(_get_local_endpoint_vnis, _set_local_endpoint_vnis)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('endpoint_peers', endpoint_peers), ('endpoint_vnis', endpoint_vnis), ('local_endpoint_vnis', local_endpoint_vnis), ])


