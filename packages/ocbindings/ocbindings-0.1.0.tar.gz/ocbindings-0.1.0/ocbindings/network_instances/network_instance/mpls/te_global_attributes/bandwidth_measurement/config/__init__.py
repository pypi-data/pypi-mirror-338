# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/mpls/te-global-attributes/bandwidth-measurement/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to bandwidth
measurement.
  """
  __slots__ = ('_path_helper', '_extmethods', '__measure_sr_traffic','__collection_interval','__adjustment_interval','__bandwidth_multiplier',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__measure_sr_traffic = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MEASURE_ONLY': {}, 'MEASURE_AND_FLOOD': {}},), is_leaf=True, yang_name="measure-sr-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)
    self.__collection_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="collection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)
    self.__adjustment_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adjustment-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)
    self.__bandwidth_multiplier = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=4), default=Decimal(1.0000), is_leaf=True, yang_name="bandwidth-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='decimal64', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'te-global-attributes', 'bandwidth-measurement', 'config']

  def _get_measure_sr_traffic(self):
    """
    Getter method for measure_sr_traffic, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/measure_sr_traffic (enumeration)

    YANG Description: Parameter enabling SR traffic measurement
and optional flooding into IGP.
    """
    return self.__measure_sr_traffic
      
  def _set_measure_sr_traffic(self, v, load=False):
    """
    Setter method for measure_sr_traffic, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/measure_sr_traffic (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_measure_sr_traffic is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_measure_sr_traffic() directly.

    YANG Description: Parameter enabling SR traffic measurement
and optional flooding into IGP.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MEASURE_ONLY': {}, 'MEASURE_AND_FLOOD': {}},), is_leaf=True, yang_name="measure-sr-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """measure_sr_traffic must be of a type compatible with enumeration""",
          'defined-type': "openconfig-rsvp-sr-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MEASURE_ONLY': {}, 'MEASURE_AND_FLOOD': {}},), is_leaf=True, yang_name="measure-sr-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__measure_sr_traffic = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_measure_sr_traffic(self):
    self.__measure_sr_traffic = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MEASURE_ONLY': {}, 'MEASURE_AND_FLOOD': {}},), is_leaf=True, yang_name="measure-sr-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)


  def _get_collection_interval(self):
    """
    Getter method for collection_interval, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/collection_interval (uint32)

    YANG Description: The interval at which the collection of interface
statistics relating to non-RSVP-TE traffic should be
performed
    """
    return self.__collection_interval
      
  def _set_collection_interval(self, v, load=False):
    """
    Setter method for collection_interval, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/collection_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_collection_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_collection_interval() directly.

    YANG Description: The interval at which the collection of interface
statistics relating to non-RSVP-TE traffic should be
performed
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="collection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """collection_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="collection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)""",
        })

    self.__collection_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_collection_interval(self):
    self.__collection_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="collection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)


  def _get_adjustment_interval(self):
    """
    Getter method for adjustment_interval, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/adjustment_interval (uint32)

    YANG Description: The interval after which an adjustment to the utilised
bandwidth on the interface is made. This value must be
greater than, or equal to, the collection interval for
statistics.  This value is referred to as N in
draft-sitaraman-sr-rsvp-coexistence-rec-01.

After N seconds have expired, the
arithmetic mean of the samples is taken, and this is
considered as the non-RSVP-TE utilisation of the
interface. In the case that the adjustment interval is
an integer >1 multiple of the collection interval, this
serves to provide smoothing of the collected bandwidth
statistics.
    """
    return self.__adjustment_interval
      
  def _set_adjustment_interval(self, v, load=False):
    """
    Setter method for adjustment_interval, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/adjustment_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adjustment_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adjustment_interval() directly.

    YANG Description: The interval after which an adjustment to the utilised
bandwidth on the interface is made. This value must be
greater than, or equal to, the collection interval for
statistics.  This value is referred to as N in
draft-sitaraman-sr-rsvp-coexistence-rec-01.

After N seconds have expired, the
arithmetic mean of the samples is taken, and this is
considered as the non-RSVP-TE utilisation of the
interface. In the case that the adjustment interval is
an integer >1 multiple of the collection interval, this
serves to provide smoothing of the collected bandwidth
statistics.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adjustment-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adjustment_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adjustment-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)""",
        })

    self.__adjustment_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adjustment_interval(self):
    self.__adjustment_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adjustment-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)


  def _get_bandwidth_multiplier(self):
    """
    Getter method for bandwidth_multiplier, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/bandwidth_multiplier (decimal64)

    YANG Description: A multiplier applied to the sampled bandwidth which
determines the value that is propagated to the IGP TED.
By default this value is 1.0000, and hence the actual
sampled value is flooded.
    """
    return self.__bandwidth_multiplier
      
  def _set_bandwidth_multiplier(self, v, load=False):
    """
    Setter method for bandwidth_multiplier, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/bandwidth_multiplier (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bandwidth_multiplier is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bandwidth_multiplier() directly.

    YANG Description: A multiplier applied to the sampled bandwidth which
determines the value that is propagated to the IGP TED.
By default this value is 1.0000, and hence the actual
sampled value is flooded.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=4), default=Decimal(1.0000), is_leaf=True, yang_name="bandwidth-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='decimal64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bandwidth_multiplier must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=4), default=Decimal(1.0000), is_leaf=True, yang_name="bandwidth-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='decimal64', is_config=True)""",
        })

    self.__bandwidth_multiplier = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bandwidth_multiplier(self):
    self.__bandwidth_multiplier = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=4), default=Decimal(1.0000), is_leaf=True, yang_name="bandwidth-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='decimal64', is_config=True)

  measure_sr_traffic = __builtin__.property(_get_measure_sr_traffic, _set_measure_sr_traffic)
  collection_interval = __builtin__.property(_get_collection_interval, _set_collection_interval)
  adjustment_interval = __builtin__.property(_get_adjustment_interval, _set_adjustment_interval)
  bandwidth_multiplier = __builtin__.property(_get_bandwidth_multiplier, _set_bandwidth_multiplier)


  _pyangbind_elements = OrderedDict([('measure_sr_traffic', measure_sr_traffic), ('collection_interval', collection_interval), ('adjustment_interval', adjustment_interval), ('bandwidth_multiplier', bandwidth_multiplier), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/mpls/te-global-attributes/bandwidth-measurement/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to bandwidth
measurement.
  """
  __slots__ = ('_path_helper', '_extmethods', '__measure_sr_traffic','__collection_interval','__adjustment_interval','__bandwidth_multiplier',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__measure_sr_traffic = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MEASURE_ONLY': {}, 'MEASURE_AND_FLOOD': {}},), is_leaf=True, yang_name="measure-sr-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)
    self.__collection_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="collection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)
    self.__adjustment_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adjustment-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)
    self.__bandwidth_multiplier = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=4), default=Decimal(1.0000), is_leaf=True, yang_name="bandwidth-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='decimal64', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'te-global-attributes', 'bandwidth-measurement', 'config']

  def _get_measure_sr_traffic(self):
    """
    Getter method for measure_sr_traffic, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/measure_sr_traffic (enumeration)

    YANG Description: Parameter enabling SR traffic measurement
and optional flooding into IGP.
    """
    return self.__measure_sr_traffic
      
  def _set_measure_sr_traffic(self, v, load=False):
    """
    Setter method for measure_sr_traffic, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/measure_sr_traffic (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_measure_sr_traffic is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_measure_sr_traffic() directly.

    YANG Description: Parameter enabling SR traffic measurement
and optional flooding into IGP.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MEASURE_ONLY': {}, 'MEASURE_AND_FLOOD': {}},), is_leaf=True, yang_name="measure-sr-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """measure_sr_traffic must be of a type compatible with enumeration""",
          'defined-type': "openconfig-rsvp-sr-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MEASURE_ONLY': {}, 'MEASURE_AND_FLOOD': {}},), is_leaf=True, yang_name="measure-sr-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__measure_sr_traffic = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_measure_sr_traffic(self):
    self.__measure_sr_traffic = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MEASURE_ONLY': {}, 'MEASURE_AND_FLOOD': {}},), is_leaf=True, yang_name="measure-sr-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)


  def _get_collection_interval(self):
    """
    Getter method for collection_interval, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/collection_interval (uint32)

    YANG Description: The interval at which the collection of interface
statistics relating to non-RSVP-TE traffic should be
performed
    """
    return self.__collection_interval
      
  def _set_collection_interval(self, v, load=False):
    """
    Setter method for collection_interval, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/collection_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_collection_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_collection_interval() directly.

    YANG Description: The interval at which the collection of interface
statistics relating to non-RSVP-TE traffic should be
performed
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="collection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """collection_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="collection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)""",
        })

    self.__collection_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_collection_interval(self):
    self.__collection_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="collection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)


  def _get_adjustment_interval(self):
    """
    Getter method for adjustment_interval, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/adjustment_interval (uint32)

    YANG Description: The interval after which an adjustment to the utilised
bandwidth on the interface is made. This value must be
greater than, or equal to, the collection interval for
statistics.  This value is referred to as N in
draft-sitaraman-sr-rsvp-coexistence-rec-01.

After N seconds have expired, the
arithmetic mean of the samples is taken, and this is
considered as the non-RSVP-TE utilisation of the
interface. In the case that the adjustment interval is
an integer >1 multiple of the collection interval, this
serves to provide smoothing of the collected bandwidth
statistics.
    """
    return self.__adjustment_interval
      
  def _set_adjustment_interval(self, v, load=False):
    """
    Setter method for adjustment_interval, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/adjustment_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adjustment_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adjustment_interval() directly.

    YANG Description: The interval after which an adjustment to the utilised
bandwidth on the interface is made. This value must be
greater than, or equal to, the collection interval for
statistics.  This value is referred to as N in
draft-sitaraman-sr-rsvp-coexistence-rec-01.

After N seconds have expired, the
arithmetic mean of the samples is taken, and this is
considered as the non-RSVP-TE utilisation of the
interface. In the case that the adjustment interval is
an integer >1 multiple of the collection interval, this
serves to provide smoothing of the collected bandwidth
statistics.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adjustment-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adjustment_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adjustment-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)""",
        })

    self.__adjustment_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adjustment_interval(self):
    self.__adjustment_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adjustment-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)


  def _get_bandwidth_multiplier(self):
    """
    Getter method for bandwidth_multiplier, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/bandwidth_multiplier (decimal64)

    YANG Description: A multiplier applied to the sampled bandwidth which
determines the value that is propagated to the IGP TED.
By default this value is 1.0000, and hence the actual
sampled value is flooded.
    """
    return self.__bandwidth_multiplier
      
  def _set_bandwidth_multiplier(self, v, load=False):
    """
    Setter method for bandwidth_multiplier, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/bandwidth_multiplier (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bandwidth_multiplier is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bandwidth_multiplier() directly.

    YANG Description: A multiplier applied to the sampled bandwidth which
determines the value that is propagated to the IGP TED.
By default this value is 1.0000, and hence the actual
sampled value is flooded.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=4), default=Decimal(1.0000), is_leaf=True, yang_name="bandwidth-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='decimal64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bandwidth_multiplier must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=4), default=Decimal(1.0000), is_leaf=True, yang_name="bandwidth-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='decimal64', is_config=True)""",
        })

    self.__bandwidth_multiplier = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bandwidth_multiplier(self):
    self.__bandwidth_multiplier = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=4), default=Decimal(1.0000), is_leaf=True, yang_name="bandwidth-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='decimal64', is_config=True)

  measure_sr_traffic = __builtin__.property(_get_measure_sr_traffic, _set_measure_sr_traffic)
  collection_interval = __builtin__.property(_get_collection_interval, _set_collection_interval)
  adjustment_interval = __builtin__.property(_get_adjustment_interval, _set_adjustment_interval)
  bandwidth_multiplier = __builtin__.property(_get_bandwidth_multiplier, _set_bandwidth_multiplier)


  _pyangbind_elements = OrderedDict([('measure_sr_traffic', measure_sr_traffic), ('collection_interval', collection_interval), ('adjustment_interval', adjustment_interval), ('bandwidth_multiplier', bandwidth_multiplier), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/mpls/te-global-attributes/bandwidth-measurement/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to bandwidth
measurement.
  """
  __slots__ = ('_path_helper', '_extmethods', '__measure_sr_traffic','__collection_interval','__adjustment_interval','__bandwidth_multiplier',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__measure_sr_traffic = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MEASURE_ONLY': {}, 'MEASURE_AND_FLOOD': {}},), is_leaf=True, yang_name="measure-sr-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)
    self.__collection_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="collection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)
    self.__adjustment_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adjustment-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)
    self.__bandwidth_multiplier = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=4), default=Decimal(1.0000), is_leaf=True, yang_name="bandwidth-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='decimal64', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'te-global-attributes', 'bandwidth-measurement', 'config']

  def _get_measure_sr_traffic(self):
    """
    Getter method for measure_sr_traffic, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/measure_sr_traffic (enumeration)

    YANG Description: Parameter enabling SR traffic measurement
and optional flooding into IGP.
    """
    return self.__measure_sr_traffic
      
  def _set_measure_sr_traffic(self, v, load=False):
    """
    Setter method for measure_sr_traffic, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/measure_sr_traffic (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_measure_sr_traffic is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_measure_sr_traffic() directly.

    YANG Description: Parameter enabling SR traffic measurement
and optional flooding into IGP.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MEASURE_ONLY': {}, 'MEASURE_AND_FLOOD': {}},), is_leaf=True, yang_name="measure-sr-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """measure_sr_traffic must be of a type compatible with enumeration""",
          'defined-type': "openconfig-rsvp-sr-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MEASURE_ONLY': {}, 'MEASURE_AND_FLOOD': {}},), is_leaf=True, yang_name="measure-sr-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__measure_sr_traffic = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_measure_sr_traffic(self):
    self.__measure_sr_traffic = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MEASURE_ONLY': {}, 'MEASURE_AND_FLOOD': {}},), is_leaf=True, yang_name="measure-sr-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)


  def _get_collection_interval(self):
    """
    Getter method for collection_interval, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/collection_interval (uint32)

    YANG Description: The interval at which the collection of interface
statistics relating to non-RSVP-TE traffic should be
performed
    """
    return self.__collection_interval
      
  def _set_collection_interval(self, v, load=False):
    """
    Setter method for collection_interval, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/collection_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_collection_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_collection_interval() directly.

    YANG Description: The interval at which the collection of interface
statistics relating to non-RSVP-TE traffic should be
performed
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="collection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """collection_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="collection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)""",
        })

    self.__collection_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_collection_interval(self):
    self.__collection_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="collection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)


  def _get_adjustment_interval(self):
    """
    Getter method for adjustment_interval, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/adjustment_interval (uint32)

    YANG Description: The interval after which an adjustment to the utilised
bandwidth on the interface is made. This value must be
greater than, or equal to, the collection interval for
statistics.  This value is referred to as N in
draft-sitaraman-sr-rsvp-coexistence-rec-01.

After N seconds have expired, the
arithmetic mean of the samples is taken, and this is
considered as the non-RSVP-TE utilisation of the
interface. In the case that the adjustment interval is
an integer >1 multiple of the collection interval, this
serves to provide smoothing of the collected bandwidth
statistics.
    """
    return self.__adjustment_interval
      
  def _set_adjustment_interval(self, v, load=False):
    """
    Setter method for adjustment_interval, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/adjustment_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adjustment_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adjustment_interval() directly.

    YANG Description: The interval after which an adjustment to the utilised
bandwidth on the interface is made. This value must be
greater than, or equal to, the collection interval for
statistics.  This value is referred to as N in
draft-sitaraman-sr-rsvp-coexistence-rec-01.

After N seconds have expired, the
arithmetic mean of the samples is taken, and this is
considered as the non-RSVP-TE utilisation of the
interface. In the case that the adjustment interval is
an integer >1 multiple of the collection interval, this
serves to provide smoothing of the collected bandwidth
statistics.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adjustment-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adjustment_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adjustment-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)""",
        })

    self.__adjustment_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adjustment_interval(self):
    self.__adjustment_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adjustment-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)


  def _get_bandwidth_multiplier(self):
    """
    Getter method for bandwidth_multiplier, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/bandwidth_multiplier (decimal64)

    YANG Description: A multiplier applied to the sampled bandwidth which
determines the value that is propagated to the IGP TED.
By default this value is 1.0000, and hence the actual
sampled value is flooded.
    """
    return self.__bandwidth_multiplier
      
  def _set_bandwidth_multiplier(self, v, load=False):
    """
    Setter method for bandwidth_multiplier, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/bandwidth_multiplier (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bandwidth_multiplier is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bandwidth_multiplier() directly.

    YANG Description: A multiplier applied to the sampled bandwidth which
determines the value that is propagated to the IGP TED.
By default this value is 1.0000, and hence the actual
sampled value is flooded.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=4), default=Decimal(1.0000), is_leaf=True, yang_name="bandwidth-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='decimal64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bandwidth_multiplier must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=4), default=Decimal(1.0000), is_leaf=True, yang_name="bandwidth-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='decimal64', is_config=True)""",
        })

    self.__bandwidth_multiplier = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bandwidth_multiplier(self):
    self.__bandwidth_multiplier = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=4), default=Decimal(1.0000), is_leaf=True, yang_name="bandwidth-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='decimal64', is_config=True)

  measure_sr_traffic = __builtin__.property(_get_measure_sr_traffic, _set_measure_sr_traffic)
  collection_interval = __builtin__.property(_get_collection_interval, _set_collection_interval)
  adjustment_interval = __builtin__.property(_get_adjustment_interval, _set_adjustment_interval)
  bandwidth_multiplier = __builtin__.property(_get_bandwidth_multiplier, _set_bandwidth_multiplier)


  _pyangbind_elements = OrderedDict([('measure_sr_traffic', measure_sr_traffic), ('collection_interval', collection_interval), ('adjustment_interval', adjustment_interval), ('bandwidth_multiplier', bandwidth_multiplier), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/mpls/te-global-attributes/bandwidth-measurement/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to bandwidth
measurement.
  """
  __slots__ = ('_path_helper', '_extmethods', '__measure_sr_traffic','__collection_interval','__adjustment_interval','__bandwidth_multiplier',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__measure_sr_traffic = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MEASURE_ONLY': {}, 'MEASURE_AND_FLOOD': {}},), is_leaf=True, yang_name="measure-sr-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)
    self.__collection_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="collection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)
    self.__adjustment_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adjustment-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)
    self.__bandwidth_multiplier = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=4), default=Decimal(1.0000), is_leaf=True, yang_name="bandwidth-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='decimal64', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'te-global-attributes', 'bandwidth-measurement', 'config']

  def _get_measure_sr_traffic(self):
    """
    Getter method for measure_sr_traffic, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/measure_sr_traffic (enumeration)

    YANG Description: Parameter enabling SR traffic measurement
and optional flooding into IGP.
    """
    return self.__measure_sr_traffic
      
  def _set_measure_sr_traffic(self, v, load=False):
    """
    Setter method for measure_sr_traffic, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/measure_sr_traffic (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_measure_sr_traffic is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_measure_sr_traffic() directly.

    YANG Description: Parameter enabling SR traffic measurement
and optional flooding into IGP.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MEASURE_ONLY': {}, 'MEASURE_AND_FLOOD': {}},), is_leaf=True, yang_name="measure-sr-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """measure_sr_traffic must be of a type compatible with enumeration""",
          'defined-type': "openconfig-rsvp-sr-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MEASURE_ONLY': {}, 'MEASURE_AND_FLOOD': {}},), is_leaf=True, yang_name="measure-sr-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__measure_sr_traffic = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_measure_sr_traffic(self):
    self.__measure_sr_traffic = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MEASURE_ONLY': {}, 'MEASURE_AND_FLOOD': {}},), is_leaf=True, yang_name="measure-sr-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)


  def _get_collection_interval(self):
    """
    Getter method for collection_interval, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/collection_interval (uint32)

    YANG Description: The interval at which the collection of interface
statistics relating to non-RSVP-TE traffic should be
performed
    """
    return self.__collection_interval
      
  def _set_collection_interval(self, v, load=False):
    """
    Setter method for collection_interval, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/collection_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_collection_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_collection_interval() directly.

    YANG Description: The interval at which the collection of interface
statistics relating to non-RSVP-TE traffic should be
performed
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="collection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """collection_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="collection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)""",
        })

    self.__collection_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_collection_interval(self):
    self.__collection_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="collection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)


  def _get_adjustment_interval(self):
    """
    Getter method for adjustment_interval, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/adjustment_interval (uint32)

    YANG Description: The interval after which an adjustment to the utilised
bandwidth on the interface is made. This value must be
greater than, or equal to, the collection interval for
statistics.  This value is referred to as N in
draft-sitaraman-sr-rsvp-coexistence-rec-01.

After N seconds have expired, the
arithmetic mean of the samples is taken, and this is
considered as the non-RSVP-TE utilisation of the
interface. In the case that the adjustment interval is
an integer >1 multiple of the collection interval, this
serves to provide smoothing of the collected bandwidth
statistics.
    """
    return self.__adjustment_interval
      
  def _set_adjustment_interval(self, v, load=False):
    """
    Setter method for adjustment_interval, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/adjustment_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adjustment_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adjustment_interval() directly.

    YANG Description: The interval after which an adjustment to the utilised
bandwidth on the interface is made. This value must be
greater than, or equal to, the collection interval for
statistics.  This value is referred to as N in
draft-sitaraman-sr-rsvp-coexistence-rec-01.

After N seconds have expired, the
arithmetic mean of the samples is taken, and this is
considered as the non-RSVP-TE utilisation of the
interface. In the case that the adjustment interval is
an integer >1 multiple of the collection interval, this
serves to provide smoothing of the collected bandwidth
statistics.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adjustment-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adjustment_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adjustment-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)""",
        })

    self.__adjustment_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adjustment_interval(self):
    self.__adjustment_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adjustment-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint32', is_config=True)


  def _get_bandwidth_multiplier(self):
    """
    Getter method for bandwidth_multiplier, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/bandwidth_multiplier (decimal64)

    YANG Description: A multiplier applied to the sampled bandwidth which
determines the value that is propagated to the IGP TED.
By default this value is 1.0000, and hence the actual
sampled value is flooded.
    """
    return self.__bandwidth_multiplier
      
  def _set_bandwidth_multiplier(self, v, load=False):
    """
    Setter method for bandwidth_multiplier, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/config/bandwidth_multiplier (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bandwidth_multiplier is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bandwidth_multiplier() directly.

    YANG Description: A multiplier applied to the sampled bandwidth which
determines the value that is propagated to the IGP TED.
By default this value is 1.0000, and hence the actual
sampled value is flooded.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=4), default=Decimal(1.0000), is_leaf=True, yang_name="bandwidth-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='decimal64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bandwidth_multiplier must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=4), default=Decimal(1.0000), is_leaf=True, yang_name="bandwidth-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='decimal64', is_config=True)""",
        })

    self.__bandwidth_multiplier = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bandwidth_multiplier(self):
    self.__bandwidth_multiplier = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=4), default=Decimal(1.0000), is_leaf=True, yang_name="bandwidth-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='decimal64', is_config=True)

  measure_sr_traffic = __builtin__.property(_get_measure_sr_traffic, _set_measure_sr_traffic)
  collection_interval = __builtin__.property(_get_collection_interval, _set_collection_interval)
  adjustment_interval = __builtin__.property(_get_adjustment_interval, _set_adjustment_interval)
  bandwidth_multiplier = __builtin__.property(_get_bandwidth_multiplier, _set_bandwidth_multiplier)


  _pyangbind_elements = OrderedDict([('measure_sr_traffic', measure_sr_traffic), ('collection_interval', collection_interval), ('adjustment_interval', adjustment_interval), ('bandwidth_multiplier', bandwidth_multiplier), ])


