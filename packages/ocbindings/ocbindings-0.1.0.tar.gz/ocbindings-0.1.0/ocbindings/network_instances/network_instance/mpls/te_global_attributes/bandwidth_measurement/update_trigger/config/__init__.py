# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/mpls/te-global-attributes/bandwidth-measurement/update-trigger/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters related to the bandwidth
measurement update trigger.
  """
  __slots__ = ('_path_helper', '_extmethods', '__update_trigger','__adjusted_max_reservable_bw_pct','__sr_traffic_pct',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__update_trigger = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ADJUSTED_MAX_RESERVABLE_PCT': {}, 'SR_TRAFFIC_PCT': {}},), is_leaf=True, yang_name="update-trigger", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)
    self.__adjusted_max_reservable_bw_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="adjusted-max-reservable-bw-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)
    self.__sr_traffic_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="sr-traffic-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'te-global-attributes', 'bandwidth-measurement', 'update-trigger', 'config']

  def _get_update_trigger(self):
    """
    Getter method for update_trigger, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/update_trigger (enumeration)

    YANG Description: The trigger that should be used to determine when the IGP
TED is updated with new information as to the effective
maximum reservable bandwidth
(adjusted-absolute-subscription-bw)
    """
    return self.__update_trigger
      
  def _set_update_trigger(self, v, load=False):
    """
    Setter method for update_trigger, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/update_trigger (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_update_trigger is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_update_trigger() directly.

    YANG Description: The trigger that should be used to determine when the IGP
TED is updated with new information as to the effective
maximum reservable bandwidth
(adjusted-absolute-subscription-bw)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ADJUSTED_MAX_RESERVABLE_PCT': {}, 'SR_TRAFFIC_PCT': {}},), is_leaf=True, yang_name="update-trigger", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """update_trigger must be of a type compatible with enumeration""",
          'defined-type': "openconfig-rsvp-sr-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ADJUSTED_MAX_RESERVABLE_PCT': {}, 'SR_TRAFFIC_PCT': {}},), is_leaf=True, yang_name="update-trigger", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__update_trigger = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_update_trigger(self):
    self.__update_trigger = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ADJUSTED_MAX_RESERVABLE_PCT': {}, 'SR_TRAFFIC_PCT': {}},), is_leaf=True, yang_name="update-trigger", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)


  def _get_adjusted_max_reservable_bw_pct(self):
    """
    Getter method for adjusted_max_reservable_bw_pct, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/adjusted_max_reservable_bw_pct (oc-types:percentage)

    YANG Description: The delta in the adjusted-max-reservable-bandwidth that
should trigger an update in the value which is flooded
through the IGP TED.
The delta is measured as a percentage of the
current adjusted value of the maximum reservable bandwidth
of the interface, as specified by the
adjusted-absolute-subscription-bw RSVP-TE leaf.
    """
    return self.__adjusted_max_reservable_bw_pct
      
  def _set_adjusted_max_reservable_bw_pct(self, v, load=False):
    """
    Setter method for adjusted_max_reservable_bw_pct, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/adjusted_max_reservable_bw_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adjusted_max_reservable_bw_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adjusted_max_reservable_bw_pct() directly.

    YANG Description: The delta in the adjusted-max-reservable-bandwidth that
should trigger an update in the value which is flooded
through the IGP TED.
The delta is measured as a percentage of the
current adjusted value of the maximum reservable bandwidth
of the interface, as specified by the
adjusted-absolute-subscription-bw RSVP-TE leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="adjusted-max-reservable-bw-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adjusted_max_reservable_bw_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="adjusted-max-reservable-bw-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__adjusted_max_reservable_bw_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adjusted_max_reservable_bw_pct(self):
    self.__adjusted_max_reservable_bw_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="adjusted-max-reservable-bw-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)


  def _get_sr_traffic_pct(self):
    """
    Getter method for sr_traffic_pct, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/sr_traffic_pct (oc-types:percentage)

    YANG Description: The change in the calculated SR traffic on the interface
that should trigger an update in the value of the
maximum reservable bandwidth flooded through the IGP TED.
The value is specified as a percentage of the
last-calculated-sr-traffic state leaf.
    """
    return self.__sr_traffic_pct
      
  def _set_sr_traffic_pct(self, v, load=False):
    """
    Setter method for sr_traffic_pct, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/sr_traffic_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sr_traffic_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sr_traffic_pct() directly.

    YANG Description: The change in the calculated SR traffic on the interface
that should trigger an update in the value of the
maximum reservable bandwidth flooded through the IGP TED.
The value is specified as a percentage of the
last-calculated-sr-traffic state leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="sr-traffic-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sr_traffic_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="sr-traffic-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__sr_traffic_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sr_traffic_pct(self):
    self.__sr_traffic_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="sr-traffic-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)

  update_trigger = __builtin__.property(_get_update_trigger, _set_update_trigger)
  adjusted_max_reservable_bw_pct = __builtin__.property(_get_adjusted_max_reservable_bw_pct, _set_adjusted_max_reservable_bw_pct)
  sr_traffic_pct = __builtin__.property(_get_sr_traffic_pct, _set_sr_traffic_pct)


  _pyangbind_elements = OrderedDict([('update_trigger', update_trigger), ('adjusted_max_reservable_bw_pct', adjusted_max_reservable_bw_pct), ('sr_traffic_pct', sr_traffic_pct), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/mpls/te-global-attributes/bandwidth-measurement/update-trigger/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters related to the bandwidth
measurement update trigger.
  """
  __slots__ = ('_path_helper', '_extmethods', '__update_trigger','__adjusted_max_reservable_bw_pct','__sr_traffic_pct',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__update_trigger = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ADJUSTED_MAX_RESERVABLE_PCT': {}, 'SR_TRAFFIC_PCT': {}},), is_leaf=True, yang_name="update-trigger", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)
    self.__adjusted_max_reservable_bw_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="adjusted-max-reservable-bw-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)
    self.__sr_traffic_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="sr-traffic-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'te-global-attributes', 'bandwidth-measurement', 'update-trigger', 'config']

  def _get_update_trigger(self):
    """
    Getter method for update_trigger, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/update_trigger (enumeration)

    YANG Description: The trigger that should be used to determine when the IGP
TED is updated with new information as to the effective
maximum reservable bandwidth
(adjusted-absolute-subscription-bw)
    """
    return self.__update_trigger
      
  def _set_update_trigger(self, v, load=False):
    """
    Setter method for update_trigger, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/update_trigger (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_update_trigger is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_update_trigger() directly.

    YANG Description: The trigger that should be used to determine when the IGP
TED is updated with new information as to the effective
maximum reservable bandwidth
(adjusted-absolute-subscription-bw)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ADJUSTED_MAX_RESERVABLE_PCT': {}, 'SR_TRAFFIC_PCT': {}},), is_leaf=True, yang_name="update-trigger", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """update_trigger must be of a type compatible with enumeration""",
          'defined-type': "openconfig-rsvp-sr-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ADJUSTED_MAX_RESERVABLE_PCT': {}, 'SR_TRAFFIC_PCT': {}},), is_leaf=True, yang_name="update-trigger", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__update_trigger = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_update_trigger(self):
    self.__update_trigger = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ADJUSTED_MAX_RESERVABLE_PCT': {}, 'SR_TRAFFIC_PCT': {}},), is_leaf=True, yang_name="update-trigger", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)


  def _get_adjusted_max_reservable_bw_pct(self):
    """
    Getter method for adjusted_max_reservable_bw_pct, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/adjusted_max_reservable_bw_pct (oc-types:percentage)

    YANG Description: The delta in the adjusted-max-reservable-bandwidth that
should trigger an update in the value which is flooded
through the IGP TED.
The delta is measured as a percentage of the
current adjusted value of the maximum reservable bandwidth
of the interface, as specified by the
adjusted-absolute-subscription-bw RSVP-TE leaf.
    """
    return self.__adjusted_max_reservable_bw_pct
      
  def _set_adjusted_max_reservable_bw_pct(self, v, load=False):
    """
    Setter method for adjusted_max_reservable_bw_pct, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/adjusted_max_reservable_bw_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adjusted_max_reservable_bw_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adjusted_max_reservable_bw_pct() directly.

    YANG Description: The delta in the adjusted-max-reservable-bandwidth that
should trigger an update in the value which is flooded
through the IGP TED.
The delta is measured as a percentage of the
current adjusted value of the maximum reservable bandwidth
of the interface, as specified by the
adjusted-absolute-subscription-bw RSVP-TE leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="adjusted-max-reservable-bw-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adjusted_max_reservable_bw_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="adjusted-max-reservable-bw-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__adjusted_max_reservable_bw_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adjusted_max_reservable_bw_pct(self):
    self.__adjusted_max_reservable_bw_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="adjusted-max-reservable-bw-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)


  def _get_sr_traffic_pct(self):
    """
    Getter method for sr_traffic_pct, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/sr_traffic_pct (oc-types:percentage)

    YANG Description: The change in the calculated SR traffic on the interface
that should trigger an update in the value of the
maximum reservable bandwidth flooded through the IGP TED.
The value is specified as a percentage of the
last-calculated-sr-traffic state leaf.
    """
    return self.__sr_traffic_pct
      
  def _set_sr_traffic_pct(self, v, load=False):
    """
    Setter method for sr_traffic_pct, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/sr_traffic_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sr_traffic_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sr_traffic_pct() directly.

    YANG Description: The change in the calculated SR traffic on the interface
that should trigger an update in the value of the
maximum reservable bandwidth flooded through the IGP TED.
The value is specified as a percentage of the
last-calculated-sr-traffic state leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="sr-traffic-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sr_traffic_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="sr-traffic-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__sr_traffic_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sr_traffic_pct(self):
    self.__sr_traffic_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="sr-traffic-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)

  update_trigger = __builtin__.property(_get_update_trigger, _set_update_trigger)
  adjusted_max_reservable_bw_pct = __builtin__.property(_get_adjusted_max_reservable_bw_pct, _set_adjusted_max_reservable_bw_pct)
  sr_traffic_pct = __builtin__.property(_get_sr_traffic_pct, _set_sr_traffic_pct)


  _pyangbind_elements = OrderedDict([('update_trigger', update_trigger), ('adjusted_max_reservable_bw_pct', adjusted_max_reservable_bw_pct), ('sr_traffic_pct', sr_traffic_pct), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/mpls/te-global-attributes/bandwidth-measurement/update-trigger/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters related to the bandwidth
measurement update trigger.
  """
  __slots__ = ('_path_helper', '_extmethods', '__update_trigger','__adjusted_max_reservable_bw_pct','__sr_traffic_pct',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__update_trigger = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ADJUSTED_MAX_RESERVABLE_PCT': {}, 'SR_TRAFFIC_PCT': {}},), is_leaf=True, yang_name="update-trigger", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)
    self.__adjusted_max_reservable_bw_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="adjusted-max-reservable-bw-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)
    self.__sr_traffic_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="sr-traffic-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'te-global-attributes', 'bandwidth-measurement', 'update-trigger', 'config']

  def _get_update_trigger(self):
    """
    Getter method for update_trigger, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/update_trigger (enumeration)

    YANG Description: The trigger that should be used to determine when the IGP
TED is updated with new information as to the effective
maximum reservable bandwidth
(adjusted-absolute-subscription-bw)
    """
    return self.__update_trigger
      
  def _set_update_trigger(self, v, load=False):
    """
    Setter method for update_trigger, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/update_trigger (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_update_trigger is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_update_trigger() directly.

    YANG Description: The trigger that should be used to determine when the IGP
TED is updated with new information as to the effective
maximum reservable bandwidth
(adjusted-absolute-subscription-bw)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ADJUSTED_MAX_RESERVABLE_PCT': {}, 'SR_TRAFFIC_PCT': {}},), is_leaf=True, yang_name="update-trigger", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """update_trigger must be of a type compatible with enumeration""",
          'defined-type': "openconfig-rsvp-sr-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ADJUSTED_MAX_RESERVABLE_PCT': {}, 'SR_TRAFFIC_PCT': {}},), is_leaf=True, yang_name="update-trigger", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__update_trigger = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_update_trigger(self):
    self.__update_trigger = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ADJUSTED_MAX_RESERVABLE_PCT': {}, 'SR_TRAFFIC_PCT': {}},), is_leaf=True, yang_name="update-trigger", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)


  def _get_adjusted_max_reservable_bw_pct(self):
    """
    Getter method for adjusted_max_reservable_bw_pct, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/adjusted_max_reservable_bw_pct (oc-types:percentage)

    YANG Description: The delta in the adjusted-max-reservable-bandwidth that
should trigger an update in the value which is flooded
through the IGP TED.
The delta is measured as a percentage of the
current adjusted value of the maximum reservable bandwidth
of the interface, as specified by the
adjusted-absolute-subscription-bw RSVP-TE leaf.
    """
    return self.__adjusted_max_reservable_bw_pct
      
  def _set_adjusted_max_reservable_bw_pct(self, v, load=False):
    """
    Setter method for adjusted_max_reservable_bw_pct, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/adjusted_max_reservable_bw_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adjusted_max_reservable_bw_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adjusted_max_reservable_bw_pct() directly.

    YANG Description: The delta in the adjusted-max-reservable-bandwidth that
should trigger an update in the value which is flooded
through the IGP TED.
The delta is measured as a percentage of the
current adjusted value of the maximum reservable bandwidth
of the interface, as specified by the
adjusted-absolute-subscription-bw RSVP-TE leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="adjusted-max-reservable-bw-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adjusted_max_reservable_bw_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="adjusted-max-reservable-bw-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__adjusted_max_reservable_bw_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adjusted_max_reservable_bw_pct(self):
    self.__adjusted_max_reservable_bw_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="adjusted-max-reservable-bw-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)


  def _get_sr_traffic_pct(self):
    """
    Getter method for sr_traffic_pct, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/sr_traffic_pct (oc-types:percentage)

    YANG Description: The change in the calculated SR traffic on the interface
that should trigger an update in the value of the
maximum reservable bandwidth flooded through the IGP TED.
The value is specified as a percentage of the
last-calculated-sr-traffic state leaf.
    """
    return self.__sr_traffic_pct
      
  def _set_sr_traffic_pct(self, v, load=False):
    """
    Setter method for sr_traffic_pct, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/sr_traffic_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sr_traffic_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sr_traffic_pct() directly.

    YANG Description: The change in the calculated SR traffic on the interface
that should trigger an update in the value of the
maximum reservable bandwidth flooded through the IGP TED.
The value is specified as a percentage of the
last-calculated-sr-traffic state leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="sr-traffic-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sr_traffic_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="sr-traffic-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__sr_traffic_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sr_traffic_pct(self):
    self.__sr_traffic_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="sr-traffic-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)

  update_trigger = __builtin__.property(_get_update_trigger, _set_update_trigger)
  adjusted_max_reservable_bw_pct = __builtin__.property(_get_adjusted_max_reservable_bw_pct, _set_adjusted_max_reservable_bw_pct)
  sr_traffic_pct = __builtin__.property(_get_sr_traffic_pct, _set_sr_traffic_pct)


  _pyangbind_elements = OrderedDict([('update_trigger', update_trigger), ('adjusted_max_reservable_bw_pct', adjusted_max_reservable_bw_pct), ('sr_traffic_pct', sr_traffic_pct), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/mpls/te-global-attributes/bandwidth-measurement/update-trigger/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters related to the bandwidth
measurement update trigger.
  """
  __slots__ = ('_path_helper', '_extmethods', '__update_trigger','__adjusted_max_reservable_bw_pct','__sr_traffic_pct',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__update_trigger = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ADJUSTED_MAX_RESERVABLE_PCT': {}, 'SR_TRAFFIC_PCT': {}},), is_leaf=True, yang_name="update-trigger", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)
    self.__adjusted_max_reservable_bw_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="adjusted-max-reservable-bw-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)
    self.__sr_traffic_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="sr-traffic-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'te-global-attributes', 'bandwidth-measurement', 'update-trigger', 'config']

  def _get_update_trigger(self):
    """
    Getter method for update_trigger, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/update_trigger (enumeration)

    YANG Description: The trigger that should be used to determine when the IGP
TED is updated with new information as to the effective
maximum reservable bandwidth
(adjusted-absolute-subscription-bw)
    """
    return self.__update_trigger
      
  def _set_update_trigger(self, v, load=False):
    """
    Setter method for update_trigger, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/update_trigger (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_update_trigger is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_update_trigger() directly.

    YANG Description: The trigger that should be used to determine when the IGP
TED is updated with new information as to the effective
maximum reservable bandwidth
(adjusted-absolute-subscription-bw)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ADJUSTED_MAX_RESERVABLE_PCT': {}, 'SR_TRAFFIC_PCT': {}},), is_leaf=True, yang_name="update-trigger", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """update_trigger must be of a type compatible with enumeration""",
          'defined-type': "openconfig-rsvp-sr-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ADJUSTED_MAX_RESERVABLE_PCT': {}, 'SR_TRAFFIC_PCT': {}},), is_leaf=True, yang_name="update-trigger", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__update_trigger = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_update_trigger(self):
    self.__update_trigger = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ADJUSTED_MAX_RESERVABLE_PCT': {}, 'SR_TRAFFIC_PCT': {}},), is_leaf=True, yang_name="update-trigger", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='enumeration', is_config=True)


  def _get_adjusted_max_reservable_bw_pct(self):
    """
    Getter method for adjusted_max_reservable_bw_pct, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/adjusted_max_reservable_bw_pct (oc-types:percentage)

    YANG Description: The delta in the adjusted-max-reservable-bandwidth that
should trigger an update in the value which is flooded
through the IGP TED.
The delta is measured as a percentage of the
current adjusted value of the maximum reservable bandwidth
of the interface, as specified by the
adjusted-absolute-subscription-bw RSVP-TE leaf.
    """
    return self.__adjusted_max_reservable_bw_pct
      
  def _set_adjusted_max_reservable_bw_pct(self, v, load=False):
    """
    Setter method for adjusted_max_reservable_bw_pct, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/adjusted_max_reservable_bw_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adjusted_max_reservable_bw_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adjusted_max_reservable_bw_pct() directly.

    YANG Description: The delta in the adjusted-max-reservable-bandwidth that
should trigger an update in the value which is flooded
through the IGP TED.
The delta is measured as a percentage of the
current adjusted value of the maximum reservable bandwidth
of the interface, as specified by the
adjusted-absolute-subscription-bw RSVP-TE leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="adjusted-max-reservable-bw-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adjusted_max_reservable_bw_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="adjusted-max-reservable-bw-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__adjusted_max_reservable_bw_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adjusted_max_reservable_bw_pct(self):
    self.__adjusted_max_reservable_bw_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="adjusted-max-reservable-bw-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)


  def _get_sr_traffic_pct(self):
    """
    Getter method for sr_traffic_pct, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/sr_traffic_pct (oc-types:percentage)

    YANG Description: The change in the calculated SR traffic on the interface
that should trigger an update in the value of the
maximum reservable bandwidth flooded through the IGP TED.
The value is specified as a percentage of the
last-calculated-sr-traffic state leaf.
    """
    return self.__sr_traffic_pct
      
  def _set_sr_traffic_pct(self, v, load=False):
    """
    Setter method for sr_traffic_pct, mapped from YANG variable /network_instances/network_instance/mpls/te_global_attributes/bandwidth_measurement/update_trigger/config/sr_traffic_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sr_traffic_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sr_traffic_pct() directly.

    YANG Description: The change in the calculated SR traffic on the interface
that should trigger an update in the value of the
maximum reservable bandwidth flooded through the IGP TED.
The value is specified as a percentage of the
last-calculated-sr-traffic state leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="sr-traffic-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sr_traffic_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="sr-traffic-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__sr_traffic_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sr_traffic_pct(self):
    self.__sr_traffic_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="sr-traffic-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:percentage', is_config=True)

  update_trigger = __builtin__.property(_get_update_trigger, _set_update_trigger)
  adjusted_max_reservable_bw_pct = __builtin__.property(_get_adjusted_max_reservable_bw_pct, _set_adjusted_max_reservable_bw_pct)
  sr_traffic_pct = __builtin__.property(_get_sr_traffic_pct, _set_sr_traffic_pct)


  _pyangbind_elements = OrderedDict([('update_trigger', update_trigger), ('adjusted_max_reservable_bw_pct', adjusted_max_reservable_bw_pct), ('sr_traffic_pct', sr_traffic_pct), ])


