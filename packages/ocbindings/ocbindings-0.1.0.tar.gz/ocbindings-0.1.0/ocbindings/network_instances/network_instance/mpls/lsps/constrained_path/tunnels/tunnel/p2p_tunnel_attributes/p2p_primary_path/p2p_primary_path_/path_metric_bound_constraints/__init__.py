# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import path_metric_bound_constraint
class path_metric_bound_constraints(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the path metric bound constraints.
  """
  __slots__ = ('_path_helper', '_extmethods', '__path_metric_bound_constraint',)

  _yang_name = 'path-metric-bound-constraints'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__path_metric_bound_constraint = YANGDynClass(base=YANGListType("type",path_metric_bound_constraint.path_metric_bound_constraint, yang_name="path-metric-bound-constraint", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions=None), is_container='list', yang_name="path-metric-bound-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'lsps', 'constrained-path', 'tunnels', 'tunnel', 'p2p-tunnel-attributes', 'p2p-primary-path', 'p2p-primary-path', 'path-metric-bound-constraints']

  def _get_path_metric_bound_constraint(self):
    """
    Getter method for path_metric_bound_constraint, mapped from YANG variable /network_instances/network_instance/mpls/lsps/constrained_path/tunnels/tunnel/p2p_tunnel_attributes/p2p_primary_path/p2p_primary_path/path_metric_bound_constraints/path_metric_bound_constraint (list)

    YANG Description: A list of metric bounds that are applied as constraints to the LSP.
It act as a logical AND, hence all of them must be satisfied.
If not, it will return an error.
Constraints within this list may be applicable to either
the local CSPF process (where data is available to the local device)
or be communicated to a PCE for calculation.
    """
    return self.__path_metric_bound_constraint
      
  def _set_path_metric_bound_constraint(self, v, load=False):
    """
    Setter method for path_metric_bound_constraint, mapped from YANG variable /network_instances/network_instance/mpls/lsps/constrained_path/tunnels/tunnel/p2p_tunnel_attributes/p2p_primary_path/p2p_primary_path/path_metric_bound_constraints/path_metric_bound_constraint (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_metric_bound_constraint is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_metric_bound_constraint() directly.

    YANG Description: A list of metric bounds that are applied as constraints to the LSP.
It act as a logical AND, hence all of them must be satisfied.
If not, it will return an error.
Constraints within this list may be applicable to either
the local CSPF process (where data is available to the local device)
or be communicated to a PCE for calculation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("type",path_metric_bound_constraint.path_metric_bound_constraint, yang_name="path-metric-bound-constraint", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions=None), is_container='list', yang_name="path-metric-bound-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_metric_bound_constraint must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("type",path_metric_bound_constraint.path_metric_bound_constraint, yang_name="path-metric-bound-constraint", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions=None), is_container='list', yang_name="path-metric-bound-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)""",
        })

    self.__path_metric_bound_constraint = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_metric_bound_constraint(self):
    self.__path_metric_bound_constraint = YANGDynClass(base=YANGListType("type",path_metric_bound_constraint.path_metric_bound_constraint, yang_name="path-metric-bound-constraint", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions=None), is_container='list', yang_name="path-metric-bound-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

  path_metric_bound_constraint = __builtin__.property(_get_path_metric_bound_constraint, _set_path_metric_bound_constraint)


  _pyangbind_elements = OrderedDict([('path_metric_bound_constraint', path_metric_bound_constraint), ])


from . import path_metric_bound_constraint
class path_metric_bound_constraints(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the path metric bound constraints.
  """
  __slots__ = ('_path_helper', '_extmethods', '__path_metric_bound_constraint',)

  _yang_name = 'path-metric-bound-constraints'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__path_metric_bound_constraint = YANGDynClass(base=YANGListType("type",path_metric_bound_constraint.path_metric_bound_constraint, yang_name="path-metric-bound-constraint", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions=None), is_container='list', yang_name="path-metric-bound-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'lsps', 'constrained-path', 'tunnels', 'tunnel', 'p2p-tunnel-attributes', 'p2p-primary-path', 'p2p-primary-path', 'path-metric-bound-constraints']

  def _get_path_metric_bound_constraint(self):
    """
    Getter method for path_metric_bound_constraint, mapped from YANG variable /network_instances/network_instance/mpls/lsps/constrained_path/tunnels/tunnel/p2p_tunnel_attributes/p2p_primary_path/p2p_primary_path/path_metric_bound_constraints/path_metric_bound_constraint (list)

    YANG Description: A list of metric bounds that are applied as constraints to the LSP.
It act as a logical AND, hence all of them must be satisfied.
If not, it will return an error.
Constraints within this list may be applicable to either
the local CSPF process (where data is available to the local device)
or be communicated to a PCE for calculation.
    """
    return self.__path_metric_bound_constraint
      
  def _set_path_metric_bound_constraint(self, v, load=False):
    """
    Setter method for path_metric_bound_constraint, mapped from YANG variable /network_instances/network_instance/mpls/lsps/constrained_path/tunnels/tunnel/p2p_tunnel_attributes/p2p_primary_path/p2p_primary_path/path_metric_bound_constraints/path_metric_bound_constraint (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_metric_bound_constraint is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_metric_bound_constraint() directly.

    YANG Description: A list of metric bounds that are applied as constraints to the LSP.
It act as a logical AND, hence all of them must be satisfied.
If not, it will return an error.
Constraints within this list may be applicable to either
the local CSPF process (where data is available to the local device)
or be communicated to a PCE for calculation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("type",path_metric_bound_constraint.path_metric_bound_constraint, yang_name="path-metric-bound-constraint", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions=None), is_container='list', yang_name="path-metric-bound-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_metric_bound_constraint must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("type",path_metric_bound_constraint.path_metric_bound_constraint, yang_name="path-metric-bound-constraint", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions=None), is_container='list', yang_name="path-metric-bound-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)""",
        })

    self.__path_metric_bound_constraint = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_metric_bound_constraint(self):
    self.__path_metric_bound_constraint = YANGDynClass(base=YANGListType("type",path_metric_bound_constraint.path_metric_bound_constraint, yang_name="path-metric-bound-constraint", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions=None), is_container='list', yang_name="path-metric-bound-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

  path_metric_bound_constraint = __builtin__.property(_get_path_metric_bound_constraint, _set_path_metric_bound_constraint)


  _pyangbind_elements = OrderedDict([('path_metric_bound_constraint', path_metric_bound_constraint), ])


from . import path_metric_bound_constraint
class path_metric_bound_constraints(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the path metric bound constraints.
  """
  __slots__ = ('_path_helper', '_extmethods', '__path_metric_bound_constraint',)

  _yang_name = 'path-metric-bound-constraints'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__path_metric_bound_constraint = YANGDynClass(base=YANGListType("type",path_metric_bound_constraint.path_metric_bound_constraint, yang_name="path-metric-bound-constraint", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions=None), is_container='list', yang_name="path-metric-bound-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'lsps', 'constrained-path', 'tunnels', 'tunnel', 'p2p-tunnel-attributes', 'p2p-primary-path', 'p2p-primary-path', 'path-metric-bound-constraints']

  def _get_path_metric_bound_constraint(self):
    """
    Getter method for path_metric_bound_constraint, mapped from YANG variable /network_instances/network_instance/mpls/lsps/constrained_path/tunnels/tunnel/p2p_tunnel_attributes/p2p_primary_path/p2p_primary_path/path_metric_bound_constraints/path_metric_bound_constraint (list)

    YANG Description: A list of metric bounds that are applied as constraints to the LSP.
It act as a logical AND, hence all of them must be satisfied.
If not, it will return an error.
Constraints within this list may be applicable to either
the local CSPF process (where data is available to the local device)
or be communicated to a PCE for calculation.
    """
    return self.__path_metric_bound_constraint
      
  def _set_path_metric_bound_constraint(self, v, load=False):
    """
    Setter method for path_metric_bound_constraint, mapped from YANG variable /network_instances/network_instance/mpls/lsps/constrained_path/tunnels/tunnel/p2p_tunnel_attributes/p2p_primary_path/p2p_primary_path/path_metric_bound_constraints/path_metric_bound_constraint (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_metric_bound_constraint is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_metric_bound_constraint() directly.

    YANG Description: A list of metric bounds that are applied as constraints to the LSP.
It act as a logical AND, hence all of them must be satisfied.
If not, it will return an error.
Constraints within this list may be applicable to either
the local CSPF process (where data is available to the local device)
or be communicated to a PCE for calculation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("type",path_metric_bound_constraint.path_metric_bound_constraint, yang_name="path-metric-bound-constraint", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions=None), is_container='list', yang_name="path-metric-bound-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_metric_bound_constraint must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("type",path_metric_bound_constraint.path_metric_bound_constraint, yang_name="path-metric-bound-constraint", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions=None), is_container='list', yang_name="path-metric-bound-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)""",
        })

    self.__path_metric_bound_constraint = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_metric_bound_constraint(self):
    self.__path_metric_bound_constraint = YANGDynClass(base=YANGListType("type",path_metric_bound_constraint.path_metric_bound_constraint, yang_name="path-metric-bound-constraint", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions=None), is_container='list', yang_name="path-metric-bound-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

  path_metric_bound_constraint = __builtin__.property(_get_path_metric_bound_constraint, _set_path_metric_bound_constraint)


  _pyangbind_elements = OrderedDict([('path_metric_bound_constraint', path_metric_bound_constraint), ])


from . import path_metric_bound_constraint
class path_metric_bound_constraints(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the path metric bound constraints.
  """
  __slots__ = ('_path_helper', '_extmethods', '__path_metric_bound_constraint',)

  _yang_name = 'path-metric-bound-constraints'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__path_metric_bound_constraint = YANGDynClass(base=YANGListType("type",path_metric_bound_constraint.path_metric_bound_constraint, yang_name="path-metric-bound-constraint", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions=None), is_container='list', yang_name="path-metric-bound-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'lsps', 'constrained-path', 'tunnels', 'tunnel', 'p2p-tunnel-attributes', 'p2p-primary-path', 'p2p-primary-path', 'path-metric-bound-constraints']

  def _get_path_metric_bound_constraint(self):
    """
    Getter method for path_metric_bound_constraint, mapped from YANG variable /network_instances/network_instance/mpls/lsps/constrained_path/tunnels/tunnel/p2p_tunnel_attributes/p2p_primary_path/p2p_primary_path/path_metric_bound_constraints/path_metric_bound_constraint (list)

    YANG Description: A list of metric bounds that are applied as constraints to the LSP.
It act as a logical AND, hence all of them must be satisfied.
If not, it will return an error.
Constraints within this list may be applicable to either
the local CSPF process (where data is available to the local device)
or be communicated to a PCE for calculation.
    """
    return self.__path_metric_bound_constraint
      
  def _set_path_metric_bound_constraint(self, v, load=False):
    """
    Setter method for path_metric_bound_constraint, mapped from YANG variable /network_instances/network_instance/mpls/lsps/constrained_path/tunnels/tunnel/p2p_tunnel_attributes/p2p_primary_path/p2p_primary_path/path_metric_bound_constraints/path_metric_bound_constraint (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_metric_bound_constraint is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_metric_bound_constraint() directly.

    YANG Description: A list of metric bounds that are applied as constraints to the LSP.
It act as a logical AND, hence all of them must be satisfied.
If not, it will return an error.
Constraints within this list may be applicable to either
the local CSPF process (where data is available to the local device)
or be communicated to a PCE for calculation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("type",path_metric_bound_constraint.path_metric_bound_constraint, yang_name="path-metric-bound-constraint", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions=None), is_container='list', yang_name="path-metric-bound-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_metric_bound_constraint must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("type",path_metric_bound_constraint.path_metric_bound_constraint, yang_name="path-metric-bound-constraint", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions=None), is_container='list', yang_name="path-metric-bound-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)""",
        })

    self.__path_metric_bound_constraint = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_metric_bound_constraint(self):
    self.__path_metric_bound_constraint = YANGDynClass(base=YANGListType("type",path_metric_bound_constraint.path_metric_bound_constraint, yang_name="path-metric-bound-constraint", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions=None), is_container='list', yang_name="path-metric-bound-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

  path_metric_bound_constraint = __builtin__.property(_get_path_metric_bound_constraint, _set_path_metric_bound_constraint)


  _pyangbind_elements = OrderedDict([('path_metric_bound_constraint', path_metric_bound_constraint), ])


