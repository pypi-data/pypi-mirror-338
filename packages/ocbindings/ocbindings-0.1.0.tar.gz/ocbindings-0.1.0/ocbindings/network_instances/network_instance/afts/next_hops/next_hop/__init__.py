# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import state
from . import ip_in_ip
from . import gre
from . import encap_headers
from . import interface_ref
class next_hop(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/afts/next-hops/next-hop. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A next-hop associated with the forwarding instance.
  """
  __slots__ = ('_path_helper', '_extmethods', '__index','__state','__ip_in_ip','__gre','__encap_headers','__interface_ref',)

  _yang_name = 'next-hop'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__index = YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__ip_in_ip = YANGDynClass(base=ip_in_ip.ip_in_ip, is_container='container', yang_name="ip-in-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__gre = YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__encap_headers = YANGDynClass(base=encap_headers.encap_headers, is_container='container', yang_name="encap-headers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__interface_ref = YANGDynClass(base=interface_ref.interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'afts', 'next-hops', 'next-hop']

  def _get_index(self):
    """
    Getter method for index, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/index (leafref)

    YANG Description: A unique index identifying the next-hop entry for the
AFT entry
    """
    return self.__index
      
  def _set_index(self, v, load=False):
    """
    Setter method for index, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_index() directly.

    YANG Description: A unique index identifying the next-hop entry for the
AFT entry
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_index(self):
    self.__index = YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/state (container)

    YANG Description: Operational state parameters relating to the AFT
next-hop entry
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the AFT
next-hop entry
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_ip_in_ip(self):
    """
    Getter method for ip_in_ip, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/ip_in_ip (container)

    YANG Description: When specified, the packet has an IP-in-IP header applied to it
before forwarding to the specified next-hop.

This node must be supported in addition to the
encap-headers/encap-header tree.  A future release of OpenConfig
will deprecate this node in favor of the
encap-headers/encap-header subtree.
    """
    return self.__ip_in_ip
      
  def _set_ip_in_ip(self, v, load=False):
    """
    Setter method for ip_in_ip, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/ip_in_ip (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_in_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_in_ip() directly.

    YANG Description: When specified, the packet has an IP-in-IP header applied to it
before forwarding to the specified next-hop.

This node must be supported in addition to the
encap-headers/encap-header tree.  A future release of OpenConfig
will deprecate this node in favor of the
encap-headers/encap-header subtree.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ip_in_ip.ip_in_ip, is_container='container', yang_name="ip-in-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_in_ip must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ip_in_ip.ip_in_ip, is_container='container', yang_name="ip-in-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__ip_in_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_in_ip(self):
    self.__ip_in_ip = YANGDynClass(base=ip_in_ip.ip_in_ip, is_container='container', yang_name="ip-in-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_gre(self):
    """
    Getter method for gre, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/gre (container)

    YANG Description: When specified, the packet has an GRE
(Generic Routing Encapsulation) header applied to
it before forwarding to the specified next-hop.
encapsulate-header leaf should be set to GRE for this
to apply.

This node must be supported in addition to the
encap-headers/encap-header tree.  A future release of OpenConfig
will deprecate this node in favor of the
encap-headers/encap-header subtree.
    """
    return self.__gre
      
  def _set_gre(self, v, load=False):
    """
    Setter method for gre, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/gre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_gre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_gre() directly.

    YANG Description: When specified, the packet has an GRE
(Generic Routing Encapsulation) header applied to
it before forwarding to the specified next-hop.
encapsulate-header leaf should be set to GRE for this
to apply.

This node must be supported in addition to the
encap-headers/encap-header tree.  A future release of OpenConfig
will deprecate this node in favor of the
encap-headers/encap-header subtree.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """gre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__gre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_gre(self):
    self.__gre = YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_encap_headers(self):
    """
    Getter method for encap_headers, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers (container)

    YANG Description: Container for packet encapsulation headers.  When leaves in this
container are populated, it indicates encapsulation of the packet
matching the next-hop is performed using a stack of one or more
headers defined in the list encap-header.

Each entry in the list must indicate an encapsulation type and
populate a container with the parameters for that encapsulation
header.
    """
    return self.__encap_headers
      
  def _set_encap_headers(self, v, load=False):
    """
    Setter method for encap_headers, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_encap_headers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_encap_headers() directly.

    YANG Description: Container for packet encapsulation headers.  When leaves in this
container are populated, it indicates encapsulation of the packet
matching the next-hop is performed using a stack of one or more
headers defined in the list encap-header.

Each entry in the list must indicate an encapsulation type and
populate a container with the parameters for that encapsulation
header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=encap_headers.encap_headers, is_container='container', yang_name="encap-headers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """encap_headers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=encap_headers.encap_headers, is_container='container', yang_name="encap-headers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__encap_headers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_encap_headers(self):
    self.__encap_headers = YANGDynClass(base=encap_headers.encap_headers, is_container='container', yang_name="encap-headers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_interface_ref(self):
    """
    Getter method for interface_ref, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/interface_ref (container)

    YANG Description: Reference to an interface or subinterface
    """
    return self.__interface_ref
      
  def _set_interface_ref(self, v, load=False):
    """
    Setter method for interface_ref, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/interface_ref (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_ref is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_ref() directly.

    YANG Description: Reference to an interface or subinterface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interface_ref.interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_ref must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interface_ref.interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__interface_ref = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_ref(self):
    self.__interface_ref = YANGDynClass(base=interface_ref.interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  index = __builtin__.property(_get_index)
  state = __builtin__.property(_get_state)
  ip_in_ip = __builtin__.property(_get_ip_in_ip)
  gre = __builtin__.property(_get_gre)
  encap_headers = __builtin__.property(_get_encap_headers)
  interface_ref = __builtin__.property(_get_interface_ref)


  _pyangbind_elements = OrderedDict([('index', index), ('state', state), ('ip_in_ip', ip_in_ip), ('gre', gre), ('encap_headers', encap_headers), ('interface_ref', interface_ref), ])


from . import state
from . import ip_in_ip
from . import gre
from . import encap_headers
from . import interface_ref
class next_hop(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/afts/next-hops/next-hop. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A next-hop associated with the forwarding instance.
  """
  __slots__ = ('_path_helper', '_extmethods', '__index','__state','__ip_in_ip','__gre','__encap_headers','__interface_ref',)

  _yang_name = 'next-hop'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__index = YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__ip_in_ip = YANGDynClass(base=ip_in_ip.ip_in_ip, is_container='container', yang_name="ip-in-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__gre = YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__encap_headers = YANGDynClass(base=encap_headers.encap_headers, is_container='container', yang_name="encap-headers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__interface_ref = YANGDynClass(base=interface_ref.interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'afts', 'next-hops', 'next-hop']

  def _get_index(self):
    """
    Getter method for index, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/index (leafref)

    YANG Description: A unique index identifying the next-hop entry for the
AFT entry
    """
    return self.__index
      
  def _set_index(self, v, load=False):
    """
    Setter method for index, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_index() directly.

    YANG Description: A unique index identifying the next-hop entry for the
AFT entry
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_index(self):
    self.__index = YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/state (container)

    YANG Description: Operational state parameters relating to the AFT
next-hop entry
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the AFT
next-hop entry
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_ip_in_ip(self):
    """
    Getter method for ip_in_ip, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/ip_in_ip (container)

    YANG Description: When specified, the packet has an IP-in-IP header applied to it
before forwarding to the specified next-hop.

This node must be supported in addition to the
encap-headers/encap-header tree.  A future release of OpenConfig
will deprecate this node in favor of the
encap-headers/encap-header subtree.
    """
    return self.__ip_in_ip
      
  def _set_ip_in_ip(self, v, load=False):
    """
    Setter method for ip_in_ip, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/ip_in_ip (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_in_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_in_ip() directly.

    YANG Description: When specified, the packet has an IP-in-IP header applied to it
before forwarding to the specified next-hop.

This node must be supported in addition to the
encap-headers/encap-header tree.  A future release of OpenConfig
will deprecate this node in favor of the
encap-headers/encap-header subtree.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ip_in_ip.ip_in_ip, is_container='container', yang_name="ip-in-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_in_ip must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ip_in_ip.ip_in_ip, is_container='container', yang_name="ip-in-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__ip_in_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_in_ip(self):
    self.__ip_in_ip = YANGDynClass(base=ip_in_ip.ip_in_ip, is_container='container', yang_name="ip-in-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_gre(self):
    """
    Getter method for gre, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/gre (container)

    YANG Description: When specified, the packet has an GRE
(Generic Routing Encapsulation) header applied to
it before forwarding to the specified next-hop.
encapsulate-header leaf should be set to GRE for this
to apply.

This node must be supported in addition to the
encap-headers/encap-header tree.  A future release of OpenConfig
will deprecate this node in favor of the
encap-headers/encap-header subtree.
    """
    return self.__gre
      
  def _set_gre(self, v, load=False):
    """
    Setter method for gre, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/gre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_gre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_gre() directly.

    YANG Description: When specified, the packet has an GRE
(Generic Routing Encapsulation) header applied to
it before forwarding to the specified next-hop.
encapsulate-header leaf should be set to GRE for this
to apply.

This node must be supported in addition to the
encap-headers/encap-header tree.  A future release of OpenConfig
will deprecate this node in favor of the
encap-headers/encap-header subtree.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """gre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__gre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_gre(self):
    self.__gre = YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_encap_headers(self):
    """
    Getter method for encap_headers, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers (container)

    YANG Description: Container for packet encapsulation headers.  When leaves in this
container are populated, it indicates encapsulation of the packet
matching the next-hop is performed using a stack of one or more
headers defined in the list encap-header.

Each entry in the list must indicate an encapsulation type and
populate a container with the parameters for that encapsulation
header.
    """
    return self.__encap_headers
      
  def _set_encap_headers(self, v, load=False):
    """
    Setter method for encap_headers, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_encap_headers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_encap_headers() directly.

    YANG Description: Container for packet encapsulation headers.  When leaves in this
container are populated, it indicates encapsulation of the packet
matching the next-hop is performed using a stack of one or more
headers defined in the list encap-header.

Each entry in the list must indicate an encapsulation type and
populate a container with the parameters for that encapsulation
header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=encap_headers.encap_headers, is_container='container', yang_name="encap-headers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """encap_headers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=encap_headers.encap_headers, is_container='container', yang_name="encap-headers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__encap_headers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_encap_headers(self):
    self.__encap_headers = YANGDynClass(base=encap_headers.encap_headers, is_container='container', yang_name="encap-headers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_interface_ref(self):
    """
    Getter method for interface_ref, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/interface_ref (container)

    YANG Description: Reference to an interface or subinterface
    """
    return self.__interface_ref
      
  def _set_interface_ref(self, v, load=False):
    """
    Setter method for interface_ref, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/interface_ref (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_ref is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_ref() directly.

    YANG Description: Reference to an interface or subinterface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interface_ref.interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_ref must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interface_ref.interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__interface_ref = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_ref(self):
    self.__interface_ref = YANGDynClass(base=interface_ref.interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  index = __builtin__.property(_get_index)
  state = __builtin__.property(_get_state)
  ip_in_ip = __builtin__.property(_get_ip_in_ip)
  gre = __builtin__.property(_get_gre)
  encap_headers = __builtin__.property(_get_encap_headers)
  interface_ref = __builtin__.property(_get_interface_ref)


  _pyangbind_elements = OrderedDict([('index', index), ('state', state), ('ip_in_ip', ip_in_ip), ('gre', gre), ('encap_headers', encap_headers), ('interface_ref', interface_ref), ])


from . import state
from . import ip_in_ip
from . import gre
from . import encap_headers
from . import interface_ref
class next_hop(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/afts/next-hops/next-hop. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A next-hop associated with the forwarding instance.
  """
  __slots__ = ('_path_helper', '_extmethods', '__index','__state','__ip_in_ip','__gre','__encap_headers','__interface_ref',)

  _yang_name = 'next-hop'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__index = YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__ip_in_ip = YANGDynClass(base=ip_in_ip.ip_in_ip, is_container='container', yang_name="ip-in-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__gre = YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__encap_headers = YANGDynClass(base=encap_headers.encap_headers, is_container='container', yang_name="encap-headers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__interface_ref = YANGDynClass(base=interface_ref.interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'afts', 'next-hops', 'next-hop']

  def _get_index(self):
    """
    Getter method for index, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/index (leafref)

    YANG Description: A unique index identifying the next-hop entry for the
AFT entry
    """
    return self.__index
      
  def _set_index(self, v, load=False):
    """
    Setter method for index, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_index() directly.

    YANG Description: A unique index identifying the next-hop entry for the
AFT entry
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_index(self):
    self.__index = YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/state (container)

    YANG Description: Operational state parameters relating to the AFT
next-hop entry
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the AFT
next-hop entry
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_ip_in_ip(self):
    """
    Getter method for ip_in_ip, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/ip_in_ip (container)

    YANG Description: When specified, the packet has an IP-in-IP header applied to it
before forwarding to the specified next-hop.

This node must be supported in addition to the
encap-headers/encap-header tree.  A future release of OpenConfig
will deprecate this node in favor of the
encap-headers/encap-header subtree.
    """
    return self.__ip_in_ip
      
  def _set_ip_in_ip(self, v, load=False):
    """
    Setter method for ip_in_ip, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/ip_in_ip (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_in_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_in_ip() directly.

    YANG Description: When specified, the packet has an IP-in-IP header applied to it
before forwarding to the specified next-hop.

This node must be supported in addition to the
encap-headers/encap-header tree.  A future release of OpenConfig
will deprecate this node in favor of the
encap-headers/encap-header subtree.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ip_in_ip.ip_in_ip, is_container='container', yang_name="ip-in-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_in_ip must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ip_in_ip.ip_in_ip, is_container='container', yang_name="ip-in-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__ip_in_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_in_ip(self):
    self.__ip_in_ip = YANGDynClass(base=ip_in_ip.ip_in_ip, is_container='container', yang_name="ip-in-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_gre(self):
    """
    Getter method for gre, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/gre (container)

    YANG Description: When specified, the packet has an GRE
(Generic Routing Encapsulation) header applied to
it before forwarding to the specified next-hop.
encapsulate-header leaf should be set to GRE for this
to apply.

This node must be supported in addition to the
encap-headers/encap-header tree.  A future release of OpenConfig
will deprecate this node in favor of the
encap-headers/encap-header subtree.
    """
    return self.__gre
      
  def _set_gre(self, v, load=False):
    """
    Setter method for gre, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/gre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_gre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_gre() directly.

    YANG Description: When specified, the packet has an GRE
(Generic Routing Encapsulation) header applied to
it before forwarding to the specified next-hop.
encapsulate-header leaf should be set to GRE for this
to apply.

This node must be supported in addition to the
encap-headers/encap-header tree.  A future release of OpenConfig
will deprecate this node in favor of the
encap-headers/encap-header subtree.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """gre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__gre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_gre(self):
    self.__gre = YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_encap_headers(self):
    """
    Getter method for encap_headers, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers (container)

    YANG Description: Container for packet encapsulation headers.  When leaves in this
container are populated, it indicates encapsulation of the packet
matching the next-hop is performed using a stack of one or more
headers defined in the list encap-header.

Each entry in the list must indicate an encapsulation type and
populate a container with the parameters for that encapsulation
header.
    """
    return self.__encap_headers
      
  def _set_encap_headers(self, v, load=False):
    """
    Setter method for encap_headers, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_encap_headers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_encap_headers() directly.

    YANG Description: Container for packet encapsulation headers.  When leaves in this
container are populated, it indicates encapsulation of the packet
matching the next-hop is performed using a stack of one or more
headers defined in the list encap-header.

Each entry in the list must indicate an encapsulation type and
populate a container with the parameters for that encapsulation
header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=encap_headers.encap_headers, is_container='container', yang_name="encap-headers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """encap_headers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=encap_headers.encap_headers, is_container='container', yang_name="encap-headers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__encap_headers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_encap_headers(self):
    self.__encap_headers = YANGDynClass(base=encap_headers.encap_headers, is_container='container', yang_name="encap-headers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_interface_ref(self):
    """
    Getter method for interface_ref, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/interface_ref (container)

    YANG Description: Reference to an interface or subinterface
    """
    return self.__interface_ref
      
  def _set_interface_ref(self, v, load=False):
    """
    Setter method for interface_ref, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/interface_ref (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_ref is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_ref() directly.

    YANG Description: Reference to an interface or subinterface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interface_ref.interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_ref must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interface_ref.interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__interface_ref = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_ref(self):
    self.__interface_ref = YANGDynClass(base=interface_ref.interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  index = __builtin__.property(_get_index)
  state = __builtin__.property(_get_state)
  ip_in_ip = __builtin__.property(_get_ip_in_ip)
  gre = __builtin__.property(_get_gre)
  encap_headers = __builtin__.property(_get_encap_headers)
  interface_ref = __builtin__.property(_get_interface_ref)


  _pyangbind_elements = OrderedDict([('index', index), ('state', state), ('ip_in_ip', ip_in_ip), ('gre', gre), ('encap_headers', encap_headers), ('interface_ref', interface_ref), ])


from . import state
from . import ip_in_ip
from . import gre
from . import encap_headers
from . import interface_ref
class next_hop(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/afts/next-hops/next-hop. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A next-hop associated with the forwarding instance.
  """
  __slots__ = ('_path_helper', '_extmethods', '__index','__state','__ip_in_ip','__gre','__encap_headers','__interface_ref',)

  _yang_name = 'next-hop'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__index = YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__ip_in_ip = YANGDynClass(base=ip_in_ip.ip_in_ip, is_container='container', yang_name="ip-in-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__gre = YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__encap_headers = YANGDynClass(base=encap_headers.encap_headers, is_container='container', yang_name="encap-headers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__interface_ref = YANGDynClass(base=interface_ref.interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'afts', 'next-hops', 'next-hop']

  def _get_index(self):
    """
    Getter method for index, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/index (leafref)

    YANG Description: A unique index identifying the next-hop entry for the
AFT entry
    """
    return self.__index
      
  def _set_index(self, v, load=False):
    """
    Setter method for index, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_index() directly.

    YANG Description: A unique index identifying the next-hop entry for the
AFT entry
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_index(self):
    self.__index = YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/state (container)

    YANG Description: Operational state parameters relating to the AFT
next-hop entry
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the AFT
next-hop entry
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_ip_in_ip(self):
    """
    Getter method for ip_in_ip, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/ip_in_ip (container)

    YANG Description: When specified, the packet has an IP-in-IP header applied to it
before forwarding to the specified next-hop.

This node must be supported in addition to the
encap-headers/encap-header tree.  A future release of OpenConfig
will deprecate this node in favor of the
encap-headers/encap-header subtree.
    """
    return self.__ip_in_ip
      
  def _set_ip_in_ip(self, v, load=False):
    """
    Setter method for ip_in_ip, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/ip_in_ip (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_in_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_in_ip() directly.

    YANG Description: When specified, the packet has an IP-in-IP header applied to it
before forwarding to the specified next-hop.

This node must be supported in addition to the
encap-headers/encap-header tree.  A future release of OpenConfig
will deprecate this node in favor of the
encap-headers/encap-header subtree.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ip_in_ip.ip_in_ip, is_container='container', yang_name="ip-in-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_in_ip must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ip_in_ip.ip_in_ip, is_container='container', yang_name="ip-in-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__ip_in_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_in_ip(self):
    self.__ip_in_ip = YANGDynClass(base=ip_in_ip.ip_in_ip, is_container='container', yang_name="ip-in-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_gre(self):
    """
    Getter method for gre, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/gre (container)

    YANG Description: When specified, the packet has an GRE
(Generic Routing Encapsulation) header applied to
it before forwarding to the specified next-hop.
encapsulate-header leaf should be set to GRE for this
to apply.

This node must be supported in addition to the
encap-headers/encap-header tree.  A future release of OpenConfig
will deprecate this node in favor of the
encap-headers/encap-header subtree.
    """
    return self.__gre
      
  def _set_gre(self, v, load=False):
    """
    Setter method for gre, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/gre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_gre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_gre() directly.

    YANG Description: When specified, the packet has an GRE
(Generic Routing Encapsulation) header applied to
it before forwarding to the specified next-hop.
encapsulate-header leaf should be set to GRE for this
to apply.

This node must be supported in addition to the
encap-headers/encap-header tree.  A future release of OpenConfig
will deprecate this node in favor of the
encap-headers/encap-header subtree.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """gre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__gre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_gre(self):
    self.__gre = YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_encap_headers(self):
    """
    Getter method for encap_headers, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers (container)

    YANG Description: Container for packet encapsulation headers.  When leaves in this
container are populated, it indicates encapsulation of the packet
matching the next-hop is performed using a stack of one or more
headers defined in the list encap-header.

Each entry in the list must indicate an encapsulation type and
populate a container with the parameters for that encapsulation
header.
    """
    return self.__encap_headers
      
  def _set_encap_headers(self, v, load=False):
    """
    Setter method for encap_headers, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_encap_headers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_encap_headers() directly.

    YANG Description: Container for packet encapsulation headers.  When leaves in this
container are populated, it indicates encapsulation of the packet
matching the next-hop is performed using a stack of one or more
headers defined in the list encap-header.

Each entry in the list must indicate an encapsulation type and
populate a container with the parameters for that encapsulation
header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=encap_headers.encap_headers, is_container='container', yang_name="encap-headers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """encap_headers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=encap_headers.encap_headers, is_container='container', yang_name="encap-headers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__encap_headers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_encap_headers(self):
    self.__encap_headers = YANGDynClass(base=encap_headers.encap_headers, is_container='container', yang_name="encap-headers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_interface_ref(self):
    """
    Getter method for interface_ref, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/interface_ref (container)

    YANG Description: Reference to an interface or subinterface
    """
    return self.__interface_ref
      
  def _set_interface_ref(self, v, load=False):
    """
    Setter method for interface_ref, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/interface_ref (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_ref is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_ref() directly.

    YANG Description: Reference to an interface or subinterface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interface_ref.interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_ref must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interface_ref.interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__interface_ref = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_ref(self):
    self.__interface_ref = YANGDynClass(base=interface_ref.interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  index = __builtin__.property(_get_index)
  state = __builtin__.property(_get_state)
  ip_in_ip = __builtin__.property(_get_ip_in_ip)
  gre = __builtin__.property(_get_gre)
  encap_headers = __builtin__.property(_get_encap_headers)
  interface_ref = __builtin__.property(_get_interface_ref)


  _pyangbind_elements = OrderedDict([('index', index), ('state', state), ('ip_in_ip', ip_in_ip), ('gre', gre), ('encap_headers', encap_headers), ('interface_ref', interface_ref), ])


