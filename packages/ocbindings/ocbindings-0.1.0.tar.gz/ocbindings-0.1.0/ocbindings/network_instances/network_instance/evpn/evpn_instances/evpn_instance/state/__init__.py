# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/evpn/evpn-instances/evpn-instance/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: EVPN State parameters for
the participation in an EVPN Intance.
  """
  __slots__ = ('_path_helper', '_extmethods', '__evi','__encapsulation_type','__service_type','__multicast_group','__multicast_mask','__replication_mode','__route_distinguisher','__control_word_enabled','__local_vpws_service_id','__remote_vpws_service_id',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__evi = YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__encapsulation_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="encapsulation-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__service_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="service-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__multicast_group = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    self.__multicast_mask = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    self.__replication_mode = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STATIC_INGRESS_REPLICATION': {}, 'BGP': {}, 'MULTICAST': {}},), is_leaf=True, yang_name="replication-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    self.__route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)
    self.__control_word_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="control-word-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__local_vpws_service_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="local-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__remote_vpws_service_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="remote-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'evpn', 'evpn-instances', 'evpn-instance', 'state']

  def _get_evi(self):
    """
    Getter method for evi, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/evi (string)

    YANG Description: EVPN Instance (EVI) identifier
    """
    return self.__evi
      
  def _set_evi(self, v, load=False):
    """
    Setter method for evi, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/evi (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_evi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_evi() directly.

    YANG Description: EVPN Instance (EVI) identifier
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """evi must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__evi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_evi(self):
    self.__evi = YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_encapsulation_type(self):
    """
    Getter method for encapsulation_type, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/encapsulation_type (identityref)

    YANG Description: The on-the-wire encapsulation that should be used when
exchanging traffic from this network instance to/from
destinations belonging to the EVI. The use of MPLS or
VXLAN is selected using this container.
    """
    return self.__encapsulation_type
      
  def _set_encapsulation_type(self, v, load=False):
    """
    Setter method for encapsulation_type, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/encapsulation_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_encapsulation_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_encapsulation_type() directly.

    YANG Description: The on-the-wire encapsulation that should be used when
exchanging traffic from this network instance to/from
destinations belonging to the EVI. The use of MPLS or
VXLAN is selected using this container.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="encapsulation-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """encapsulation_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="encapsulation-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__encapsulation_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_encapsulation_type(self):
    self.__encapsulation_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="encapsulation-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_service_type(self):
    """
    Getter method for service_type, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/service_type (identityref)

    YANG Description: Specifies the type of EVPN that is being created according
to the values in the EVPN_TYPES identity.
The options are VLAN-based, VLAN-Bundle or VLAN-aware.
VLAN-Based services consists of an EVPN instance of only a
single broadcast domain, the proper network-instance type used
for this kind of services is L2VSI.
    """
    return self.__service_type
      
  def _set_service_type(self, v, load=False):
    """
    Setter method for service_type, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/service_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_type() directly.

    YANG Description: Specifies the type of EVPN that is being created according
to the values in the EVPN_TYPES identity.
The options are VLAN-based, VLAN-Bundle or VLAN-aware.
VLAN-Based services consists of an EVPN instance of only a
single broadcast domain, the proper network-instance type used
for this kind of services is L2VSI.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="service-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="service-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__service_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_type(self):
    self.__service_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="service-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_multicast_group(self):
    """
    Getter method for multicast_group, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/multicast_group (oc-inet:ip-address)

    YANG Description: Multicast group address for BUM traffic
    """
    return self.__multicast_group
      
  def _set_multicast_group(self, v, load=False):
    """
    Setter method for multicast_group, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/multicast_group (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multicast_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multicast_group() directly.

    YANG Description: Multicast group address for BUM traffic
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multicast_group must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__multicast_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multicast_group(self):
    self.__multicast_group = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)


  def _get_multicast_mask(self):
    """
    Getter method for multicast_mask, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/multicast_mask (oc-inet:ip-address)

    YANG Description: Multicast group address mask
    """
    return self.__multicast_mask
      
  def _set_multicast_mask(self, v, load=False):
    """
    Setter method for multicast_mask, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/multicast_mask (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multicast_mask is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multicast_mask() directly.

    YANG Description: Multicast group address mask
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multicast_mask must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__multicast_mask = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multicast_mask(self):
    self.__multicast_mask = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)


  def _get_replication_mode(self):
    """
    Getter method for replication_mode, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/replication_mode (enumeration)

    YANG Description: Replication mode to handle BUM traffic
    """
    return self.__replication_mode
      
  def _set_replication_mode(self, v, load=False):
    """
    Setter method for replication_mode, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/replication_mode (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_replication_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_replication_mode() directly.

    YANG Description: Replication mode to handle BUM traffic
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STATIC_INGRESS_REPLICATION': {}, 'BGP': {}, 'MULTICAST': {}},), is_leaf=True, yang_name="replication-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """replication_mode must be of a type compatible with enumeration""",
          'defined-type': "openconfig-network-instance:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STATIC_INGRESS_REPLICATION': {}, 'BGP': {}, 'MULTICAST': {}},), is_leaf=True, yang_name="replication-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)""",
        })

    self.__replication_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_replication_mode(self):
    self.__replication_mode = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STATIC_INGRESS_REPLICATION': {}, 'BGP': {}, 'MULTICAST': {}},), is_leaf=True, yang_name="replication-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)


  def _get_route_distinguisher(self):
    """
    Getter method for route_distinguisher, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/route_distinguisher (union)

    YANG Description: Route Distinguisher (RD) associated to the EVPN-instance.
An RD MUST be assigned for a given EVPN-instance on a PE.
This RD MUST be unique across all EVPN-instances on a PE.
The route-distinguisher at this level overrides
the route-distinguisher value defined under
network-instance/config.
    """
    return self.__route_distinguisher
      
  def _set_route_distinguisher(self, v, load=False):
    """
    Setter method for route_distinguisher, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/route_distinguisher (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_route_distinguisher is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_route_distinguisher() directly.

    YANG Description: Route Distinguisher (RD) associated to the EVPN-instance.
An RD MUST be assigned for a given EVPN-instance on a PE.
This RD MUST be unique across all EVPN-instances on a PE.
The route-distinguisher at this level overrides
the route-distinguisher value defined under
network-instance/config.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """route_distinguisher must be of a type compatible with union""",
          'defined-type': "openconfig-network-instance:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)""",
        })

    self.__route_distinguisher = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_route_distinguisher(self):
    self.__route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)


  def _get_control_word_enabled(self):
    """
    Getter method for control_word_enabled, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/control_word_enabled (boolean)

    YANG Description: When true, the control word is signaled and sent.
    """
    return self.__control_word_enabled
      
  def _set_control_word_enabled(self, v, load=False):
    """
    Setter method for control_word_enabled, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/control_word_enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_control_word_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_control_word_enabled() directly.

    YANG Description: When true, the control word is signaled and sent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="control-word-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """control_word_enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="control-word-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__control_word_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_control_word_enabled(self):
    self.__control_word_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="control-word-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_local_vpws_service_id(self):
    """
    Getter method for local_vpws_service_id, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/local_vpws_service_id (uint32)

    YANG Description: Indicates the local VPWS identifier assigned
to the Attachment Circuit (AC).
    """
    return self.__local_vpws_service_id
      
  def _set_local_vpws_service_id(self, v, load=False):
    """
    Setter method for local_vpws_service_id, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/local_vpws_service_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_vpws_service_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_vpws_service_id() directly.

    YANG Description: Indicates the local VPWS identifier assigned
to the Attachment Circuit (AC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="local-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_vpws_service_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="local-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__local_vpws_service_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_vpws_service_id(self):
    self.__local_vpws_service_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="local-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_remote_vpws_service_id(self):
    """
    Getter method for remote_vpws_service_id, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/remote_vpws_service_id (uint32)

    YANG Description: Indicates the remote VPWS identifier assigned
to the Attachment Circuit (AC).
    """
    return self.__remote_vpws_service_id
      
  def _set_remote_vpws_service_id(self, v, load=False):
    """
    Setter method for remote_vpws_service_id, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/remote_vpws_service_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_vpws_service_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_vpws_service_id() directly.

    YANG Description: Indicates the remote VPWS identifier assigned
to the Attachment Circuit (AC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="remote-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_vpws_service_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="remote-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__remote_vpws_service_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_vpws_service_id(self):
    self.__remote_vpws_service_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="remote-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)

  evi = __builtin__.property(_get_evi)
  encapsulation_type = __builtin__.property(_get_encapsulation_type)
  service_type = __builtin__.property(_get_service_type)
  multicast_group = __builtin__.property(_get_multicast_group)
  multicast_mask = __builtin__.property(_get_multicast_mask)
  replication_mode = __builtin__.property(_get_replication_mode)
  route_distinguisher = __builtin__.property(_get_route_distinguisher)
  control_word_enabled = __builtin__.property(_get_control_word_enabled)
  local_vpws_service_id = __builtin__.property(_get_local_vpws_service_id)
  remote_vpws_service_id = __builtin__.property(_get_remote_vpws_service_id)


  _pyangbind_elements = OrderedDict([('evi', evi), ('encapsulation_type', encapsulation_type), ('service_type', service_type), ('multicast_group', multicast_group), ('multicast_mask', multicast_mask), ('replication_mode', replication_mode), ('route_distinguisher', route_distinguisher), ('control_word_enabled', control_word_enabled), ('local_vpws_service_id', local_vpws_service_id), ('remote_vpws_service_id', remote_vpws_service_id), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/evpn/evpn-instances/evpn-instance/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: EVPN State parameters for
the participation in an EVPN Intance.
  """
  __slots__ = ('_path_helper', '_extmethods', '__evi','__encapsulation_type','__service_type','__multicast_group','__multicast_mask','__replication_mode','__route_distinguisher','__control_word_enabled','__local_vpws_service_id','__remote_vpws_service_id',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__evi = YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__encapsulation_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="encapsulation-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__service_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="service-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__multicast_group = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    self.__multicast_mask = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    self.__replication_mode = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STATIC_INGRESS_REPLICATION': {}, 'BGP': {}, 'MULTICAST': {}},), is_leaf=True, yang_name="replication-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    self.__route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)
    self.__control_word_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="control-word-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__local_vpws_service_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="local-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__remote_vpws_service_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="remote-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'evpn', 'evpn-instances', 'evpn-instance', 'state']

  def _get_evi(self):
    """
    Getter method for evi, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/evi (string)

    YANG Description: EVPN Instance (EVI) identifier
    """
    return self.__evi
      
  def _set_evi(self, v, load=False):
    """
    Setter method for evi, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/evi (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_evi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_evi() directly.

    YANG Description: EVPN Instance (EVI) identifier
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """evi must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__evi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_evi(self):
    self.__evi = YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_encapsulation_type(self):
    """
    Getter method for encapsulation_type, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/encapsulation_type (identityref)

    YANG Description: The on-the-wire encapsulation that should be used when
exchanging traffic from this network instance to/from
destinations belonging to the EVI. The use of MPLS or
VXLAN is selected using this container.
    """
    return self.__encapsulation_type
      
  def _set_encapsulation_type(self, v, load=False):
    """
    Setter method for encapsulation_type, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/encapsulation_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_encapsulation_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_encapsulation_type() directly.

    YANG Description: The on-the-wire encapsulation that should be used when
exchanging traffic from this network instance to/from
destinations belonging to the EVI. The use of MPLS or
VXLAN is selected using this container.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="encapsulation-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """encapsulation_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="encapsulation-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__encapsulation_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_encapsulation_type(self):
    self.__encapsulation_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="encapsulation-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_service_type(self):
    """
    Getter method for service_type, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/service_type (identityref)

    YANG Description: Specifies the type of EVPN that is being created according
to the values in the EVPN_TYPES identity.
The options are VLAN-based, VLAN-Bundle or VLAN-aware.
VLAN-Based services consists of an EVPN instance of only a
single broadcast domain, the proper network-instance type used
for this kind of services is L2VSI.
    """
    return self.__service_type
      
  def _set_service_type(self, v, load=False):
    """
    Setter method for service_type, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/service_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_type() directly.

    YANG Description: Specifies the type of EVPN that is being created according
to the values in the EVPN_TYPES identity.
The options are VLAN-based, VLAN-Bundle or VLAN-aware.
VLAN-Based services consists of an EVPN instance of only a
single broadcast domain, the proper network-instance type used
for this kind of services is L2VSI.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="service-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="service-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__service_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_type(self):
    self.__service_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="service-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_multicast_group(self):
    """
    Getter method for multicast_group, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/multicast_group (oc-inet:ip-address)

    YANG Description: Multicast group address for BUM traffic
    """
    return self.__multicast_group
      
  def _set_multicast_group(self, v, load=False):
    """
    Setter method for multicast_group, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/multicast_group (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multicast_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multicast_group() directly.

    YANG Description: Multicast group address for BUM traffic
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multicast_group must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__multicast_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multicast_group(self):
    self.__multicast_group = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)


  def _get_multicast_mask(self):
    """
    Getter method for multicast_mask, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/multicast_mask (oc-inet:ip-address)

    YANG Description: Multicast group address mask
    """
    return self.__multicast_mask
      
  def _set_multicast_mask(self, v, load=False):
    """
    Setter method for multicast_mask, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/multicast_mask (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multicast_mask is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multicast_mask() directly.

    YANG Description: Multicast group address mask
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multicast_mask must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__multicast_mask = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multicast_mask(self):
    self.__multicast_mask = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)


  def _get_replication_mode(self):
    """
    Getter method for replication_mode, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/replication_mode (enumeration)

    YANG Description: Replication mode to handle BUM traffic
    """
    return self.__replication_mode
      
  def _set_replication_mode(self, v, load=False):
    """
    Setter method for replication_mode, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/replication_mode (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_replication_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_replication_mode() directly.

    YANG Description: Replication mode to handle BUM traffic
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STATIC_INGRESS_REPLICATION': {}, 'BGP': {}, 'MULTICAST': {}},), is_leaf=True, yang_name="replication-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """replication_mode must be of a type compatible with enumeration""",
          'defined-type': "openconfig-network-instance:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STATIC_INGRESS_REPLICATION': {}, 'BGP': {}, 'MULTICAST': {}},), is_leaf=True, yang_name="replication-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)""",
        })

    self.__replication_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_replication_mode(self):
    self.__replication_mode = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STATIC_INGRESS_REPLICATION': {}, 'BGP': {}, 'MULTICAST': {}},), is_leaf=True, yang_name="replication-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)


  def _get_route_distinguisher(self):
    """
    Getter method for route_distinguisher, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/route_distinguisher (union)

    YANG Description: Route Distinguisher (RD) associated to the EVPN-instance.
An RD MUST be assigned for a given EVPN-instance on a PE.
This RD MUST be unique across all EVPN-instances on a PE.
The route-distinguisher at this level overrides
the route-distinguisher value defined under
network-instance/config.
    """
    return self.__route_distinguisher
      
  def _set_route_distinguisher(self, v, load=False):
    """
    Setter method for route_distinguisher, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/route_distinguisher (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_route_distinguisher is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_route_distinguisher() directly.

    YANG Description: Route Distinguisher (RD) associated to the EVPN-instance.
An RD MUST be assigned for a given EVPN-instance on a PE.
This RD MUST be unique across all EVPN-instances on a PE.
The route-distinguisher at this level overrides
the route-distinguisher value defined under
network-instance/config.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """route_distinguisher must be of a type compatible with union""",
          'defined-type': "openconfig-network-instance:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)""",
        })

    self.__route_distinguisher = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_route_distinguisher(self):
    self.__route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)


  def _get_control_word_enabled(self):
    """
    Getter method for control_word_enabled, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/control_word_enabled (boolean)

    YANG Description: When true, the control word is signaled and sent.
    """
    return self.__control_word_enabled
      
  def _set_control_word_enabled(self, v, load=False):
    """
    Setter method for control_word_enabled, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/control_word_enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_control_word_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_control_word_enabled() directly.

    YANG Description: When true, the control word is signaled and sent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="control-word-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """control_word_enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="control-word-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__control_word_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_control_word_enabled(self):
    self.__control_word_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="control-word-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_local_vpws_service_id(self):
    """
    Getter method for local_vpws_service_id, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/local_vpws_service_id (uint32)

    YANG Description: Indicates the local VPWS identifier assigned
to the Attachment Circuit (AC).
    """
    return self.__local_vpws_service_id
      
  def _set_local_vpws_service_id(self, v, load=False):
    """
    Setter method for local_vpws_service_id, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/local_vpws_service_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_vpws_service_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_vpws_service_id() directly.

    YANG Description: Indicates the local VPWS identifier assigned
to the Attachment Circuit (AC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="local-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_vpws_service_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="local-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__local_vpws_service_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_vpws_service_id(self):
    self.__local_vpws_service_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="local-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_remote_vpws_service_id(self):
    """
    Getter method for remote_vpws_service_id, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/remote_vpws_service_id (uint32)

    YANG Description: Indicates the remote VPWS identifier assigned
to the Attachment Circuit (AC).
    """
    return self.__remote_vpws_service_id
      
  def _set_remote_vpws_service_id(self, v, load=False):
    """
    Setter method for remote_vpws_service_id, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/remote_vpws_service_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_vpws_service_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_vpws_service_id() directly.

    YANG Description: Indicates the remote VPWS identifier assigned
to the Attachment Circuit (AC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="remote-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_vpws_service_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="remote-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__remote_vpws_service_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_vpws_service_id(self):
    self.__remote_vpws_service_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="remote-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)

  evi = __builtin__.property(_get_evi)
  encapsulation_type = __builtin__.property(_get_encapsulation_type)
  service_type = __builtin__.property(_get_service_type)
  multicast_group = __builtin__.property(_get_multicast_group)
  multicast_mask = __builtin__.property(_get_multicast_mask)
  replication_mode = __builtin__.property(_get_replication_mode)
  route_distinguisher = __builtin__.property(_get_route_distinguisher)
  control_word_enabled = __builtin__.property(_get_control_word_enabled)
  local_vpws_service_id = __builtin__.property(_get_local_vpws_service_id)
  remote_vpws_service_id = __builtin__.property(_get_remote_vpws_service_id)


  _pyangbind_elements = OrderedDict([('evi', evi), ('encapsulation_type', encapsulation_type), ('service_type', service_type), ('multicast_group', multicast_group), ('multicast_mask', multicast_mask), ('replication_mode', replication_mode), ('route_distinguisher', route_distinguisher), ('control_word_enabled', control_word_enabled), ('local_vpws_service_id', local_vpws_service_id), ('remote_vpws_service_id', remote_vpws_service_id), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/evpn/evpn-instances/evpn-instance/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: EVPN State parameters for
the participation in an EVPN Intance.
  """
  __slots__ = ('_path_helper', '_extmethods', '__evi','__encapsulation_type','__service_type','__multicast_group','__multicast_mask','__replication_mode','__route_distinguisher','__control_word_enabled','__local_vpws_service_id','__remote_vpws_service_id',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__evi = YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__encapsulation_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="encapsulation-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__service_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="service-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__multicast_group = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    self.__multicast_mask = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    self.__replication_mode = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STATIC_INGRESS_REPLICATION': {}, 'BGP': {}, 'MULTICAST': {}},), is_leaf=True, yang_name="replication-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    self.__route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)
    self.__control_word_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="control-word-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__local_vpws_service_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="local-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__remote_vpws_service_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="remote-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'evpn', 'evpn-instances', 'evpn-instance', 'state']

  def _get_evi(self):
    """
    Getter method for evi, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/evi (string)

    YANG Description: EVPN Instance (EVI) identifier
    """
    return self.__evi
      
  def _set_evi(self, v, load=False):
    """
    Setter method for evi, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/evi (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_evi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_evi() directly.

    YANG Description: EVPN Instance (EVI) identifier
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """evi must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__evi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_evi(self):
    self.__evi = YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_encapsulation_type(self):
    """
    Getter method for encapsulation_type, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/encapsulation_type (identityref)

    YANG Description: The on-the-wire encapsulation that should be used when
exchanging traffic from this network instance to/from
destinations belonging to the EVI. The use of MPLS or
VXLAN is selected using this container.
    """
    return self.__encapsulation_type
      
  def _set_encapsulation_type(self, v, load=False):
    """
    Setter method for encapsulation_type, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/encapsulation_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_encapsulation_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_encapsulation_type() directly.

    YANG Description: The on-the-wire encapsulation that should be used when
exchanging traffic from this network instance to/from
destinations belonging to the EVI. The use of MPLS or
VXLAN is selected using this container.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="encapsulation-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """encapsulation_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="encapsulation-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__encapsulation_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_encapsulation_type(self):
    self.__encapsulation_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="encapsulation-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_service_type(self):
    """
    Getter method for service_type, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/service_type (identityref)

    YANG Description: Specifies the type of EVPN that is being created according
to the values in the EVPN_TYPES identity.
The options are VLAN-based, VLAN-Bundle or VLAN-aware.
VLAN-Based services consists of an EVPN instance of only a
single broadcast domain, the proper network-instance type used
for this kind of services is L2VSI.
    """
    return self.__service_type
      
  def _set_service_type(self, v, load=False):
    """
    Setter method for service_type, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/service_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_type() directly.

    YANG Description: Specifies the type of EVPN that is being created according
to the values in the EVPN_TYPES identity.
The options are VLAN-based, VLAN-Bundle or VLAN-aware.
VLAN-Based services consists of an EVPN instance of only a
single broadcast domain, the proper network-instance type used
for this kind of services is L2VSI.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="service-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="service-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__service_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_type(self):
    self.__service_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="service-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_multicast_group(self):
    """
    Getter method for multicast_group, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/multicast_group (oc-inet:ip-address)

    YANG Description: Multicast group address for BUM traffic
    """
    return self.__multicast_group
      
  def _set_multicast_group(self, v, load=False):
    """
    Setter method for multicast_group, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/multicast_group (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multicast_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multicast_group() directly.

    YANG Description: Multicast group address for BUM traffic
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multicast_group must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__multicast_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multicast_group(self):
    self.__multicast_group = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)


  def _get_multicast_mask(self):
    """
    Getter method for multicast_mask, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/multicast_mask (oc-inet:ip-address)

    YANG Description: Multicast group address mask
    """
    return self.__multicast_mask
      
  def _set_multicast_mask(self, v, load=False):
    """
    Setter method for multicast_mask, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/multicast_mask (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multicast_mask is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multicast_mask() directly.

    YANG Description: Multicast group address mask
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multicast_mask must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__multicast_mask = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multicast_mask(self):
    self.__multicast_mask = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)


  def _get_replication_mode(self):
    """
    Getter method for replication_mode, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/replication_mode (enumeration)

    YANG Description: Replication mode to handle BUM traffic
    """
    return self.__replication_mode
      
  def _set_replication_mode(self, v, load=False):
    """
    Setter method for replication_mode, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/replication_mode (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_replication_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_replication_mode() directly.

    YANG Description: Replication mode to handle BUM traffic
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STATIC_INGRESS_REPLICATION': {}, 'BGP': {}, 'MULTICAST': {}},), is_leaf=True, yang_name="replication-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """replication_mode must be of a type compatible with enumeration""",
          'defined-type': "openconfig-network-instance:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STATIC_INGRESS_REPLICATION': {}, 'BGP': {}, 'MULTICAST': {}},), is_leaf=True, yang_name="replication-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)""",
        })

    self.__replication_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_replication_mode(self):
    self.__replication_mode = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STATIC_INGRESS_REPLICATION': {}, 'BGP': {}, 'MULTICAST': {}},), is_leaf=True, yang_name="replication-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)


  def _get_route_distinguisher(self):
    """
    Getter method for route_distinguisher, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/route_distinguisher (union)

    YANG Description: Route Distinguisher (RD) associated to the EVPN-instance.
An RD MUST be assigned for a given EVPN-instance on a PE.
This RD MUST be unique across all EVPN-instances on a PE.
The route-distinguisher at this level overrides
the route-distinguisher value defined under
network-instance/config.
    """
    return self.__route_distinguisher
      
  def _set_route_distinguisher(self, v, load=False):
    """
    Setter method for route_distinguisher, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/route_distinguisher (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_route_distinguisher is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_route_distinguisher() directly.

    YANG Description: Route Distinguisher (RD) associated to the EVPN-instance.
An RD MUST be assigned for a given EVPN-instance on a PE.
This RD MUST be unique across all EVPN-instances on a PE.
The route-distinguisher at this level overrides
the route-distinguisher value defined under
network-instance/config.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """route_distinguisher must be of a type compatible with union""",
          'defined-type': "openconfig-network-instance:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)""",
        })

    self.__route_distinguisher = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_route_distinguisher(self):
    self.__route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)


  def _get_control_word_enabled(self):
    """
    Getter method for control_word_enabled, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/control_word_enabled (boolean)

    YANG Description: When true, the control word is signaled and sent.
    """
    return self.__control_word_enabled
      
  def _set_control_word_enabled(self, v, load=False):
    """
    Setter method for control_word_enabled, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/control_word_enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_control_word_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_control_word_enabled() directly.

    YANG Description: When true, the control word is signaled and sent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="control-word-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """control_word_enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="control-word-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__control_word_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_control_word_enabled(self):
    self.__control_word_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="control-word-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_local_vpws_service_id(self):
    """
    Getter method for local_vpws_service_id, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/local_vpws_service_id (uint32)

    YANG Description: Indicates the local VPWS identifier assigned
to the Attachment Circuit (AC).
    """
    return self.__local_vpws_service_id
      
  def _set_local_vpws_service_id(self, v, load=False):
    """
    Setter method for local_vpws_service_id, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/local_vpws_service_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_vpws_service_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_vpws_service_id() directly.

    YANG Description: Indicates the local VPWS identifier assigned
to the Attachment Circuit (AC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="local-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_vpws_service_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="local-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__local_vpws_service_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_vpws_service_id(self):
    self.__local_vpws_service_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="local-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_remote_vpws_service_id(self):
    """
    Getter method for remote_vpws_service_id, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/remote_vpws_service_id (uint32)

    YANG Description: Indicates the remote VPWS identifier assigned
to the Attachment Circuit (AC).
    """
    return self.__remote_vpws_service_id
      
  def _set_remote_vpws_service_id(self, v, load=False):
    """
    Setter method for remote_vpws_service_id, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/remote_vpws_service_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_vpws_service_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_vpws_service_id() directly.

    YANG Description: Indicates the remote VPWS identifier assigned
to the Attachment Circuit (AC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="remote-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_vpws_service_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="remote-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__remote_vpws_service_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_vpws_service_id(self):
    self.__remote_vpws_service_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="remote-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)

  evi = __builtin__.property(_get_evi)
  encapsulation_type = __builtin__.property(_get_encapsulation_type)
  service_type = __builtin__.property(_get_service_type)
  multicast_group = __builtin__.property(_get_multicast_group)
  multicast_mask = __builtin__.property(_get_multicast_mask)
  replication_mode = __builtin__.property(_get_replication_mode)
  route_distinguisher = __builtin__.property(_get_route_distinguisher)
  control_word_enabled = __builtin__.property(_get_control_word_enabled)
  local_vpws_service_id = __builtin__.property(_get_local_vpws_service_id)
  remote_vpws_service_id = __builtin__.property(_get_remote_vpws_service_id)


  _pyangbind_elements = OrderedDict([('evi', evi), ('encapsulation_type', encapsulation_type), ('service_type', service_type), ('multicast_group', multicast_group), ('multicast_mask', multicast_mask), ('replication_mode', replication_mode), ('route_distinguisher', route_distinguisher), ('control_word_enabled', control_word_enabled), ('local_vpws_service_id', local_vpws_service_id), ('remote_vpws_service_id', remote_vpws_service_id), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/evpn/evpn-instances/evpn-instance/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: EVPN State parameters for
the participation in an EVPN Intance.
  """
  __slots__ = ('_path_helper', '_extmethods', '__evi','__encapsulation_type','__service_type','__multicast_group','__multicast_mask','__replication_mode','__route_distinguisher','__control_word_enabled','__local_vpws_service_id','__remote_vpws_service_id',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__evi = YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__encapsulation_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="encapsulation-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__service_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="service-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__multicast_group = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    self.__multicast_mask = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    self.__replication_mode = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STATIC_INGRESS_REPLICATION': {}, 'BGP': {}, 'MULTICAST': {}},), is_leaf=True, yang_name="replication-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    self.__route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)
    self.__control_word_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="control-word-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__local_vpws_service_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="local-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__remote_vpws_service_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="remote-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'evpn', 'evpn-instances', 'evpn-instance', 'state']

  def _get_evi(self):
    """
    Getter method for evi, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/evi (string)

    YANG Description: EVPN Instance (EVI) identifier
    """
    return self.__evi
      
  def _set_evi(self, v, load=False):
    """
    Setter method for evi, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/evi (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_evi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_evi() directly.

    YANG Description: EVPN Instance (EVI) identifier
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """evi must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__evi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_evi(self):
    self.__evi = YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_encapsulation_type(self):
    """
    Getter method for encapsulation_type, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/encapsulation_type (identityref)

    YANG Description: The on-the-wire encapsulation that should be used when
exchanging traffic from this network instance to/from
destinations belonging to the EVI. The use of MPLS or
VXLAN is selected using this container.
    """
    return self.__encapsulation_type
      
  def _set_encapsulation_type(self, v, load=False):
    """
    Setter method for encapsulation_type, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/encapsulation_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_encapsulation_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_encapsulation_type() directly.

    YANG Description: The on-the-wire encapsulation that should be used when
exchanging traffic from this network instance to/from
destinations belonging to the EVI. The use of MPLS or
VXLAN is selected using this container.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="encapsulation-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """encapsulation_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="encapsulation-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__encapsulation_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_encapsulation_type(self):
    self.__encapsulation_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:MPLS': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:VXLAN': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="encapsulation-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_service_type(self):
    """
    Getter method for service_type, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/service_type (identityref)

    YANG Description: Specifies the type of EVPN that is being created according
to the values in the EVPN_TYPES identity.
The options are VLAN-based, VLAN-Bundle or VLAN-aware.
VLAN-Based services consists of an EVPN instance of only a
single broadcast domain, the proper network-instance type used
for this kind of services is L2VSI.
    """
    return self.__service_type
      
  def _set_service_type(self, v, load=False):
    """
    Setter method for service_type, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/service_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_type() directly.

    YANG Description: Specifies the type of EVPN that is being created according
to the values in the EVPN_TYPES identity.
The options are VLAN-based, VLAN-Bundle or VLAN-aware.
VLAN-Based services consists of an EVPN instance of only a
single broadcast domain, the proper network-instance type used
for this kind of services is L2VSI.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="service-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="service-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__service_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_type(self):
    self.__service_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BASED': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_BUNDLE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:VLAN_AWARE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="service-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_multicast_group(self):
    """
    Getter method for multicast_group, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/multicast_group (oc-inet:ip-address)

    YANG Description: Multicast group address for BUM traffic
    """
    return self.__multicast_group
      
  def _set_multicast_group(self, v, load=False):
    """
    Setter method for multicast_group, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/multicast_group (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multicast_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multicast_group() directly.

    YANG Description: Multicast group address for BUM traffic
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multicast_group must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__multicast_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multicast_group(self):
    self.__multicast_group = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)


  def _get_multicast_mask(self):
    """
    Getter method for multicast_mask, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/multicast_mask (oc-inet:ip-address)

    YANG Description: Multicast group address mask
    """
    return self.__multicast_mask
      
  def _set_multicast_mask(self, v, load=False):
    """
    Setter method for multicast_mask, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/multicast_mask (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multicast_mask is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multicast_mask() directly.

    YANG Description: Multicast group address mask
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multicast_mask must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__multicast_mask = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multicast_mask(self):
    self.__multicast_mask = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="multicast-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)


  def _get_replication_mode(self):
    """
    Getter method for replication_mode, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/replication_mode (enumeration)

    YANG Description: Replication mode to handle BUM traffic
    """
    return self.__replication_mode
      
  def _set_replication_mode(self, v, load=False):
    """
    Setter method for replication_mode, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/replication_mode (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_replication_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_replication_mode() directly.

    YANG Description: Replication mode to handle BUM traffic
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STATIC_INGRESS_REPLICATION': {}, 'BGP': {}, 'MULTICAST': {}},), is_leaf=True, yang_name="replication-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """replication_mode must be of a type compatible with enumeration""",
          'defined-type': "openconfig-network-instance:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STATIC_INGRESS_REPLICATION': {}, 'BGP': {}, 'MULTICAST': {}},), is_leaf=True, yang_name="replication-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)""",
        })

    self.__replication_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_replication_mode(self):
    self.__replication_mode = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STATIC_INGRESS_REPLICATION': {}, 'BGP': {}, 'MULTICAST': {}},), is_leaf=True, yang_name="replication-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='enumeration', is_config=False)


  def _get_route_distinguisher(self):
    """
    Getter method for route_distinguisher, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/route_distinguisher (union)

    YANG Description: Route Distinguisher (RD) associated to the EVPN-instance.
An RD MUST be assigned for a given EVPN-instance on a PE.
This RD MUST be unique across all EVPN-instances on a PE.
The route-distinguisher at this level overrides
the route-distinguisher value defined under
network-instance/config.
    """
    return self.__route_distinguisher
      
  def _set_route_distinguisher(self, v, load=False):
    """
    Setter method for route_distinguisher, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/route_distinguisher (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_route_distinguisher is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_route_distinguisher() directly.

    YANG Description: Route Distinguisher (RD) associated to the EVPN-instance.
An RD MUST be assigned for a given EVPN-instance on a PE.
This RD MUST be unique across all EVPN-instances on a PE.
The route-distinguisher at this level overrides
the route-distinguisher value defined under
network-instance/config.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """route_distinguisher must be of a type compatible with union""",
          'defined-type': "openconfig-network-instance:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)""",
        })

    self.__route_distinguisher = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_route_distinguisher(self):
    self.__route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)


  def _get_control_word_enabled(self):
    """
    Getter method for control_word_enabled, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/control_word_enabled (boolean)

    YANG Description: When true, the control word is signaled and sent.
    """
    return self.__control_word_enabled
      
  def _set_control_word_enabled(self, v, load=False):
    """
    Setter method for control_word_enabled, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/control_word_enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_control_word_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_control_word_enabled() directly.

    YANG Description: When true, the control word is signaled and sent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="control-word-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """control_word_enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="control-word-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__control_word_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_control_word_enabled(self):
    self.__control_word_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="control-word-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_local_vpws_service_id(self):
    """
    Getter method for local_vpws_service_id, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/local_vpws_service_id (uint32)

    YANG Description: Indicates the local VPWS identifier assigned
to the Attachment Circuit (AC).
    """
    return self.__local_vpws_service_id
      
  def _set_local_vpws_service_id(self, v, load=False):
    """
    Setter method for local_vpws_service_id, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/local_vpws_service_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_vpws_service_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_vpws_service_id() directly.

    YANG Description: Indicates the local VPWS identifier assigned
to the Attachment Circuit (AC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="local-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_vpws_service_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="local-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__local_vpws_service_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_vpws_service_id(self):
    self.__local_vpws_service_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="local-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_remote_vpws_service_id(self):
    """
    Getter method for remote_vpws_service_id, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/remote_vpws_service_id (uint32)

    YANG Description: Indicates the remote VPWS identifier assigned
to the Attachment Circuit (AC).
    """
    return self.__remote_vpws_service_id
      
  def _set_remote_vpws_service_id(self, v, load=False):
    """
    Setter method for remote_vpws_service_id, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state/remote_vpws_service_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_vpws_service_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_vpws_service_id() directly.

    YANG Description: Indicates the remote VPWS identifier assigned
to the Attachment Circuit (AC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="remote-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_vpws_service_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="remote-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__remote_vpws_service_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_vpws_service_id(self):
    self.__remote_vpws_service_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="remote-vpws-service-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)

  evi = __builtin__.property(_get_evi)
  encapsulation_type = __builtin__.property(_get_encapsulation_type)
  service_type = __builtin__.property(_get_service_type)
  multicast_group = __builtin__.property(_get_multicast_group)
  multicast_mask = __builtin__.property(_get_multicast_mask)
  replication_mode = __builtin__.property(_get_replication_mode)
  route_distinguisher = __builtin__.property(_get_route_distinguisher)
  control_word_enabled = __builtin__.property(_get_control_word_enabled)
  local_vpws_service_id = __builtin__.property(_get_local_vpws_service_id)
  remote_vpws_service_id = __builtin__.property(_get_remote_vpws_service_id)


  _pyangbind_elements = OrderedDict([('evi', evi), ('encapsulation_type', encapsulation_type), ('service_type', service_type), ('multicast_group', multicast_group), ('multicast_mask', multicast_mask), ('replication_mode', replication_mode), ('route_distinguisher', route_distinguisher), ('control_word_enabled', control_word_enabled), ('local_vpws_service_id', local_vpws_service_id), ('remote_vpws_service_id', remote_vpws_service_id), ])


