# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to a network
instance
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__type','__description','__router_id','__route_distinguisher','__fallback_network_instance',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    self.__description = YANGDynClass(base=str, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)
    self.__router_id = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}), is_leaf=True, yang_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:dotted-quad', is_config=True)
    self.__route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=True)
    self.__fallback_network_instance = YANGDynClass(base=str, is_leaf=True, yang_name="fallback-network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='network-instance-ref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /network_instances/network_instance/config/name (string)

    YANG Description: An operator-assigned unique name for the network instance.
If the operator does not designate a name for the instance of
type 'DEFAULT_INSTANCE' (e.g. config), the implementation
should use the name of 'DEFAULT' (e.g. state).
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /network_instances/network_instance/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: An operator-assigned unique name for the network instance.
If the operator does not designate a name for the instance of
type 'DEFAULT_INSTANCE' (e.g. config), the implementation
should use the name of 'DEFAULT' (e.g. state).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /network_instances/network_instance/config/type (identityref)

    YANG Description: The type of network instance. The value of this leaf
indicates the type of forwarding entries that should be
supported by this network instance. Signalling protocols also
use the network instance type to infer the type of service
they advertise; for example MPLS signalling for an L2VSI
network instance would infer a VPLS service whereas a type of
L2PTP would infer a VPWS (pseudo-wire) service.

An implementation must support only a single network-instance
of type 'DEFAULT_INSTANCE'.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /network_instances/network_instance/config/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: The type of network instance. The value of this leaf
indicates the type of forwarding entries that should be
supported by this network instance. Signalling protocols also
use the network instance type to infer the type of service
they advertise; for example MPLS signalling for an L2VSI
network instance would infer a VPLS service whereas a type of
L2PTP would infer a VPWS (pseudo-wire) service.

An implementation must support only a single network-instance
of type 'DEFAULT_INSTANCE'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /network_instances/network_instance/config/description (string)

    YANG Description: A free-form string to be used by the network operator to
describe the function of this network instance
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /network_instances/network_instance/config/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: A free-form string to be used by the network operator to
describe the function of this network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=str, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)


  def _get_router_id(self):
    """
    Getter method for router_id, mapped from YANG variable /network_instances/network_instance/config/router_id (oc-yang:dotted-quad)

    YANG Description: A identifier for the local network instance - typically
used within associated routing protocols or signalling
routing information in another network instance
    """
    return self.__router_id
      
  def _set_router_id(self, v, load=False):
    """
    Setter method for router_id, mapped from YANG variable /network_instances/network_instance/config/router_id (oc-yang:dotted-quad)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_router_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_router_id() directly.

    YANG Description: A identifier for the local network instance - typically
used within associated routing protocols or signalling
routing information in another network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}), is_leaf=True, yang_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:dotted-quad', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """router_id must be of a type compatible with oc-yang:dotted-quad""",
          'defined-type': "oc-yang:dotted-quad",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}), is_leaf=True, yang_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:dotted-quad', is_config=True)""",
        })

    self.__router_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_router_id(self):
    self.__router_id = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}), is_leaf=True, yang_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:dotted-quad', is_config=True)


  def _get_route_distinguisher(self):
    """
    Getter method for route_distinguisher, mapped from YANG variable /network_instances/network_instance/config/route_distinguisher (oc-ni-types:route-distinguisher)

    YANG Description: The route distinguisher that should be used for the local
VRF or VSI instance when it is signalled via BGP.
    """
    return self.__route_distinguisher
      
  def _set_route_distinguisher(self, v, load=False):
    """
    Setter method for route_distinguisher, mapped from YANG variable /network_instances/network_instance/config/route_distinguisher (oc-ni-types:route-distinguisher)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_route_distinguisher is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_route_distinguisher() directly.

    YANG Description: The route distinguisher that should be used for the local
VRF or VSI instance when it is signalled via BGP.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """route_distinguisher must be of a type compatible with oc-ni-types:route-distinguisher""",
          'defined-type': "oc-ni-types:route-distinguisher",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=True)""",
        })

    self.__route_distinguisher = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_route_distinguisher(self):
    self.__route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=True)


  def _get_fallback_network_instance(self):
    """
    Getter method for fallback_network_instance, mapped from YANG variable /network_instances/network_instance/config/fallback_network_instance (network-instance-ref)

    YANG Description: When this leaf is populated, the specified network instance
should be used as a fallback instance when a route cannot
be resolved in the local network-instance.
This configuration is only valid when specified in a non-default
instance which must be a L3 capable VRF (i.e., L2L3, or L3VRF).
    """
    return self.__fallback_network_instance
      
  def _set_fallback_network_instance(self, v, load=False):
    """
    Setter method for fallback_network_instance, mapped from YANG variable /network_instances/network_instance/config/fallback_network_instance (network-instance-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fallback_network_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fallback_network_instance() directly.

    YANG Description: When this leaf is populated, the specified network instance
should be used as a fallback instance when a route cannot
be resolved in the local network-instance.
This configuration is only valid when specified in a non-default
instance which must be a L3 capable VRF (i.e., L2L3, or L3VRF).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="fallback-network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='network-instance-ref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fallback_network_instance must be of a type compatible with network-instance-ref""",
          'defined-type': "openconfig-network-instance:network-instance-ref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="fallback-network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='network-instance-ref', is_config=True)""",
        })

    self.__fallback_network_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fallback_network_instance(self):
    self.__fallback_network_instance = YANGDynClass(base=str, is_leaf=True, yang_name="fallback-network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='network-instance-ref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  type = __builtin__.property(_get_type, _set_type)
  description = __builtin__.property(_get_description, _set_description)
  router_id = __builtin__.property(_get_router_id, _set_router_id)
  route_distinguisher = __builtin__.property(_get_route_distinguisher, _set_route_distinguisher)
  fallback_network_instance = __builtin__.property(_get_fallback_network_instance, _set_fallback_network_instance)


  _pyangbind_elements = OrderedDict([('name', name), ('type', type), ('description', description), ('router_id', router_id), ('route_distinguisher', route_distinguisher), ('fallback_network_instance', fallback_network_instance), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to a network
instance
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__type','__description','__router_id','__route_distinguisher','__fallback_network_instance',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    self.__description = YANGDynClass(base=str, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)
    self.__router_id = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}), is_leaf=True, yang_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:dotted-quad', is_config=True)
    self.__route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=True)
    self.__fallback_network_instance = YANGDynClass(base=str, is_leaf=True, yang_name="fallback-network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='network-instance-ref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /network_instances/network_instance/config/name (string)

    YANG Description: An operator-assigned unique name for the network instance.
If the operator does not designate a name for the instance of
type 'DEFAULT_INSTANCE' (e.g. config), the implementation
should use the name of 'DEFAULT' (e.g. state).
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /network_instances/network_instance/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: An operator-assigned unique name for the network instance.
If the operator does not designate a name for the instance of
type 'DEFAULT_INSTANCE' (e.g. config), the implementation
should use the name of 'DEFAULT' (e.g. state).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /network_instances/network_instance/config/type (identityref)

    YANG Description: The type of network instance. The value of this leaf
indicates the type of forwarding entries that should be
supported by this network instance. Signalling protocols also
use the network instance type to infer the type of service
they advertise; for example MPLS signalling for an L2VSI
network instance would infer a VPLS service whereas a type of
L2PTP would infer a VPWS (pseudo-wire) service.

An implementation must support only a single network-instance
of type 'DEFAULT_INSTANCE'.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /network_instances/network_instance/config/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: The type of network instance. The value of this leaf
indicates the type of forwarding entries that should be
supported by this network instance. Signalling protocols also
use the network instance type to infer the type of service
they advertise; for example MPLS signalling for an L2VSI
network instance would infer a VPLS service whereas a type of
L2PTP would infer a VPWS (pseudo-wire) service.

An implementation must support only a single network-instance
of type 'DEFAULT_INSTANCE'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /network_instances/network_instance/config/description (string)

    YANG Description: A free-form string to be used by the network operator to
describe the function of this network instance
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /network_instances/network_instance/config/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: A free-form string to be used by the network operator to
describe the function of this network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=str, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)


  def _get_router_id(self):
    """
    Getter method for router_id, mapped from YANG variable /network_instances/network_instance/config/router_id (oc-yang:dotted-quad)

    YANG Description: A identifier for the local network instance - typically
used within associated routing protocols or signalling
routing information in another network instance
    """
    return self.__router_id
      
  def _set_router_id(self, v, load=False):
    """
    Setter method for router_id, mapped from YANG variable /network_instances/network_instance/config/router_id (oc-yang:dotted-quad)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_router_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_router_id() directly.

    YANG Description: A identifier for the local network instance - typically
used within associated routing protocols or signalling
routing information in another network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}), is_leaf=True, yang_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:dotted-quad', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """router_id must be of a type compatible with oc-yang:dotted-quad""",
          'defined-type': "oc-yang:dotted-quad",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}), is_leaf=True, yang_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:dotted-quad', is_config=True)""",
        })

    self.__router_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_router_id(self):
    self.__router_id = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}), is_leaf=True, yang_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:dotted-quad', is_config=True)


  def _get_route_distinguisher(self):
    """
    Getter method for route_distinguisher, mapped from YANG variable /network_instances/network_instance/config/route_distinguisher (oc-ni-types:route-distinguisher)

    YANG Description: The route distinguisher that should be used for the local
VRF or VSI instance when it is signalled via BGP.
    """
    return self.__route_distinguisher
      
  def _set_route_distinguisher(self, v, load=False):
    """
    Setter method for route_distinguisher, mapped from YANG variable /network_instances/network_instance/config/route_distinguisher (oc-ni-types:route-distinguisher)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_route_distinguisher is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_route_distinguisher() directly.

    YANG Description: The route distinguisher that should be used for the local
VRF or VSI instance when it is signalled via BGP.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """route_distinguisher must be of a type compatible with oc-ni-types:route-distinguisher""",
          'defined-type': "oc-ni-types:route-distinguisher",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=True)""",
        })

    self.__route_distinguisher = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_route_distinguisher(self):
    self.__route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=True)


  def _get_fallback_network_instance(self):
    """
    Getter method for fallback_network_instance, mapped from YANG variable /network_instances/network_instance/config/fallback_network_instance (network-instance-ref)

    YANG Description: When this leaf is populated, the specified network instance
should be used as a fallback instance when a route cannot
be resolved in the local network-instance.
This configuration is only valid when specified in a non-default
instance which must be a L3 capable VRF (i.e., L2L3, or L3VRF).
    """
    return self.__fallback_network_instance
      
  def _set_fallback_network_instance(self, v, load=False):
    """
    Setter method for fallback_network_instance, mapped from YANG variable /network_instances/network_instance/config/fallback_network_instance (network-instance-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fallback_network_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fallback_network_instance() directly.

    YANG Description: When this leaf is populated, the specified network instance
should be used as a fallback instance when a route cannot
be resolved in the local network-instance.
This configuration is only valid when specified in a non-default
instance which must be a L3 capable VRF (i.e., L2L3, or L3VRF).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="fallback-network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='network-instance-ref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fallback_network_instance must be of a type compatible with network-instance-ref""",
          'defined-type': "openconfig-network-instance:network-instance-ref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="fallback-network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='network-instance-ref', is_config=True)""",
        })

    self.__fallback_network_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fallback_network_instance(self):
    self.__fallback_network_instance = YANGDynClass(base=str, is_leaf=True, yang_name="fallback-network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='network-instance-ref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  type = __builtin__.property(_get_type, _set_type)
  description = __builtin__.property(_get_description, _set_description)
  router_id = __builtin__.property(_get_router_id, _set_router_id)
  route_distinguisher = __builtin__.property(_get_route_distinguisher, _set_route_distinguisher)
  fallback_network_instance = __builtin__.property(_get_fallback_network_instance, _set_fallback_network_instance)


  _pyangbind_elements = OrderedDict([('name', name), ('type', type), ('description', description), ('router_id', router_id), ('route_distinguisher', route_distinguisher), ('fallback_network_instance', fallback_network_instance), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to a network
instance
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__type','__description','__router_id','__route_distinguisher','__fallback_network_instance',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    self.__description = YANGDynClass(base=str, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)
    self.__router_id = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}), is_leaf=True, yang_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:dotted-quad', is_config=True)
    self.__route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=True)
    self.__fallback_network_instance = YANGDynClass(base=str, is_leaf=True, yang_name="fallback-network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='network-instance-ref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /network_instances/network_instance/config/name (string)

    YANG Description: An operator-assigned unique name for the network instance.
If the operator does not designate a name for the instance of
type 'DEFAULT_INSTANCE' (e.g. config), the implementation
should use the name of 'DEFAULT' (e.g. state).
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /network_instances/network_instance/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: An operator-assigned unique name for the network instance.
If the operator does not designate a name for the instance of
type 'DEFAULT_INSTANCE' (e.g. config), the implementation
should use the name of 'DEFAULT' (e.g. state).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /network_instances/network_instance/config/type (identityref)

    YANG Description: The type of network instance. The value of this leaf
indicates the type of forwarding entries that should be
supported by this network instance. Signalling protocols also
use the network instance type to infer the type of service
they advertise; for example MPLS signalling for an L2VSI
network instance would infer a VPLS service whereas a type of
L2PTP would infer a VPWS (pseudo-wire) service.

An implementation must support only a single network-instance
of type 'DEFAULT_INSTANCE'.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /network_instances/network_instance/config/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: The type of network instance. The value of this leaf
indicates the type of forwarding entries that should be
supported by this network instance. Signalling protocols also
use the network instance type to infer the type of service
they advertise; for example MPLS signalling for an L2VSI
network instance would infer a VPLS service whereas a type of
L2PTP would infer a VPWS (pseudo-wire) service.

An implementation must support only a single network-instance
of type 'DEFAULT_INSTANCE'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /network_instances/network_instance/config/description (string)

    YANG Description: A free-form string to be used by the network operator to
describe the function of this network instance
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /network_instances/network_instance/config/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: A free-form string to be used by the network operator to
describe the function of this network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=str, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)


  def _get_router_id(self):
    """
    Getter method for router_id, mapped from YANG variable /network_instances/network_instance/config/router_id (oc-yang:dotted-quad)

    YANG Description: A identifier for the local network instance - typically
used within associated routing protocols or signalling
routing information in another network instance
    """
    return self.__router_id
      
  def _set_router_id(self, v, load=False):
    """
    Setter method for router_id, mapped from YANG variable /network_instances/network_instance/config/router_id (oc-yang:dotted-quad)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_router_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_router_id() directly.

    YANG Description: A identifier for the local network instance - typically
used within associated routing protocols or signalling
routing information in another network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}), is_leaf=True, yang_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:dotted-quad', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """router_id must be of a type compatible with oc-yang:dotted-quad""",
          'defined-type': "oc-yang:dotted-quad",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}), is_leaf=True, yang_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:dotted-quad', is_config=True)""",
        })

    self.__router_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_router_id(self):
    self.__router_id = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}), is_leaf=True, yang_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:dotted-quad', is_config=True)


  def _get_route_distinguisher(self):
    """
    Getter method for route_distinguisher, mapped from YANG variable /network_instances/network_instance/config/route_distinguisher (oc-ni-types:route-distinguisher)

    YANG Description: The route distinguisher that should be used for the local
VRF or VSI instance when it is signalled via BGP.
    """
    return self.__route_distinguisher
      
  def _set_route_distinguisher(self, v, load=False):
    """
    Setter method for route_distinguisher, mapped from YANG variable /network_instances/network_instance/config/route_distinguisher (oc-ni-types:route-distinguisher)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_route_distinguisher is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_route_distinguisher() directly.

    YANG Description: The route distinguisher that should be used for the local
VRF or VSI instance when it is signalled via BGP.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """route_distinguisher must be of a type compatible with oc-ni-types:route-distinguisher""",
          'defined-type': "oc-ni-types:route-distinguisher",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=True)""",
        })

    self.__route_distinguisher = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_route_distinguisher(self):
    self.__route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=True)


  def _get_fallback_network_instance(self):
    """
    Getter method for fallback_network_instance, mapped from YANG variable /network_instances/network_instance/config/fallback_network_instance (network-instance-ref)

    YANG Description: When this leaf is populated, the specified network instance
should be used as a fallback instance when a route cannot
be resolved in the local network-instance.
This configuration is only valid when specified in a non-default
instance which must be a L3 capable VRF (i.e., L2L3, or L3VRF).
    """
    return self.__fallback_network_instance
      
  def _set_fallback_network_instance(self, v, load=False):
    """
    Setter method for fallback_network_instance, mapped from YANG variable /network_instances/network_instance/config/fallback_network_instance (network-instance-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fallback_network_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fallback_network_instance() directly.

    YANG Description: When this leaf is populated, the specified network instance
should be used as a fallback instance when a route cannot
be resolved in the local network-instance.
This configuration is only valid when specified in a non-default
instance which must be a L3 capable VRF (i.e., L2L3, or L3VRF).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="fallback-network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='network-instance-ref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fallback_network_instance must be of a type compatible with network-instance-ref""",
          'defined-type': "openconfig-network-instance:network-instance-ref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="fallback-network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='network-instance-ref', is_config=True)""",
        })

    self.__fallback_network_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fallback_network_instance(self):
    self.__fallback_network_instance = YANGDynClass(base=str, is_leaf=True, yang_name="fallback-network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='network-instance-ref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  type = __builtin__.property(_get_type, _set_type)
  description = __builtin__.property(_get_description, _set_description)
  router_id = __builtin__.property(_get_router_id, _set_router_id)
  route_distinguisher = __builtin__.property(_get_route_distinguisher, _set_route_distinguisher)
  fallback_network_instance = __builtin__.property(_get_fallback_network_instance, _set_fallback_network_instance)


  _pyangbind_elements = OrderedDict([('name', name), ('type', type), ('description', description), ('router_id', router_id), ('route_distinguisher', route_distinguisher), ('fallback_network_instance', fallback_network_instance), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to a network
instance
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__type','__description','__router_id','__route_distinguisher','__fallback_network_instance',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    self.__description = YANGDynClass(base=str, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)
    self.__router_id = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}), is_leaf=True, yang_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:dotted-quad', is_config=True)
    self.__route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=True)
    self.__fallback_network_instance = YANGDynClass(base=str, is_leaf=True, yang_name="fallback-network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='network-instance-ref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /network_instances/network_instance/config/name (string)

    YANG Description: An operator-assigned unique name for the network instance.
If the operator does not designate a name for the instance of
type 'DEFAULT_INSTANCE' (e.g. config), the implementation
should use the name of 'DEFAULT' (e.g. state).
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /network_instances/network_instance/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: An operator-assigned unique name for the network instance.
If the operator does not designate a name for the instance of
type 'DEFAULT_INSTANCE' (e.g. config), the implementation
should use the name of 'DEFAULT' (e.g. state).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /network_instances/network_instance/config/type (identityref)

    YANG Description: The type of network instance. The value of this leaf
indicates the type of forwarding entries that should be
supported by this network instance. Signalling protocols also
use the network instance type to infer the type of service
they advertise; for example MPLS signalling for an L2VSI
network instance would infer a VPLS service whereas a type of
L2PTP would infer a VPWS (pseudo-wire) service.

An implementation must support only a single network-instance
of type 'DEFAULT_INSTANCE'.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /network_instances/network_instance/config/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: The type of network instance. The value of this leaf
indicates the type of forwarding entries that should be
supported by this network instance. Signalling protocols also
use the network instance type to infer the type of service
they advertise; for example MPLS signalling for an L2VSI
network instance would infer a VPLS service whereas a type of
L2PTP would infer a VPWS (pseudo-wire) service.

An implementation must support only a single network-instance
of type 'DEFAULT_INSTANCE'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:DEFAULT_INSTANCE': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L3VRF': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2VSI': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2P2P': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'openconfig-network-instance-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}, 'oc-ni-types:L2L3': {'@module': 'openconfig-network-instance-types', '@namespace': 'http://openconfig.net/yang/network-instance-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /network_instances/network_instance/config/description (string)

    YANG Description: A free-form string to be used by the network operator to
describe the function of this network instance
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /network_instances/network_instance/config/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: A free-form string to be used by the network operator to
describe the function of this network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=str, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=True)


  def _get_router_id(self):
    """
    Getter method for router_id, mapped from YANG variable /network_instances/network_instance/config/router_id (oc-yang:dotted-quad)

    YANG Description: A identifier for the local network instance - typically
used within associated routing protocols or signalling
routing information in another network instance
    """
    return self.__router_id
      
  def _set_router_id(self, v, load=False):
    """
    Setter method for router_id, mapped from YANG variable /network_instances/network_instance/config/router_id (oc-yang:dotted-quad)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_router_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_router_id() directly.

    YANG Description: A identifier for the local network instance - typically
used within associated routing protocols or signalling
routing information in another network instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}), is_leaf=True, yang_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:dotted-quad', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """router_id must be of a type compatible with oc-yang:dotted-quad""",
          'defined-type': "oc-yang:dotted-quad",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}), is_leaf=True, yang_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:dotted-quad', is_config=True)""",
        })

    self.__router_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_router_id(self):
    self.__router_id = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}), is_leaf=True, yang_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:dotted-quad', is_config=True)


  def _get_route_distinguisher(self):
    """
    Getter method for route_distinguisher, mapped from YANG variable /network_instances/network_instance/config/route_distinguisher (oc-ni-types:route-distinguisher)

    YANG Description: The route distinguisher that should be used for the local
VRF or VSI instance when it is signalled via BGP.
    """
    return self.__route_distinguisher
      
  def _set_route_distinguisher(self, v, load=False):
    """
    Setter method for route_distinguisher, mapped from YANG variable /network_instances/network_instance/config/route_distinguisher (oc-ni-types:route-distinguisher)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_route_distinguisher is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_route_distinguisher() directly.

    YANG Description: The route distinguisher that should be used for the local
VRF or VSI instance when it is signalled via BGP.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """route_distinguisher must be of a type compatible with oc-ni-types:route-distinguisher""",
          'defined-type': "oc-ni-types:route-distinguisher",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=True)""",
        })

    self.__route_distinguisher = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_route_distinguisher(self):
    self.__route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=True)


  def _get_fallback_network_instance(self):
    """
    Getter method for fallback_network_instance, mapped from YANG variable /network_instances/network_instance/config/fallback_network_instance (network-instance-ref)

    YANG Description: When this leaf is populated, the specified network instance
should be used as a fallback instance when a route cannot
be resolved in the local network-instance.
This configuration is only valid when specified in a non-default
instance which must be a L3 capable VRF (i.e., L2L3, or L3VRF).
    """
    return self.__fallback_network_instance
      
  def _set_fallback_network_instance(self, v, load=False):
    """
    Setter method for fallback_network_instance, mapped from YANG variable /network_instances/network_instance/config/fallback_network_instance (network-instance-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fallback_network_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fallback_network_instance() directly.

    YANG Description: When this leaf is populated, the specified network instance
should be used as a fallback instance when a route cannot
be resolved in the local network-instance.
This configuration is only valid when specified in a non-default
instance which must be a L3 capable VRF (i.e., L2L3, or L3VRF).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="fallback-network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='network-instance-ref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fallback_network_instance must be of a type compatible with network-instance-ref""",
          'defined-type': "openconfig-network-instance:network-instance-ref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="fallback-network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='network-instance-ref', is_config=True)""",
        })

    self.__fallback_network_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fallback_network_instance(self):
    self.__fallback_network_instance = YANGDynClass(base=str, is_leaf=True, yang_name="fallback-network-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='network-instance-ref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  type = __builtin__.property(_get_type, _set_type)
  description = __builtin__.property(_get_description, _set_description)
  router_id = __builtin__.property(_get_router_id, _set_router_id)
  route_distinguisher = __builtin__.property(_get_route_distinguisher, _set_route_distinguisher)
  fallback_network_instance = __builtin__.property(_get_fallback_network_instance, _set_fallback_network_instance)


  _pyangbind_elements = OrderedDict([('name', name), ('type', type), ('description', description), ('router_id', router_id), ('route_distinguisher', route_distinguisher), ('fallback_network_instance', fallback_network_instance), ])


