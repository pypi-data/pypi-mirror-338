# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-three-inclusive-multicast-ethernet-tag/type-three-route/paths/path/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: BGP path attributes for this route
  """
  __slots__ = ('_path_helper', '_extmethods', '__peer_ip','__peer_path_id','__source_route_distinguisher','__source_address_family','__advertised_to_peer','__label','__label2','__bestpath','__multipath','__backup','__last_modified','__valid_route','__invalid_reason','__attr_index','__community_index','__ext_community_index',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__peer_ip = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    self.__peer_path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__source_route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=False)
    self.__source_address_family = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}},), is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__advertised_to_peer = YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),]), is_leaf=False, yang_name="advertised-to-peer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    self.__label = YANGDynClass(base=str, is_leaf=True, yang_name="label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__label2 = YANGDynClass(base=str, is_leaf=True, yang_name="label2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__bestpath = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bestpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__multipath = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="multipath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__backup = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="backup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__attr_index = YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__community_index = YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__ext_community_index = YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'bgp', 'rib', 'afi-safis', 'afi-safi', 'l2vpn-evpn', 'loc-rib', 'routes', 'route-distinguisher', 'type-three-inclusive-multicast-ethernet-tag', 'type-three-route', 'paths', 'path', 'state']

  def _get_peer_ip(self):
    """
    Getter method for peer_ip, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/peer_ip (oc-inet:ip-address)

    YANG Description: The source peer ip address of the imported route
    """
    return self.__peer_ip
      
  def _set_peer_ip(self, v, load=False):
    """
    Setter method for peer_ip, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/peer_ip (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_ip() directly.

    YANG Description: The source peer ip address of the imported route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_ip must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__peer_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_ip(self):
    self.__peer_ip = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)


  def _get_peer_path_id(self):
    """
    Getter method for peer_path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/peer_path_id (uint32)

    YANG Description: The source peer path id of the imported route
    """
    return self.__peer_path_id
      
  def _set_peer_path_id(self, v, load=False):
    """
    Setter method for peer_path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/peer_path_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_path_id() directly.

    YANG Description: The source peer path id of the imported route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_path_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__peer_path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_path_id(self):
    self.__peer_path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_source_route_distinguisher(self):
    """
    Getter method for source_route_distinguisher, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/source_route_distinguisher (oc-ni-types:route-distinguisher)

    YANG Description: The source route distinguisher is the remote RD source of the
imported route
    """
    return self.__source_route_distinguisher
      
  def _set_source_route_distinguisher(self, v, load=False):
    """
    Setter method for source_route_distinguisher, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/source_route_distinguisher (oc-ni-types:route-distinguisher)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_route_distinguisher is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_route_distinguisher() directly.

    YANG Description: The source route distinguisher is the remote RD source of the
imported route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_route_distinguisher must be of a type compatible with oc-ni-types:route-distinguisher""",
          'defined-type': "oc-ni-types:route-distinguisher",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=False)""",
        })

    self.__source_route_distinguisher = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_route_distinguisher(self):
    self.__source_route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=False)


  def _get_source_address_family(self):
    """
    Getter method for source_address_family, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/source_address_family (identityref)

    YANG Description: The source address-family of the imported route
    """
    return self.__source_address_family
      
  def _set_source_address_family(self, v, load=False):
    """
    Setter method for source_address_family, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/source_address_family (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_address_family is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_address_family() directly.

    YANG Description: The source address-family of the imported route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}},), is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_address_family must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}},), is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__source_address_family = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_address_family(self):
    self.__source_address_family = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}},), is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_advertised_to_peer(self):
    """
    Getter method for advertised_to_peer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/advertised_to_peer (oc-inet:ip-address)

    YANG Description: List of peers to which this path is advertised
    """
    return self.__advertised_to_peer
      
  def _set_advertised_to_peer(self, v, load=False):
    """
    Setter method for advertised_to_peer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/advertised_to_peer (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_advertised_to_peer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_advertised_to_peer() directly.

    YANG Description: List of peers to which this path is advertised
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),]), is_leaf=False, yang_name="advertised-to-peer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """advertised_to_peer must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),]), is_leaf=False, yang_name="advertised-to-peer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__advertised_to_peer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_advertised_to_peer(self):
    self.__advertised_to_peer = YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),]), is_leaf=False, yang_name="advertised-to-peer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)


  def _get_label(self):
    """
    Getter method for label, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/label (string)

    YANG Description: MPLS Label field used for route attributes
    """
    return self.__label
      
  def _set_label(self, v, load=False):
    """
    Setter method for label, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/label (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_label() directly.

    YANG Description: MPLS Label field used for route attributes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """label must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_label(self):
    self.__label = YANGDynClass(base=str, is_leaf=True, yang_name="label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_label2(self):
    """
    Getter method for label2, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/label2 (string)

    YANG Description: MPLS Label2 field used for route attributes
    """
    return self.__label2
      
  def _set_label2(self, v, load=False):
    """
    Setter method for label2, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/label2 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_label2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_label2() directly.

    YANG Description: MPLS Label2 field used for route attributes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="label2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """label2 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="label2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__label2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_label2(self):
    self.__label2 = YANGDynClass(base=str, is_leaf=True, yang_name="label2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_bestpath(self):
    """
    Getter method for bestpath, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/bestpath (boolean)

    YANG Description: BGP can receive multiple paths to the same destination. This
parameter indicates that this path is the bestpath to install
in the IP routing table and use for traffic forwarding
    """
    return self.__bestpath
      
  def _set_bestpath(self, v, load=False):
    """
    Setter method for bestpath, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/bestpath (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bestpath is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bestpath() directly.

    YANG Description: BGP can receive multiple paths to the same destination. This
parameter indicates that this path is the bestpath to install
in the IP routing table and use for traffic forwarding
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="bestpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bestpath must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bestpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__bestpath = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bestpath(self):
    self.__bestpath = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bestpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_multipath(self):
    """
    Getter method for multipath, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/multipath (boolean)

    YANG Description: BGP can use multiple paths to reach a destination allowing
BGP to load-balance traffic. This parameter indicates that this
path is marked as multipath
    """
    return self.__multipath
      
  def _set_multipath(self, v, load=False):
    """
    Setter method for multipath, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/multipath (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multipath is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multipath() directly.

    YANG Description: BGP can use multiple paths to reach a destination allowing
BGP to load-balance traffic. This parameter indicates that this
path is marked as multipath
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="multipath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multipath must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="multipath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__multipath = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multipath(self):
    self.__multipath = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="multipath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_backup(self):
    """
    Getter method for backup, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/backup (boolean)

    YANG Description: BGP path marked as a backup path
    """
    return self.__backup
      
  def _set_backup(self, v, load=False):
    """
    Setter method for backup, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/backup (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup() directly.

    YANG Description: BGP path marked as a backup path
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="backup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="backup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__backup = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup(self):
    self.__backup = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="backup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_last_modified(self):
    """
    Getter method for last_modified, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/last_modified (oc-types:timeticks64)

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_modified
      
  def _set_last_modified(self, v, load=False):
    """
    Setter method for last_modified, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/last_modified (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_modified is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_modified() directly.

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_modified must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_modified = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_modified(self):
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)


  def _get_valid_route(self):
    """
    Getter method for valid_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/valid_route (boolean)

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    return self.__valid_route
      
  def _set_valid_route(self, v, load=False):
    """
    Setter method for valid_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/valid_route (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_valid_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_valid_route() directly.

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """valid_route must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__valid_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_valid_route(self):
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_invalid_reason(self):
    """
    Getter method for invalid_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/invalid_reason (identityref)

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    return self.__invalid_reason
      
  def _set_invalid_reason(self, v, load=False):
    """
    Setter method for invalid_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/invalid_reason (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_reason() directly.

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_reason must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__invalid_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_reason(self):
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_attr_index(self):
    """
    Getter method for attr_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/attr_index (leafref)

    YANG Description: Reference to the common attribute group for the
route
    """
    return self.__attr_index
      
  def _set_attr_index(self, v, load=False):
    """
    Setter method for attr_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/attr_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_index() directly.

    YANG Description: Reference to the common attribute group for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__attr_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_index(self):
    self.__attr_index = YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_community_index(self):
    """
    Getter method for community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/community_index (leafref)

    YANG Description: Reference to the community attribute for the route
    """
    return self.__community_index
      
  def _set_community_index(self, v, load=False):
    """
    Setter method for community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community_index() directly.

    YANG Description: Reference to the community attribute for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community_index(self):
    self.__community_index = YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_ext_community_index(self):
    """
    Getter method for ext_community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/ext_community_index (leafref)

    YANG Description: Reference to the extended community attribute for the
route
    """
    return self.__ext_community_index
      
  def _set_ext_community_index(self, v, load=False):
    """
    Setter method for ext_community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/ext_community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_community_index() directly.

    YANG Description: Reference to the extended community attribute for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__ext_community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_community_index(self):
    self.__ext_community_index = YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)

  peer_ip = __builtin__.property(_get_peer_ip)
  peer_path_id = __builtin__.property(_get_peer_path_id)
  source_route_distinguisher = __builtin__.property(_get_source_route_distinguisher)
  source_address_family = __builtin__.property(_get_source_address_family)
  advertised_to_peer = __builtin__.property(_get_advertised_to_peer)
  label = __builtin__.property(_get_label)
  label2 = __builtin__.property(_get_label2)
  bestpath = __builtin__.property(_get_bestpath)
  multipath = __builtin__.property(_get_multipath)
  backup = __builtin__.property(_get_backup)
  last_modified = __builtin__.property(_get_last_modified)
  valid_route = __builtin__.property(_get_valid_route)
  invalid_reason = __builtin__.property(_get_invalid_reason)
  attr_index = __builtin__.property(_get_attr_index)
  community_index = __builtin__.property(_get_community_index)
  ext_community_index = __builtin__.property(_get_ext_community_index)


  _pyangbind_elements = OrderedDict([('peer_ip', peer_ip), ('peer_path_id', peer_path_id), ('source_route_distinguisher', source_route_distinguisher), ('source_address_family', source_address_family), ('advertised_to_peer', advertised_to_peer), ('label', label), ('label2', label2), ('bestpath', bestpath), ('multipath', multipath), ('backup', backup), ('last_modified', last_modified), ('valid_route', valid_route), ('invalid_reason', invalid_reason), ('attr_index', attr_index), ('community_index', community_index), ('ext_community_index', ext_community_index), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-three-inclusive-multicast-ethernet-tag/type-three-route/paths/path/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: BGP path attributes for this route
  """
  __slots__ = ('_path_helper', '_extmethods', '__peer_ip','__peer_path_id','__source_route_distinguisher','__source_address_family','__advertised_to_peer','__label','__label2','__bestpath','__multipath','__backup','__last_modified','__valid_route','__invalid_reason','__attr_index','__community_index','__ext_community_index',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__peer_ip = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    self.__peer_path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__source_route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=False)
    self.__source_address_family = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}},), is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__advertised_to_peer = YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),]), is_leaf=False, yang_name="advertised-to-peer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    self.__label = YANGDynClass(base=str, is_leaf=True, yang_name="label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__label2 = YANGDynClass(base=str, is_leaf=True, yang_name="label2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__bestpath = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bestpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__multipath = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="multipath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__backup = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="backup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__attr_index = YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__community_index = YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__ext_community_index = YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'bgp', 'rib', 'afi-safis', 'afi-safi', 'l2vpn-evpn', 'loc-rib', 'routes', 'route-distinguisher', 'type-three-inclusive-multicast-ethernet-tag', 'type-three-route', 'paths', 'path', 'state']

  def _get_peer_ip(self):
    """
    Getter method for peer_ip, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/peer_ip (oc-inet:ip-address)

    YANG Description: The source peer ip address of the imported route
    """
    return self.__peer_ip
      
  def _set_peer_ip(self, v, load=False):
    """
    Setter method for peer_ip, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/peer_ip (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_ip() directly.

    YANG Description: The source peer ip address of the imported route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_ip must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__peer_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_ip(self):
    self.__peer_ip = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)


  def _get_peer_path_id(self):
    """
    Getter method for peer_path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/peer_path_id (uint32)

    YANG Description: The source peer path id of the imported route
    """
    return self.__peer_path_id
      
  def _set_peer_path_id(self, v, load=False):
    """
    Setter method for peer_path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/peer_path_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_path_id() directly.

    YANG Description: The source peer path id of the imported route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_path_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__peer_path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_path_id(self):
    self.__peer_path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_source_route_distinguisher(self):
    """
    Getter method for source_route_distinguisher, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/source_route_distinguisher (oc-ni-types:route-distinguisher)

    YANG Description: The source route distinguisher is the remote RD source of the
imported route
    """
    return self.__source_route_distinguisher
      
  def _set_source_route_distinguisher(self, v, load=False):
    """
    Setter method for source_route_distinguisher, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/source_route_distinguisher (oc-ni-types:route-distinguisher)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_route_distinguisher is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_route_distinguisher() directly.

    YANG Description: The source route distinguisher is the remote RD source of the
imported route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_route_distinguisher must be of a type compatible with oc-ni-types:route-distinguisher""",
          'defined-type': "oc-ni-types:route-distinguisher",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=False)""",
        })

    self.__source_route_distinguisher = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_route_distinguisher(self):
    self.__source_route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=False)


  def _get_source_address_family(self):
    """
    Getter method for source_address_family, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/source_address_family (identityref)

    YANG Description: The source address-family of the imported route
    """
    return self.__source_address_family
      
  def _set_source_address_family(self, v, load=False):
    """
    Setter method for source_address_family, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/source_address_family (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_address_family is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_address_family() directly.

    YANG Description: The source address-family of the imported route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}},), is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_address_family must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}},), is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__source_address_family = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_address_family(self):
    self.__source_address_family = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}},), is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_advertised_to_peer(self):
    """
    Getter method for advertised_to_peer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/advertised_to_peer (oc-inet:ip-address)

    YANG Description: List of peers to which this path is advertised
    """
    return self.__advertised_to_peer
      
  def _set_advertised_to_peer(self, v, load=False):
    """
    Setter method for advertised_to_peer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/advertised_to_peer (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_advertised_to_peer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_advertised_to_peer() directly.

    YANG Description: List of peers to which this path is advertised
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),]), is_leaf=False, yang_name="advertised-to-peer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """advertised_to_peer must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),]), is_leaf=False, yang_name="advertised-to-peer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__advertised_to_peer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_advertised_to_peer(self):
    self.__advertised_to_peer = YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),]), is_leaf=False, yang_name="advertised-to-peer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)


  def _get_label(self):
    """
    Getter method for label, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/label (string)

    YANG Description: MPLS Label field used for route attributes
    """
    return self.__label
      
  def _set_label(self, v, load=False):
    """
    Setter method for label, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/label (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_label() directly.

    YANG Description: MPLS Label field used for route attributes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """label must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_label(self):
    self.__label = YANGDynClass(base=str, is_leaf=True, yang_name="label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_label2(self):
    """
    Getter method for label2, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/label2 (string)

    YANG Description: MPLS Label2 field used for route attributes
    """
    return self.__label2
      
  def _set_label2(self, v, load=False):
    """
    Setter method for label2, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/label2 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_label2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_label2() directly.

    YANG Description: MPLS Label2 field used for route attributes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="label2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """label2 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="label2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__label2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_label2(self):
    self.__label2 = YANGDynClass(base=str, is_leaf=True, yang_name="label2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_bestpath(self):
    """
    Getter method for bestpath, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/bestpath (boolean)

    YANG Description: BGP can receive multiple paths to the same destination. This
parameter indicates that this path is the bestpath to install
in the IP routing table and use for traffic forwarding
    """
    return self.__bestpath
      
  def _set_bestpath(self, v, load=False):
    """
    Setter method for bestpath, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/bestpath (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bestpath is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bestpath() directly.

    YANG Description: BGP can receive multiple paths to the same destination. This
parameter indicates that this path is the bestpath to install
in the IP routing table and use for traffic forwarding
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="bestpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bestpath must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bestpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__bestpath = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bestpath(self):
    self.__bestpath = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bestpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_multipath(self):
    """
    Getter method for multipath, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/multipath (boolean)

    YANG Description: BGP can use multiple paths to reach a destination allowing
BGP to load-balance traffic. This parameter indicates that this
path is marked as multipath
    """
    return self.__multipath
      
  def _set_multipath(self, v, load=False):
    """
    Setter method for multipath, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/multipath (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multipath is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multipath() directly.

    YANG Description: BGP can use multiple paths to reach a destination allowing
BGP to load-balance traffic. This parameter indicates that this
path is marked as multipath
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="multipath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multipath must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="multipath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__multipath = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multipath(self):
    self.__multipath = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="multipath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_backup(self):
    """
    Getter method for backup, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/backup (boolean)

    YANG Description: BGP path marked as a backup path
    """
    return self.__backup
      
  def _set_backup(self, v, load=False):
    """
    Setter method for backup, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/backup (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup() directly.

    YANG Description: BGP path marked as a backup path
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="backup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="backup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__backup = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup(self):
    self.__backup = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="backup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_last_modified(self):
    """
    Getter method for last_modified, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/last_modified (oc-types:timeticks64)

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_modified
      
  def _set_last_modified(self, v, load=False):
    """
    Setter method for last_modified, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/last_modified (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_modified is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_modified() directly.

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_modified must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_modified = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_modified(self):
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)


  def _get_valid_route(self):
    """
    Getter method for valid_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/valid_route (boolean)

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    return self.__valid_route
      
  def _set_valid_route(self, v, load=False):
    """
    Setter method for valid_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/valid_route (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_valid_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_valid_route() directly.

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """valid_route must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__valid_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_valid_route(self):
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_invalid_reason(self):
    """
    Getter method for invalid_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/invalid_reason (identityref)

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    return self.__invalid_reason
      
  def _set_invalid_reason(self, v, load=False):
    """
    Setter method for invalid_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/invalid_reason (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_reason() directly.

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_reason must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__invalid_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_reason(self):
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_attr_index(self):
    """
    Getter method for attr_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/attr_index (leafref)

    YANG Description: Reference to the common attribute group for the
route
    """
    return self.__attr_index
      
  def _set_attr_index(self, v, load=False):
    """
    Setter method for attr_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/attr_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_index() directly.

    YANG Description: Reference to the common attribute group for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__attr_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_index(self):
    self.__attr_index = YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_community_index(self):
    """
    Getter method for community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/community_index (leafref)

    YANG Description: Reference to the community attribute for the route
    """
    return self.__community_index
      
  def _set_community_index(self, v, load=False):
    """
    Setter method for community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community_index() directly.

    YANG Description: Reference to the community attribute for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community_index(self):
    self.__community_index = YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_ext_community_index(self):
    """
    Getter method for ext_community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/ext_community_index (leafref)

    YANG Description: Reference to the extended community attribute for the
route
    """
    return self.__ext_community_index
      
  def _set_ext_community_index(self, v, load=False):
    """
    Setter method for ext_community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/ext_community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_community_index() directly.

    YANG Description: Reference to the extended community attribute for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__ext_community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_community_index(self):
    self.__ext_community_index = YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)

  peer_ip = __builtin__.property(_get_peer_ip)
  peer_path_id = __builtin__.property(_get_peer_path_id)
  source_route_distinguisher = __builtin__.property(_get_source_route_distinguisher)
  source_address_family = __builtin__.property(_get_source_address_family)
  advertised_to_peer = __builtin__.property(_get_advertised_to_peer)
  label = __builtin__.property(_get_label)
  label2 = __builtin__.property(_get_label2)
  bestpath = __builtin__.property(_get_bestpath)
  multipath = __builtin__.property(_get_multipath)
  backup = __builtin__.property(_get_backup)
  last_modified = __builtin__.property(_get_last_modified)
  valid_route = __builtin__.property(_get_valid_route)
  invalid_reason = __builtin__.property(_get_invalid_reason)
  attr_index = __builtin__.property(_get_attr_index)
  community_index = __builtin__.property(_get_community_index)
  ext_community_index = __builtin__.property(_get_ext_community_index)


  _pyangbind_elements = OrderedDict([('peer_ip', peer_ip), ('peer_path_id', peer_path_id), ('source_route_distinguisher', source_route_distinguisher), ('source_address_family', source_address_family), ('advertised_to_peer', advertised_to_peer), ('label', label), ('label2', label2), ('bestpath', bestpath), ('multipath', multipath), ('backup', backup), ('last_modified', last_modified), ('valid_route', valid_route), ('invalid_reason', invalid_reason), ('attr_index', attr_index), ('community_index', community_index), ('ext_community_index', ext_community_index), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-three-inclusive-multicast-ethernet-tag/type-three-route/paths/path/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: BGP path attributes for this route
  """
  __slots__ = ('_path_helper', '_extmethods', '__peer_ip','__peer_path_id','__source_route_distinguisher','__source_address_family','__advertised_to_peer','__label','__label2','__bestpath','__multipath','__backup','__last_modified','__valid_route','__invalid_reason','__attr_index','__community_index','__ext_community_index',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__peer_ip = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    self.__peer_path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__source_route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=False)
    self.__source_address_family = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}},), is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__advertised_to_peer = YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),]), is_leaf=False, yang_name="advertised-to-peer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    self.__label = YANGDynClass(base=str, is_leaf=True, yang_name="label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__label2 = YANGDynClass(base=str, is_leaf=True, yang_name="label2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__bestpath = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bestpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__multipath = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="multipath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__backup = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="backup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__attr_index = YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__community_index = YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__ext_community_index = YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'bgp', 'rib', 'afi-safis', 'afi-safi', 'l2vpn-evpn', 'loc-rib', 'routes', 'route-distinguisher', 'type-three-inclusive-multicast-ethernet-tag', 'type-three-route', 'paths', 'path', 'state']

  def _get_peer_ip(self):
    """
    Getter method for peer_ip, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/peer_ip (oc-inet:ip-address)

    YANG Description: The source peer ip address of the imported route
    """
    return self.__peer_ip
      
  def _set_peer_ip(self, v, load=False):
    """
    Setter method for peer_ip, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/peer_ip (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_ip() directly.

    YANG Description: The source peer ip address of the imported route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_ip must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__peer_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_ip(self):
    self.__peer_ip = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)


  def _get_peer_path_id(self):
    """
    Getter method for peer_path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/peer_path_id (uint32)

    YANG Description: The source peer path id of the imported route
    """
    return self.__peer_path_id
      
  def _set_peer_path_id(self, v, load=False):
    """
    Setter method for peer_path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/peer_path_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_path_id() directly.

    YANG Description: The source peer path id of the imported route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_path_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__peer_path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_path_id(self):
    self.__peer_path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_source_route_distinguisher(self):
    """
    Getter method for source_route_distinguisher, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/source_route_distinguisher (oc-ni-types:route-distinguisher)

    YANG Description: The source route distinguisher is the remote RD source of the
imported route
    """
    return self.__source_route_distinguisher
      
  def _set_source_route_distinguisher(self, v, load=False):
    """
    Setter method for source_route_distinguisher, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/source_route_distinguisher (oc-ni-types:route-distinguisher)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_route_distinguisher is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_route_distinguisher() directly.

    YANG Description: The source route distinguisher is the remote RD source of the
imported route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_route_distinguisher must be of a type compatible with oc-ni-types:route-distinguisher""",
          'defined-type': "oc-ni-types:route-distinguisher",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=False)""",
        })

    self.__source_route_distinguisher = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_route_distinguisher(self):
    self.__source_route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=False)


  def _get_source_address_family(self):
    """
    Getter method for source_address_family, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/source_address_family (identityref)

    YANG Description: The source address-family of the imported route
    """
    return self.__source_address_family
      
  def _set_source_address_family(self, v, load=False):
    """
    Setter method for source_address_family, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/source_address_family (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_address_family is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_address_family() directly.

    YANG Description: The source address-family of the imported route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}},), is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_address_family must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}},), is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__source_address_family = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_address_family(self):
    self.__source_address_family = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}},), is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_advertised_to_peer(self):
    """
    Getter method for advertised_to_peer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/advertised_to_peer (oc-inet:ip-address)

    YANG Description: List of peers to which this path is advertised
    """
    return self.__advertised_to_peer
      
  def _set_advertised_to_peer(self, v, load=False):
    """
    Setter method for advertised_to_peer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/advertised_to_peer (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_advertised_to_peer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_advertised_to_peer() directly.

    YANG Description: List of peers to which this path is advertised
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),]), is_leaf=False, yang_name="advertised-to-peer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """advertised_to_peer must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),]), is_leaf=False, yang_name="advertised-to-peer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__advertised_to_peer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_advertised_to_peer(self):
    self.__advertised_to_peer = YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),]), is_leaf=False, yang_name="advertised-to-peer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)


  def _get_label(self):
    """
    Getter method for label, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/label (string)

    YANG Description: MPLS Label field used for route attributes
    """
    return self.__label
      
  def _set_label(self, v, load=False):
    """
    Setter method for label, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/label (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_label() directly.

    YANG Description: MPLS Label field used for route attributes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """label must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_label(self):
    self.__label = YANGDynClass(base=str, is_leaf=True, yang_name="label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_label2(self):
    """
    Getter method for label2, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/label2 (string)

    YANG Description: MPLS Label2 field used for route attributes
    """
    return self.__label2
      
  def _set_label2(self, v, load=False):
    """
    Setter method for label2, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/label2 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_label2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_label2() directly.

    YANG Description: MPLS Label2 field used for route attributes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="label2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """label2 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="label2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__label2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_label2(self):
    self.__label2 = YANGDynClass(base=str, is_leaf=True, yang_name="label2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_bestpath(self):
    """
    Getter method for bestpath, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/bestpath (boolean)

    YANG Description: BGP can receive multiple paths to the same destination. This
parameter indicates that this path is the bestpath to install
in the IP routing table and use for traffic forwarding
    """
    return self.__bestpath
      
  def _set_bestpath(self, v, load=False):
    """
    Setter method for bestpath, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/bestpath (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bestpath is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bestpath() directly.

    YANG Description: BGP can receive multiple paths to the same destination. This
parameter indicates that this path is the bestpath to install
in the IP routing table and use for traffic forwarding
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="bestpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bestpath must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bestpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__bestpath = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bestpath(self):
    self.__bestpath = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bestpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_multipath(self):
    """
    Getter method for multipath, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/multipath (boolean)

    YANG Description: BGP can use multiple paths to reach a destination allowing
BGP to load-balance traffic. This parameter indicates that this
path is marked as multipath
    """
    return self.__multipath
      
  def _set_multipath(self, v, load=False):
    """
    Setter method for multipath, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/multipath (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multipath is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multipath() directly.

    YANG Description: BGP can use multiple paths to reach a destination allowing
BGP to load-balance traffic. This parameter indicates that this
path is marked as multipath
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="multipath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multipath must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="multipath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__multipath = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multipath(self):
    self.__multipath = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="multipath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_backup(self):
    """
    Getter method for backup, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/backup (boolean)

    YANG Description: BGP path marked as a backup path
    """
    return self.__backup
      
  def _set_backup(self, v, load=False):
    """
    Setter method for backup, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/backup (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup() directly.

    YANG Description: BGP path marked as a backup path
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="backup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="backup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__backup = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup(self):
    self.__backup = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="backup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_last_modified(self):
    """
    Getter method for last_modified, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/last_modified (oc-types:timeticks64)

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_modified
      
  def _set_last_modified(self, v, load=False):
    """
    Setter method for last_modified, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/last_modified (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_modified is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_modified() directly.

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_modified must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_modified = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_modified(self):
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)


  def _get_valid_route(self):
    """
    Getter method for valid_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/valid_route (boolean)

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    return self.__valid_route
      
  def _set_valid_route(self, v, load=False):
    """
    Setter method for valid_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/valid_route (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_valid_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_valid_route() directly.

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """valid_route must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__valid_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_valid_route(self):
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_invalid_reason(self):
    """
    Getter method for invalid_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/invalid_reason (identityref)

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    return self.__invalid_reason
      
  def _set_invalid_reason(self, v, load=False):
    """
    Setter method for invalid_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/invalid_reason (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_reason() directly.

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_reason must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__invalid_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_reason(self):
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_attr_index(self):
    """
    Getter method for attr_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/attr_index (leafref)

    YANG Description: Reference to the common attribute group for the
route
    """
    return self.__attr_index
      
  def _set_attr_index(self, v, load=False):
    """
    Setter method for attr_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/attr_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_index() directly.

    YANG Description: Reference to the common attribute group for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__attr_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_index(self):
    self.__attr_index = YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_community_index(self):
    """
    Getter method for community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/community_index (leafref)

    YANG Description: Reference to the community attribute for the route
    """
    return self.__community_index
      
  def _set_community_index(self, v, load=False):
    """
    Setter method for community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community_index() directly.

    YANG Description: Reference to the community attribute for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community_index(self):
    self.__community_index = YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_ext_community_index(self):
    """
    Getter method for ext_community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/ext_community_index (leafref)

    YANG Description: Reference to the extended community attribute for the
route
    """
    return self.__ext_community_index
      
  def _set_ext_community_index(self, v, load=False):
    """
    Setter method for ext_community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/ext_community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_community_index() directly.

    YANG Description: Reference to the extended community attribute for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__ext_community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_community_index(self):
    self.__ext_community_index = YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)

  peer_ip = __builtin__.property(_get_peer_ip)
  peer_path_id = __builtin__.property(_get_peer_path_id)
  source_route_distinguisher = __builtin__.property(_get_source_route_distinguisher)
  source_address_family = __builtin__.property(_get_source_address_family)
  advertised_to_peer = __builtin__.property(_get_advertised_to_peer)
  label = __builtin__.property(_get_label)
  label2 = __builtin__.property(_get_label2)
  bestpath = __builtin__.property(_get_bestpath)
  multipath = __builtin__.property(_get_multipath)
  backup = __builtin__.property(_get_backup)
  last_modified = __builtin__.property(_get_last_modified)
  valid_route = __builtin__.property(_get_valid_route)
  invalid_reason = __builtin__.property(_get_invalid_reason)
  attr_index = __builtin__.property(_get_attr_index)
  community_index = __builtin__.property(_get_community_index)
  ext_community_index = __builtin__.property(_get_ext_community_index)


  _pyangbind_elements = OrderedDict([('peer_ip', peer_ip), ('peer_path_id', peer_path_id), ('source_route_distinguisher', source_route_distinguisher), ('source_address_family', source_address_family), ('advertised_to_peer', advertised_to_peer), ('label', label), ('label2', label2), ('bestpath', bestpath), ('multipath', multipath), ('backup', backup), ('last_modified', last_modified), ('valid_route', valid_route), ('invalid_reason', invalid_reason), ('attr_index', attr_index), ('community_index', community_index), ('ext_community_index', ext_community_index), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-three-inclusive-multicast-ethernet-tag/type-three-route/paths/path/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: BGP path attributes for this route
  """
  __slots__ = ('_path_helper', '_extmethods', '__peer_ip','__peer_path_id','__source_route_distinguisher','__source_address_family','__advertised_to_peer','__label','__label2','__bestpath','__multipath','__backup','__last_modified','__valid_route','__invalid_reason','__attr_index','__community_index','__ext_community_index',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__peer_ip = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    self.__peer_path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__source_route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=False)
    self.__source_address_family = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}},), is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__advertised_to_peer = YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),]), is_leaf=False, yang_name="advertised-to-peer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    self.__label = YANGDynClass(base=str, is_leaf=True, yang_name="label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__label2 = YANGDynClass(base=str, is_leaf=True, yang_name="label2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__bestpath = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bestpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__multipath = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="multipath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__backup = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="backup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__attr_index = YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__community_index = YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__ext_community_index = YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'bgp', 'rib', 'afi-safis', 'afi-safi', 'l2vpn-evpn', 'loc-rib', 'routes', 'route-distinguisher', 'type-three-inclusive-multicast-ethernet-tag', 'type-three-route', 'paths', 'path', 'state']

  def _get_peer_ip(self):
    """
    Getter method for peer_ip, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/peer_ip (oc-inet:ip-address)

    YANG Description: The source peer ip address of the imported route
    """
    return self.__peer_ip
      
  def _set_peer_ip(self, v, load=False):
    """
    Setter method for peer_ip, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/peer_ip (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_ip() directly.

    YANG Description: The source peer ip address of the imported route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_ip must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__peer_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_ip(self):
    self.__peer_ip = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)


  def _get_peer_path_id(self):
    """
    Getter method for peer_path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/peer_path_id (uint32)

    YANG Description: The source peer path id of the imported route
    """
    return self.__peer_path_id
      
  def _set_peer_path_id(self, v, load=False):
    """
    Setter method for peer_path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/peer_path_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_path_id() directly.

    YANG Description: The source peer path id of the imported route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_path_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__peer_path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_path_id(self):
    self.__peer_path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_source_route_distinguisher(self):
    """
    Getter method for source_route_distinguisher, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/source_route_distinguisher (oc-ni-types:route-distinguisher)

    YANG Description: The source route distinguisher is the remote RD source of the
imported route
    """
    return self.__source_route_distinguisher
      
  def _set_source_route_distinguisher(self, v, load=False):
    """
    Setter method for source_route_distinguisher, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/source_route_distinguisher (oc-ni-types:route-distinguisher)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_route_distinguisher is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_route_distinguisher() directly.

    YANG Description: The source route distinguisher is the remote RD source of the
imported route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_route_distinguisher must be of a type compatible with oc-ni-types:route-distinguisher""",
          'defined-type': "oc-ni-types:route-distinguisher",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=False)""",
        })

    self.__source_route_distinguisher = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_route_distinguisher(self):
    self.__source_route_distinguisher = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}:([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[01][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]):([0-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])'}),], is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-ni-types:route-distinguisher', is_config=False)


  def _get_source_address_family(self):
    """
    Getter method for source_address_family, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/source_address_family (identityref)

    YANG Description: The source address-family of the imported route
    """
    return self.__source_address_family
      
  def _set_source_address_family(self, v, load=False):
    """
    Setter method for source_address_family, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/source_address_family (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_address_family is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_address_family() directly.

    YANG Description: The source address-family of the imported route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}},), is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_address_family must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}},), is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__source_address_family = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_address_family(self):
    self.__source_address_family = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV6_LABELED_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_UNICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV4_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L3VPN_IPV6_MULTICAST': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_VPLS': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:L2VPN_EVPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV4': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:SRTE_POLICY_IPV6': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:IPV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:VPNV4_FLOWSPEC': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_VPN': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'openconfig-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgp-types:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}, 'oc-bgpt:LINKSTATE_SPF': {'@module': 'openconfig-bgp-types', '@namespace': 'http://openconfig.net/yang/bgp-types'}},), is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_advertised_to_peer(self):
    """
    Getter method for advertised_to_peer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/advertised_to_peer (oc-inet:ip-address)

    YANG Description: List of peers to which this path is advertised
    """
    return self.__advertised_to_peer
      
  def _set_advertised_to_peer(self, v, load=False):
    """
    Setter method for advertised_to_peer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/advertised_to_peer (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_advertised_to_peer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_advertised_to_peer() directly.

    YANG Description: List of peers to which this path is advertised
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),]), is_leaf=False, yang_name="advertised-to-peer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """advertised_to_peer must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),]), is_leaf=False, yang_name="advertised-to-peer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__advertised_to_peer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_advertised_to_peer(self):
    self.__advertised_to_peer = YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),]), is_leaf=False, yang_name="advertised-to-peer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ip-address', is_config=False)


  def _get_label(self):
    """
    Getter method for label, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/label (string)

    YANG Description: MPLS Label field used for route attributes
    """
    return self.__label
      
  def _set_label(self, v, load=False):
    """
    Setter method for label, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/label (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_label() directly.

    YANG Description: MPLS Label field used for route attributes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """label must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_label(self):
    self.__label = YANGDynClass(base=str, is_leaf=True, yang_name="label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_label2(self):
    """
    Getter method for label2, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/label2 (string)

    YANG Description: MPLS Label2 field used for route attributes
    """
    return self.__label2
      
  def _set_label2(self, v, load=False):
    """
    Setter method for label2, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/label2 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_label2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_label2() directly.

    YANG Description: MPLS Label2 field used for route attributes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="label2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """label2 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="label2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__label2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_label2(self):
    self.__label2 = YANGDynClass(base=str, is_leaf=True, yang_name="label2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_bestpath(self):
    """
    Getter method for bestpath, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/bestpath (boolean)

    YANG Description: BGP can receive multiple paths to the same destination. This
parameter indicates that this path is the bestpath to install
in the IP routing table and use for traffic forwarding
    """
    return self.__bestpath
      
  def _set_bestpath(self, v, load=False):
    """
    Setter method for bestpath, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/bestpath (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bestpath is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bestpath() directly.

    YANG Description: BGP can receive multiple paths to the same destination. This
parameter indicates that this path is the bestpath to install
in the IP routing table and use for traffic forwarding
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="bestpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bestpath must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bestpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__bestpath = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bestpath(self):
    self.__bestpath = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bestpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_multipath(self):
    """
    Getter method for multipath, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/multipath (boolean)

    YANG Description: BGP can use multiple paths to reach a destination allowing
BGP to load-balance traffic. This parameter indicates that this
path is marked as multipath
    """
    return self.__multipath
      
  def _set_multipath(self, v, load=False):
    """
    Setter method for multipath, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/multipath (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multipath is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multipath() directly.

    YANG Description: BGP can use multiple paths to reach a destination allowing
BGP to load-balance traffic. This parameter indicates that this
path is marked as multipath
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="multipath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multipath must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="multipath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__multipath = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multipath(self):
    self.__multipath = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="multipath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_backup(self):
    """
    Getter method for backup, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/backup (boolean)

    YANG Description: BGP path marked as a backup path
    """
    return self.__backup
      
  def _set_backup(self, v, load=False):
    """
    Setter method for backup, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/backup (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup() directly.

    YANG Description: BGP path marked as a backup path
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="backup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="backup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__backup = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup(self):
    self.__backup = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="backup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_last_modified(self):
    """
    Getter method for last_modified, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/last_modified (oc-types:timeticks64)

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_modified
      
  def _set_last_modified(self, v, load=False):
    """
    Setter method for last_modified, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/last_modified (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_modified is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_modified() directly.

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_modified must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_modified = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_modified(self):
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)


  def _get_valid_route(self):
    """
    Getter method for valid_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/valid_route (boolean)

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    return self.__valid_route
      
  def _set_valid_route(self, v, load=False):
    """
    Setter method for valid_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/valid_route (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_valid_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_valid_route() directly.

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """valid_route must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__valid_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_valid_route(self):
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_invalid_reason(self):
    """
    Getter method for invalid_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/invalid_reason (identityref)

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    return self.__invalid_reason
      
  def _set_invalid_reason(self, v, load=False):
    """
    Setter method for invalid_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/invalid_reason (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_reason() directly.

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_reason must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__invalid_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_reason(self):
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_attr_index(self):
    """
    Getter method for attr_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/attr_index (leafref)

    YANG Description: Reference to the common attribute group for the
route
    """
    return self.__attr_index
      
  def _set_attr_index(self, v, load=False):
    """
    Setter method for attr_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/attr_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_index() directly.

    YANG Description: Reference to the common attribute group for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__attr_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_index(self):
    self.__attr_index = YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_community_index(self):
    """
    Getter method for community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/community_index (leafref)

    YANG Description: Reference to the community attribute for the route
    """
    return self.__community_index
      
  def _set_community_index(self, v, load=False):
    """
    Setter method for community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community_index() directly.

    YANG Description: Reference to the community attribute for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community_index(self):
    self.__community_index = YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_ext_community_index(self):
    """
    Getter method for ext_community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/ext_community_index (leafref)

    YANG Description: Reference to the extended community attribute for the
route
    """
    return self.__ext_community_index
      
  def _set_ext_community_index(self, v, load=False):
    """
    Setter method for ext_community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state/ext_community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_community_index() directly.

    YANG Description: Reference to the extended community attribute for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__ext_community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_community_index(self):
    self.__ext_community_index = YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)

  peer_ip = __builtin__.property(_get_peer_ip)
  peer_path_id = __builtin__.property(_get_peer_path_id)
  source_route_distinguisher = __builtin__.property(_get_source_route_distinguisher)
  source_address_family = __builtin__.property(_get_source_address_family)
  advertised_to_peer = __builtin__.property(_get_advertised_to_peer)
  label = __builtin__.property(_get_label)
  label2 = __builtin__.property(_get_label2)
  bestpath = __builtin__.property(_get_bestpath)
  multipath = __builtin__.property(_get_multipath)
  backup = __builtin__.property(_get_backup)
  last_modified = __builtin__.property(_get_last_modified)
  valid_route = __builtin__.property(_get_valid_route)
  invalid_reason = __builtin__.property(_get_invalid_reason)
  attr_index = __builtin__.property(_get_attr_index)
  community_index = __builtin__.property(_get_community_index)
  ext_community_index = __builtin__.property(_get_ext_community_index)


  _pyangbind_elements = OrderedDict([('peer_ip', peer_ip), ('peer_path_id', peer_path_id), ('source_route_distinguisher', source_route_distinguisher), ('source_address_family', source_address_family), ('advertised_to_peer', advertised_to_peer), ('label', label), ('label2', label2), ('bestpath', bestpath), ('multipath', multipath), ('backup', backup), ('last_modified', last_modified), ('valid_route', valid_route), ('invalid_reason', invalid_reason), ('attr_index', attr_index), ('community_index', community_index), ('ext_community_index', ext_community_index), ])


