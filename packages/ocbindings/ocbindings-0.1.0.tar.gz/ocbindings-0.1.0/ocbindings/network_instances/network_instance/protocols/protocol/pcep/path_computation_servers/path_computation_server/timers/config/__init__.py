# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines PCEP timers configuration.
  """
  __slots__ = ('_path_helper', '_extmethods', '__keepalive','__dead_timer','__redelegation_timeout_interval','__state_timeout_interval',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__keepalive = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(30), is_leaf=True, yang_name="keepalive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    self.__dead_timer = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(120), is_leaf=True, yang_name="dead-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    self.__redelegation_timeout_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="redelegation-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    self.__state_timeout_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="state-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'pcep', 'path-computation-servers', 'path-computation-server', 'timers', 'config']

  def _get_keepalive(self):
    """
    Getter method for keepalive, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/keepalive (uint8)

    YANG Description: Interval for sending keepalive messages over PCE session.
    """
    return self.__keepalive
      
  def _set_keepalive(self, v, load=False):
    """
    Setter method for keepalive, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/keepalive (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_keepalive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_keepalive() directly.

    YANG Description: Interval for sending keepalive messages over PCE session.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(30), is_leaf=True, yang_name="keepalive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """keepalive must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(30), is_leaf=True, yang_name="keepalive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)""",
        })

    self.__keepalive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_keepalive(self):
    self.__keepalive = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(30), is_leaf=True, yang_name="keepalive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)


  def _get_dead_timer(self):
    """
    Getter method for dead_timer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/dead_timer (uint8)

    YANG Description: Interval after which PCE session is declared dead.
    """
    return self.__dead_timer
      
  def _set_dead_timer(self, v, load=False):
    """
    Setter method for dead_timer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/dead_timer (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dead_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dead_timer() directly.

    YANG Description: Interval after which PCE session is declared dead.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(120), is_leaf=True, yang_name="dead-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dead_timer must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(120), is_leaf=True, yang_name="dead-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)""",
        })

    self.__dead_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dead_timer(self):
    self.__dead_timer = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(120), is_leaf=True, yang_name="dead-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)


  def _get_redelegation_timeout_interval(self):
    """
    Getter method for redelegation_timeout_interval, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/redelegation_timeout_interval (uint16)

    YANG Description: When a PCEP session is terminated, the period of time a PCC waits
before revoking LSP delegation and attempting to redelegate LSPs
associated with the terminated PCEP session to an alternate PCE.
    """
    return self.__redelegation_timeout_interval
      
  def _set_redelegation_timeout_interval(self, v, load=False):
    """
    Setter method for redelegation_timeout_interval, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/redelegation_timeout_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_redelegation_timeout_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_redelegation_timeout_interval() directly.

    YANG Description: When a PCEP session is terminated, the period of time a PCC waits
before revoking LSP delegation and attempting to redelegate LSPs
associated with the terminated PCEP session to an alternate PCE.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="redelegation-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """redelegation_timeout_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="redelegation-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__redelegation_timeout_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_redelegation_timeout_interval(self):
    self.__redelegation_timeout_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="redelegation-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)


  def _get_state_timeout_interval(self):
    """
    Getter method for state_timeout_interval, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/state_timeout_interval (uint16)

    YANG Description: When a PCEP session is terminated, the period of time a PCC waits
      before before flushing LSP state associated with that PCEP session
      and reverting to operator-defined default parameters or behaviors.
    """
    return self.__state_timeout_interval
      
  def _set_state_timeout_interval(self, v, load=False):
    """
    Setter method for state_timeout_interval, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/state_timeout_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state_timeout_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state_timeout_interval() directly.

    YANG Description: When a PCEP session is terminated, the period of time a PCC waits
      before before flushing LSP state associated with that PCEP session
      and reverting to operator-defined default parameters or behaviors.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="state-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state_timeout_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="state-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__state_timeout_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state_timeout_interval(self):
    self.__state_timeout_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="state-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)

  keepalive = __builtin__.property(_get_keepalive, _set_keepalive)
  dead_timer = __builtin__.property(_get_dead_timer, _set_dead_timer)
  redelegation_timeout_interval = __builtin__.property(_get_redelegation_timeout_interval, _set_redelegation_timeout_interval)
  state_timeout_interval = __builtin__.property(_get_state_timeout_interval, _set_state_timeout_interval)


  _pyangbind_elements = OrderedDict([('keepalive', keepalive), ('dead_timer', dead_timer), ('redelegation_timeout_interval', redelegation_timeout_interval), ('state_timeout_interval', state_timeout_interval), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines PCEP timers configuration.
  """
  __slots__ = ('_path_helper', '_extmethods', '__keepalive','__dead_timer','__redelegation_timeout_interval','__state_timeout_interval',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__keepalive = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(30), is_leaf=True, yang_name="keepalive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    self.__dead_timer = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(120), is_leaf=True, yang_name="dead-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    self.__redelegation_timeout_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="redelegation-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    self.__state_timeout_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="state-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'pcep', 'path-computation-servers', 'path-computation-server', 'timers', 'config']

  def _get_keepalive(self):
    """
    Getter method for keepalive, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/keepalive (uint8)

    YANG Description: Interval for sending keepalive messages over PCE session.
    """
    return self.__keepalive
      
  def _set_keepalive(self, v, load=False):
    """
    Setter method for keepalive, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/keepalive (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_keepalive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_keepalive() directly.

    YANG Description: Interval for sending keepalive messages over PCE session.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(30), is_leaf=True, yang_name="keepalive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """keepalive must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(30), is_leaf=True, yang_name="keepalive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)""",
        })

    self.__keepalive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_keepalive(self):
    self.__keepalive = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(30), is_leaf=True, yang_name="keepalive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)


  def _get_dead_timer(self):
    """
    Getter method for dead_timer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/dead_timer (uint8)

    YANG Description: Interval after which PCE session is declared dead.
    """
    return self.__dead_timer
      
  def _set_dead_timer(self, v, load=False):
    """
    Setter method for dead_timer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/dead_timer (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dead_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dead_timer() directly.

    YANG Description: Interval after which PCE session is declared dead.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(120), is_leaf=True, yang_name="dead-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dead_timer must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(120), is_leaf=True, yang_name="dead-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)""",
        })

    self.__dead_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dead_timer(self):
    self.__dead_timer = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(120), is_leaf=True, yang_name="dead-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)


  def _get_redelegation_timeout_interval(self):
    """
    Getter method for redelegation_timeout_interval, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/redelegation_timeout_interval (uint16)

    YANG Description: When a PCEP session is terminated, the period of time a PCC waits
before revoking LSP delegation and attempting to redelegate LSPs
associated with the terminated PCEP session to an alternate PCE.
    """
    return self.__redelegation_timeout_interval
      
  def _set_redelegation_timeout_interval(self, v, load=False):
    """
    Setter method for redelegation_timeout_interval, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/redelegation_timeout_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_redelegation_timeout_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_redelegation_timeout_interval() directly.

    YANG Description: When a PCEP session is terminated, the period of time a PCC waits
before revoking LSP delegation and attempting to redelegate LSPs
associated with the terminated PCEP session to an alternate PCE.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="redelegation-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """redelegation_timeout_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="redelegation-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__redelegation_timeout_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_redelegation_timeout_interval(self):
    self.__redelegation_timeout_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="redelegation-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)


  def _get_state_timeout_interval(self):
    """
    Getter method for state_timeout_interval, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/state_timeout_interval (uint16)

    YANG Description: When a PCEP session is terminated, the period of time a PCC waits
      before before flushing LSP state associated with that PCEP session
      and reverting to operator-defined default parameters or behaviors.
    """
    return self.__state_timeout_interval
      
  def _set_state_timeout_interval(self, v, load=False):
    """
    Setter method for state_timeout_interval, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/state_timeout_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state_timeout_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state_timeout_interval() directly.

    YANG Description: When a PCEP session is terminated, the period of time a PCC waits
      before before flushing LSP state associated with that PCEP session
      and reverting to operator-defined default parameters or behaviors.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="state-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state_timeout_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="state-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__state_timeout_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state_timeout_interval(self):
    self.__state_timeout_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="state-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)

  keepalive = __builtin__.property(_get_keepalive, _set_keepalive)
  dead_timer = __builtin__.property(_get_dead_timer, _set_dead_timer)
  redelegation_timeout_interval = __builtin__.property(_get_redelegation_timeout_interval, _set_redelegation_timeout_interval)
  state_timeout_interval = __builtin__.property(_get_state_timeout_interval, _set_state_timeout_interval)


  _pyangbind_elements = OrderedDict([('keepalive', keepalive), ('dead_timer', dead_timer), ('redelegation_timeout_interval', redelegation_timeout_interval), ('state_timeout_interval', state_timeout_interval), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines PCEP timers configuration.
  """
  __slots__ = ('_path_helper', '_extmethods', '__keepalive','__dead_timer','__redelegation_timeout_interval','__state_timeout_interval',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__keepalive = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(30), is_leaf=True, yang_name="keepalive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    self.__dead_timer = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(120), is_leaf=True, yang_name="dead-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    self.__redelegation_timeout_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="redelegation-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    self.__state_timeout_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="state-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'pcep', 'path-computation-servers', 'path-computation-server', 'timers', 'config']

  def _get_keepalive(self):
    """
    Getter method for keepalive, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/keepalive (uint8)

    YANG Description: Interval for sending keepalive messages over PCE session.
    """
    return self.__keepalive
      
  def _set_keepalive(self, v, load=False):
    """
    Setter method for keepalive, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/keepalive (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_keepalive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_keepalive() directly.

    YANG Description: Interval for sending keepalive messages over PCE session.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(30), is_leaf=True, yang_name="keepalive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """keepalive must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(30), is_leaf=True, yang_name="keepalive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)""",
        })

    self.__keepalive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_keepalive(self):
    self.__keepalive = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(30), is_leaf=True, yang_name="keepalive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)


  def _get_dead_timer(self):
    """
    Getter method for dead_timer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/dead_timer (uint8)

    YANG Description: Interval after which PCE session is declared dead.
    """
    return self.__dead_timer
      
  def _set_dead_timer(self, v, load=False):
    """
    Setter method for dead_timer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/dead_timer (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dead_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dead_timer() directly.

    YANG Description: Interval after which PCE session is declared dead.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(120), is_leaf=True, yang_name="dead-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dead_timer must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(120), is_leaf=True, yang_name="dead-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)""",
        })

    self.__dead_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dead_timer(self):
    self.__dead_timer = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(120), is_leaf=True, yang_name="dead-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)


  def _get_redelegation_timeout_interval(self):
    """
    Getter method for redelegation_timeout_interval, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/redelegation_timeout_interval (uint16)

    YANG Description: When a PCEP session is terminated, the period of time a PCC waits
before revoking LSP delegation and attempting to redelegate LSPs
associated with the terminated PCEP session to an alternate PCE.
    """
    return self.__redelegation_timeout_interval
      
  def _set_redelegation_timeout_interval(self, v, load=False):
    """
    Setter method for redelegation_timeout_interval, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/redelegation_timeout_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_redelegation_timeout_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_redelegation_timeout_interval() directly.

    YANG Description: When a PCEP session is terminated, the period of time a PCC waits
before revoking LSP delegation and attempting to redelegate LSPs
associated with the terminated PCEP session to an alternate PCE.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="redelegation-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """redelegation_timeout_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="redelegation-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__redelegation_timeout_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_redelegation_timeout_interval(self):
    self.__redelegation_timeout_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="redelegation-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)


  def _get_state_timeout_interval(self):
    """
    Getter method for state_timeout_interval, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/state_timeout_interval (uint16)

    YANG Description: When a PCEP session is terminated, the period of time a PCC waits
      before before flushing LSP state associated with that PCEP session
      and reverting to operator-defined default parameters or behaviors.
    """
    return self.__state_timeout_interval
      
  def _set_state_timeout_interval(self, v, load=False):
    """
    Setter method for state_timeout_interval, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/state_timeout_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state_timeout_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state_timeout_interval() directly.

    YANG Description: When a PCEP session is terminated, the period of time a PCC waits
      before before flushing LSP state associated with that PCEP session
      and reverting to operator-defined default parameters or behaviors.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="state-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state_timeout_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="state-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__state_timeout_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state_timeout_interval(self):
    self.__state_timeout_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="state-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)

  keepalive = __builtin__.property(_get_keepalive, _set_keepalive)
  dead_timer = __builtin__.property(_get_dead_timer, _set_dead_timer)
  redelegation_timeout_interval = __builtin__.property(_get_redelegation_timeout_interval, _set_redelegation_timeout_interval)
  state_timeout_interval = __builtin__.property(_get_state_timeout_interval, _set_state_timeout_interval)


  _pyangbind_elements = OrderedDict([('keepalive', keepalive), ('dead_timer', dead_timer), ('redelegation_timeout_interval', redelegation_timeout_interval), ('state_timeout_interval', state_timeout_interval), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines PCEP timers configuration.
  """
  __slots__ = ('_path_helper', '_extmethods', '__keepalive','__dead_timer','__redelegation_timeout_interval','__state_timeout_interval',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__keepalive = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(30), is_leaf=True, yang_name="keepalive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    self.__dead_timer = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(120), is_leaf=True, yang_name="dead-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    self.__redelegation_timeout_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="redelegation-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    self.__state_timeout_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="state-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'pcep', 'path-computation-servers', 'path-computation-server', 'timers', 'config']

  def _get_keepalive(self):
    """
    Getter method for keepalive, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/keepalive (uint8)

    YANG Description: Interval for sending keepalive messages over PCE session.
    """
    return self.__keepalive
      
  def _set_keepalive(self, v, load=False):
    """
    Setter method for keepalive, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/keepalive (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_keepalive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_keepalive() directly.

    YANG Description: Interval for sending keepalive messages over PCE session.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(30), is_leaf=True, yang_name="keepalive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """keepalive must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(30), is_leaf=True, yang_name="keepalive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)""",
        })

    self.__keepalive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_keepalive(self):
    self.__keepalive = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(30), is_leaf=True, yang_name="keepalive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)


  def _get_dead_timer(self):
    """
    Getter method for dead_timer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/dead_timer (uint8)

    YANG Description: Interval after which PCE session is declared dead.
    """
    return self.__dead_timer
      
  def _set_dead_timer(self, v, load=False):
    """
    Setter method for dead_timer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/dead_timer (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dead_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dead_timer() directly.

    YANG Description: Interval after which PCE session is declared dead.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(120), is_leaf=True, yang_name="dead-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dead_timer must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(120), is_leaf=True, yang_name="dead-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)""",
        })

    self.__dead_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dead_timer(self):
    self.__dead_timer = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(120), is_leaf=True, yang_name="dead-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)


  def _get_redelegation_timeout_interval(self):
    """
    Getter method for redelegation_timeout_interval, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/redelegation_timeout_interval (uint16)

    YANG Description: When a PCEP session is terminated, the period of time a PCC waits
before revoking LSP delegation and attempting to redelegate LSPs
associated with the terminated PCEP session to an alternate PCE.
    """
    return self.__redelegation_timeout_interval
      
  def _set_redelegation_timeout_interval(self, v, load=False):
    """
    Setter method for redelegation_timeout_interval, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/redelegation_timeout_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_redelegation_timeout_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_redelegation_timeout_interval() directly.

    YANG Description: When a PCEP session is terminated, the period of time a PCC waits
before revoking LSP delegation and attempting to redelegate LSPs
associated with the terminated PCEP session to an alternate PCE.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="redelegation-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """redelegation_timeout_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="redelegation-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__redelegation_timeout_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_redelegation_timeout_interval(self):
    self.__redelegation_timeout_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="redelegation-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)


  def _get_state_timeout_interval(self):
    """
    Getter method for state_timeout_interval, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/state_timeout_interval (uint16)

    YANG Description: When a PCEP session is terminated, the period of time a PCC waits
      before before flushing LSP state associated with that PCEP session
      and reverting to operator-defined default parameters or behaviors.
    """
    return self.__state_timeout_interval
      
  def _set_state_timeout_interval(self, v, load=False):
    """
    Setter method for state_timeout_interval, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pcep/path_computation_servers/path_computation_server/timers/config/state_timeout_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state_timeout_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state_timeout_interval() directly.

    YANG Description: When a PCEP session is terminated, the period of time a PCC waits
      before before flushing LSP state associated with that PCEP session
      and reverting to operator-defined default parameters or behaviors.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="state-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state_timeout_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="state-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__state_timeout_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state_timeout_interval(self):
    self.__state_timeout_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="state-timeout-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)

  keepalive = __builtin__.property(_get_keepalive, _set_keepalive)
  dead_timer = __builtin__.property(_get_dead_timer, _set_dead_timer)
  redelegation_timeout_interval = __builtin__.property(_get_redelegation_timeout_interval, _set_redelegation_timeout_interval)
  state_timeout_interval = __builtin__.property(_get_state_timeout_interval, _set_state_timeout_interval)


  _pyangbind_elements = OrderedDict([('keepalive', keepalive), ('dead_timer', dead_timer), ('redelegation_timeout_interval', redelegation_timeout_interval), ('state_timeout_interval', state_timeout_interval), ])


