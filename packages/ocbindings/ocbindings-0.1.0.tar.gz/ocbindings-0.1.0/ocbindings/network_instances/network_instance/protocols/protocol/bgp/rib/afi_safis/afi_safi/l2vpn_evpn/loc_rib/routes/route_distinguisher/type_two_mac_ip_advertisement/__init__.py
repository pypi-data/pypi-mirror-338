# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import type_two_route
class type_two_mac_ip_advertisement(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-two-mac-ip-advertisement. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top level container for MAC_IP Advertisement L2VPN EVPN routes
  """
  __slots__ = ('_path_helper', '_extmethods', '__type_two_route',)

  _yang_name = 'type-two-mac-ip-advertisement'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__type_two_route = YANGDynClass(base=YANGListType("ethernet_tag mac_address mac_length ip_prefix ip_length",type_two_route.type_two_route, yang_name="type-two-route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag mac-address mac-length ip-prefix ip-length', extensions=None), is_container='list', yang_name="type-two-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'bgp', 'rib', 'afi-safis', 'afi-safi', 'l2vpn-evpn', 'loc-rib', 'routes', 'route-distinguisher', 'type-two-mac-ip-advertisement']

  def _get_type_two_route(self):
    """
    Getter method for type_two_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_two_mac_ip_advertisement/type_two_route (list)

    YANG Description: List of MAC_IP Advertisement L2VPN EVPN routes

For the purpose of BGP route key processing, only the Ethernet Tag ID,
MAC Address Length, MAC Address, IP Address Length, and IP Address fields
are considered to be part of the prefix in the NLRI
    """
    return self.__type_two_route
      
  def _set_type_two_route(self, v, load=False):
    """
    Setter method for type_two_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_two_mac_ip_advertisement/type_two_route (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type_two_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type_two_route() directly.

    YANG Description: List of MAC_IP Advertisement L2VPN EVPN routes

For the purpose of BGP route key processing, only the Ethernet Tag ID,
MAC Address Length, MAC Address, IP Address Length, and IP Address fields
are considered to be part of the prefix in the NLRI
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("ethernet_tag mac_address mac_length ip_prefix ip_length",type_two_route.type_two_route, yang_name="type-two-route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag mac-address mac-length ip-prefix ip-length', extensions=None), is_container='list', yang_name="type-two-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type_two_route must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ethernet_tag mac_address mac_length ip_prefix ip_length",type_two_route.type_two_route, yang_name="type-two-route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag mac-address mac-length ip-prefix ip-length', extensions=None), is_container='list', yang_name="type-two-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=False)""",
        })

    self.__type_two_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type_two_route(self):
    self.__type_two_route = YANGDynClass(base=YANGListType("ethernet_tag mac_address mac_length ip_prefix ip_length",type_two_route.type_two_route, yang_name="type-two-route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag mac-address mac-length ip-prefix ip-length', extensions=None), is_container='list', yang_name="type-two-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=False)

  type_two_route = __builtin__.property(_get_type_two_route)


  _pyangbind_elements = OrderedDict([('type_two_route', type_two_route), ])


from . import type_two_route
class type_two_mac_ip_advertisement(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-two-mac-ip-advertisement. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top level container for MAC_IP Advertisement L2VPN EVPN routes
  """
  __slots__ = ('_path_helper', '_extmethods', '__type_two_route',)

  _yang_name = 'type-two-mac-ip-advertisement'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__type_two_route = YANGDynClass(base=YANGListType("ethernet_tag mac_address mac_length ip_prefix ip_length",type_two_route.type_two_route, yang_name="type-two-route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag mac-address mac-length ip-prefix ip-length', extensions=None), is_container='list', yang_name="type-two-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'bgp', 'rib', 'afi-safis', 'afi-safi', 'l2vpn-evpn', 'loc-rib', 'routes', 'route-distinguisher', 'type-two-mac-ip-advertisement']

  def _get_type_two_route(self):
    """
    Getter method for type_two_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_two_mac_ip_advertisement/type_two_route (list)

    YANG Description: List of MAC_IP Advertisement L2VPN EVPN routes

For the purpose of BGP route key processing, only the Ethernet Tag ID,
MAC Address Length, MAC Address, IP Address Length, and IP Address fields
are considered to be part of the prefix in the NLRI
    """
    return self.__type_two_route
      
  def _set_type_two_route(self, v, load=False):
    """
    Setter method for type_two_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_two_mac_ip_advertisement/type_two_route (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type_two_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type_two_route() directly.

    YANG Description: List of MAC_IP Advertisement L2VPN EVPN routes

For the purpose of BGP route key processing, only the Ethernet Tag ID,
MAC Address Length, MAC Address, IP Address Length, and IP Address fields
are considered to be part of the prefix in the NLRI
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("ethernet_tag mac_address mac_length ip_prefix ip_length",type_two_route.type_two_route, yang_name="type-two-route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag mac-address mac-length ip-prefix ip-length', extensions=None), is_container='list', yang_name="type-two-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type_two_route must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ethernet_tag mac_address mac_length ip_prefix ip_length",type_two_route.type_two_route, yang_name="type-two-route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag mac-address mac-length ip-prefix ip-length', extensions=None), is_container='list', yang_name="type-two-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=False)""",
        })

    self.__type_two_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type_two_route(self):
    self.__type_two_route = YANGDynClass(base=YANGListType("ethernet_tag mac_address mac_length ip_prefix ip_length",type_two_route.type_two_route, yang_name="type-two-route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag mac-address mac-length ip-prefix ip-length', extensions=None), is_container='list', yang_name="type-two-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=False)

  type_two_route = __builtin__.property(_get_type_two_route)


  _pyangbind_elements = OrderedDict([('type_two_route', type_two_route), ])


from . import type_two_route
class type_two_mac_ip_advertisement(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-two-mac-ip-advertisement. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top level container for MAC_IP Advertisement L2VPN EVPN routes
  """
  __slots__ = ('_path_helper', '_extmethods', '__type_two_route',)

  _yang_name = 'type-two-mac-ip-advertisement'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__type_two_route = YANGDynClass(base=YANGListType("ethernet_tag mac_address mac_length ip_prefix ip_length",type_two_route.type_two_route, yang_name="type-two-route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag mac-address mac-length ip-prefix ip-length', extensions=None), is_container='list', yang_name="type-two-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'bgp', 'rib', 'afi-safis', 'afi-safi', 'l2vpn-evpn', 'loc-rib', 'routes', 'route-distinguisher', 'type-two-mac-ip-advertisement']

  def _get_type_two_route(self):
    """
    Getter method for type_two_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_two_mac_ip_advertisement/type_two_route (list)

    YANG Description: List of MAC_IP Advertisement L2VPN EVPN routes

For the purpose of BGP route key processing, only the Ethernet Tag ID,
MAC Address Length, MAC Address, IP Address Length, and IP Address fields
are considered to be part of the prefix in the NLRI
    """
    return self.__type_two_route
      
  def _set_type_two_route(self, v, load=False):
    """
    Setter method for type_two_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_two_mac_ip_advertisement/type_two_route (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type_two_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type_two_route() directly.

    YANG Description: List of MAC_IP Advertisement L2VPN EVPN routes

For the purpose of BGP route key processing, only the Ethernet Tag ID,
MAC Address Length, MAC Address, IP Address Length, and IP Address fields
are considered to be part of the prefix in the NLRI
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("ethernet_tag mac_address mac_length ip_prefix ip_length",type_two_route.type_two_route, yang_name="type-two-route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag mac-address mac-length ip-prefix ip-length', extensions=None), is_container='list', yang_name="type-two-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type_two_route must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ethernet_tag mac_address mac_length ip_prefix ip_length",type_two_route.type_two_route, yang_name="type-two-route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag mac-address mac-length ip-prefix ip-length', extensions=None), is_container='list', yang_name="type-two-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=False)""",
        })

    self.__type_two_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type_two_route(self):
    self.__type_two_route = YANGDynClass(base=YANGListType("ethernet_tag mac_address mac_length ip_prefix ip_length",type_two_route.type_two_route, yang_name="type-two-route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag mac-address mac-length ip-prefix ip-length', extensions=None), is_container='list', yang_name="type-two-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=False)

  type_two_route = __builtin__.property(_get_type_two_route)


  _pyangbind_elements = OrderedDict([('type_two_route', type_two_route), ])


from . import type_two_route
class type_two_mac_ip_advertisement(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-two-mac-ip-advertisement. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top level container for MAC_IP Advertisement L2VPN EVPN routes
  """
  __slots__ = ('_path_helper', '_extmethods', '__type_two_route',)

  _yang_name = 'type-two-mac-ip-advertisement'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__type_two_route = YANGDynClass(base=YANGListType("ethernet_tag mac_address mac_length ip_prefix ip_length",type_two_route.type_two_route, yang_name="type-two-route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag mac-address mac-length ip-prefix ip-length', extensions=None), is_container='list', yang_name="type-two-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'bgp', 'rib', 'afi-safis', 'afi-safi', 'l2vpn-evpn', 'loc-rib', 'routes', 'route-distinguisher', 'type-two-mac-ip-advertisement']

  def _get_type_two_route(self):
    """
    Getter method for type_two_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_two_mac_ip_advertisement/type_two_route (list)

    YANG Description: List of MAC_IP Advertisement L2VPN EVPN routes

For the purpose of BGP route key processing, only the Ethernet Tag ID,
MAC Address Length, MAC Address, IP Address Length, and IP Address fields
are considered to be part of the prefix in the NLRI
    """
    return self.__type_two_route
      
  def _set_type_two_route(self, v, load=False):
    """
    Setter method for type_two_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_two_mac_ip_advertisement/type_two_route (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type_two_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type_two_route() directly.

    YANG Description: List of MAC_IP Advertisement L2VPN EVPN routes

For the purpose of BGP route key processing, only the Ethernet Tag ID,
MAC Address Length, MAC Address, IP Address Length, and IP Address fields
are considered to be part of the prefix in the NLRI
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("ethernet_tag mac_address mac_length ip_prefix ip_length",type_two_route.type_two_route, yang_name="type-two-route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag mac-address mac-length ip-prefix ip-length', extensions=None), is_container='list', yang_name="type-two-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type_two_route must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ethernet_tag mac_address mac_length ip_prefix ip_length",type_two_route.type_two_route, yang_name="type-two-route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag mac-address mac-length ip-prefix ip-length', extensions=None), is_container='list', yang_name="type-two-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=False)""",
        })

    self.__type_two_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type_two_route(self):
    self.__type_two_route = YANGDynClass(base=YANGListType("ethernet_tag mac_address mac_length ip_prefix ip_length",type_two_route.type_two_route, yang_name="type-two-route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag mac-address mac-length ip-prefix ip-length', extensions=None), is_container='list', yang_name="type-two-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=False)

  type_two_route = __builtin__.property(_get_type_two_route)


  _pyangbind_elements = OrderedDict([('type_two_route', type_two_route), ])


