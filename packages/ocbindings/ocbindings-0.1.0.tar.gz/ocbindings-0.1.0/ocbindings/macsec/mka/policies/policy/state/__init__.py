# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-macsec - based on the path /macsec/mka/policies/policy/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for MKA policy
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__key_server_priority','__macsec_cipher_suite','__confidentiality_offset','__delay_protection','__include_icv_indicator','__include_sci','__sak_rekey_interval','__sak_rekey_on_live_peer_loss','__use_updated_eth_header',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/macsec'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='string', is_config=False)
    self.__key_server_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(16), is_leaf=True, yang_name="key-server-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='uint8', is_config=False)
    self.__macsec_cipher_suite = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'GCM_AES_128': {}, 'GCM_AES_256': {}, 'GCM_AES_XPN_128': {}, 'GCM_AES_XPN_256': {}},)), is_leaf=False, yang_name="macsec-cipher-suite", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='macsec-types:macsec-cipher-suite', is_config=False)
    self.__confidentiality_offset = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'0_BYTES': {}, '30_BYTES': {}, '50_BYTES': {}},), default=str("0_BYTES"), is_leaf=True, yang_name="confidentiality-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='macsec-types:confidentiality-offset', is_config=False)
    self.__delay_protection = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="delay-protection", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)
    self.__include_icv_indicator = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="include-icv-indicator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)
    self.__include_sci = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="include-sci", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)
    self.__sak_rekey_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0', '30..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="sak-rekey-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='uint32', is_config=False)
    self.__sak_rekey_on_live_peer_loss = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="sak-rekey-on-live-peer-loss", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)
    self.__use_updated_eth_header = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="use-updated-eth-header", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['macsec', 'mka', 'policies', 'policy', 'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /macsec/mka/policies/policy/state/name (string)

    YANG Description: Name of the MKA policy.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /macsec/mka/policies/policy/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name of the MKA policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='string', is_config=False)


  def _get_key_server_priority(self):
    """
    Getter method for key_server_priority, mapped from YANG variable /macsec/mka/policies/policy/state/key_server_priority (uint8)

    YANG Description: Specifies the key server priority used by the MACsec Key Agreement
(MKA) protocol to select the key server when MACsec is enabled using
static connectivity association key (CAK) security mode. The switch with
the lower priority-number is selected as the key server. If the
priority-number is identical on both sides of a point-to-point link, the
MKA protocol selects the device with the lower MAC address as the key
server
    """
    return self.__key_server_priority
      
  def _set_key_server_priority(self, v, load=False):
    """
    Setter method for key_server_priority, mapped from YANG variable /macsec/mka/policies/policy/state/key_server_priority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_key_server_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_key_server_priority() directly.

    YANG Description: Specifies the key server priority used by the MACsec Key Agreement
(MKA) protocol to select the key server when MACsec is enabled using
static connectivity association key (CAK) security mode. The switch with
the lower priority-number is selected as the key server. If the
priority-number is identical on both sides of a point-to-point link, the
MKA protocol selects the device with the lower MAC address as the key
server
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(16), is_leaf=True, yang_name="key-server-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """key_server_priority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(16), is_leaf=True, yang_name="key-server-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='uint8', is_config=False)""",
        })

    self.__key_server_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_key_server_priority(self):
    self.__key_server_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(16), is_leaf=True, yang_name="key-server-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='uint8', is_config=False)


  def _get_macsec_cipher_suite(self):
    """
    Getter method for macsec_cipher_suite, mapped from YANG variable /macsec/mka/policies/policy/state/macsec_cipher_suite (macsec-types:macsec-cipher-suite)

    YANG Description: Set Cipher suite(s) for SAK derivation
    """
    return self.__macsec_cipher_suite
      
  def _set_macsec_cipher_suite(self, v, load=False):
    """
    Setter method for macsec_cipher_suite, mapped from YANG variable /macsec/mka/policies/policy/state/macsec_cipher_suite (macsec-types:macsec-cipher-suite)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_macsec_cipher_suite is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_macsec_cipher_suite() directly.

    YANG Description: Set Cipher suite(s) for SAK derivation
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'GCM_AES_128': {}, 'GCM_AES_256': {}, 'GCM_AES_XPN_128': {}, 'GCM_AES_XPN_256': {}},)), is_leaf=False, yang_name="macsec-cipher-suite", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='macsec-types:macsec-cipher-suite', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """macsec_cipher_suite must be of a type compatible with macsec-types:macsec-cipher-suite""",
          'defined-type': "macsec-types:macsec-cipher-suite",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'GCM_AES_128': {}, 'GCM_AES_256': {}, 'GCM_AES_XPN_128': {}, 'GCM_AES_XPN_256': {}},)), is_leaf=False, yang_name="macsec-cipher-suite", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='macsec-types:macsec-cipher-suite', is_config=False)""",
        })

    self.__macsec_cipher_suite = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_macsec_cipher_suite(self):
    self.__macsec_cipher_suite = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'GCM_AES_128': {}, 'GCM_AES_256': {}, 'GCM_AES_XPN_128': {}, 'GCM_AES_XPN_256': {}},)), is_leaf=False, yang_name="macsec-cipher-suite", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='macsec-types:macsec-cipher-suite', is_config=False)


  def _get_confidentiality_offset(self):
    """
    Getter method for confidentiality_offset, mapped from YANG variable /macsec/mka/policies/policy/state/confidentiality_offset (macsec-types:confidentiality-offset)

    YANG Description: The confidentiality offset specifies a number of octets in an Ethernet
frame that are sent in unencrypted plain-text
    """
    return self.__confidentiality_offset
      
  def _set_confidentiality_offset(self, v, load=False):
    """
    Setter method for confidentiality_offset, mapped from YANG variable /macsec/mka/policies/policy/state/confidentiality_offset (macsec-types:confidentiality-offset)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_confidentiality_offset is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_confidentiality_offset() directly.

    YANG Description: The confidentiality offset specifies a number of octets in an Ethernet
frame that are sent in unencrypted plain-text
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'0_BYTES': {}, '30_BYTES': {}, '50_BYTES': {}},), default=str("0_BYTES"), is_leaf=True, yang_name="confidentiality-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='macsec-types:confidentiality-offset', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """confidentiality_offset must be of a type compatible with macsec-types:confidentiality-offset""",
          'defined-type': "macsec-types:confidentiality-offset",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'0_BYTES': {}, '30_BYTES': {}, '50_BYTES': {}},), default=str("0_BYTES"), is_leaf=True, yang_name="confidentiality-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='macsec-types:confidentiality-offset', is_config=False)""",
        })

    self.__confidentiality_offset = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_confidentiality_offset(self):
    self.__confidentiality_offset = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'0_BYTES': {}, '30_BYTES': {}, '50_BYTES': {}},), default=str("0_BYTES"), is_leaf=True, yang_name="confidentiality-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='macsec-types:confidentiality-offset', is_config=False)


  def _get_delay_protection(self):
    """
    Getter method for delay_protection, mapped from YANG variable /macsec/mka/policies/policy/state/delay_protection (boolean)

    YANG Description: Traffic delayed longer than 2 seconds is rejected by the interfaces
enabled with delay protection.
    """
    return self.__delay_protection
      
  def _set_delay_protection(self, v, load=False):
    """
    Setter method for delay_protection, mapped from YANG variable /macsec/mka/policies/policy/state/delay_protection (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delay_protection is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delay_protection() directly.

    YANG Description: Traffic delayed longer than 2 seconds is rejected by the interfaces
enabled with delay protection.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="delay-protection", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delay_protection must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="delay-protection", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)""",
        })

    self.__delay_protection = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delay_protection(self):
    self.__delay_protection = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="delay-protection", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)


  def _get_include_icv_indicator(self):
    """
    Getter method for include_icv_indicator, mapped from YANG variable /macsec/mka/policies/policy/state/include_icv_indicator (boolean)

    YANG Description: Generate and include an Integrity Check Value (ICV) field in the MKPDU.
For compatibility with previous MACsec implementation that do not
require an ICV
    """
    return self.__include_icv_indicator
      
  def _set_include_icv_indicator(self, v, load=False):
    """
    Setter method for include_icv_indicator, mapped from YANG variable /macsec/mka/policies/policy/state/include_icv_indicator (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_include_icv_indicator is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_include_icv_indicator() directly.

    YANG Description: Generate and include an Integrity Check Value (ICV) field in the MKPDU.
For compatibility with previous MACsec implementation that do not
require an ICV
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="include-icv-indicator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """include_icv_indicator must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="include-icv-indicator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)""",
        })

    self.__include_icv_indicator = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_include_icv_indicator(self):
    self.__include_icv_indicator = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="include-icv-indicator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)


  def _get_include_sci(self):
    """
    Getter method for include_sci, mapped from YANG variable /macsec/mka/policies/policy/state/include_sci (boolean)

    YANG Description: Generate and include a Secure Channel Identifier (SCI).
    """
    return self.__include_sci
      
  def _set_include_sci(self, v, load=False):
    """
    Setter method for include_sci, mapped from YANG variable /macsec/mka/policies/policy/state/include_sci (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_include_sci is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_include_sci() directly.

    YANG Description: Generate and include a Secure Channel Identifier (SCI).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="include-sci", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """include_sci must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="include-sci", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)""",
        })

    self.__include_sci = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_include_sci(self):
    self.__include_sci = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="include-sci", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)


  def _get_sak_rekey_interval(self):
    """
    Getter method for sak_rekey_interval, mapped from YANG variable /macsec/mka/policies/policy/state/sak_rekey_interval (uint32)

    YANG Description: SAK Rekey interval in seconds. The default value is 0 where no rekey is
performed.
    """
    return self.__sak_rekey_interval
      
  def _set_sak_rekey_interval(self, v, load=False):
    """
    Setter method for sak_rekey_interval, mapped from YANG variable /macsec/mka/policies/policy/state/sak_rekey_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sak_rekey_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sak_rekey_interval() directly.

    YANG Description: SAK Rekey interval in seconds. The default value is 0 where no rekey is
performed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0', '30..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="sak-rekey-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sak_rekey_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0', '30..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="sak-rekey-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='uint32', is_config=False)""",
        })

    self.__sak_rekey_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sak_rekey_interval(self):
    self.__sak_rekey_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0', '30..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="sak-rekey-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='uint32', is_config=False)


  def _get_sak_rekey_on_live_peer_loss(self):
    """
    Getter method for sak_rekey_on_live_peer_loss, mapped from YANG variable /macsec/mka/policies/policy/state/sak_rekey_on_live_peer_loss (boolean)

    YANG Description: Rekey on peer loss
    """
    return self.__sak_rekey_on_live_peer_loss
      
  def _set_sak_rekey_on_live_peer_loss(self, v, load=False):
    """
    Setter method for sak_rekey_on_live_peer_loss, mapped from YANG variable /macsec/mka/policies/policy/state/sak_rekey_on_live_peer_loss (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sak_rekey_on_live_peer_loss is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sak_rekey_on_live_peer_loss() directly.

    YANG Description: Rekey on peer loss
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="sak-rekey-on-live-peer-loss", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sak_rekey_on_live_peer_loss must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="sak-rekey-on-live-peer-loss", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)""",
        })

    self.__sak_rekey_on_live_peer_loss = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sak_rekey_on_live_peer_loss(self):
    self.__sak_rekey_on_live_peer_loss = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="sak-rekey-on-live-peer-loss", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)


  def _get_use_updated_eth_header(self):
    """
    Getter method for use_updated_eth_header, mapped from YANG variable /macsec/mka/policies/policy/state/use_updated_eth_header (boolean)

    YANG Description: Use updated ethernet header for ICV calculation. In case the Ethernet
frame headers change, use the updated headers to calculate the ICV.
    """
    return self.__use_updated_eth_header
      
  def _set_use_updated_eth_header(self, v, load=False):
    """
    Setter method for use_updated_eth_header, mapped from YANG variable /macsec/mka/policies/policy/state/use_updated_eth_header (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_use_updated_eth_header is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_use_updated_eth_header() directly.

    YANG Description: Use updated ethernet header for ICV calculation. In case the Ethernet
frame headers change, use the updated headers to calculate the ICV.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="use-updated-eth-header", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """use_updated_eth_header must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="use-updated-eth-header", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)""",
        })

    self.__use_updated_eth_header = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_use_updated_eth_header(self):
    self.__use_updated_eth_header = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="use-updated-eth-header", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)

  name = __builtin__.property(_get_name)
  key_server_priority = __builtin__.property(_get_key_server_priority)
  macsec_cipher_suite = __builtin__.property(_get_macsec_cipher_suite)
  confidentiality_offset = __builtin__.property(_get_confidentiality_offset)
  delay_protection = __builtin__.property(_get_delay_protection)
  include_icv_indicator = __builtin__.property(_get_include_icv_indicator)
  include_sci = __builtin__.property(_get_include_sci)
  sak_rekey_interval = __builtin__.property(_get_sak_rekey_interval)
  sak_rekey_on_live_peer_loss = __builtin__.property(_get_sak_rekey_on_live_peer_loss)
  use_updated_eth_header = __builtin__.property(_get_use_updated_eth_header)


  _pyangbind_elements = OrderedDict([('name', name), ('key_server_priority', key_server_priority), ('macsec_cipher_suite', macsec_cipher_suite), ('confidentiality_offset', confidentiality_offset), ('delay_protection', delay_protection), ('include_icv_indicator', include_icv_indicator), ('include_sci', include_sci), ('sak_rekey_interval', sak_rekey_interval), ('sak_rekey_on_live_peer_loss', sak_rekey_on_live_peer_loss), ('use_updated_eth_header', use_updated_eth_header), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-macsec - based on the path /macsec/mka/policies/policy/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for MKA policy
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__key_server_priority','__macsec_cipher_suite','__confidentiality_offset','__delay_protection','__include_icv_indicator','__include_sci','__sak_rekey_interval','__sak_rekey_on_live_peer_loss','__use_updated_eth_header',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/macsec'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='string', is_config=False)
    self.__key_server_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(16), is_leaf=True, yang_name="key-server-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='uint8', is_config=False)
    self.__macsec_cipher_suite = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'GCM_AES_128': {}, 'GCM_AES_256': {}, 'GCM_AES_XPN_128': {}, 'GCM_AES_XPN_256': {}},)), is_leaf=False, yang_name="macsec-cipher-suite", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='macsec-types:macsec-cipher-suite', is_config=False)
    self.__confidentiality_offset = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'0_BYTES': {}, '30_BYTES': {}, '50_BYTES': {}},), default=str("0_BYTES"), is_leaf=True, yang_name="confidentiality-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='macsec-types:confidentiality-offset', is_config=False)
    self.__delay_protection = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="delay-protection", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)
    self.__include_icv_indicator = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="include-icv-indicator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)
    self.__include_sci = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="include-sci", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)
    self.__sak_rekey_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0', '30..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="sak-rekey-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='uint32', is_config=False)
    self.__sak_rekey_on_live_peer_loss = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="sak-rekey-on-live-peer-loss", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)
    self.__use_updated_eth_header = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="use-updated-eth-header", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['macsec', 'mka', 'policies', 'policy', 'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /macsec/mka/policies/policy/state/name (string)

    YANG Description: Name of the MKA policy.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /macsec/mka/policies/policy/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name of the MKA policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='string', is_config=False)


  def _get_key_server_priority(self):
    """
    Getter method for key_server_priority, mapped from YANG variable /macsec/mka/policies/policy/state/key_server_priority (uint8)

    YANG Description: Specifies the key server priority used by the MACsec Key Agreement
(MKA) protocol to select the key server when MACsec is enabled using
static connectivity association key (CAK) security mode. The switch with
the lower priority-number is selected as the key server. If the
priority-number is identical on both sides of a point-to-point link, the
MKA protocol selects the device with the lower MAC address as the key
server
    """
    return self.__key_server_priority
      
  def _set_key_server_priority(self, v, load=False):
    """
    Setter method for key_server_priority, mapped from YANG variable /macsec/mka/policies/policy/state/key_server_priority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_key_server_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_key_server_priority() directly.

    YANG Description: Specifies the key server priority used by the MACsec Key Agreement
(MKA) protocol to select the key server when MACsec is enabled using
static connectivity association key (CAK) security mode. The switch with
the lower priority-number is selected as the key server. If the
priority-number is identical on both sides of a point-to-point link, the
MKA protocol selects the device with the lower MAC address as the key
server
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(16), is_leaf=True, yang_name="key-server-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """key_server_priority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(16), is_leaf=True, yang_name="key-server-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='uint8', is_config=False)""",
        })

    self.__key_server_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_key_server_priority(self):
    self.__key_server_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(16), is_leaf=True, yang_name="key-server-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='uint8', is_config=False)


  def _get_macsec_cipher_suite(self):
    """
    Getter method for macsec_cipher_suite, mapped from YANG variable /macsec/mka/policies/policy/state/macsec_cipher_suite (macsec-types:macsec-cipher-suite)

    YANG Description: Set Cipher suite(s) for SAK derivation
    """
    return self.__macsec_cipher_suite
      
  def _set_macsec_cipher_suite(self, v, load=False):
    """
    Setter method for macsec_cipher_suite, mapped from YANG variable /macsec/mka/policies/policy/state/macsec_cipher_suite (macsec-types:macsec-cipher-suite)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_macsec_cipher_suite is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_macsec_cipher_suite() directly.

    YANG Description: Set Cipher suite(s) for SAK derivation
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'GCM_AES_128': {}, 'GCM_AES_256': {}, 'GCM_AES_XPN_128': {}, 'GCM_AES_XPN_256': {}},)), is_leaf=False, yang_name="macsec-cipher-suite", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='macsec-types:macsec-cipher-suite', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """macsec_cipher_suite must be of a type compatible with macsec-types:macsec-cipher-suite""",
          'defined-type': "macsec-types:macsec-cipher-suite",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'GCM_AES_128': {}, 'GCM_AES_256': {}, 'GCM_AES_XPN_128': {}, 'GCM_AES_XPN_256': {}},)), is_leaf=False, yang_name="macsec-cipher-suite", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='macsec-types:macsec-cipher-suite', is_config=False)""",
        })

    self.__macsec_cipher_suite = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_macsec_cipher_suite(self):
    self.__macsec_cipher_suite = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'GCM_AES_128': {}, 'GCM_AES_256': {}, 'GCM_AES_XPN_128': {}, 'GCM_AES_XPN_256': {}},)), is_leaf=False, yang_name="macsec-cipher-suite", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='macsec-types:macsec-cipher-suite', is_config=False)


  def _get_confidentiality_offset(self):
    """
    Getter method for confidentiality_offset, mapped from YANG variable /macsec/mka/policies/policy/state/confidentiality_offset (macsec-types:confidentiality-offset)

    YANG Description: The confidentiality offset specifies a number of octets in an Ethernet
frame that are sent in unencrypted plain-text
    """
    return self.__confidentiality_offset
      
  def _set_confidentiality_offset(self, v, load=False):
    """
    Setter method for confidentiality_offset, mapped from YANG variable /macsec/mka/policies/policy/state/confidentiality_offset (macsec-types:confidentiality-offset)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_confidentiality_offset is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_confidentiality_offset() directly.

    YANG Description: The confidentiality offset specifies a number of octets in an Ethernet
frame that are sent in unencrypted plain-text
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'0_BYTES': {}, '30_BYTES': {}, '50_BYTES': {}},), default=str("0_BYTES"), is_leaf=True, yang_name="confidentiality-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='macsec-types:confidentiality-offset', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """confidentiality_offset must be of a type compatible with macsec-types:confidentiality-offset""",
          'defined-type': "macsec-types:confidentiality-offset",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'0_BYTES': {}, '30_BYTES': {}, '50_BYTES': {}},), default=str("0_BYTES"), is_leaf=True, yang_name="confidentiality-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='macsec-types:confidentiality-offset', is_config=False)""",
        })

    self.__confidentiality_offset = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_confidentiality_offset(self):
    self.__confidentiality_offset = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'0_BYTES': {}, '30_BYTES': {}, '50_BYTES': {}},), default=str("0_BYTES"), is_leaf=True, yang_name="confidentiality-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='macsec-types:confidentiality-offset', is_config=False)


  def _get_delay_protection(self):
    """
    Getter method for delay_protection, mapped from YANG variable /macsec/mka/policies/policy/state/delay_protection (boolean)

    YANG Description: Traffic delayed longer than 2 seconds is rejected by the interfaces
enabled with delay protection.
    """
    return self.__delay_protection
      
  def _set_delay_protection(self, v, load=False):
    """
    Setter method for delay_protection, mapped from YANG variable /macsec/mka/policies/policy/state/delay_protection (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delay_protection is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delay_protection() directly.

    YANG Description: Traffic delayed longer than 2 seconds is rejected by the interfaces
enabled with delay protection.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="delay-protection", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delay_protection must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="delay-protection", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)""",
        })

    self.__delay_protection = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delay_protection(self):
    self.__delay_protection = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="delay-protection", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)


  def _get_include_icv_indicator(self):
    """
    Getter method for include_icv_indicator, mapped from YANG variable /macsec/mka/policies/policy/state/include_icv_indicator (boolean)

    YANG Description: Generate and include an Integrity Check Value (ICV) field in the MKPDU.
For compatibility with previous MACsec implementation that do not
require an ICV
    """
    return self.__include_icv_indicator
      
  def _set_include_icv_indicator(self, v, load=False):
    """
    Setter method for include_icv_indicator, mapped from YANG variable /macsec/mka/policies/policy/state/include_icv_indicator (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_include_icv_indicator is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_include_icv_indicator() directly.

    YANG Description: Generate and include an Integrity Check Value (ICV) field in the MKPDU.
For compatibility with previous MACsec implementation that do not
require an ICV
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="include-icv-indicator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """include_icv_indicator must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="include-icv-indicator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)""",
        })

    self.__include_icv_indicator = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_include_icv_indicator(self):
    self.__include_icv_indicator = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="include-icv-indicator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)


  def _get_include_sci(self):
    """
    Getter method for include_sci, mapped from YANG variable /macsec/mka/policies/policy/state/include_sci (boolean)

    YANG Description: Generate and include a Secure Channel Identifier (SCI).
    """
    return self.__include_sci
      
  def _set_include_sci(self, v, load=False):
    """
    Setter method for include_sci, mapped from YANG variable /macsec/mka/policies/policy/state/include_sci (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_include_sci is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_include_sci() directly.

    YANG Description: Generate and include a Secure Channel Identifier (SCI).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="include-sci", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """include_sci must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="include-sci", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)""",
        })

    self.__include_sci = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_include_sci(self):
    self.__include_sci = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="include-sci", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)


  def _get_sak_rekey_interval(self):
    """
    Getter method for sak_rekey_interval, mapped from YANG variable /macsec/mka/policies/policy/state/sak_rekey_interval (uint32)

    YANG Description: SAK Rekey interval in seconds. The default value is 0 where no rekey is
performed.
    """
    return self.__sak_rekey_interval
      
  def _set_sak_rekey_interval(self, v, load=False):
    """
    Setter method for sak_rekey_interval, mapped from YANG variable /macsec/mka/policies/policy/state/sak_rekey_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sak_rekey_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sak_rekey_interval() directly.

    YANG Description: SAK Rekey interval in seconds. The default value is 0 where no rekey is
performed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0', '30..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="sak-rekey-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sak_rekey_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0', '30..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="sak-rekey-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='uint32', is_config=False)""",
        })

    self.__sak_rekey_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sak_rekey_interval(self):
    self.__sak_rekey_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0', '30..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="sak-rekey-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='uint32', is_config=False)


  def _get_sak_rekey_on_live_peer_loss(self):
    """
    Getter method for sak_rekey_on_live_peer_loss, mapped from YANG variable /macsec/mka/policies/policy/state/sak_rekey_on_live_peer_loss (boolean)

    YANG Description: Rekey on peer loss
    """
    return self.__sak_rekey_on_live_peer_loss
      
  def _set_sak_rekey_on_live_peer_loss(self, v, load=False):
    """
    Setter method for sak_rekey_on_live_peer_loss, mapped from YANG variable /macsec/mka/policies/policy/state/sak_rekey_on_live_peer_loss (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sak_rekey_on_live_peer_loss is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sak_rekey_on_live_peer_loss() directly.

    YANG Description: Rekey on peer loss
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="sak-rekey-on-live-peer-loss", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sak_rekey_on_live_peer_loss must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="sak-rekey-on-live-peer-loss", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)""",
        })

    self.__sak_rekey_on_live_peer_loss = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sak_rekey_on_live_peer_loss(self):
    self.__sak_rekey_on_live_peer_loss = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="sak-rekey-on-live-peer-loss", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)


  def _get_use_updated_eth_header(self):
    """
    Getter method for use_updated_eth_header, mapped from YANG variable /macsec/mka/policies/policy/state/use_updated_eth_header (boolean)

    YANG Description: Use updated ethernet header for ICV calculation. In case the Ethernet
frame headers change, use the updated headers to calculate the ICV.
    """
    return self.__use_updated_eth_header
      
  def _set_use_updated_eth_header(self, v, load=False):
    """
    Setter method for use_updated_eth_header, mapped from YANG variable /macsec/mka/policies/policy/state/use_updated_eth_header (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_use_updated_eth_header is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_use_updated_eth_header() directly.

    YANG Description: Use updated ethernet header for ICV calculation. In case the Ethernet
frame headers change, use the updated headers to calculate the ICV.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="use-updated-eth-header", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """use_updated_eth_header must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="use-updated-eth-header", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)""",
        })

    self.__use_updated_eth_header = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_use_updated_eth_header(self):
    self.__use_updated_eth_header = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="use-updated-eth-header", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='boolean', is_config=False)

  name = __builtin__.property(_get_name)
  key_server_priority = __builtin__.property(_get_key_server_priority)
  macsec_cipher_suite = __builtin__.property(_get_macsec_cipher_suite)
  confidentiality_offset = __builtin__.property(_get_confidentiality_offset)
  delay_protection = __builtin__.property(_get_delay_protection)
  include_icv_indicator = __builtin__.property(_get_include_icv_indicator)
  include_sci = __builtin__.property(_get_include_sci)
  sak_rekey_interval = __builtin__.property(_get_sak_rekey_interval)
  sak_rekey_on_live_peer_loss = __builtin__.property(_get_sak_rekey_on_live_peer_loss)
  use_updated_eth_header = __builtin__.property(_get_use_updated_eth_header)


  _pyangbind_elements = OrderedDict([('name', name), ('key_server_priority', key_server_priority), ('macsec_cipher_suite', macsec_cipher_suite), ('confidentiality_offset', confidentiality_offset), ('delay_protection', delay_protection), ('include_icv_indicator', include_icv_indicator), ('include_sci', include_sci), ('sak_rekey_interval', sak_rekey_interval), ('sak_rekey_on_live_peer_loss', sak_rekey_on_live_peer_loss), ('use_updated_eth_header', use_updated_eth_header), ])


