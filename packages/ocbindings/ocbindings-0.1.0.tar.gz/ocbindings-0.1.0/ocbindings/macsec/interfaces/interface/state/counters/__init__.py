# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-macsec - based on the path /macsec/interfaces/interface/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: MACsec interface counters
  """
  __slots__ = ('_path_helper', '_extmethods', '__tx_untagged_pkts','__rx_untagged_pkts','__rx_badtag_pkts','__rx_unknownsci_pkts','__rx_nosci_pkts','__rx_late_pkts',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/macsec'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__tx_untagged_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-untagged-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    self.__rx_untagged_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-untagged-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    self.__rx_badtag_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-badtag-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    self.__rx_unknownsci_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-unknownsci-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    self.__rx_nosci_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-nosci-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    self.__rx_late_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-late-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['macsec', 'interfaces', 'interface', 'state', 'counters']

  def _get_tx_untagged_pkts(self):
    """
    Getter method for tx_untagged_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/tx_untagged_pkts (oc-yang:counter64)

    YANG Description: MACsec interface level Transmit untagged Packets counter.
This counter will increment if MACsec is enabled on interface and the
outgoing packet is not tagged with MACsec header.
    """
    return self.__tx_untagged_pkts
      
  def _set_tx_untagged_pkts(self, v, load=False):
    """
    Setter method for tx_untagged_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/tx_untagged_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_untagged_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_untagged_pkts() directly.

    YANG Description: MACsec interface level Transmit untagged Packets counter.
This counter will increment if MACsec is enabled on interface and the
outgoing packet is not tagged with MACsec header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-untagged-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_untagged_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-untagged-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__tx_untagged_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_untagged_pkts(self):
    self.__tx_untagged_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-untagged-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)


  def _get_rx_untagged_pkts(self):
    """
    Getter method for rx_untagged_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_untagged_pkts (oc-yang:counter64)

    YANG Description: MACsec interface level Receive untagged Packets counter.
This counter will increment if MACsec is enabled on interface and the
incoming packet does not have MACsec tag.
    """
    return self.__rx_untagged_pkts
      
  def _set_rx_untagged_pkts(self, v, load=False):
    """
    Setter method for rx_untagged_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_untagged_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_untagged_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_untagged_pkts() directly.

    YANG Description: MACsec interface level Receive untagged Packets counter.
This counter will increment if MACsec is enabled on interface and the
incoming packet does not have MACsec tag.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-untagged-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_untagged_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-untagged-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rx_untagged_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_untagged_pkts(self):
    self.__rx_untagged_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-untagged-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)


  def _get_rx_badtag_pkts(self):
    """
    Getter method for rx_badtag_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_badtag_pkts (oc-yang:counter64)

    YANG Description: MACsec interface level Receive Bad Tag Packets counter.
This counter will increment if MACsec is enabled on interface and
incoming packet has incorrect MACsec tag.
    """
    return self.__rx_badtag_pkts
      
  def _set_rx_badtag_pkts(self, v, load=False):
    """
    Setter method for rx_badtag_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_badtag_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_badtag_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_badtag_pkts() directly.

    YANG Description: MACsec interface level Receive Bad Tag Packets counter.
This counter will increment if MACsec is enabled on interface and
incoming packet has incorrect MACsec tag.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-badtag-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_badtag_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-badtag-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rx_badtag_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_badtag_pkts(self):
    self.__rx_badtag_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-badtag-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)


  def _get_rx_unknownsci_pkts(self):
    """
    Getter method for rx_unknownsci_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_unknownsci_pkts (oc-yang:counter64)

    YANG Description: MACsec interface level Receive Unknown SCI Packets counter.
This counter will increment if MACsec is enabled on the interface and
SCI present in the MACsec tag of the incoming packet does not match any
SCI present in ingress SCI table.
    """
    return self.__rx_unknownsci_pkts
      
  def _set_rx_unknownsci_pkts(self, v, load=False):
    """
    Setter method for rx_unknownsci_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_unknownsci_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_unknownsci_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_unknownsci_pkts() directly.

    YANG Description: MACsec interface level Receive Unknown SCI Packets counter.
This counter will increment if MACsec is enabled on the interface and
SCI present in the MACsec tag of the incoming packet does not match any
SCI present in ingress SCI table.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-unknownsci-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_unknownsci_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-unknownsci-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rx_unknownsci_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_unknownsci_pkts(self):
    self.__rx_unknownsci_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-unknownsci-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)


  def _get_rx_nosci_pkts(self):
    """
    Getter method for rx_nosci_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_nosci_pkts (oc-yang:counter64)

    YANG Description: MACsec interface level Receive No SCI Packets counter.
This counter will increment if MACsec is enabled on interface and
incoming packet does not have SCI field in MACsec tag.
    """
    return self.__rx_nosci_pkts
      
  def _set_rx_nosci_pkts(self, v, load=False):
    """
    Setter method for rx_nosci_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_nosci_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_nosci_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_nosci_pkts() directly.

    YANG Description: MACsec interface level Receive No SCI Packets counter.
This counter will increment if MACsec is enabled on interface and
incoming packet does not have SCI field in MACsec tag.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-nosci-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_nosci_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-nosci-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rx_nosci_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_nosci_pkts(self):
    self.__rx_nosci_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-nosci-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)


  def _get_rx_late_pkts(self):
    """
    Getter method for rx_late_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_late_pkts (oc-yang:counter64)

    YANG Description: MACsec interface level Receive Late Packets counter.
This counter will increment if MACsec is enabled on the interface and
packet number of incoming packet is less than the lowest acceptable
packet number and replay protection is enabled.
    """
    return self.__rx_late_pkts
      
  def _set_rx_late_pkts(self, v, load=False):
    """
    Setter method for rx_late_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_late_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_late_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_late_pkts() directly.

    YANG Description: MACsec interface level Receive Late Packets counter.
This counter will increment if MACsec is enabled on the interface and
packet number of incoming packet is less than the lowest acceptable
packet number and replay protection is enabled.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-late-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_late_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-late-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rx_late_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_late_pkts(self):
    self.__rx_late_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-late-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)

  tx_untagged_pkts = __builtin__.property(_get_tx_untagged_pkts)
  rx_untagged_pkts = __builtin__.property(_get_rx_untagged_pkts)
  rx_badtag_pkts = __builtin__.property(_get_rx_badtag_pkts)
  rx_unknownsci_pkts = __builtin__.property(_get_rx_unknownsci_pkts)
  rx_nosci_pkts = __builtin__.property(_get_rx_nosci_pkts)
  rx_late_pkts = __builtin__.property(_get_rx_late_pkts)


  _pyangbind_elements = OrderedDict([('tx_untagged_pkts', tx_untagged_pkts), ('rx_untagged_pkts', rx_untagged_pkts), ('rx_badtag_pkts', rx_badtag_pkts), ('rx_unknownsci_pkts', rx_unknownsci_pkts), ('rx_nosci_pkts', rx_nosci_pkts), ('rx_late_pkts', rx_late_pkts), ])


class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-macsec - based on the path /macsec/interfaces/interface/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: MACsec interface counters
  """
  __slots__ = ('_path_helper', '_extmethods', '__tx_untagged_pkts','__rx_untagged_pkts','__rx_badtag_pkts','__rx_unknownsci_pkts','__rx_nosci_pkts','__rx_late_pkts',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/macsec'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__tx_untagged_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-untagged-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    self.__rx_untagged_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-untagged-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    self.__rx_badtag_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-badtag-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    self.__rx_unknownsci_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-unknownsci-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    self.__rx_nosci_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-nosci-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    self.__rx_late_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-late-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['macsec', 'interfaces', 'interface', 'state', 'counters']

  def _get_tx_untagged_pkts(self):
    """
    Getter method for tx_untagged_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/tx_untagged_pkts (oc-yang:counter64)

    YANG Description: MACsec interface level Transmit untagged Packets counter.
This counter will increment if MACsec is enabled on interface and the
outgoing packet is not tagged with MACsec header.
    """
    return self.__tx_untagged_pkts
      
  def _set_tx_untagged_pkts(self, v, load=False):
    """
    Setter method for tx_untagged_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/tx_untagged_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_untagged_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_untagged_pkts() directly.

    YANG Description: MACsec interface level Transmit untagged Packets counter.
This counter will increment if MACsec is enabled on interface and the
outgoing packet is not tagged with MACsec header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-untagged-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_untagged_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-untagged-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__tx_untagged_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_untagged_pkts(self):
    self.__tx_untagged_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-untagged-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)


  def _get_rx_untagged_pkts(self):
    """
    Getter method for rx_untagged_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_untagged_pkts (oc-yang:counter64)

    YANG Description: MACsec interface level Receive untagged Packets counter.
This counter will increment if MACsec is enabled on interface and the
incoming packet does not have MACsec tag.
    """
    return self.__rx_untagged_pkts
      
  def _set_rx_untagged_pkts(self, v, load=False):
    """
    Setter method for rx_untagged_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_untagged_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_untagged_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_untagged_pkts() directly.

    YANG Description: MACsec interface level Receive untagged Packets counter.
This counter will increment if MACsec is enabled on interface and the
incoming packet does not have MACsec tag.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-untagged-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_untagged_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-untagged-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rx_untagged_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_untagged_pkts(self):
    self.__rx_untagged_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-untagged-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)


  def _get_rx_badtag_pkts(self):
    """
    Getter method for rx_badtag_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_badtag_pkts (oc-yang:counter64)

    YANG Description: MACsec interface level Receive Bad Tag Packets counter.
This counter will increment if MACsec is enabled on interface and
incoming packet has incorrect MACsec tag.
    """
    return self.__rx_badtag_pkts
      
  def _set_rx_badtag_pkts(self, v, load=False):
    """
    Setter method for rx_badtag_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_badtag_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_badtag_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_badtag_pkts() directly.

    YANG Description: MACsec interface level Receive Bad Tag Packets counter.
This counter will increment if MACsec is enabled on interface and
incoming packet has incorrect MACsec tag.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-badtag-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_badtag_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-badtag-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rx_badtag_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_badtag_pkts(self):
    self.__rx_badtag_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-badtag-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)


  def _get_rx_unknownsci_pkts(self):
    """
    Getter method for rx_unknownsci_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_unknownsci_pkts (oc-yang:counter64)

    YANG Description: MACsec interface level Receive Unknown SCI Packets counter.
This counter will increment if MACsec is enabled on the interface and
SCI present in the MACsec tag of the incoming packet does not match any
SCI present in ingress SCI table.
    """
    return self.__rx_unknownsci_pkts
      
  def _set_rx_unknownsci_pkts(self, v, load=False):
    """
    Setter method for rx_unknownsci_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_unknownsci_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_unknownsci_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_unknownsci_pkts() directly.

    YANG Description: MACsec interface level Receive Unknown SCI Packets counter.
This counter will increment if MACsec is enabled on the interface and
SCI present in the MACsec tag of the incoming packet does not match any
SCI present in ingress SCI table.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-unknownsci-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_unknownsci_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-unknownsci-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rx_unknownsci_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_unknownsci_pkts(self):
    self.__rx_unknownsci_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-unknownsci-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)


  def _get_rx_nosci_pkts(self):
    """
    Getter method for rx_nosci_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_nosci_pkts (oc-yang:counter64)

    YANG Description: MACsec interface level Receive No SCI Packets counter.
This counter will increment if MACsec is enabled on interface and
incoming packet does not have SCI field in MACsec tag.
    """
    return self.__rx_nosci_pkts
      
  def _set_rx_nosci_pkts(self, v, load=False):
    """
    Setter method for rx_nosci_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_nosci_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_nosci_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_nosci_pkts() directly.

    YANG Description: MACsec interface level Receive No SCI Packets counter.
This counter will increment if MACsec is enabled on interface and
incoming packet does not have SCI field in MACsec tag.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-nosci-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_nosci_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-nosci-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rx_nosci_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_nosci_pkts(self):
    self.__rx_nosci_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-nosci-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)


  def _get_rx_late_pkts(self):
    """
    Getter method for rx_late_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_late_pkts (oc-yang:counter64)

    YANG Description: MACsec interface level Receive Late Packets counter.
This counter will increment if MACsec is enabled on the interface and
packet number of incoming packet is less than the lowest acceptable
packet number and replay protection is enabled.
    """
    return self.__rx_late_pkts
      
  def _set_rx_late_pkts(self, v, load=False):
    """
    Setter method for rx_late_pkts, mapped from YANG variable /macsec/interfaces/interface/state/counters/rx_late_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_late_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_late_pkts() directly.

    YANG Description: MACsec interface level Receive Late Packets counter.
This counter will increment if MACsec is enabled on the interface and
packet number of incoming packet is less than the lowest acceptable
packet number and replay protection is enabled.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-late-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_late_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-late-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__rx_late_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_late_pkts(self):
    self.__rx_late_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-late-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:counter64', is_config=False)

  tx_untagged_pkts = __builtin__.property(_get_tx_untagged_pkts)
  rx_untagged_pkts = __builtin__.property(_get_rx_untagged_pkts)
  rx_badtag_pkts = __builtin__.property(_get_rx_badtag_pkts)
  rx_unknownsci_pkts = __builtin__.property(_get_rx_unknownsci_pkts)
  rx_nosci_pkts = __builtin__.property(_get_rx_nosci_pkts)
  rx_late_pkts = __builtin__.property(_get_rx_late_pkts)


  _pyangbind_elements = OrderedDict([('tx_untagged_pkts', tx_untagged_pkts), ('rx_untagged_pkts', rx_untagged_pkts), ('rx_badtag_pkts', rx_badtag_pkts), ('rx_unknownsci_pkts', rx_unknownsci_pkts), ('rx_nosci_pkts', rx_nosci_pkts), ('rx_late_pkts', rx_late_pkts), ])


