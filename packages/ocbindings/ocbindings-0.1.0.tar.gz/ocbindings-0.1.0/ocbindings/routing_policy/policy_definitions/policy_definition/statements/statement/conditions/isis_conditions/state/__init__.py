# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-routing-policy - based on the path /routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to IS-IS match
conditions
  """
  __slots__ = ('_path_helper', '_extmethods', '__level_eq','__match_metric_type',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/routing-policy'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__level_eq = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..2']}), is_leaf=True, yang_name="level-eq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-isis-policy', defining_module='openconfig-isis-policy', yang_type='isis-types:level-number', is_config=False)
    self.__match_metric_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'INTERNAL': {}, 'EXTERNAL': {}},), is_leaf=True, yang_name="match-metric-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-isis-policy', defining_module='openconfig-isis-policy', yang_type='isis-types:metric-type', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['routing-policy', 'policy-definitions', 'policy-definition', 'statements', 'statement', 'conditions', 'isis-conditions', 'state']

  def _get_level_eq(self):
    """
    Getter method for level_eq, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/isis_conditions/state/level_eq (isis-types:level-number)

    YANG Description: Match the level that the IS-IS prefix is within. This can
be used in the case that import or export policies refer
to an IS-IS instance that has multiple levels configured
within it
    """
    return self.__level_eq
      
  def _set_level_eq(self, v, load=False):
    """
    Setter method for level_eq, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/isis_conditions/state/level_eq (isis-types:level-number)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_level_eq is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_level_eq() directly.

    YANG Description: Match the level that the IS-IS prefix is within. This can
be used in the case that import or export policies refer
to an IS-IS instance that has multiple levels configured
within it
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..2']}), is_leaf=True, yang_name="level-eq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-isis-policy', defining_module='openconfig-isis-policy', yang_type='isis-types:level-number', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """level_eq must be of a type compatible with isis-types:level-number""",
          'defined-type': "isis-types:level-number",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..2']}), is_leaf=True, yang_name="level-eq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-isis-policy', defining_module='openconfig-isis-policy', yang_type='isis-types:level-number', is_config=False)""",
        })

    self.__level_eq = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_level_eq(self):
    self.__level_eq = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..2']}), is_leaf=True, yang_name="level-eq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-isis-policy', defining_module='openconfig-isis-policy', yang_type='isis-types:level-number', is_config=False)


  def _get_match_metric_type(self):
    """
    Getter method for match_metric_type, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/isis_conditions/state/match_metric_type (isis-types:metric-type)

    YANG Description: Matches the type of the route to redistribute to INTERNAL or EXTERNAL
    """
    return self.__match_metric_type
      
  def _set_match_metric_type(self, v, load=False):
    """
    Setter method for match_metric_type, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/isis_conditions/state/match_metric_type (isis-types:metric-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_match_metric_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_match_metric_type() directly.

    YANG Description: Matches the type of the route to redistribute to INTERNAL or EXTERNAL
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'INTERNAL': {}, 'EXTERNAL': {}},), is_leaf=True, yang_name="match-metric-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-isis-policy', defining_module='openconfig-isis-policy', yang_type='isis-types:metric-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """match_metric_type must be of a type compatible with isis-types:metric-type""",
          'defined-type': "isis-types:metric-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'INTERNAL': {}, 'EXTERNAL': {}},), is_leaf=True, yang_name="match-metric-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-isis-policy', defining_module='openconfig-isis-policy', yang_type='isis-types:metric-type', is_config=False)""",
        })

    self.__match_metric_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_match_metric_type(self):
    self.__match_metric_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'INTERNAL': {}, 'EXTERNAL': {}},), is_leaf=True, yang_name="match-metric-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-isis-policy', defining_module='openconfig-isis-policy', yang_type='isis-types:metric-type', is_config=False)

  level_eq = __builtin__.property(_get_level_eq)
  match_metric_type = __builtin__.property(_get_match_metric_type)


  _pyangbind_elements = OrderedDict([('level_eq', level_eq), ('match_metric_type', match_metric_type), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-routing-policy - based on the path /routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to IS-IS match
conditions
  """
  __slots__ = ('_path_helper', '_extmethods', '__level_eq','__match_metric_type',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/routing-policy'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__level_eq = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..2']}), is_leaf=True, yang_name="level-eq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-isis-policy', defining_module='openconfig-isis-policy', yang_type='isis-types:level-number', is_config=False)
    self.__match_metric_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'INTERNAL': {}, 'EXTERNAL': {}},), is_leaf=True, yang_name="match-metric-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-isis-policy', defining_module='openconfig-isis-policy', yang_type='isis-types:metric-type', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['routing-policy', 'policy-definitions', 'policy-definition', 'statements', 'statement', 'conditions', 'isis-conditions', 'state']

  def _get_level_eq(self):
    """
    Getter method for level_eq, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/isis_conditions/state/level_eq (isis-types:level-number)

    YANG Description: Match the level that the IS-IS prefix is within. This can
be used in the case that import or export policies refer
to an IS-IS instance that has multiple levels configured
within it
    """
    return self.__level_eq
      
  def _set_level_eq(self, v, load=False):
    """
    Setter method for level_eq, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/isis_conditions/state/level_eq (isis-types:level-number)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_level_eq is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_level_eq() directly.

    YANG Description: Match the level that the IS-IS prefix is within. This can
be used in the case that import or export policies refer
to an IS-IS instance that has multiple levels configured
within it
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..2']}), is_leaf=True, yang_name="level-eq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-isis-policy', defining_module='openconfig-isis-policy', yang_type='isis-types:level-number', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """level_eq must be of a type compatible with isis-types:level-number""",
          'defined-type': "isis-types:level-number",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..2']}), is_leaf=True, yang_name="level-eq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-isis-policy', defining_module='openconfig-isis-policy', yang_type='isis-types:level-number', is_config=False)""",
        })

    self.__level_eq = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_level_eq(self):
    self.__level_eq = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..2']}), is_leaf=True, yang_name="level-eq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-isis-policy', defining_module='openconfig-isis-policy', yang_type='isis-types:level-number', is_config=False)


  def _get_match_metric_type(self):
    """
    Getter method for match_metric_type, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/isis_conditions/state/match_metric_type (isis-types:metric-type)

    YANG Description: Matches the type of the route to redistribute to INTERNAL or EXTERNAL
    """
    return self.__match_metric_type
      
  def _set_match_metric_type(self, v, load=False):
    """
    Setter method for match_metric_type, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/isis_conditions/state/match_metric_type (isis-types:metric-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_match_metric_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_match_metric_type() directly.

    YANG Description: Matches the type of the route to redistribute to INTERNAL or EXTERNAL
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'INTERNAL': {}, 'EXTERNAL': {}},), is_leaf=True, yang_name="match-metric-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-isis-policy', defining_module='openconfig-isis-policy', yang_type='isis-types:metric-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """match_metric_type must be of a type compatible with isis-types:metric-type""",
          'defined-type': "isis-types:metric-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'INTERNAL': {}, 'EXTERNAL': {}},), is_leaf=True, yang_name="match-metric-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-isis-policy', defining_module='openconfig-isis-policy', yang_type='isis-types:metric-type', is_config=False)""",
        })

    self.__match_metric_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_match_metric_type(self):
    self.__match_metric_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'INTERNAL': {}, 'EXTERNAL': {}},), is_leaf=True, yang_name="match-metric-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-isis-policy', defining_module='openconfig-isis-policy', yang_type='isis-types:metric-type', is_config=False)

  level_eq = __builtin__.property(_get_level_eq)
  match_metric_type = __builtin__.property(_get_match_metric_type)


  _pyangbind_elements = OrderedDict([('level_eq', level_eq), ('match_metric_type', match_metric_type), ])


