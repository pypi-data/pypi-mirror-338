# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-probes - based on the path /probes/probe/tests/test/results/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Results of this test: operational data only
  """
  __slots__ = ('_path_helper', '_extmethods', '__timestamp','__start_timestamp','__last_test_timestamp','__test_duration','__failed','__probes_sent','__probes_received','__loss_percentage','__jitter','__min_delay','__max_delay','__avg_delay','__stddev_delay',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/probes'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__timestamp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)
    self.__start_timestamp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="start-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)
    self.__last_test_timestamp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-test-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)
    self.__test_duration = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="test-duration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    self.__failed = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="failed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='boolean', is_config=False)
    self.__probes_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="probes-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    self.__probes_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="probes-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    self.__loss_percentage = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="loss-percentage", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:percentage', is_config=False)
    self.__jitter = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="jitter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    self.__min_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    self.__max_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    self.__avg_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    self.__stddev_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="stddev-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['probes', 'probe', 'tests', 'test', 'results', 'state']

  def _get_timestamp(self):
    """
    Getter method for timestamp, mapped from YANG variable /probes/probe/tests/test/results/state/timestamp (oc-types:timeticks64)

    YANG Description: The test timestamp.
This is not the timestamp when the test
was actually executed nither when it finished.
Should be the timestamp when the test has been scheduled.
It may not be the same with start-timestamp.
    """
    return self.__timestamp
      
  def _set_timestamp(self, v, load=False):
    """
    Setter method for timestamp, mapped from YANG variable /probes/probe/tests/test/results/state/timestamp (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_timestamp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_timestamp() directly.

    YANG Description: The test timestamp.
This is not the timestamp when the test
was actually executed nither when it finished.
Should be the timestamp when the test has been scheduled.
It may not be the same with start-timestamp.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """timestamp must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__timestamp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_timestamp(self):
    self.__timestamp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)


  def _get_start_timestamp(self):
    """
    Getter method for start_timestamp, mapped from YANG variable /probes/probe/tests/test/results/state/start_timestamp (oc-types:timeticks64)

    YANG Description: The timestamp when the test started.
    """
    return self.__start_timestamp
      
  def _set_start_timestamp(self, v, load=False):
    """
    Setter method for start_timestamp, mapped from YANG variable /probes/probe/tests/test/results/state/start_timestamp (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_start_timestamp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_start_timestamp() directly.

    YANG Description: The timestamp when the test started.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="start-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """start_timestamp must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="start-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__start_timestamp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_start_timestamp(self):
    self.__start_timestamp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="start-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)


  def _get_last_test_timestamp(self):
    """
    Getter method for last_test_timestamp, mapped from YANG variable /probes/probe/tests/test/results/state/last_test_timestamp (oc-types:timeticks64)

    YANG Description: The timestamp when the test finished.
    """
    return self.__last_test_timestamp
      
  def _set_last_test_timestamp(self, v, load=False):
    """
    Setter method for last_test_timestamp, mapped from YANG variable /probes/probe/tests/test/results/state/last_test_timestamp (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_test_timestamp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_test_timestamp() directly.

    YANG Description: The timestamp when the test finished.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-test-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_test_timestamp must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-test-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_test_timestamp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_test_timestamp(self):
    self.__last_test_timestamp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-test-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)


  def _get_test_duration(self):
    """
    Getter method for test_duration, mapped from YANG variable /probes/probe/tests/test/results/state/test_duration (yang:counter64)

    YANG Description: The duration of the test, in microseconds.
    """
    return self.__test_duration
      
  def _set_test_duration(self, v, load=False):
    """
    Setter method for test_duration, mapped from YANG variable /probes/probe/tests/test/results/state/test_duration (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_test_duration is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_test_duration() directly.

    YANG Description: The duration of the test, in microseconds.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="test-duration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """test_duration must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="test-duration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)""",
        })

    self.__test_duration = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_test_duration(self):
    self.__test_duration = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="test-duration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)


  def _get_failed(self):
    """
    Getter method for failed, mapped from YANG variable /probes/probe/tests/test/results/state/failed (boolean)

    YANG Description: Whether the test failed or succeeded.
    """
    return self.__failed
      
  def _set_failed(self, v, load=False):
    """
    Setter method for failed, mapped from YANG variable /probes/probe/tests/test/results/state/failed (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_failed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_failed() directly.

    YANG Description: Whether the test failed or succeeded.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="failed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """failed must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="failed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='boolean', is_config=False)""",
        })

    self.__failed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_failed(self):
    self.__failed = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="failed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='boolean', is_config=False)


  def _get_probes_sent(self):
    """
    Getter method for probes_sent, mapped from YANG variable /probes/probe/tests/test/results/state/probes_sent (yang:counter64)

    YANG Description: Number of test probes sent.
    """
    return self.__probes_sent
      
  def _set_probes_sent(self, v, load=False):
    """
    Setter method for probes_sent, mapped from YANG variable /probes/probe/tests/test/results/state/probes_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_probes_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_probes_sent() directly.

    YANG Description: Number of test probes sent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="probes-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """probes_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="probes-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)""",
        })

    self.__probes_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_probes_sent(self):
    self.__probes_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="probes-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)


  def _get_probes_received(self):
    """
    Getter method for probes_received, mapped from YANG variable /probes/probe/tests/test/results/state/probes_received (yang:counter64)

    YANG Description: Number of test probes received.
    """
    return self.__probes_received
      
  def _set_probes_received(self, v, load=False):
    """
    Setter method for probes_received, mapped from YANG variable /probes/probe/tests/test/results/state/probes_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_probes_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_probes_received() directly.

    YANG Description: Number of test probes received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="probes-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """probes_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="probes-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)""",
        })

    self.__probes_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_probes_received(self):
    self.__probes_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="probes-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)


  def _get_loss_percentage(self):
    """
    Getter method for loss_percentage, mapped from YANG variable /probes/probe/tests/test/results/state/loss_percentage (oc-types:percentage)

    YANG Description: The loss percentage.
    """
    return self.__loss_percentage
      
  def _set_loss_percentage(self, v, load=False):
    """
    Setter method for loss_percentage, mapped from YANG variable /probes/probe/tests/test/results/state/loss_percentage (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_loss_percentage is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_loss_percentage() directly.

    YANG Description: The loss percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="loss-percentage", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """loss_percentage must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="loss-percentage", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__loss_percentage = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_loss_percentage(self):
    self.__loss_percentage = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="loss-percentage", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:percentage', is_config=False)


  def _get_jitter(self):
    """
    Getter method for jitter, mapped from YANG variable /probes/probe/tests/test/results/state/jitter (yang:counter64)

    YANG Description: The round trip jitter, in microseconds.
    """
    return self.__jitter
      
  def _set_jitter(self, v, load=False):
    """
    Setter method for jitter, mapped from YANG variable /probes/probe/tests/test/results/state/jitter (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_jitter is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_jitter() directly.

    YANG Description: The round trip jitter, in microseconds.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="jitter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """jitter must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="jitter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)""",
        })

    self.__jitter = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_jitter(self):
    self.__jitter = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="jitter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)


  def _get_min_delay(self):
    """
    Getter method for min_delay, mapped from YANG variable /probes/probe/tests/test/results/state/min_delay (yang:counter64)

    YANG Description: The minimum delay recorded during the test, in microseconds.
    """
    return self.__min_delay
      
  def _set_min_delay(self, v, load=False):
    """
    Setter method for min_delay, mapped from YANG variable /probes/probe/tests/test/results/state/min_delay (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_delay() directly.

    YANG Description: The minimum delay recorded during the test, in microseconds.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_delay must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)""",
        })

    self.__min_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_delay(self):
    self.__min_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)


  def _get_max_delay(self):
    """
    Getter method for max_delay, mapped from YANG variable /probes/probe/tests/test/results/state/max_delay (yang:counter64)

    YANG Description: The maximum delay recorded during the test, in microseconds.
    """
    return self.__max_delay
      
  def _set_max_delay(self, v, load=False):
    """
    Setter method for max_delay, mapped from YANG variable /probes/probe/tests/test/results/state/max_delay (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_delay() directly.

    YANG Description: The maximum delay recorded during the test, in microseconds.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_delay must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)""",
        })

    self.__max_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_delay(self):
    self.__max_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)


  def _get_avg_delay(self):
    """
    Getter method for avg_delay, mapped from YANG variable /probes/probe/tests/test/results/state/avg_delay (yang:counter64)

    YANG Description: The average delay recorded during the test, in microseconds.
    """
    return self.__avg_delay
      
  def _set_avg_delay(self, v, load=False):
    """
    Setter method for avg_delay, mapped from YANG variable /probes/probe/tests/test/results/state/avg_delay (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_avg_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_avg_delay() directly.

    YANG Description: The average delay recorded during the test, in microseconds.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """avg_delay must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)""",
        })

    self.__avg_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_avg_delay(self):
    self.__avg_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)


  def _get_stddev_delay(self):
    """
    Getter method for stddev_delay, mapped from YANG variable /probes/probe/tests/test/results/state/stddev_delay (yang:counter64)

    YANG Description: The standard deviation of the delay of the test.
    """
    return self.__stddev_delay
      
  def _set_stddev_delay(self, v, load=False):
    """
    Setter method for stddev_delay, mapped from YANG variable /probes/probe/tests/test/results/state/stddev_delay (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_stddev_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_stddev_delay() directly.

    YANG Description: The standard deviation of the delay of the test.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="stddev-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """stddev_delay must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="stddev-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)""",
        })

    self.__stddev_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_stddev_delay(self):
    self.__stddev_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="stddev-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)

  timestamp = __builtin__.property(_get_timestamp)
  start_timestamp = __builtin__.property(_get_start_timestamp)
  last_test_timestamp = __builtin__.property(_get_last_test_timestamp)
  test_duration = __builtin__.property(_get_test_duration)
  failed = __builtin__.property(_get_failed)
  probes_sent = __builtin__.property(_get_probes_sent)
  probes_received = __builtin__.property(_get_probes_received)
  loss_percentage = __builtin__.property(_get_loss_percentage)
  jitter = __builtin__.property(_get_jitter)
  min_delay = __builtin__.property(_get_min_delay)
  max_delay = __builtin__.property(_get_max_delay)
  avg_delay = __builtin__.property(_get_avg_delay)
  stddev_delay = __builtin__.property(_get_stddev_delay)


  _pyangbind_elements = OrderedDict([('timestamp', timestamp), ('start_timestamp', start_timestamp), ('last_test_timestamp', last_test_timestamp), ('test_duration', test_duration), ('failed', failed), ('probes_sent', probes_sent), ('probes_received', probes_received), ('loss_percentage', loss_percentage), ('jitter', jitter), ('min_delay', min_delay), ('max_delay', max_delay), ('avg_delay', avg_delay), ('stddev_delay', stddev_delay), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-probes - based on the path /probes/probe/tests/test/results/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Results of this test: operational data only
  """
  __slots__ = ('_path_helper', '_extmethods', '__timestamp','__start_timestamp','__last_test_timestamp','__test_duration','__failed','__probes_sent','__probes_received','__loss_percentage','__jitter','__min_delay','__max_delay','__avg_delay','__stddev_delay',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/probes'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__timestamp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)
    self.__start_timestamp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="start-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)
    self.__last_test_timestamp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-test-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)
    self.__test_duration = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="test-duration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    self.__failed = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="failed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='boolean', is_config=False)
    self.__probes_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="probes-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    self.__probes_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="probes-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    self.__loss_percentage = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="loss-percentage", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:percentage', is_config=False)
    self.__jitter = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="jitter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    self.__min_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    self.__max_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    self.__avg_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    self.__stddev_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="stddev-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['probes', 'probe', 'tests', 'test', 'results', 'state']

  def _get_timestamp(self):
    """
    Getter method for timestamp, mapped from YANG variable /probes/probe/tests/test/results/state/timestamp (oc-types:timeticks64)

    YANG Description: The test timestamp.
This is not the timestamp when the test
was actually executed nither when it finished.
Should be the timestamp when the test has been scheduled.
It may not be the same with start-timestamp.
    """
    return self.__timestamp
      
  def _set_timestamp(self, v, load=False):
    """
    Setter method for timestamp, mapped from YANG variable /probes/probe/tests/test/results/state/timestamp (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_timestamp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_timestamp() directly.

    YANG Description: The test timestamp.
This is not the timestamp when the test
was actually executed nither when it finished.
Should be the timestamp when the test has been scheduled.
It may not be the same with start-timestamp.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """timestamp must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__timestamp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_timestamp(self):
    self.__timestamp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)


  def _get_start_timestamp(self):
    """
    Getter method for start_timestamp, mapped from YANG variable /probes/probe/tests/test/results/state/start_timestamp (oc-types:timeticks64)

    YANG Description: The timestamp when the test started.
    """
    return self.__start_timestamp
      
  def _set_start_timestamp(self, v, load=False):
    """
    Setter method for start_timestamp, mapped from YANG variable /probes/probe/tests/test/results/state/start_timestamp (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_start_timestamp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_start_timestamp() directly.

    YANG Description: The timestamp when the test started.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="start-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """start_timestamp must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="start-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__start_timestamp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_start_timestamp(self):
    self.__start_timestamp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="start-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)


  def _get_last_test_timestamp(self):
    """
    Getter method for last_test_timestamp, mapped from YANG variable /probes/probe/tests/test/results/state/last_test_timestamp (oc-types:timeticks64)

    YANG Description: The timestamp when the test finished.
    """
    return self.__last_test_timestamp
      
  def _set_last_test_timestamp(self, v, load=False):
    """
    Setter method for last_test_timestamp, mapped from YANG variable /probes/probe/tests/test/results/state/last_test_timestamp (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_test_timestamp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_test_timestamp() directly.

    YANG Description: The timestamp when the test finished.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-test-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_test_timestamp must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-test-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_test_timestamp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_test_timestamp(self):
    self.__last_test_timestamp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-test-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:timeticks64', is_config=False)


  def _get_test_duration(self):
    """
    Getter method for test_duration, mapped from YANG variable /probes/probe/tests/test/results/state/test_duration (yang:counter64)

    YANG Description: The duration of the test, in microseconds.
    """
    return self.__test_duration
      
  def _set_test_duration(self, v, load=False):
    """
    Setter method for test_duration, mapped from YANG variable /probes/probe/tests/test/results/state/test_duration (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_test_duration is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_test_duration() directly.

    YANG Description: The duration of the test, in microseconds.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="test-duration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """test_duration must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="test-duration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)""",
        })

    self.__test_duration = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_test_duration(self):
    self.__test_duration = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="test-duration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)


  def _get_failed(self):
    """
    Getter method for failed, mapped from YANG variable /probes/probe/tests/test/results/state/failed (boolean)

    YANG Description: Whether the test failed or succeeded.
    """
    return self.__failed
      
  def _set_failed(self, v, load=False):
    """
    Setter method for failed, mapped from YANG variable /probes/probe/tests/test/results/state/failed (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_failed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_failed() directly.

    YANG Description: Whether the test failed or succeeded.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="failed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """failed must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="failed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='boolean', is_config=False)""",
        })

    self.__failed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_failed(self):
    self.__failed = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="failed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='boolean', is_config=False)


  def _get_probes_sent(self):
    """
    Getter method for probes_sent, mapped from YANG variable /probes/probe/tests/test/results/state/probes_sent (yang:counter64)

    YANG Description: Number of test probes sent.
    """
    return self.__probes_sent
      
  def _set_probes_sent(self, v, load=False):
    """
    Setter method for probes_sent, mapped from YANG variable /probes/probe/tests/test/results/state/probes_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_probes_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_probes_sent() directly.

    YANG Description: Number of test probes sent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="probes-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """probes_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="probes-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)""",
        })

    self.__probes_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_probes_sent(self):
    self.__probes_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="probes-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)


  def _get_probes_received(self):
    """
    Getter method for probes_received, mapped from YANG variable /probes/probe/tests/test/results/state/probes_received (yang:counter64)

    YANG Description: Number of test probes received.
    """
    return self.__probes_received
      
  def _set_probes_received(self, v, load=False):
    """
    Setter method for probes_received, mapped from YANG variable /probes/probe/tests/test/results/state/probes_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_probes_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_probes_received() directly.

    YANG Description: Number of test probes received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="probes-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """probes_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="probes-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)""",
        })

    self.__probes_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_probes_received(self):
    self.__probes_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="probes-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)


  def _get_loss_percentage(self):
    """
    Getter method for loss_percentage, mapped from YANG variable /probes/probe/tests/test/results/state/loss_percentage (oc-types:percentage)

    YANG Description: The loss percentage.
    """
    return self.__loss_percentage
      
  def _set_loss_percentage(self, v, load=False):
    """
    Setter method for loss_percentage, mapped from YANG variable /probes/probe/tests/test/results/state/loss_percentage (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_loss_percentage is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_loss_percentage() directly.

    YANG Description: The loss percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="loss-percentage", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """loss_percentage must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="loss-percentage", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__loss_percentage = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_loss_percentage(self):
    self.__loss_percentage = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="loss-percentage", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='oc-types:percentage', is_config=False)


  def _get_jitter(self):
    """
    Getter method for jitter, mapped from YANG variable /probes/probe/tests/test/results/state/jitter (yang:counter64)

    YANG Description: The round trip jitter, in microseconds.
    """
    return self.__jitter
      
  def _set_jitter(self, v, load=False):
    """
    Setter method for jitter, mapped from YANG variable /probes/probe/tests/test/results/state/jitter (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_jitter is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_jitter() directly.

    YANG Description: The round trip jitter, in microseconds.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="jitter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """jitter must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="jitter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)""",
        })

    self.__jitter = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_jitter(self):
    self.__jitter = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="jitter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)


  def _get_min_delay(self):
    """
    Getter method for min_delay, mapped from YANG variable /probes/probe/tests/test/results/state/min_delay (yang:counter64)

    YANG Description: The minimum delay recorded during the test, in microseconds.
    """
    return self.__min_delay
      
  def _set_min_delay(self, v, load=False):
    """
    Setter method for min_delay, mapped from YANG variable /probes/probe/tests/test/results/state/min_delay (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_delay() directly.

    YANG Description: The minimum delay recorded during the test, in microseconds.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_delay must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)""",
        })

    self.__min_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_delay(self):
    self.__min_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)


  def _get_max_delay(self):
    """
    Getter method for max_delay, mapped from YANG variable /probes/probe/tests/test/results/state/max_delay (yang:counter64)

    YANG Description: The maximum delay recorded during the test, in microseconds.
    """
    return self.__max_delay
      
  def _set_max_delay(self, v, load=False):
    """
    Setter method for max_delay, mapped from YANG variable /probes/probe/tests/test/results/state/max_delay (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_delay() directly.

    YANG Description: The maximum delay recorded during the test, in microseconds.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_delay must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)""",
        })

    self.__max_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_delay(self):
    self.__max_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)


  def _get_avg_delay(self):
    """
    Getter method for avg_delay, mapped from YANG variable /probes/probe/tests/test/results/state/avg_delay (yang:counter64)

    YANG Description: The average delay recorded during the test, in microseconds.
    """
    return self.__avg_delay
      
  def _set_avg_delay(self, v, load=False):
    """
    Setter method for avg_delay, mapped from YANG variable /probes/probe/tests/test/results/state/avg_delay (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_avg_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_avg_delay() directly.

    YANG Description: The average delay recorded during the test, in microseconds.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """avg_delay must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)""",
        })

    self.__avg_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_avg_delay(self):
    self.__avg_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)


  def _get_stddev_delay(self):
    """
    Getter method for stddev_delay, mapped from YANG variable /probes/probe/tests/test/results/state/stddev_delay (yang:counter64)

    YANG Description: The standard deviation of the delay of the test.
    """
    return self.__stddev_delay
      
  def _set_stddev_delay(self, v, load=False):
    """
    Setter method for stddev_delay, mapped from YANG variable /probes/probe/tests/test/results/state/stddev_delay (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_stddev_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_stddev_delay() directly.

    YANG Description: The standard deviation of the delay of the test.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="stddev-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """stddev_delay must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="stddev-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)""",
        })

    self.__stddev_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_stddev_delay(self):
    self.__stddev_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="stddev-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/probes', defining_module='openconfig-probes', yang_type='yang:counter64', is_config=False)

  timestamp = __builtin__.property(_get_timestamp)
  start_timestamp = __builtin__.property(_get_start_timestamp)
  last_test_timestamp = __builtin__.property(_get_last_test_timestamp)
  test_duration = __builtin__.property(_get_test_duration)
  failed = __builtin__.property(_get_failed)
  probes_sent = __builtin__.property(_get_probes_sent)
  probes_received = __builtin__.property(_get_probes_received)
  loss_percentage = __builtin__.property(_get_loss_percentage)
  jitter = __builtin__.property(_get_jitter)
  min_delay = __builtin__.property(_get_min_delay)
  max_delay = __builtin__.property(_get_max_delay)
  avg_delay = __builtin__.property(_get_avg_delay)
  stddev_delay = __builtin__.property(_get_stddev_delay)


  _pyangbind_elements = OrderedDict([('timestamp', timestamp), ('start_timestamp', start_timestamp), ('last_test_timestamp', last_test_timestamp), ('test_duration', test_duration), ('failed', failed), ('probes_sent', probes_sent), ('probes_received', probes_received), ('loss_percentage', loss_percentage), ('jitter', jitter), ('min_delay', min_delay), ('max_delay', max_delay), ('avg_delay', avg_delay), ('stddev_delay', stddev_delay), ])


