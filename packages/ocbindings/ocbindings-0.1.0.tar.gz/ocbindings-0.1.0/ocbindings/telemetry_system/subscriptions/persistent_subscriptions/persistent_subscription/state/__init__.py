# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-telemetry - based on the path /telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State parameters relating to the telemetry
subscriptions on the local device
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__id','__local_source_address','__originated_qos_marking','__protocol','__encoding',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/telemetry'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='string', is_config=False)
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='uint64', is_config=False)
    self.__local_source_address = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="local-source-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='oc-inet:ip-address', is_config=False)
    self.__originated_qos_marking = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..63']}), is_leaf=True, yang_name="originated-qos-marking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='oc-inet:dscp', is_config=False)
    self.__protocol = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}},), is_leaf=True, yang_name="protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='identityref', is_config=False)
    self.__encoding = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}},), is_leaf=True, yang_name="encoding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='identityref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['telemetry-system', 'subscriptions', 'persistent-subscriptions', 'persistent-subscription', 'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/name (string)

    YANG Description: User configured identifier of the telemetry
subscription. This value is used primarily for
subscriptions configured locally on the network
element.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: User configured identifier of the telemetry
subscription. This value is used primarily for
subscriptions configured locally on the network
element.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='string', is_config=False)


  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/id (uint64)

    YANG Description: System generated identifer of the telemetry
subscription.
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/id (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: System generated identifer of the telemetry
subscription.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='uint64', is_config=False)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='uint64', is_config=False)


  def _get_local_source_address(self):
    """
    Getter method for local_source_address, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/local_source_address (oc-inet:ip-address)

    YANG Description: The IP address which will be the source of packets from
the device to a telemetry collector destination.
    """
    return self.__local_source_address
      
  def _set_local_source_address(self, v, load=False):
    """
    Setter method for local_source_address, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/local_source_address (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_source_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_source_address() directly.

    YANG Description: The IP address which will be the source of packets from
the device to a telemetry collector destination.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="local-source-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_source_address must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="local-source-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__local_source_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_source_address(self):
    self.__local_source_address = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="local-source-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='oc-inet:ip-address', is_config=False)


  def _get_originated_qos_marking(self):
    """
    Getter method for originated_qos_marking, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/originated_qos_marking (oc-inet:dscp)

    YANG Description: DSCP marking of packets generated by the telemetry
subsystem on the network device.
    """
    return self.__originated_qos_marking
      
  def _set_originated_qos_marking(self, v, load=False):
    """
    Setter method for originated_qos_marking, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/originated_qos_marking (oc-inet:dscp)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_originated_qos_marking is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_originated_qos_marking() directly.

    YANG Description: DSCP marking of packets generated by the telemetry
subsystem on the network device.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..63']}), is_leaf=True, yang_name="originated-qos-marking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='oc-inet:dscp', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """originated_qos_marking must be of a type compatible with oc-inet:dscp""",
          'defined-type': "oc-inet:dscp",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..63']}), is_leaf=True, yang_name="originated-qos-marking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='oc-inet:dscp', is_config=False)""",
        })

    self.__originated_qos_marking = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_originated_qos_marking(self):
    self.__originated_qos_marking = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..63']}), is_leaf=True, yang_name="originated-qos-marking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='oc-inet:dscp', is_config=False)


  def _get_protocol(self):
    """
    Getter method for protocol, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/protocol (identityref)

    YANG Description: Selection of the transport protocol for the telemetry
stream.
    """
    return self.__protocol
      
  def _set_protocol(self, v, load=False):
    """
    Setter method for protocol, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/protocol (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol() directly.

    YANG Description: Selection of the transport protocol for the telemetry
stream.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}},), is_leaf=True, yang_name="protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol must be of a type compatible with identityref""",
          'defined-type': "openconfig-telemetry:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}},), is_leaf=True, yang_name="protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='identityref', is_config=False)""",
        })

    self.__protocol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol(self):
    self.__protocol = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}},), is_leaf=True, yang_name="protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='identityref', is_config=False)


  def _get_encoding(self):
    """
    Getter method for encoding, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/encoding (identityref)

    YANG Description: Selection of the specific encoding or RPC framework
for telemetry messages to and from the network element.
    """
    return self.__encoding
      
  def _set_encoding(self, v, load=False):
    """
    Setter method for encoding, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/encoding (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_encoding is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_encoding() directly.

    YANG Description: Selection of the specific encoding or RPC framework
for telemetry messages to and from the network element.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}},), is_leaf=True, yang_name="encoding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """encoding must be of a type compatible with identityref""",
          'defined-type': "openconfig-telemetry:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}},), is_leaf=True, yang_name="encoding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='identityref', is_config=False)""",
        })

    self.__encoding = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_encoding(self):
    self.__encoding = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}},), is_leaf=True, yang_name="encoding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='identityref', is_config=False)

  name = __builtin__.property(_get_name)
  id = __builtin__.property(_get_id)
  local_source_address = __builtin__.property(_get_local_source_address)
  originated_qos_marking = __builtin__.property(_get_originated_qos_marking)
  protocol = __builtin__.property(_get_protocol)
  encoding = __builtin__.property(_get_encoding)


  _pyangbind_elements = OrderedDict([('name', name), ('id', id), ('local_source_address', local_source_address), ('originated_qos_marking', originated_qos_marking), ('protocol', protocol), ('encoding', encoding), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-telemetry - based on the path /telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State parameters relating to the telemetry
subscriptions on the local device
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__id','__local_source_address','__originated_qos_marking','__protocol','__encoding',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/telemetry'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='string', is_config=False)
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='uint64', is_config=False)
    self.__local_source_address = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="local-source-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='oc-inet:ip-address', is_config=False)
    self.__originated_qos_marking = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..63']}), is_leaf=True, yang_name="originated-qos-marking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='oc-inet:dscp', is_config=False)
    self.__protocol = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}},), is_leaf=True, yang_name="protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='identityref', is_config=False)
    self.__encoding = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}},), is_leaf=True, yang_name="encoding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='identityref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['telemetry-system', 'subscriptions', 'persistent-subscriptions', 'persistent-subscription', 'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/name (string)

    YANG Description: User configured identifier of the telemetry
subscription. This value is used primarily for
subscriptions configured locally on the network
element.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: User configured identifier of the telemetry
subscription. This value is used primarily for
subscriptions configured locally on the network
element.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='string', is_config=False)


  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/id (uint64)

    YANG Description: System generated identifer of the telemetry
subscription.
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/id (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: System generated identifer of the telemetry
subscription.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='uint64', is_config=False)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='uint64', is_config=False)


  def _get_local_source_address(self):
    """
    Getter method for local_source_address, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/local_source_address (oc-inet:ip-address)

    YANG Description: The IP address which will be the source of packets from
the device to a telemetry collector destination.
    """
    return self.__local_source_address
      
  def _set_local_source_address(self, v, load=False):
    """
    Setter method for local_source_address, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/local_source_address (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_source_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_source_address() directly.

    YANG Description: The IP address which will be the source of packets from
the device to a telemetry collector destination.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="local-source-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='oc-inet:ip-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_source_address must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="local-source-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='oc-inet:ip-address', is_config=False)""",
        })

    self.__local_source_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_source_address(self):
    self.__local_source_address = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="local-source-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='oc-inet:ip-address', is_config=False)


  def _get_originated_qos_marking(self):
    """
    Getter method for originated_qos_marking, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/originated_qos_marking (oc-inet:dscp)

    YANG Description: DSCP marking of packets generated by the telemetry
subsystem on the network device.
    """
    return self.__originated_qos_marking
      
  def _set_originated_qos_marking(self, v, load=False):
    """
    Setter method for originated_qos_marking, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/originated_qos_marking (oc-inet:dscp)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_originated_qos_marking is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_originated_qos_marking() directly.

    YANG Description: DSCP marking of packets generated by the telemetry
subsystem on the network device.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..63']}), is_leaf=True, yang_name="originated-qos-marking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='oc-inet:dscp', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """originated_qos_marking must be of a type compatible with oc-inet:dscp""",
          'defined-type': "oc-inet:dscp",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..63']}), is_leaf=True, yang_name="originated-qos-marking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='oc-inet:dscp', is_config=False)""",
        })

    self.__originated_qos_marking = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_originated_qos_marking(self):
    self.__originated_qos_marking = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..63']}), is_leaf=True, yang_name="originated-qos-marking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='oc-inet:dscp', is_config=False)


  def _get_protocol(self):
    """
    Getter method for protocol, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/protocol (identityref)

    YANG Description: Selection of the transport protocol for the telemetry
stream.
    """
    return self.__protocol
      
  def _set_protocol(self, v, load=False):
    """
    Setter method for protocol, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/protocol (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol() directly.

    YANG Description: Selection of the transport protocol for the telemetry
stream.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}},), is_leaf=True, yang_name="protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol must be of a type compatible with identityref""",
          'defined-type': "openconfig-telemetry:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}},), is_leaf=True, yang_name="protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='identityref', is_config=False)""",
        })

    self.__protocol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol(self):
    self.__protocol = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_SSH': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_GRPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_JSON_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_THRIFT_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:STREAM_WEBSOCKET_RPC': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}},), is_leaf=True, yang_name="protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='identityref', is_config=False)


  def _get_encoding(self):
    """
    Getter method for encoding, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/encoding (identityref)

    YANG Description: Selection of the specific encoding or RPC framework
for telemetry messages to and from the network element.
    """
    return self.__encoding
      
  def _set_encoding(self, v, load=False):
    """
    Setter method for encoding, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription/state/encoding (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_encoding is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_encoding() directly.

    YANG Description: Selection of the specific encoding or RPC framework
for telemetry messages to and from the network element.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}},), is_leaf=True, yang_name="encoding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """encoding must be of a type compatible with identityref""",
          'defined-type': "openconfig-telemetry:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}},), is_leaf=True, yang_name="encoding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='identityref', is_config=False)""",
        })

    self.__encoding = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_encoding(self):
    self.__encoding = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_XML': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_JSON_IETF': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'openconfig-telemetry-types:ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}, 'oc-telemetry-types:ENC_PROTO3': {'@module': 'openconfig-telemetry-types', '@namespace': 'http://openconfig.net/yang/telemetry-types'}},), is_leaf=True, yang_name="encoding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='identityref', is_config=False)

  name = __builtin__.property(_get_name)
  id = __builtin__.property(_get_id)
  local_source_address = __builtin__.property(_get_local_source_address)
  originated_qos_marking = __builtin__.property(_get_originated_qos_marking)
  protocol = __builtin__.property(_get_protocol)
  encoding = __builtin__.property(_get_encoding)


  _pyangbind_elements = OrderedDict([('name', name), ('id', id), ('local_source_address', local_source_address), ('originated_qos_marking', originated_qos_marking), ('protocol', protocol), ('encoding', encoding), ])


