# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import state
from . import compatible_transceivers
class linecard_descriptor(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-terminal-device-properties - based on the path /linecard-descriptors/linecard-descriptor. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of linecard components supported by the terminal-device.
The operational mode provides a platform-defined summary
of information such as symbol rate, modulation, pulse
shaping, etc.
  """
  __slots__ = ('_path_helper', '_extmethods', '__component_descriptor_id','__state','__compatible_transceivers',)

  _yang_name = 'linecard-descriptor'
  _yang_namespace = 'http://openconfig.net/yang/openconfig-terminal-device-properties'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__component_descriptor_id = YANGDynClass(base=str, is_leaf=True, yang_name="component-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)
    self.__compatible_transceivers = YANGDynClass(base=compatible_transceivers.compatible_transceivers, is_container='container', yang_name="compatible-transceivers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['linecard-descriptors', 'linecard-descriptor']

  def _get_component_descriptor_id(self):
    """
    Getter method for component_descriptor_id, mapped from YANG variable /linecard_descriptors/linecard_descriptor/component_descriptor_id (leafref)

    YANG Description: Reference to component-descriptor-id
    """
    return self.__component_descriptor_id
      
  def _set_component_descriptor_id(self, v, load=False):
    """
    Setter method for component_descriptor_id, mapped from YANG variable /linecard_descriptors/linecard_descriptor/component_descriptor_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_component_descriptor_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_component_descriptor_id() directly.

    YANG Description: Reference to component-descriptor-id
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="component-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """component_descriptor_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="component-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)""",
        })

    self.__component_descriptor_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_component_descriptor_id(self):
    self.__component_descriptor_id = YANGDynClass(base=str, is_leaf=True, yang_name="component-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /linecard_descriptors/linecard_descriptor/state (container)

    YANG Description: Static features or properties which characterize the
component descriptor.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /linecard_descriptors/linecard_descriptor/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Static features or properties which characterize the
component descriptor.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)


  def _get_compatible_transceivers(self):
    """
    Getter method for compatible_transceivers, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers (container)

    YANG Description: Indicates the set of transceiver component which are compatible
with the described linecard component.
    """
    return self.__compatible_transceivers
      
  def _set_compatible_transceivers(self, v, load=False):
    """
    Setter method for compatible_transceivers, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_compatible_transceivers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_compatible_transceivers() directly.

    YANG Description: Indicates the set of transceiver component which are compatible
with the described linecard component.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=compatible_transceivers.compatible_transceivers, is_container='container', yang_name="compatible-transceivers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """compatible_transceivers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=compatible_transceivers.compatible_transceivers, is_container='container', yang_name="compatible-transceivers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)""",
        })

    self.__compatible_transceivers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_compatible_transceivers(self):
    self.__compatible_transceivers = YANGDynClass(base=compatible_transceivers.compatible_transceivers, is_container='container', yang_name="compatible-transceivers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)

  component_descriptor_id = __builtin__.property(_get_component_descriptor_id)
  state = __builtin__.property(_get_state)
  compatible_transceivers = __builtin__.property(_get_compatible_transceivers)


  _pyangbind_elements = OrderedDict([('component_descriptor_id', component_descriptor_id), ('state', state), ('compatible_transceivers', compatible_transceivers), ])


from . import state
from . import compatible_transceivers
class linecard_descriptor(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-terminal-device-properties - based on the path /linecard-descriptors/linecard-descriptor. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of linecard components supported by the terminal-device.
The operational mode provides a platform-defined summary
of information such as symbol rate, modulation, pulse
shaping, etc.
  """
  __slots__ = ('_path_helper', '_extmethods', '__component_descriptor_id','__state','__compatible_transceivers',)

  _yang_name = 'linecard-descriptor'
  _yang_namespace = 'http://openconfig.net/yang/openconfig-terminal-device-properties'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__component_descriptor_id = YANGDynClass(base=str, is_leaf=True, yang_name="component-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)
    self.__compatible_transceivers = YANGDynClass(base=compatible_transceivers.compatible_transceivers, is_container='container', yang_name="compatible-transceivers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['linecard-descriptors', 'linecard-descriptor']

  def _get_component_descriptor_id(self):
    """
    Getter method for component_descriptor_id, mapped from YANG variable /linecard_descriptors/linecard_descriptor/component_descriptor_id (leafref)

    YANG Description: Reference to component-descriptor-id
    """
    return self.__component_descriptor_id
      
  def _set_component_descriptor_id(self, v, load=False):
    """
    Setter method for component_descriptor_id, mapped from YANG variable /linecard_descriptors/linecard_descriptor/component_descriptor_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_component_descriptor_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_component_descriptor_id() directly.

    YANG Description: Reference to component-descriptor-id
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="component-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """component_descriptor_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="component-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)""",
        })

    self.__component_descriptor_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_component_descriptor_id(self):
    self.__component_descriptor_id = YANGDynClass(base=str, is_leaf=True, yang_name="component-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /linecard_descriptors/linecard_descriptor/state (container)

    YANG Description: Static features or properties which characterize the
component descriptor.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /linecard_descriptors/linecard_descriptor/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Static features or properties which characterize the
component descriptor.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)


  def _get_compatible_transceivers(self):
    """
    Getter method for compatible_transceivers, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers (container)

    YANG Description: Indicates the set of transceiver component which are compatible
with the described linecard component.
    """
    return self.__compatible_transceivers
      
  def _set_compatible_transceivers(self, v, load=False):
    """
    Setter method for compatible_transceivers, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_compatible_transceivers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_compatible_transceivers() directly.

    YANG Description: Indicates the set of transceiver component which are compatible
with the described linecard component.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=compatible_transceivers.compatible_transceivers, is_container='container', yang_name="compatible-transceivers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """compatible_transceivers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=compatible_transceivers.compatible_transceivers, is_container='container', yang_name="compatible-transceivers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)""",
        })

    self.__compatible_transceivers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_compatible_transceivers(self):
    self.__compatible_transceivers = YANGDynClass(base=compatible_transceivers.compatible_transceivers, is_container='container', yang_name="compatible-transceivers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)

  component_descriptor_id = __builtin__.property(_get_component_descriptor_id)
  state = __builtin__.property(_get_state)
  compatible_transceivers = __builtin__.property(_get_compatible_transceivers)


  _pyangbind_elements = OrderedDict([('component_descriptor_id', component_descriptor_id), ('state', state), ('compatible_transceivers', compatible_transceivers), ])


