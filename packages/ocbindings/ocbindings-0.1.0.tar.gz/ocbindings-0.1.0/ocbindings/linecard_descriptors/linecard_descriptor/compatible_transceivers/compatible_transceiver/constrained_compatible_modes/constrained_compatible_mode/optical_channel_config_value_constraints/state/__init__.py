# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-terminal-device-properties - based on the path /linecard-descriptors/linecard-descriptor/compatible-transceivers/compatible-transceiver/constrained-compatible-modes/constrained-compatible-mode/optical-channel-config-value-constraints/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational-mode explicit mode config value constrains state top
container.
  """
  __slots__ = ('_path_helper', '_extmethods', '__min_central_frequency','__max_central_frequency','__grid_type','__adjustment_granularity','__min_channel_spacing','__min_output_power','__max_output_power',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/openconfig-terminal-device-properties'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__min_central_frequency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-central-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-types:frequency-type', is_config=False)
    self.__max_central_frequency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-central-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-types:frequency-type', is_config=False)
    self.__grid_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},), is_leaf=True, yang_name="grid-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-term-prop-types:grid-type', is_config=False)
    self.__adjustment_granularity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},), is_leaf=True, yang_name="adjustment-granularity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-term-prop-types:adjustment-granularity', is_config=False)
    self.__min_channel_spacing = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-channel-spacing", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)
    self.__min_output_power = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)
    self.__max_output_power = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['linecard-descriptors', 'linecard-descriptor', 'compatible-transceivers', 'compatible-transceiver', 'constrained-compatible-modes', 'constrained-compatible-mode', 'optical-channel-config-value-constraints', 'state']

  def _get_min_central_frequency(self):
    """
    Getter method for min_central_frequency, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/min_central_frequency (oc-opt-types:frequency-type)

    YANG Description: The lowest configurable central frequency in MHz.
    """
    return self.__min_central_frequency
      
  def _set_min_central_frequency(self, v, load=False):
    """
    Setter method for min_central_frequency, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/min_central_frequency (oc-opt-types:frequency-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_central_frequency is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_central_frequency() directly.

    YANG Description: The lowest configurable central frequency in MHz.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-central-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-types:frequency-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_central_frequency must be of a type compatible with oc-opt-types:frequency-type""",
          'defined-type': "oc-opt-types:frequency-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-central-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-types:frequency-type', is_config=False)""",
        })

    self.__min_central_frequency = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_central_frequency(self):
    self.__min_central_frequency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-central-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-types:frequency-type', is_config=False)


  def _get_max_central_frequency(self):
    """
    Getter method for max_central_frequency, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/max_central_frequency (oc-opt-types:frequency-type)

    YANG Description: The highest configurable central frequency in MHz.
    """
    return self.__max_central_frequency
      
  def _set_max_central_frequency(self, v, load=False):
    """
    Setter method for max_central_frequency, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/max_central_frequency (oc-opt-types:frequency-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_central_frequency is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_central_frequency() directly.

    YANG Description: The highest configurable central frequency in MHz.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-central-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-types:frequency-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_central_frequency must be of a type compatible with oc-opt-types:frequency-type""",
          'defined-type': "oc-opt-types:frequency-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-central-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-types:frequency-type', is_config=False)""",
        })

    self.__max_central_frequency = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_central_frequency(self):
    self.__max_central_frequency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-central-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-types:frequency-type', is_config=False)


  def _get_grid_type(self):
    """
    Getter method for grid_type, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/grid_type (oc-opt-term-prop-types:grid-type)

    YANG Description: Frequency  ITU-T G.694.1 (10/2020) grid specification attribute.
    """
    return self.__grid_type
      
  def _set_grid_type(self, v, load=False):
    """
    Setter method for grid_type, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/grid_type (oc-opt-term-prop-types:grid-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_grid_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_grid_type() directly.

    YANG Description: Frequency  ITU-T G.694.1 (10/2020) grid specification attribute.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},), is_leaf=True, yang_name="grid-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-term-prop-types:grid-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """grid_type must be of a type compatible with oc-opt-term-prop-types:grid-type""",
          'defined-type': "oc-opt-term-prop-types:grid-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},), is_leaf=True, yang_name="grid-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-term-prop-types:grid-type', is_config=False)""",
        })

    self.__grid_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_grid_type(self):
    self.__grid_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},), is_leaf=True, yang_name="grid-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-term-prop-types:grid-type', is_config=False)


  def _get_adjustment_granularity(self):
    """
    Getter method for adjustment_granularity, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/adjustment_granularity (oc-opt-term-prop-types:adjustment-granularity)

    YANG Description: Adjustment granularity in Gigahertz. As per  ITU-T G.694.1
(10/2020), it is used to calculate nominal central frequency of an
optical channel. It defines the minimum granularity supporting by the
optical channel's central frequency setting.
    """
    return self.__adjustment_granularity
      
  def _set_adjustment_granularity(self, v, load=False):
    """
    Setter method for adjustment_granularity, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/adjustment_granularity (oc-opt-term-prop-types:adjustment-granularity)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adjustment_granularity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adjustment_granularity() directly.

    YANG Description: Adjustment granularity in Gigahertz. As per  ITU-T G.694.1
(10/2020), it is used to calculate nominal central frequency of an
optical channel. It defines the minimum granularity supporting by the
optical channel's central frequency setting.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},), is_leaf=True, yang_name="adjustment-granularity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-term-prop-types:adjustment-granularity', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adjustment_granularity must be of a type compatible with oc-opt-term-prop-types:adjustment-granularity""",
          'defined-type': "oc-opt-term-prop-types:adjustment-granularity",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},), is_leaf=True, yang_name="adjustment-granularity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-term-prop-types:adjustment-granularity', is_config=False)""",
        })

    self.__adjustment_granularity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adjustment_granularity(self):
    self.__adjustment_granularity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},), is_leaf=True, yang_name="adjustment-granularity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-term-prop-types:adjustment-granularity', is_config=False)


  def _get_min_channel_spacing(self):
    """
    Getter method for min_channel_spacing, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/min_channel_spacing (decimal64)

    YANG Description: Minimum recommended spectrum spacing between the central frequency of two
adjacent optical channels of the same mode. In case of two adjacent optical
channels with different operational-modes, it is up to the path computation
engine to determine the minimum distance between the central frequencies of
these two optical channels.
    """
    return self.__min_channel_spacing
      
  def _set_min_channel_spacing(self, v, load=False):
    """
    Setter method for min_channel_spacing, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/min_channel_spacing (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_channel_spacing is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_channel_spacing() directly.

    YANG Description: Minimum recommended spectrum spacing between the central frequency of two
adjacent optical channels of the same mode. In case of two adjacent optical
channels with different operational-modes, it is up to the path computation
engine to determine the minimum distance between the central frequencies of
these two optical channels.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-channel-spacing", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_channel_spacing must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-channel-spacing", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)""",
        })

    self.__min_channel_spacing = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_channel_spacing(self):
    self.__min_channel_spacing = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-channel-spacing", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)


  def _get_min_output_power(self):
    """
    Getter method for min_output_power, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/min_output_power (decimal64)

    YANG Description: Minimum target output optical power level of the optical channel,
configurable according to the optical transceiver mode properties,
expressed in increments of 0.01 dBm (decibel-milliwats)
    """
    return self.__min_output_power
      
  def _set_min_output_power(self, v, load=False):
    """
    Setter method for min_output_power, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/min_output_power (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_output_power is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_output_power() directly.

    YANG Description: Minimum target output optical power level of the optical channel,
configurable according to the optical transceiver mode properties,
expressed in increments of 0.01 dBm (decibel-milliwats)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_output_power must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)""",
        })

    self.__min_output_power = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_output_power(self):
    self.__min_output_power = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)


  def _get_max_output_power(self):
    """
    Getter method for max_output_power, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/max_output_power (decimal64)

    YANG Description: Maximum target output optical power level of the optical channel,
configurable according to the optical transceiver mode properties,
expressed in increments of 0.01 dBm (decibel-milliwatts)
    """
    return self.__max_output_power
      
  def _set_max_output_power(self, v, load=False):
    """
    Setter method for max_output_power, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/max_output_power (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_output_power is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_output_power() directly.

    YANG Description: Maximum target output optical power level of the optical channel,
configurable according to the optical transceiver mode properties,
expressed in increments of 0.01 dBm (decibel-milliwatts)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_output_power must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)""",
        })

    self.__max_output_power = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_output_power(self):
    self.__max_output_power = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)

  min_central_frequency = __builtin__.property(_get_min_central_frequency)
  max_central_frequency = __builtin__.property(_get_max_central_frequency)
  grid_type = __builtin__.property(_get_grid_type)
  adjustment_granularity = __builtin__.property(_get_adjustment_granularity)
  min_channel_spacing = __builtin__.property(_get_min_channel_spacing)
  min_output_power = __builtin__.property(_get_min_output_power)
  max_output_power = __builtin__.property(_get_max_output_power)


  _pyangbind_elements = OrderedDict([('min_central_frequency', min_central_frequency), ('max_central_frequency', max_central_frequency), ('grid_type', grid_type), ('adjustment_granularity', adjustment_granularity), ('min_channel_spacing', min_channel_spacing), ('min_output_power', min_output_power), ('max_output_power', max_output_power), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-terminal-device-properties - based on the path /linecard-descriptors/linecard-descriptor/compatible-transceivers/compatible-transceiver/constrained-compatible-modes/constrained-compatible-mode/optical-channel-config-value-constraints/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational-mode explicit mode config value constrains state top
container.
  """
  __slots__ = ('_path_helper', '_extmethods', '__min_central_frequency','__max_central_frequency','__grid_type','__adjustment_granularity','__min_channel_spacing','__min_output_power','__max_output_power',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/openconfig-terminal-device-properties'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__min_central_frequency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-central-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-types:frequency-type', is_config=False)
    self.__max_central_frequency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-central-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-types:frequency-type', is_config=False)
    self.__grid_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},), is_leaf=True, yang_name="grid-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-term-prop-types:grid-type', is_config=False)
    self.__adjustment_granularity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},), is_leaf=True, yang_name="adjustment-granularity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-term-prop-types:adjustment-granularity', is_config=False)
    self.__min_channel_spacing = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-channel-spacing", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)
    self.__min_output_power = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)
    self.__max_output_power = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['linecard-descriptors', 'linecard-descriptor', 'compatible-transceivers', 'compatible-transceiver', 'constrained-compatible-modes', 'constrained-compatible-mode', 'optical-channel-config-value-constraints', 'state']

  def _get_min_central_frequency(self):
    """
    Getter method for min_central_frequency, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/min_central_frequency (oc-opt-types:frequency-type)

    YANG Description: The lowest configurable central frequency in MHz.
    """
    return self.__min_central_frequency
      
  def _set_min_central_frequency(self, v, load=False):
    """
    Setter method for min_central_frequency, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/min_central_frequency (oc-opt-types:frequency-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_central_frequency is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_central_frequency() directly.

    YANG Description: The lowest configurable central frequency in MHz.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-central-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-types:frequency-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_central_frequency must be of a type compatible with oc-opt-types:frequency-type""",
          'defined-type': "oc-opt-types:frequency-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-central-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-types:frequency-type', is_config=False)""",
        })

    self.__min_central_frequency = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_central_frequency(self):
    self.__min_central_frequency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="min-central-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-types:frequency-type', is_config=False)


  def _get_max_central_frequency(self):
    """
    Getter method for max_central_frequency, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/max_central_frequency (oc-opt-types:frequency-type)

    YANG Description: The highest configurable central frequency in MHz.
    """
    return self.__max_central_frequency
      
  def _set_max_central_frequency(self, v, load=False):
    """
    Setter method for max_central_frequency, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/max_central_frequency (oc-opt-types:frequency-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_central_frequency is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_central_frequency() directly.

    YANG Description: The highest configurable central frequency in MHz.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-central-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-types:frequency-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_central_frequency must be of a type compatible with oc-opt-types:frequency-type""",
          'defined-type': "oc-opt-types:frequency-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-central-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-types:frequency-type', is_config=False)""",
        })

    self.__max_central_frequency = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_central_frequency(self):
    self.__max_central_frequency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-central-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-types:frequency-type', is_config=False)


  def _get_grid_type(self):
    """
    Getter method for grid_type, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/grid_type (oc-opt-term-prop-types:grid-type)

    YANG Description: Frequency  ITU-T G.694.1 (10/2020) grid specification attribute.
    """
    return self.__grid_type
      
  def _set_grid_type(self, v, load=False):
    """
    Setter method for grid_type, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/grid_type (oc-opt-term-prop-types:grid-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_grid_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_grid_type() directly.

    YANG Description: Frequency  ITU-T G.694.1 (10/2020) grid specification attribute.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},), is_leaf=True, yang_name="grid-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-term-prop-types:grid-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """grid_type must be of a type compatible with oc-opt-term-prop-types:grid-type""",
          'defined-type': "oc-opt-term-prop-types:grid-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},), is_leaf=True, yang_name="grid-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-term-prop-types:grid-type', is_config=False)""",
        })

    self.__grid_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_grid_type(self):
    self.__grid_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:DWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:CWDM': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:FLEX': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:GRIDLESS': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:UNSPECIFIED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},), is_leaf=True, yang_name="grid-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-term-prop-types:grid-type', is_config=False)


  def _get_adjustment_granularity(self):
    """
    Getter method for adjustment_granularity, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/adjustment_granularity (oc-opt-term-prop-types:adjustment-granularity)

    YANG Description: Adjustment granularity in Gigahertz. As per  ITU-T G.694.1
(10/2020), it is used to calculate nominal central frequency of an
optical channel. It defines the minimum granularity supporting by the
optical channel's central frequency setting.
    """
    return self.__adjustment_granularity
      
  def _set_adjustment_granularity(self, v, load=False):
    """
    Setter method for adjustment_granularity, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/adjustment_granularity (oc-opt-term-prop-types:adjustment-granularity)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adjustment_granularity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adjustment_granularity() directly.

    YANG Description: Adjustment granularity in Gigahertz. As per  ITU-T G.694.1
(10/2020), it is used to calculate nominal central frequency of an
optical channel. It defines the minimum granularity supporting by the
optical channel's central frequency setting.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},), is_leaf=True, yang_name="adjustment-granularity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-term-prop-types:adjustment-granularity', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adjustment_granularity must be of a type compatible with oc-opt-term-prop-types:adjustment-granularity""",
          'defined-type': "oc-opt-term-prop-types:adjustment-granularity",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},), is_leaf=True, yang_name="adjustment-granularity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-term-prop-types:adjustment-granularity', is_config=False)""",
        })

    self.__adjustment_granularity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adjustment_granularity(self):
    self.__adjustment_granularity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_100GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_50GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_12_5GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_6_25GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:G_3_125GHZ': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'openconfig-terminal-device-property-types:UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}, 'oc-opt-term-prop-types:UNCONSTRAINED': {'@module': 'openconfig-terminal-device-property-types', '@namespace': 'http://openconfig.net/yang/openconfig-terminal-device-property-types'}},), is_leaf=True, yang_name="adjustment-granularity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='oc-opt-term-prop-types:adjustment-granularity', is_config=False)


  def _get_min_channel_spacing(self):
    """
    Getter method for min_channel_spacing, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/min_channel_spacing (decimal64)

    YANG Description: Minimum recommended spectrum spacing between the central frequency of two
adjacent optical channels of the same mode. In case of two adjacent optical
channels with different operational-modes, it is up to the path computation
engine to determine the minimum distance between the central frequencies of
these two optical channels.
    """
    return self.__min_channel_spacing
      
  def _set_min_channel_spacing(self, v, load=False):
    """
    Setter method for min_channel_spacing, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/min_channel_spacing (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_channel_spacing is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_channel_spacing() directly.

    YANG Description: Minimum recommended spectrum spacing between the central frequency of two
adjacent optical channels of the same mode. In case of two adjacent optical
channels with different operational-modes, it is up to the path computation
engine to determine the minimum distance between the central frequencies of
these two optical channels.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-channel-spacing", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_channel_spacing must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-channel-spacing", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)""",
        })

    self.__min_channel_spacing = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_channel_spacing(self):
    self.__min_channel_spacing = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-channel-spacing", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)


  def _get_min_output_power(self):
    """
    Getter method for min_output_power, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/min_output_power (decimal64)

    YANG Description: Minimum target output optical power level of the optical channel,
configurable according to the optical transceiver mode properties,
expressed in increments of 0.01 dBm (decibel-milliwats)
    """
    return self.__min_output_power
      
  def _set_min_output_power(self, v, load=False):
    """
    Setter method for min_output_power, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/min_output_power (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_output_power is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_output_power() directly.

    YANG Description: Minimum target output optical power level of the optical channel,
configurable according to the optical transceiver mode properties,
expressed in increments of 0.01 dBm (decibel-milliwats)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_output_power must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)""",
        })

    self.__min_output_power = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_output_power(self):
    self.__min_output_power = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)


  def _get_max_output_power(self):
    """
    Getter method for max_output_power, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/max_output_power (decimal64)

    YANG Description: Maximum target output optical power level of the optical channel,
configurable according to the optical transceiver mode properties,
expressed in increments of 0.01 dBm (decibel-milliwatts)
    """
    return self.__max_output_power
      
  def _set_max_output_power(self, v, load=False):
    """
    Setter method for max_output_power, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/optical_channel_config_value_constraints/state/max_output_power (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_output_power is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_output_power() directly.

    YANG Description: Maximum target output optical power level of the optical channel,
configurable according to the optical transceiver mode properties,
expressed in increments of 0.01 dBm (decibel-milliwatts)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_output_power must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)""",
        })

    self.__max_output_power = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_output_power(self):
    self.__max_output_power = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='decimal64', is_config=False)

  min_central_frequency = __builtin__.property(_get_min_central_frequency)
  max_central_frequency = __builtin__.property(_get_max_central_frequency)
  grid_type = __builtin__.property(_get_grid_type)
  adjustment_granularity = __builtin__.property(_get_adjustment_granularity)
  min_channel_spacing = __builtin__.property(_get_min_channel_spacing)
  min_output_power = __builtin__.property(_get_min_output_power)
  max_output_power = __builtin__.property(_get_max_output_power)


  _pyangbind_elements = OrderedDict([('min_central_frequency', min_central_frequency), ('max_central_frequency', max_central_frequency), ('grid_type', grid_type), ('adjustment_granularity', adjustment_granularity), ('min_channel_spacing', min_channel_spacing), ('min_output_power', min_output_power), ('max_output_power', max_output_power), ])


