# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-optical-amplifier - based on the path /optical-amplifier/amplifiers/amplifier/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for the amplifier
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__type','__target_gain','__min_gain','__max_gain','__target_gain_tilt','__gain_range','__amp_mode','__target_output_power','__max_output_power','__enabled','__fiber_type_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/optical-amplfier'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='string', is_config=True)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)
    self.__target_gain = YANGDynClass(base=RestrictedClassType(base_type=Decimal, restriction_dict={'range': ['0..max']}), is_leaf=True, yang_name="target-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    self.__min_gain = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    self.__max_gain = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    self.__target_gain_tilt = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="target-gain-tilt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    self.__gain_range = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="gain-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)
    self.__amp_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="amp-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)
    self.__target_output_power = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="target-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    self.__max_output_power = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    self.__enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='boolean', is_config=True)
    self.__fiber_type_profile = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="fiber-type-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['optical-amplifier', 'amplifiers', 'amplifier', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/name (string)

    YANG Description: User-defined name assigned to identify a specific amplifier
in the device
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: User-defined name assigned to identify a specific amplifier
in the device
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='string', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/type (identityref)

    YANG Description: Type of the amplifier
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Type of the amplifier
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-optical-amplifier:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)


  def _get_target_gain(self):
    """
    Getter method for target_gain, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/target_gain (decimal64)

    YANG Description: Positive gain applied by the amplifier. This is used
when the amp-mode is in CONSTANT_GAIN or DYNAMIC_GAIN
mode to set the target gain that the amplifier should
achieve.
    """
    return self.__target_gain
      
  def _set_target_gain(self, v, load=False):
    """
    Setter method for target_gain, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/target_gain (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_target_gain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_target_gain() directly.

    YANG Description: Positive gain applied by the amplifier. This is used
when the amp-mode is in CONSTANT_GAIN or DYNAMIC_GAIN
mode to set the target gain that the amplifier should
achieve.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=Decimal, restriction_dict={'range': ['0..max']}), is_leaf=True, yang_name="target-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """target_gain must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=Decimal, restriction_dict={'range': ['0..max']}), is_leaf=True, yang_name="target-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)""",
        })

    self.__target_gain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_target_gain(self):
    self.__target_gain = YANGDynClass(base=RestrictedClassType(base_type=Decimal, restriction_dict={'range': ['0..max']}), is_leaf=True, yang_name="target-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)


  def _get_min_gain(self):
    """
    Getter method for min_gain, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/min_gain (decimal64)

    YANG Description: The minimum allowed gain of the amplifier. This is used
when the amp-mode is in CONSTANT_POWER or DYNAMIC_GAIN mode
to prevent the gain from dropping below a desired threshold.
If left empty, the platform will apply a minimum gain based
on hardware specifications.
    """
    return self.__min_gain
      
  def _set_min_gain(self, v, load=False):
    """
    Setter method for min_gain, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/min_gain (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_gain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_gain() directly.

    YANG Description: The minimum allowed gain of the amplifier. This is used
when the amp-mode is in CONSTANT_POWER or DYNAMIC_GAIN mode
to prevent the gain from dropping below a desired threshold.
If left empty, the platform will apply a minimum gain based
on hardware specifications.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_gain must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)""",
        })

    self.__min_gain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_gain(self):
    self.__min_gain = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)


  def _get_max_gain(self):
    """
    Getter method for max_gain, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/max_gain (decimal64)

    YANG Description: The maximum allowed gain of the amplifier. This is used
when the amp-mode is in CONSTANT_POWER or DYNAMIC_GAIN mode
to prevent the gain from exceeding a desired threshold. If
left empty, the platform will apply a maximum gain based on
hardware specifications.
    """
    return self.__max_gain
      
  def _set_max_gain(self, v, load=False):
    """
    Setter method for max_gain, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/max_gain (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_gain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_gain() directly.

    YANG Description: The maximum allowed gain of the amplifier. This is used
when the amp-mode is in CONSTANT_POWER or DYNAMIC_GAIN mode
to prevent the gain from exceeding a desired threshold. If
left empty, the platform will apply a maximum gain based on
hardware specifications.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_gain must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)""",
        })

    self.__max_gain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_gain(self):
    self.__max_gain = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)


  def _get_target_gain_tilt(self):
    """
    Getter method for target_gain_tilt, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/target_gain_tilt (decimal64)

    YANG Description: Gain tilt control
    """
    return self.__target_gain_tilt
      
  def _set_target_gain_tilt(self, v, load=False):
    """
    Setter method for target_gain_tilt, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/target_gain_tilt (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_target_gain_tilt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_target_gain_tilt() directly.

    YANG Description: Gain tilt control
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="target-gain-tilt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """target_gain_tilt must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="target-gain-tilt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)""",
        })

    self.__target_gain_tilt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_target_gain_tilt(self):
    self.__target_gain_tilt = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="target-gain-tilt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)


  def _get_gain_range(self):
    """
    Getter method for gain_range, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/gain_range (identityref)

    YANG Description: Selected gain range.  The gain range is a platform-defined
value indicating the switched gain amplifier setting
    """
    return self.__gain_range
      
  def _set_gain_range(self, v, load=False):
    """
    Setter method for gain_range, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/gain_range (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_gain_range is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_gain_range() directly.

    YANG Description: Selected gain range.  The gain range is a platform-defined
value indicating the switched gain amplifier setting
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="gain-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """gain_range must be of a type compatible with identityref""",
          'defined-type': "openconfig-optical-amplifier:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="gain-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)""",
        })

    self.__gain_range = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_gain_range(self):
    self.__gain_range = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="gain-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)


  def _get_amp_mode(self):
    """
    Getter method for amp_mode, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/amp_mode (identityref)

    YANG Description: The operating mode of the amplifier
    """
    return self.__amp_mode
      
  def _set_amp_mode(self, v, load=False):
    """
    Setter method for amp_mode, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/amp_mode (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_amp_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_amp_mode() directly.

    YANG Description: The operating mode of the amplifier
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="amp-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """amp_mode must be of a type compatible with identityref""",
          'defined-type': "openconfig-optical-amplifier:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="amp-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)""",
        })

    self.__amp_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_amp_mode(self):
    self.__amp_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="amp-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)


  def _get_target_output_power(self):
    """
    Getter method for target_output_power, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/target_output_power (decimal64)

    YANG Description: Output optical power of the amplifier.
    """
    return self.__target_output_power
      
  def _set_target_output_power(self, v, load=False):
    """
    Setter method for target_output_power, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/target_output_power (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_target_output_power is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_target_output_power() directly.

    YANG Description: Output optical power of the amplifier.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="target-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """target_output_power must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="target-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)""",
        })

    self.__target_output_power = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_target_output_power(self):
    self.__target_output_power = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="target-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)


  def _get_max_output_power(self):
    """
    Getter method for max_output_power, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/max_output_power (decimal64)

    YANG Description: The maximum optical output power of the amplifier. This
may be used to prevent the output power from exceeding a
desired threshold.
    """
    return self.__max_output_power
      
  def _set_max_output_power(self, v, load=False):
    """
    Setter method for max_output_power, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/max_output_power (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_output_power is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_output_power() directly.

    YANG Description: The maximum optical output power of the amplifier. This
may be used to prevent the output power from exceeding a
desired threshold.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_output_power must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)""",
        })

    self.__max_output_power = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_output_power(self):
    self.__max_output_power = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)


  def _get_enabled(self):
    """
    Getter method for enabled, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/enabled (boolean)

    YANG Description: Turns power on / off to the amplifiers gain module.
    """
    return self.__enabled
      
  def _set_enabled(self, v, load=False):
    """
    Setter method for enabled, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enabled() directly.

    YANG Description: Turns power on / off to the amplifiers gain module.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='boolean', is_config=True)""",
        })

    self.__enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enabled(self):
    self.__enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='boolean', is_config=True)


  def _get_fiber_type_profile(self):
    """
    Getter method for fiber_type_profile, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/fiber_type_profile (identityref)

    YANG Description: The fiber type profile specifies details about the
fiber type which are needed to accurately determine
the gain and perform efficient amplification. This is
only needed for Raman type amplifiers.
    """
    return self.__fiber_type_profile
      
  def _set_fiber_type_profile(self, v, load=False):
    """
    Setter method for fiber_type_profile, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/fiber_type_profile (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fiber_type_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fiber_type_profile() directly.

    YANG Description: The fiber type profile specifies details about the
fiber type which are needed to accurately determine
the gain and perform efficient amplification. This is
only needed for Raman type amplifiers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="fiber-type-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fiber_type_profile must be of a type compatible with identityref""",
          'defined-type': "openconfig-optical-amplifier:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="fiber-type-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)""",
        })

    self.__fiber_type_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fiber_type_profile(self):
    self.__fiber_type_profile = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="fiber-type-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  type = __builtin__.property(_get_type, _set_type)
  target_gain = __builtin__.property(_get_target_gain, _set_target_gain)
  min_gain = __builtin__.property(_get_min_gain, _set_min_gain)
  max_gain = __builtin__.property(_get_max_gain, _set_max_gain)
  target_gain_tilt = __builtin__.property(_get_target_gain_tilt, _set_target_gain_tilt)
  gain_range = __builtin__.property(_get_gain_range, _set_gain_range)
  amp_mode = __builtin__.property(_get_amp_mode, _set_amp_mode)
  target_output_power = __builtin__.property(_get_target_output_power, _set_target_output_power)
  max_output_power = __builtin__.property(_get_max_output_power, _set_max_output_power)
  enabled = __builtin__.property(_get_enabled, _set_enabled)
  fiber_type_profile = __builtin__.property(_get_fiber_type_profile, _set_fiber_type_profile)


  _pyangbind_elements = OrderedDict([('name', name), ('type', type), ('target_gain', target_gain), ('min_gain', min_gain), ('max_gain', max_gain), ('target_gain_tilt', target_gain_tilt), ('gain_range', gain_range), ('amp_mode', amp_mode), ('target_output_power', target_output_power), ('max_output_power', max_output_power), ('enabled', enabled), ('fiber_type_profile', fiber_type_profile), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-optical-amplifier - based on the path /optical-amplifier/amplifiers/amplifier/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for the amplifier
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__type','__target_gain','__min_gain','__max_gain','__target_gain_tilt','__gain_range','__amp_mode','__target_output_power','__max_output_power','__enabled','__fiber_type_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/optical-amplfier'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='string', is_config=True)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)
    self.__target_gain = YANGDynClass(base=RestrictedClassType(base_type=Decimal, restriction_dict={'range': ['0..max']}), is_leaf=True, yang_name="target-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    self.__min_gain = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    self.__max_gain = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    self.__target_gain_tilt = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="target-gain-tilt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    self.__gain_range = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="gain-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)
    self.__amp_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="amp-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)
    self.__target_output_power = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="target-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    self.__max_output_power = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    self.__enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='boolean', is_config=True)
    self.__fiber_type_profile = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="fiber-type-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['optical-amplifier', 'amplifiers', 'amplifier', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/name (string)

    YANG Description: User-defined name assigned to identify a specific amplifier
in the device
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: User-defined name assigned to identify a specific amplifier
in the device
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='string', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/type (identityref)

    YANG Description: Type of the amplifier
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Type of the amplifier
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-optical-amplifier:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:EDFA': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:FORWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:BACKWARD_RAMAN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:HYBRID': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)


  def _get_target_gain(self):
    """
    Getter method for target_gain, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/target_gain (decimal64)

    YANG Description: Positive gain applied by the amplifier. This is used
when the amp-mode is in CONSTANT_GAIN or DYNAMIC_GAIN
mode to set the target gain that the amplifier should
achieve.
    """
    return self.__target_gain
      
  def _set_target_gain(self, v, load=False):
    """
    Setter method for target_gain, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/target_gain (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_target_gain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_target_gain() directly.

    YANG Description: Positive gain applied by the amplifier. This is used
when the amp-mode is in CONSTANT_GAIN or DYNAMIC_GAIN
mode to set the target gain that the amplifier should
achieve.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=Decimal, restriction_dict={'range': ['0..max']}), is_leaf=True, yang_name="target-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """target_gain must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=Decimal, restriction_dict={'range': ['0..max']}), is_leaf=True, yang_name="target-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)""",
        })

    self.__target_gain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_target_gain(self):
    self.__target_gain = YANGDynClass(base=RestrictedClassType(base_type=Decimal, restriction_dict={'range': ['0..max']}), is_leaf=True, yang_name="target-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)


  def _get_min_gain(self):
    """
    Getter method for min_gain, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/min_gain (decimal64)

    YANG Description: The minimum allowed gain of the amplifier. This is used
when the amp-mode is in CONSTANT_POWER or DYNAMIC_GAIN mode
to prevent the gain from dropping below a desired threshold.
If left empty, the platform will apply a minimum gain based
on hardware specifications.
    """
    return self.__min_gain
      
  def _set_min_gain(self, v, load=False):
    """
    Setter method for min_gain, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/min_gain (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_gain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_gain() directly.

    YANG Description: The minimum allowed gain of the amplifier. This is used
when the amp-mode is in CONSTANT_POWER or DYNAMIC_GAIN mode
to prevent the gain from dropping below a desired threshold.
If left empty, the platform will apply a minimum gain based
on hardware specifications.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_gain must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)""",
        })

    self.__min_gain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_gain(self):
    self.__min_gain = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="min-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)


  def _get_max_gain(self):
    """
    Getter method for max_gain, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/max_gain (decimal64)

    YANG Description: The maximum allowed gain of the amplifier. This is used
when the amp-mode is in CONSTANT_POWER or DYNAMIC_GAIN mode
to prevent the gain from exceeding a desired threshold. If
left empty, the platform will apply a maximum gain based on
hardware specifications.
    """
    return self.__max_gain
      
  def _set_max_gain(self, v, load=False):
    """
    Setter method for max_gain, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/max_gain (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_gain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_gain() directly.

    YANG Description: The maximum allowed gain of the amplifier. This is used
when the amp-mode is in CONSTANT_POWER or DYNAMIC_GAIN mode
to prevent the gain from exceeding a desired threshold. If
left empty, the platform will apply a maximum gain based on
hardware specifications.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_gain must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)""",
        })

    self.__max_gain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_gain(self):
    self.__max_gain = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)


  def _get_target_gain_tilt(self):
    """
    Getter method for target_gain_tilt, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/target_gain_tilt (decimal64)

    YANG Description: Gain tilt control
    """
    return self.__target_gain_tilt
      
  def _set_target_gain_tilt(self, v, load=False):
    """
    Setter method for target_gain_tilt, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/target_gain_tilt (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_target_gain_tilt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_target_gain_tilt() directly.

    YANG Description: Gain tilt control
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="target-gain-tilt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """target_gain_tilt must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="target-gain-tilt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)""",
        })

    self.__target_gain_tilt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_target_gain_tilt(self):
    self.__target_gain_tilt = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="target-gain-tilt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)


  def _get_gain_range(self):
    """
    Getter method for gain_range, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/gain_range (identityref)

    YANG Description: Selected gain range.  The gain range is a platform-defined
value indicating the switched gain amplifier setting
    """
    return self.__gain_range
      
  def _set_gain_range(self, v, load=False):
    """
    Setter method for gain_range, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/gain_range (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_gain_range is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_gain_range() directly.

    YANG Description: Selected gain range.  The gain range is a platform-defined
value indicating the switched gain amplifier setting
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="gain-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """gain_range must be of a type compatible with identityref""",
          'defined-type': "openconfig-optical-amplifier:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="gain-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)""",
        })

    self.__gain_range = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_gain_range(self):
    self.__gain_range = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:LOW_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:MID_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:HIGH_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:FIXED_GAIN_RANGE': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="gain-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)


  def _get_amp_mode(self):
    """
    Getter method for amp_mode, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/amp_mode (identityref)

    YANG Description: The operating mode of the amplifier
    """
    return self.__amp_mode
      
  def _set_amp_mode(self, v, load=False):
    """
    Setter method for amp_mode, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/amp_mode (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_amp_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_amp_mode() directly.

    YANG Description: The operating mode of the amplifier
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="amp-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """amp_mode must be of a type compatible with identityref""",
          'defined-type': "openconfig-optical-amplifier:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="amp-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)""",
        })

    self.__amp_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_amp_mode(self):
    self.__amp_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:CONSTANT_POWER': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:CONSTANT_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:DYNAMIC_GAIN': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="amp-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)


  def _get_target_output_power(self):
    """
    Getter method for target_output_power, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/target_output_power (decimal64)

    YANG Description: Output optical power of the amplifier.
    """
    return self.__target_output_power
      
  def _set_target_output_power(self, v, load=False):
    """
    Setter method for target_output_power, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/target_output_power (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_target_output_power is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_target_output_power() directly.

    YANG Description: Output optical power of the amplifier.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="target-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """target_output_power must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="target-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)""",
        })

    self.__target_output_power = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_target_output_power(self):
    self.__target_output_power = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="target-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)


  def _get_max_output_power(self):
    """
    Getter method for max_output_power, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/max_output_power (decimal64)

    YANG Description: The maximum optical output power of the amplifier. This
may be used to prevent the output power from exceeding a
desired threshold.
    """
    return self.__max_output_power
      
  def _set_max_output_power(self, v, load=False):
    """
    Setter method for max_output_power, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/max_output_power (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_output_power is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_output_power() directly.

    YANG Description: The maximum optical output power of the amplifier. This
may be used to prevent the output power from exceeding a
desired threshold.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_output_power must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)""",
        })

    self.__max_output_power = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_output_power(self):
    self.__max_output_power = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-output-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='decimal64', is_config=True)


  def _get_enabled(self):
    """
    Getter method for enabled, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/enabled (boolean)

    YANG Description: Turns power on / off to the amplifiers gain module.
    """
    return self.__enabled
      
  def _set_enabled(self, v, load=False):
    """
    Setter method for enabled, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enabled() directly.

    YANG Description: Turns power on / off to the amplifiers gain module.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='boolean', is_config=True)""",
        })

    self.__enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enabled(self):
    self.__enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='boolean', is_config=True)


  def _get_fiber_type_profile(self):
    """
    Getter method for fiber_type_profile, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/fiber_type_profile (identityref)

    YANG Description: The fiber type profile specifies details about the
fiber type which are needed to accurately determine
the gain and perform efficient amplification. This is
only needed for Raman type amplifiers.
    """
    return self.__fiber_type_profile
      
  def _set_fiber_type_profile(self, v, load=False):
    """
    Setter method for fiber_type_profile, mapped from YANG variable /optical_amplifier/amplifiers/amplifier/config/fiber_type_profile (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fiber_type_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fiber_type_profile() directly.

    YANG Description: The fiber type profile specifies details about the
fiber type which are needed to accurately determine
the gain and perform efficient amplification. This is
only needed for Raman type amplifiers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="fiber-type-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fiber_type_profile must be of a type compatible with identityref""",
          'defined-type': "openconfig-optical-amplifier:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="fiber-type-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)""",
        })

    self.__fiber_type_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fiber_type_profile(self):
    self.__fiber_type_profile = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:DSF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:LEAF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:SSMF': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:TWC': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'openconfig-optical-amplifier:TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}, 'oc-opt-amp:TWRS': {'@module': 'openconfig-optical-amplifier', '@namespace': 'http://openconfig.net/yang/optical-amplfier'}},), is_leaf=True, yang_name="fiber-type-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/optical-amplfier', defining_module='openconfig-optical-amplifier', yang_type='identityref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  type = __builtin__.property(_get_type, _set_type)
  target_gain = __builtin__.property(_get_target_gain, _set_target_gain)
  min_gain = __builtin__.property(_get_min_gain, _set_min_gain)
  max_gain = __builtin__.property(_get_max_gain, _set_max_gain)
  target_gain_tilt = __builtin__.property(_get_target_gain_tilt, _set_target_gain_tilt)
  gain_range = __builtin__.property(_get_gain_range, _set_gain_range)
  amp_mode = __builtin__.property(_get_amp_mode, _set_amp_mode)
  target_output_power = __builtin__.property(_get_target_output_power, _set_target_output_power)
  max_output_power = __builtin__.property(_get_max_output_power, _set_max_output_power)
  enabled = __builtin__.property(_get_enabled, _set_enabled)
  fiber_type_profile = __builtin__.property(_get_fiber_type_profile, _set_fiber_type_profile)


  _pyangbind_elements = OrderedDict([('name', name), ('type', type), ('target_gain', target_gain), ('min_gain', min_gain), ('max_gain', max_gain), ('target_gain_tilt', target_gain_tilt), ('gain_range', gain_range), ('amp_mode', amp_mode), ('target_output_power', target_output_power), ('max_output_power', max_output_power), ('enabled', enabled), ('fiber_type_profile', fiber_type_profile), ])


