# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/instances/instance/default-ds/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Config state data of default data set of the clock
  """
  __slots__ = ('_path_helper', '_extmethods', '__priority1','__priority2','__domain_number','__slave_only','__instance_type','__sdo_id','__network_transport','__unicast_multicast','__domain_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__priority1 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="priority1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)
    self.__priority2 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="priority2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)
    self.__domain_number = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="domain-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)
    self.__slave_only = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="slave-only", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=True)
    self.__instance_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'OC': {'value': 0}, 'BC': {'value': 1}, 'P2P_TC': {'value': 2}, 'E2E_TC': {'value': 3}},), is_leaf=True, yang_name="instance-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:instance-type', is_config=True)
    self.__sdo_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..4095']}), is_leaf=True, yang_name="sdo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=True)
    self.__network_transport = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'L2': {'value': 1}, 'UDPV4': {'value': 2}, 'UDPV6': {'value': 3}},), is_leaf=True, yang_name="network-transport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:network-transport-enumeration', is_config=True)
    self.__unicast_multicast = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNICAST': {'value': 1}, 'MULTICAST': {'value': 2}},), is_leaf=True, yang_name="unicast-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:unicast-multicast-enumeration', is_config=True)
    self.__domain_profile = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IEEE1588': {'value': 1}, 'G8275.1': {'value': 2}, 'G8275.2': {'value': 3}},), is_leaf=True, yang_name="domain-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:domain-profile-enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'instances', 'instance', 'default-ds', 'config']

  def _get_priority1(self):
    """
    Getter method for priority1, mapped from YANG variable /ptp/instances/instance/default_ds/config/priority1 (uint8)

    YANG Description: The IEEE Std 1588 priority1 of the PTP Instance.
Since priority1 is one of the first comparisons
performed by the Best Master Clock Algorithm (BMCA),
this leaf's configuration can be used to explicitly
select a Grandmaster PTP Instance.
Lower values take precedence.
The value of priority1 shall be configurable to any
value in the range 0 to 255, unless restricted by
limits established by the applicable PTP Profile.
    """
    return self.__priority1
      
  def _set_priority1(self, v, load=False):
    """
    Setter method for priority1, mapped from YANG variable /ptp/instances/instance/default_ds/config/priority1 (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority1() directly.

    YANG Description: The IEEE Std 1588 priority1 of the PTP Instance.
Since priority1 is one of the first comparisons
performed by the Best Master Clock Algorithm (BMCA),
this leaf's configuration can be used to explicitly
select a Grandmaster PTP Instance.
Lower values take precedence.
The value of priority1 shall be configurable to any
value in the range 0 to 255, unless restricted by
limits established by the applicable PTP Profile.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="priority1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority1 must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="priority1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)""",
        })

    self.__priority1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority1(self):
    self.__priority1 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="priority1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)


  def _get_priority2(self):
    """
    Getter method for priority2, mapped from YANG variable /ptp/instances/instance/default_ds/config/priority2 (uint8)

    YANG Description: The IEEE Std 1588 priority2 of the PTP Instance.
The priority2 member is compared by the Best Master
Clock Algorithm (BMCA) after priority1 and clockQuality.
Lower values take precedence.
The value of priority2 shall be configurable to any
value in the range 0 to 255, unless restricted by
limits established by the applicable PTP Profile.
    """
    return self.__priority2
      
  def _set_priority2(self, v, load=False):
    """
    Setter method for priority2, mapped from YANG variable /ptp/instances/instance/default_ds/config/priority2 (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority2() directly.

    YANG Description: The IEEE Std 1588 priority2 of the PTP Instance.
The priority2 member is compared by the Best Master
Clock Algorithm (BMCA) after priority1 and clockQuality.
Lower values take precedence.
The value of priority2 shall be configurable to any
value in the range 0 to 255, unless restricted by
limits established by the applicable PTP Profile.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="priority2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority2 must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="priority2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)""",
        })

    self.__priority2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority2(self):
    self.__priority2 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="priority2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)


  def _get_domain_number(self):
    """
    Getter method for domain_number, mapped from YANG variable /ptp/instances/instance/default_ds/config/domain_number (uint8)

    YANG Description: The IEEE Std 1588 domainNumber of the PTP Instance.
A domain consists of one or more PTP Instances
communicating with each other as defined by the
protocol. A domain shall define the scope of PTP message
communication, state, operations, data sets, and
timescale. Therefore, each domain represents a distinct
time.
Within a PTP Network, a domain is identified by two
data set members: domainNumber and sdoId.
The domainNumber is the primary mechanism for end users
and system integrators to isolate the operation of a
PTP Instance from PTP messages used in other domains.
The value of the domainNumber shall be configurable
to values permitted in IEEE Std 1588, unless the
allowed values are further restricted by the applicable
PTP Profile.
    """
    return self.__domain_number
      
  def _set_domain_number(self, v, load=False):
    """
    Setter method for domain_number, mapped from YANG variable /ptp/instances/instance/default_ds/config/domain_number (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_domain_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_domain_number() directly.

    YANG Description: The IEEE Std 1588 domainNumber of the PTP Instance.
A domain consists of one or more PTP Instances
communicating with each other as defined by the
protocol. A domain shall define the scope of PTP message
communication, state, operations, data sets, and
timescale. Therefore, each domain represents a distinct
time.
Within a PTP Network, a domain is identified by two
data set members: domainNumber and sdoId.
The domainNumber is the primary mechanism for end users
and system integrators to isolate the operation of a
PTP Instance from PTP messages used in other domains.
The value of the domainNumber shall be configurable
to values permitted in IEEE Std 1588, unless the
allowed values are further restricted by the applicable
PTP Profile.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="domain-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """domain_number must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="domain-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)""",
        })

    self.__domain_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_domain_number(self):
    self.__domain_number = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="domain-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)


  def _get_slave_only(self):
    """
    Getter method for slave_only, mapped from YANG variable /ptp/instances/instance/default_ds/config/slave_only (boolean)

    YANG Description: The value of slave-only shall be true if the
PTP Instance is a slave-only PTP Instance
(false for non-slave-only).
The slave-only member can be true for Ordinary Clocks
only.
When slave-only is true, the PTP Instance implements
special behavior in the context of the state machines
that determine port-state.
    """
    return self.__slave_only
      
  def _set_slave_only(self, v, load=False):
    """
    Setter method for slave_only, mapped from YANG variable /ptp/instances/instance/default_ds/config/slave_only (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_slave_only is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_slave_only() directly.

    YANG Description: The value of slave-only shall be true if the
PTP Instance is a slave-only PTP Instance
(false for non-slave-only).
The slave-only member can be true for Ordinary Clocks
only.
When slave-only is true, the PTP Instance implements
special behavior in the context of the state machines
that determine port-state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="slave-only", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """slave_only must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="slave-only", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=True)""",
        })

    self.__slave_only = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_slave_only(self):
    self.__slave_only = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="slave-only", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=True)


  def _get_instance_type(self):
    """
    Getter method for instance_type, mapped from YANG variable /ptp/instances/instance/default_ds/config/instance_type (oc-ptp-types:instance-type)

    YANG Description: The type of PTP Instance.
This leaf is read-only unless support for write is
explicitly specified by the applicable PTP Profile or
product specification.
    """
    return self.__instance_type
      
  def _set_instance_type(self, v, load=False):
    """
    Setter method for instance_type, mapped from YANG variable /ptp/instances/instance/default_ds/config/instance_type (oc-ptp-types:instance-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_type() directly.

    YANG Description: The type of PTP Instance.
This leaf is read-only unless support for write is
explicitly specified by the applicable PTP Profile or
product specification.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'OC': {'value': 0}, 'BC': {'value': 1}, 'P2P_TC': {'value': 2}, 'E2E_TC': {'value': 3}},), is_leaf=True, yang_name="instance-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:instance-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_type must be of a type compatible with oc-ptp-types:instance-type""",
          'defined-type': "oc-ptp-types:instance-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'OC': {'value': 0}, 'BC': {'value': 1}, 'P2P_TC': {'value': 2}, 'E2E_TC': {'value': 3}},), is_leaf=True, yang_name="instance-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:instance-type', is_config=True)""",
        })

    self.__instance_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_type(self):
    self.__instance_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'OC': {'value': 0}, 'BC': {'value': 1}, 'P2P_TC': {'value': 2}, 'E2E_TC': {'value': 3}},), is_leaf=True, yang_name="instance-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:instance-type', is_config=True)


  def _get_sdo_id(self):
    """
    Getter method for sdo_id, mapped from YANG variable /ptp/instances/instance/default_ds/config/sdo_id (uint16)

    YANG Description: The IEEE Std 1588 sdoId of the PTP Instance.
A domain consists of one or more PTP Instances
communicating with each other as defined by the
protocol. A domain shall define the scope of PTP message
communication, state, operations, data sets, and
timescale. Therefore, each domain represents a distinct
time.
Within a PTP Network, a domain is identified by two
data set members: domainNumber and sdoId.
The sdoId of a domain is a 12-bit integer in the
closed range 0 to 4095.
The sdoId member is the primary mechanism for providing
isolation of PTP Instances operating a PTP Profile
specified by a Standards Development Organization (SDO),
from other PTP Instances operating a PTP Profile
specified by a different SDO.
    """
    return self.__sdo_id
      
  def _set_sdo_id(self, v, load=False):
    """
    Setter method for sdo_id, mapped from YANG variable /ptp/instances/instance/default_ds/config/sdo_id (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sdo_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sdo_id() directly.

    YANG Description: The IEEE Std 1588 sdoId of the PTP Instance.
A domain consists of one or more PTP Instances
communicating with each other as defined by the
protocol. A domain shall define the scope of PTP message
communication, state, operations, data sets, and
timescale. Therefore, each domain represents a distinct
time.
Within a PTP Network, a domain is identified by two
data set members: domainNumber and sdoId.
The sdoId of a domain is a 12-bit integer in the
closed range 0 to 4095.
The sdoId member is the primary mechanism for providing
isolation of PTP Instances operating a PTP Profile
specified by a Standards Development Organization (SDO),
from other PTP Instances operating a PTP Profile
specified by a different SDO.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..4095']}), is_leaf=True, yang_name="sdo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sdo_id must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..4095']}), is_leaf=True, yang_name="sdo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=True)""",
        })

    self.__sdo_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sdo_id(self):
    self.__sdo_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..4095']}), is_leaf=True, yang_name="sdo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=True)


  def _get_network_transport(self):
    """
    Getter method for network_transport, mapped from YANG variable /ptp/instances/instance/default_ds/config/network_transport (oc-ptp-types:network-transport-enumeration)

    YANG Description: The network transport used for communication
    """
    return self.__network_transport
      
  def _set_network_transport(self, v, load=False):
    """
    Setter method for network_transport, mapped from YANG variable /ptp/instances/instance/default_ds/config/network_transport (oc-ptp-types:network-transport-enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_network_transport is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_network_transport() directly.

    YANG Description: The network transport used for communication
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'L2': {'value': 1}, 'UDPV4': {'value': 2}, 'UDPV6': {'value': 3}},), is_leaf=True, yang_name="network-transport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:network-transport-enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """network_transport must be of a type compatible with oc-ptp-types:network-transport-enumeration""",
          'defined-type': "oc-ptp-types:network-transport-enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'L2': {'value': 1}, 'UDPV4': {'value': 2}, 'UDPV6': {'value': 3}},), is_leaf=True, yang_name="network-transport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:network-transport-enumeration', is_config=True)""",
        })

    self.__network_transport = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_network_transport(self):
    self.__network_transport = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'L2': {'value': 1}, 'UDPV4': {'value': 2}, 'UDPV6': {'value': 3}},), is_leaf=True, yang_name="network-transport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:network-transport-enumeration', is_config=True)


  def _get_unicast_multicast(self):
    """
    Getter method for unicast_multicast, mapped from YANG variable /ptp/instances/instance/default_ds/config/unicast_multicast (oc-ptp-types:unicast-multicast-enumeration)

    YANG Description: Whether the network transport uses unicast or
multicast communication
    """
    return self.__unicast_multicast
      
  def _set_unicast_multicast(self, v, load=False):
    """
    Setter method for unicast_multicast, mapped from YANG variable /ptp/instances/instance/default_ds/config/unicast_multicast (oc-ptp-types:unicast-multicast-enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unicast_multicast is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unicast_multicast() directly.

    YANG Description: Whether the network transport uses unicast or
multicast communication
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNICAST': {'value': 1}, 'MULTICAST': {'value': 2}},), is_leaf=True, yang_name="unicast-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:unicast-multicast-enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unicast_multicast must be of a type compatible with oc-ptp-types:unicast-multicast-enumeration""",
          'defined-type': "oc-ptp-types:unicast-multicast-enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNICAST': {'value': 1}, 'MULTICAST': {'value': 2}},), is_leaf=True, yang_name="unicast-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:unicast-multicast-enumeration', is_config=True)""",
        })

    self.__unicast_multicast = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unicast_multicast(self):
    self.__unicast_multicast = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNICAST': {'value': 1}, 'MULTICAST': {'value': 2}},), is_leaf=True, yang_name="unicast-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:unicast-multicast-enumeration', is_config=True)


  def _get_domain_profile(self):
    """
    Getter method for domain_profile, mapped from YANG variable /ptp/instances/instance/default_ds/config/domain_profile (oc-ptp-types:domain-profile-enumeration)

    YANG Description: The method to be used when comparing data sets during
the Best Master Clock Algorithm.
    """
    return self.__domain_profile
      
  def _set_domain_profile(self, v, load=False):
    """
    Setter method for domain_profile, mapped from YANG variable /ptp/instances/instance/default_ds/config/domain_profile (oc-ptp-types:domain-profile-enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_domain_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_domain_profile() directly.

    YANG Description: The method to be used when comparing data sets during
the Best Master Clock Algorithm.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IEEE1588': {'value': 1}, 'G8275.1': {'value': 2}, 'G8275.2': {'value': 3}},), is_leaf=True, yang_name="domain-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:domain-profile-enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """domain_profile must be of a type compatible with oc-ptp-types:domain-profile-enumeration""",
          'defined-type': "oc-ptp-types:domain-profile-enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IEEE1588': {'value': 1}, 'G8275.1': {'value': 2}, 'G8275.2': {'value': 3}},), is_leaf=True, yang_name="domain-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:domain-profile-enumeration', is_config=True)""",
        })

    self.__domain_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_domain_profile(self):
    self.__domain_profile = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IEEE1588': {'value': 1}, 'G8275.1': {'value': 2}, 'G8275.2': {'value': 3}},), is_leaf=True, yang_name="domain-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:domain-profile-enumeration', is_config=True)

  priority1 = __builtin__.property(_get_priority1, _set_priority1)
  priority2 = __builtin__.property(_get_priority2, _set_priority2)
  domain_number = __builtin__.property(_get_domain_number, _set_domain_number)
  slave_only = __builtin__.property(_get_slave_only, _set_slave_only)
  instance_type = __builtin__.property(_get_instance_type, _set_instance_type)
  sdo_id = __builtin__.property(_get_sdo_id, _set_sdo_id)
  network_transport = __builtin__.property(_get_network_transport, _set_network_transport)
  unicast_multicast = __builtin__.property(_get_unicast_multicast, _set_unicast_multicast)
  domain_profile = __builtin__.property(_get_domain_profile, _set_domain_profile)


  _pyangbind_elements = OrderedDict([('priority1', priority1), ('priority2', priority2), ('domain_number', domain_number), ('slave_only', slave_only), ('instance_type', instance_type), ('sdo_id', sdo_id), ('network_transport', network_transport), ('unicast_multicast', unicast_multicast), ('domain_profile', domain_profile), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/instances/instance/default-ds/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Config state data of default data set of the clock
  """
  __slots__ = ('_path_helper', '_extmethods', '__priority1','__priority2','__domain_number','__slave_only','__instance_type','__sdo_id','__network_transport','__unicast_multicast','__domain_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__priority1 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="priority1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)
    self.__priority2 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="priority2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)
    self.__domain_number = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="domain-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)
    self.__slave_only = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="slave-only", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=True)
    self.__instance_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'OC': {'value': 0}, 'BC': {'value': 1}, 'P2P_TC': {'value': 2}, 'E2E_TC': {'value': 3}},), is_leaf=True, yang_name="instance-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:instance-type', is_config=True)
    self.__sdo_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..4095']}), is_leaf=True, yang_name="sdo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=True)
    self.__network_transport = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'L2': {'value': 1}, 'UDPV4': {'value': 2}, 'UDPV6': {'value': 3}},), is_leaf=True, yang_name="network-transport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:network-transport-enumeration', is_config=True)
    self.__unicast_multicast = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNICAST': {'value': 1}, 'MULTICAST': {'value': 2}},), is_leaf=True, yang_name="unicast-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:unicast-multicast-enumeration', is_config=True)
    self.__domain_profile = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IEEE1588': {'value': 1}, 'G8275.1': {'value': 2}, 'G8275.2': {'value': 3}},), is_leaf=True, yang_name="domain-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:domain-profile-enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'instances', 'instance', 'default-ds', 'config']

  def _get_priority1(self):
    """
    Getter method for priority1, mapped from YANG variable /ptp/instances/instance/default_ds/config/priority1 (uint8)

    YANG Description: The IEEE Std 1588 priority1 of the PTP Instance.
Since priority1 is one of the first comparisons
performed by the Best Master Clock Algorithm (BMCA),
this leaf's configuration can be used to explicitly
select a Grandmaster PTP Instance.
Lower values take precedence.
The value of priority1 shall be configurable to any
value in the range 0 to 255, unless restricted by
limits established by the applicable PTP Profile.
    """
    return self.__priority1
      
  def _set_priority1(self, v, load=False):
    """
    Setter method for priority1, mapped from YANG variable /ptp/instances/instance/default_ds/config/priority1 (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority1() directly.

    YANG Description: The IEEE Std 1588 priority1 of the PTP Instance.
Since priority1 is one of the first comparisons
performed by the Best Master Clock Algorithm (BMCA),
this leaf's configuration can be used to explicitly
select a Grandmaster PTP Instance.
Lower values take precedence.
The value of priority1 shall be configurable to any
value in the range 0 to 255, unless restricted by
limits established by the applicable PTP Profile.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="priority1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority1 must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="priority1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)""",
        })

    self.__priority1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority1(self):
    self.__priority1 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="priority1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)


  def _get_priority2(self):
    """
    Getter method for priority2, mapped from YANG variable /ptp/instances/instance/default_ds/config/priority2 (uint8)

    YANG Description: The IEEE Std 1588 priority2 of the PTP Instance.
The priority2 member is compared by the Best Master
Clock Algorithm (BMCA) after priority1 and clockQuality.
Lower values take precedence.
The value of priority2 shall be configurable to any
value in the range 0 to 255, unless restricted by
limits established by the applicable PTP Profile.
    """
    return self.__priority2
      
  def _set_priority2(self, v, load=False):
    """
    Setter method for priority2, mapped from YANG variable /ptp/instances/instance/default_ds/config/priority2 (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority2() directly.

    YANG Description: The IEEE Std 1588 priority2 of the PTP Instance.
The priority2 member is compared by the Best Master
Clock Algorithm (BMCA) after priority1 and clockQuality.
Lower values take precedence.
The value of priority2 shall be configurable to any
value in the range 0 to 255, unless restricted by
limits established by the applicable PTP Profile.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="priority2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority2 must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="priority2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)""",
        })

    self.__priority2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority2(self):
    self.__priority2 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="priority2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)


  def _get_domain_number(self):
    """
    Getter method for domain_number, mapped from YANG variable /ptp/instances/instance/default_ds/config/domain_number (uint8)

    YANG Description: The IEEE Std 1588 domainNumber of the PTP Instance.
A domain consists of one or more PTP Instances
communicating with each other as defined by the
protocol. A domain shall define the scope of PTP message
communication, state, operations, data sets, and
timescale. Therefore, each domain represents a distinct
time.
Within a PTP Network, a domain is identified by two
data set members: domainNumber and sdoId.
The domainNumber is the primary mechanism for end users
and system integrators to isolate the operation of a
PTP Instance from PTP messages used in other domains.
The value of the domainNumber shall be configurable
to values permitted in IEEE Std 1588, unless the
allowed values are further restricted by the applicable
PTP Profile.
    """
    return self.__domain_number
      
  def _set_domain_number(self, v, load=False):
    """
    Setter method for domain_number, mapped from YANG variable /ptp/instances/instance/default_ds/config/domain_number (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_domain_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_domain_number() directly.

    YANG Description: The IEEE Std 1588 domainNumber of the PTP Instance.
A domain consists of one or more PTP Instances
communicating with each other as defined by the
protocol. A domain shall define the scope of PTP message
communication, state, operations, data sets, and
timescale. Therefore, each domain represents a distinct
time.
Within a PTP Network, a domain is identified by two
data set members: domainNumber and sdoId.
The domainNumber is the primary mechanism for end users
and system integrators to isolate the operation of a
PTP Instance from PTP messages used in other domains.
The value of the domainNumber shall be configurable
to values permitted in IEEE Std 1588, unless the
allowed values are further restricted by the applicable
PTP Profile.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="domain-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """domain_number must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="domain-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)""",
        })

    self.__domain_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_domain_number(self):
    self.__domain_number = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="domain-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)


  def _get_slave_only(self):
    """
    Getter method for slave_only, mapped from YANG variable /ptp/instances/instance/default_ds/config/slave_only (boolean)

    YANG Description: The value of slave-only shall be true if the
PTP Instance is a slave-only PTP Instance
(false for non-slave-only).
The slave-only member can be true for Ordinary Clocks
only.
When slave-only is true, the PTP Instance implements
special behavior in the context of the state machines
that determine port-state.
    """
    return self.__slave_only
      
  def _set_slave_only(self, v, load=False):
    """
    Setter method for slave_only, mapped from YANG variable /ptp/instances/instance/default_ds/config/slave_only (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_slave_only is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_slave_only() directly.

    YANG Description: The value of slave-only shall be true if the
PTP Instance is a slave-only PTP Instance
(false for non-slave-only).
The slave-only member can be true for Ordinary Clocks
only.
When slave-only is true, the PTP Instance implements
special behavior in the context of the state machines
that determine port-state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="slave-only", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """slave_only must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="slave-only", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=True)""",
        })

    self.__slave_only = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_slave_only(self):
    self.__slave_only = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="slave-only", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=True)


  def _get_instance_type(self):
    """
    Getter method for instance_type, mapped from YANG variable /ptp/instances/instance/default_ds/config/instance_type (oc-ptp-types:instance-type)

    YANG Description: The type of PTP Instance.
This leaf is read-only unless support for write is
explicitly specified by the applicable PTP Profile or
product specification.
    """
    return self.__instance_type
      
  def _set_instance_type(self, v, load=False):
    """
    Setter method for instance_type, mapped from YANG variable /ptp/instances/instance/default_ds/config/instance_type (oc-ptp-types:instance-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_type() directly.

    YANG Description: The type of PTP Instance.
This leaf is read-only unless support for write is
explicitly specified by the applicable PTP Profile or
product specification.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'OC': {'value': 0}, 'BC': {'value': 1}, 'P2P_TC': {'value': 2}, 'E2E_TC': {'value': 3}},), is_leaf=True, yang_name="instance-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:instance-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_type must be of a type compatible with oc-ptp-types:instance-type""",
          'defined-type': "oc-ptp-types:instance-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'OC': {'value': 0}, 'BC': {'value': 1}, 'P2P_TC': {'value': 2}, 'E2E_TC': {'value': 3}},), is_leaf=True, yang_name="instance-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:instance-type', is_config=True)""",
        })

    self.__instance_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_type(self):
    self.__instance_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'OC': {'value': 0}, 'BC': {'value': 1}, 'P2P_TC': {'value': 2}, 'E2E_TC': {'value': 3}},), is_leaf=True, yang_name="instance-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:instance-type', is_config=True)


  def _get_sdo_id(self):
    """
    Getter method for sdo_id, mapped from YANG variable /ptp/instances/instance/default_ds/config/sdo_id (uint16)

    YANG Description: The IEEE Std 1588 sdoId of the PTP Instance.
A domain consists of one or more PTP Instances
communicating with each other as defined by the
protocol. A domain shall define the scope of PTP message
communication, state, operations, data sets, and
timescale. Therefore, each domain represents a distinct
time.
Within a PTP Network, a domain is identified by two
data set members: domainNumber and sdoId.
The sdoId of a domain is a 12-bit integer in the
closed range 0 to 4095.
The sdoId member is the primary mechanism for providing
isolation of PTP Instances operating a PTP Profile
specified by a Standards Development Organization (SDO),
from other PTP Instances operating a PTP Profile
specified by a different SDO.
    """
    return self.__sdo_id
      
  def _set_sdo_id(self, v, load=False):
    """
    Setter method for sdo_id, mapped from YANG variable /ptp/instances/instance/default_ds/config/sdo_id (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sdo_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sdo_id() directly.

    YANG Description: The IEEE Std 1588 sdoId of the PTP Instance.
A domain consists of one or more PTP Instances
communicating with each other as defined by the
protocol. A domain shall define the scope of PTP message
communication, state, operations, data sets, and
timescale. Therefore, each domain represents a distinct
time.
Within a PTP Network, a domain is identified by two
data set members: domainNumber and sdoId.
The sdoId of a domain is a 12-bit integer in the
closed range 0 to 4095.
The sdoId member is the primary mechanism for providing
isolation of PTP Instances operating a PTP Profile
specified by a Standards Development Organization (SDO),
from other PTP Instances operating a PTP Profile
specified by a different SDO.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..4095']}), is_leaf=True, yang_name="sdo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sdo_id must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..4095']}), is_leaf=True, yang_name="sdo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=True)""",
        })

    self.__sdo_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sdo_id(self):
    self.__sdo_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..4095']}), is_leaf=True, yang_name="sdo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=True)


  def _get_network_transport(self):
    """
    Getter method for network_transport, mapped from YANG variable /ptp/instances/instance/default_ds/config/network_transport (oc-ptp-types:network-transport-enumeration)

    YANG Description: The network transport used for communication
    """
    return self.__network_transport
      
  def _set_network_transport(self, v, load=False):
    """
    Setter method for network_transport, mapped from YANG variable /ptp/instances/instance/default_ds/config/network_transport (oc-ptp-types:network-transport-enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_network_transport is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_network_transport() directly.

    YANG Description: The network transport used for communication
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'L2': {'value': 1}, 'UDPV4': {'value': 2}, 'UDPV6': {'value': 3}},), is_leaf=True, yang_name="network-transport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:network-transport-enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """network_transport must be of a type compatible with oc-ptp-types:network-transport-enumeration""",
          'defined-type': "oc-ptp-types:network-transport-enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'L2': {'value': 1}, 'UDPV4': {'value': 2}, 'UDPV6': {'value': 3}},), is_leaf=True, yang_name="network-transport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:network-transport-enumeration', is_config=True)""",
        })

    self.__network_transport = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_network_transport(self):
    self.__network_transport = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'L2': {'value': 1}, 'UDPV4': {'value': 2}, 'UDPV6': {'value': 3}},), is_leaf=True, yang_name="network-transport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:network-transport-enumeration', is_config=True)


  def _get_unicast_multicast(self):
    """
    Getter method for unicast_multicast, mapped from YANG variable /ptp/instances/instance/default_ds/config/unicast_multicast (oc-ptp-types:unicast-multicast-enumeration)

    YANG Description: Whether the network transport uses unicast or
multicast communication
    """
    return self.__unicast_multicast
      
  def _set_unicast_multicast(self, v, load=False):
    """
    Setter method for unicast_multicast, mapped from YANG variable /ptp/instances/instance/default_ds/config/unicast_multicast (oc-ptp-types:unicast-multicast-enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unicast_multicast is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unicast_multicast() directly.

    YANG Description: Whether the network transport uses unicast or
multicast communication
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNICAST': {'value': 1}, 'MULTICAST': {'value': 2}},), is_leaf=True, yang_name="unicast-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:unicast-multicast-enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unicast_multicast must be of a type compatible with oc-ptp-types:unicast-multicast-enumeration""",
          'defined-type': "oc-ptp-types:unicast-multicast-enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNICAST': {'value': 1}, 'MULTICAST': {'value': 2}},), is_leaf=True, yang_name="unicast-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:unicast-multicast-enumeration', is_config=True)""",
        })

    self.__unicast_multicast = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unicast_multicast(self):
    self.__unicast_multicast = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNICAST': {'value': 1}, 'MULTICAST': {'value': 2}},), is_leaf=True, yang_name="unicast-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:unicast-multicast-enumeration', is_config=True)


  def _get_domain_profile(self):
    """
    Getter method for domain_profile, mapped from YANG variable /ptp/instances/instance/default_ds/config/domain_profile (oc-ptp-types:domain-profile-enumeration)

    YANG Description: The method to be used when comparing data sets during
the Best Master Clock Algorithm.
    """
    return self.__domain_profile
      
  def _set_domain_profile(self, v, load=False):
    """
    Setter method for domain_profile, mapped from YANG variable /ptp/instances/instance/default_ds/config/domain_profile (oc-ptp-types:domain-profile-enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_domain_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_domain_profile() directly.

    YANG Description: The method to be used when comparing data sets during
the Best Master Clock Algorithm.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IEEE1588': {'value': 1}, 'G8275.1': {'value': 2}, 'G8275.2': {'value': 3}},), is_leaf=True, yang_name="domain-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:domain-profile-enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """domain_profile must be of a type compatible with oc-ptp-types:domain-profile-enumeration""",
          'defined-type': "oc-ptp-types:domain-profile-enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IEEE1588': {'value': 1}, 'G8275.1': {'value': 2}, 'G8275.2': {'value': 3}},), is_leaf=True, yang_name="domain-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:domain-profile-enumeration', is_config=True)""",
        })

    self.__domain_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_domain_profile(self):
    self.__domain_profile = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IEEE1588': {'value': 1}, 'G8275.1': {'value': 2}, 'G8275.2': {'value': 3}},), is_leaf=True, yang_name="domain-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:domain-profile-enumeration', is_config=True)

  priority1 = __builtin__.property(_get_priority1, _set_priority1)
  priority2 = __builtin__.property(_get_priority2, _set_priority2)
  domain_number = __builtin__.property(_get_domain_number, _set_domain_number)
  slave_only = __builtin__.property(_get_slave_only, _set_slave_only)
  instance_type = __builtin__.property(_get_instance_type, _set_instance_type)
  sdo_id = __builtin__.property(_get_sdo_id, _set_sdo_id)
  network_transport = __builtin__.property(_get_network_transport, _set_network_transport)
  unicast_multicast = __builtin__.property(_get_unicast_multicast, _set_unicast_multicast)
  domain_profile = __builtin__.property(_get_domain_profile, _set_domain_profile)


  _pyangbind_elements = OrderedDict([('priority1', priority1), ('priority2', priority2), ('domain_number', domain_number), ('slave_only', slave_only), ('instance_type', instance_type), ('sdo_id', sdo_id), ('network_transport', network_transport), ('unicast_multicast', unicast_multicast), ('domain_profile', domain_profile), ])


