# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/instances/instance/current-ds/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state current data set of PTP instance.
  """
  __slots__ = ('_path_helper', '_extmethods', '__steps_removed','__offset_from_master','__mean_path_delay',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__steps_removed = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="steps-removed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)
    self.__offset_from_master = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="offset-from-master", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)
    self.__mean_path_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="mean-path-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'instances', 'instance', 'current-ds', 'state']

  def _get_steps_removed(self):
    """
    Getter method for steps_removed, mapped from YANG variable /ptp/instances/instance/current_ds/state/steps_removed (uint16)

    YANG Description: The number of PTP Communication Paths traversed
between this PTP Instance and the Grandmaster
PTP Instance.
    """
    return self.__steps_removed
      
  def _set_steps_removed(self, v, load=False):
    """
    Setter method for steps_removed, mapped from YANG variable /ptp/instances/instance/current_ds/state/steps_removed (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_steps_removed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_steps_removed() directly.

    YANG Description: The number of PTP Communication Paths traversed
between this PTP Instance and the Grandmaster
PTP Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="steps-removed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """steps_removed must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="steps-removed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)""",
        })

    self.__steps_removed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_steps_removed(self):
    self.__steps_removed = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="steps-removed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)


  def _get_offset_from_master(self):
    """
    Getter method for offset_from_master, mapped from YANG variable /ptp/instances/instance/current_ds/state/offset_from_master (oc-ptp-types:time-interval)

    YANG Description: The current value of the time difference between
a Master PTP Instance and a Slave PTP Instance as
computed by the Slave PTP Instance.
NOTE - When a PTP Profile requires a Boundary
Clock to transfer offset information internally
from Slave PTP Port to Master PTP Port(s), this value
effectively returns the offset from the Grandmaster
PTP Instance.
    """
    return self.__offset_from_master
      
  def _set_offset_from_master(self, v, load=False):
    """
    Setter method for offset_from_master, mapped from YANG variable /ptp/instances/instance/current_ds/state/offset_from_master (oc-ptp-types:time-interval)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_offset_from_master is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_offset_from_master() directly.

    YANG Description: The current value of the time difference between
a Master PTP Instance and a Slave PTP Instance as
computed by the Slave PTP Instance.
NOTE - When a PTP Profile requires a Boundary
Clock to transfer offset information internally
from Slave PTP Port to Master PTP Port(s), this value
effectively returns the offset from the Grandmaster
PTP Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="offset-from-master", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """offset_from_master must be of a type compatible with oc-ptp-types:time-interval""",
          'defined-type': "oc-ptp-types:time-interval",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="offset-from-master", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)""",
        })

    self.__offset_from_master = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_offset_from_master(self):
    self.__offset_from_master = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="offset-from-master", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)


  def _get_mean_path_delay(self):
    """
    Getter method for mean_path_delay, mapped from YANG variable /ptp/instances/instance/current_ds/state/mean_path_delay (oc-ptp-types:time-interval)

    YANG Description: In IEEE Std 1588-2008, currentDS.meanDelay was called
currentDS.meanPathDelay. While the specification of
this member is retained in the current standard, the
member is renamed to currentDS.meanDelay. This change
is consistent with other changes that ensure clarity
and consistency of naming, where
- 'path' is associated with the
 request-response mechanism
- 'link' is associated with the
 peer-to-peer delay mechanism
    """
    return self.__mean_path_delay
      
  def _set_mean_path_delay(self, v, load=False):
    """
    Setter method for mean_path_delay, mapped from YANG variable /ptp/instances/instance/current_ds/state/mean_path_delay (oc-ptp-types:time-interval)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mean_path_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mean_path_delay() directly.

    YANG Description: In IEEE Std 1588-2008, currentDS.meanDelay was called
currentDS.meanPathDelay. While the specification of
this member is retained in the current standard, the
member is renamed to currentDS.meanDelay. This change
is consistent with other changes that ensure clarity
and consistency of naming, where
- 'path' is associated with the
 request-response mechanism
- 'link' is associated with the
 peer-to-peer delay mechanism
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="mean-path-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mean_path_delay must be of a type compatible with oc-ptp-types:time-interval""",
          'defined-type': "oc-ptp-types:time-interval",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="mean-path-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)""",
        })

    self.__mean_path_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mean_path_delay(self):
    self.__mean_path_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="mean-path-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)

  steps_removed = __builtin__.property(_get_steps_removed)
  offset_from_master = __builtin__.property(_get_offset_from_master)
  mean_path_delay = __builtin__.property(_get_mean_path_delay)


  _pyangbind_elements = OrderedDict([('steps_removed', steps_removed), ('offset_from_master', offset_from_master), ('mean_path_delay', mean_path_delay), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/instances/instance/current-ds/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state current data set of PTP instance.
  """
  __slots__ = ('_path_helper', '_extmethods', '__steps_removed','__offset_from_master','__mean_path_delay',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__steps_removed = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="steps-removed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)
    self.__offset_from_master = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="offset-from-master", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)
    self.__mean_path_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="mean-path-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'instances', 'instance', 'current-ds', 'state']

  def _get_steps_removed(self):
    """
    Getter method for steps_removed, mapped from YANG variable /ptp/instances/instance/current_ds/state/steps_removed (uint16)

    YANG Description: The number of PTP Communication Paths traversed
between this PTP Instance and the Grandmaster
PTP Instance.
    """
    return self.__steps_removed
      
  def _set_steps_removed(self, v, load=False):
    """
    Setter method for steps_removed, mapped from YANG variable /ptp/instances/instance/current_ds/state/steps_removed (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_steps_removed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_steps_removed() directly.

    YANG Description: The number of PTP Communication Paths traversed
between this PTP Instance and the Grandmaster
PTP Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="steps-removed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """steps_removed must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="steps-removed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)""",
        })

    self.__steps_removed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_steps_removed(self):
    self.__steps_removed = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="steps-removed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)


  def _get_offset_from_master(self):
    """
    Getter method for offset_from_master, mapped from YANG variable /ptp/instances/instance/current_ds/state/offset_from_master (oc-ptp-types:time-interval)

    YANG Description: The current value of the time difference between
a Master PTP Instance and a Slave PTP Instance as
computed by the Slave PTP Instance.
NOTE - When a PTP Profile requires a Boundary
Clock to transfer offset information internally
from Slave PTP Port to Master PTP Port(s), this value
effectively returns the offset from the Grandmaster
PTP Instance.
    """
    return self.__offset_from_master
      
  def _set_offset_from_master(self, v, load=False):
    """
    Setter method for offset_from_master, mapped from YANG variable /ptp/instances/instance/current_ds/state/offset_from_master (oc-ptp-types:time-interval)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_offset_from_master is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_offset_from_master() directly.

    YANG Description: The current value of the time difference between
a Master PTP Instance and a Slave PTP Instance as
computed by the Slave PTP Instance.
NOTE - When a PTP Profile requires a Boundary
Clock to transfer offset information internally
from Slave PTP Port to Master PTP Port(s), this value
effectively returns the offset from the Grandmaster
PTP Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="offset-from-master", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """offset_from_master must be of a type compatible with oc-ptp-types:time-interval""",
          'defined-type': "oc-ptp-types:time-interval",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="offset-from-master", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)""",
        })

    self.__offset_from_master = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_offset_from_master(self):
    self.__offset_from_master = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="offset-from-master", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)


  def _get_mean_path_delay(self):
    """
    Getter method for mean_path_delay, mapped from YANG variable /ptp/instances/instance/current_ds/state/mean_path_delay (oc-ptp-types:time-interval)

    YANG Description: In IEEE Std 1588-2008, currentDS.meanDelay was called
currentDS.meanPathDelay. While the specification of
this member is retained in the current standard, the
member is renamed to currentDS.meanDelay. This change
is consistent with other changes that ensure clarity
and consistency of naming, where
- 'path' is associated with the
 request-response mechanism
- 'link' is associated with the
 peer-to-peer delay mechanism
    """
    return self.__mean_path_delay
      
  def _set_mean_path_delay(self, v, load=False):
    """
    Setter method for mean_path_delay, mapped from YANG variable /ptp/instances/instance/current_ds/state/mean_path_delay (oc-ptp-types:time-interval)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mean_path_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mean_path_delay() directly.

    YANG Description: In IEEE Std 1588-2008, currentDS.meanDelay was called
currentDS.meanPathDelay. While the specification of
this member is retained in the current standard, the
member is renamed to currentDS.meanDelay. This change
is consistent with other changes that ensure clarity
and consistency of naming, where
- 'path' is associated with the
 request-response mechanism
- 'link' is associated with the
 peer-to-peer delay mechanism
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="mean-path-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mean_path_delay must be of a type compatible with oc-ptp-types:time-interval""",
          'defined-type': "oc-ptp-types:time-interval",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="mean-path-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)""",
        })

    self.__mean_path_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mean_path_delay(self):
    self.__mean_path_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="mean-path-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)

  steps_removed = __builtin__.property(_get_steps_removed)
  offset_from_master = __builtin__.property(_get_offset_from_master)
  mean_path_delay = __builtin__.property(_get_mean_path_delay)


  _pyangbind_elements = OrderedDict([('steps_removed', steps_removed), ('offset_from_master', offset_from_master), ('mean_path_delay', mean_path_delay), ])


