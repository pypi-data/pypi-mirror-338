# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class parent_port_identity(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/instances/instance/parent-ds/state/parent-port-identity. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The IEEE Std 1588 portIdentity of the PTP Port on the
Master PTP Instance that issues the Sync messages
used in synchronizing this PTP Instance.
  """
  __slots__ = ('_path_helper', '_extmethods', '__clock_identity','__port_number',)

  _yang_name = 'parent-port-identity'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__clock_identity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9A-F]{2}(-[0-9A-F]{2}){7}'}), is_leaf=True, yang_name="clock-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:clock-identity', is_config=False)
    self.__port_number = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'instances', 'instance', 'parent-ds', 'state', 'parent-port-identity']

  def _get_clock_identity(self):
    """
    Getter method for clock_identity, mapped from YANG variable /ptp/instances/instance/parent_ds/state/parent_port_identity/clock_identity (oc-ptp-types:clock-identity)

    YANG Description: IEEE Std 1588 clockIdentity.
    """
    return self.__clock_identity
      
  def _set_clock_identity(self, v, load=False):
    """
    Setter method for clock_identity, mapped from YANG variable /ptp/instances/instance/parent_ds/state/parent_port_identity/clock_identity (oc-ptp-types:clock-identity)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clock_identity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clock_identity() directly.

    YANG Description: IEEE Std 1588 clockIdentity.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9A-F]{2}(-[0-9A-F]{2}){7}'}), is_leaf=True, yang_name="clock-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:clock-identity', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clock_identity must be of a type compatible with oc-ptp-types:clock-identity""",
          'defined-type': "oc-ptp-types:clock-identity",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9A-F]{2}(-[0-9A-F]{2}){7}'}), is_leaf=True, yang_name="clock-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:clock-identity', is_config=False)""",
        })

    self.__clock_identity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clock_identity(self):
    self.__clock_identity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9A-F]{2}(-[0-9A-F]{2}){7}'}), is_leaf=True, yang_name="clock-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:clock-identity', is_config=False)


  def _get_port_number(self):
    """
    Getter method for port_number, mapped from YANG variable /ptp/instances/instance/parent_ds/state/parent_port_identity/port_number (uint16)

    YANG Description: IEEE Std 1588 portNumber.
If portNumber is unavailable, the value 0 can
be used, or this leaf can be omitted from the
operational datastore.
    """
    return self.__port_number
      
  def _set_port_number(self, v, load=False):
    """
    Setter method for port_number, mapped from YANG variable /ptp/instances/instance/parent_ds/state/parent_port_identity/port_number (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_number() directly.

    YANG Description: IEEE Std 1588 portNumber.
If portNumber is unavailable, the value 0 can
be used, or this leaf can be omitted from the
operational datastore.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_number must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)""",
        })

    self.__port_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_number(self):
    self.__port_number = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)

  clock_identity = __builtin__.property(_get_clock_identity)
  port_number = __builtin__.property(_get_port_number)


  _pyangbind_elements = OrderedDict([('clock_identity', clock_identity), ('port_number', port_number), ])


class parent_port_identity(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/instances/instance/parent-ds/state/parent-port-identity. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The IEEE Std 1588 portIdentity of the PTP Port on the
Master PTP Instance that issues the Sync messages
used in synchronizing this PTP Instance.
  """
  __slots__ = ('_path_helper', '_extmethods', '__clock_identity','__port_number',)

  _yang_name = 'parent-port-identity'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__clock_identity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9A-F]{2}(-[0-9A-F]{2}){7}'}), is_leaf=True, yang_name="clock-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:clock-identity', is_config=False)
    self.__port_number = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'instances', 'instance', 'parent-ds', 'state', 'parent-port-identity']

  def _get_clock_identity(self):
    """
    Getter method for clock_identity, mapped from YANG variable /ptp/instances/instance/parent_ds/state/parent_port_identity/clock_identity (oc-ptp-types:clock-identity)

    YANG Description: IEEE Std 1588 clockIdentity.
    """
    return self.__clock_identity
      
  def _set_clock_identity(self, v, load=False):
    """
    Setter method for clock_identity, mapped from YANG variable /ptp/instances/instance/parent_ds/state/parent_port_identity/clock_identity (oc-ptp-types:clock-identity)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clock_identity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clock_identity() directly.

    YANG Description: IEEE Std 1588 clockIdentity.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9A-F]{2}(-[0-9A-F]{2}){7}'}), is_leaf=True, yang_name="clock-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:clock-identity', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clock_identity must be of a type compatible with oc-ptp-types:clock-identity""",
          'defined-type': "oc-ptp-types:clock-identity",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9A-F]{2}(-[0-9A-F]{2}){7}'}), is_leaf=True, yang_name="clock-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:clock-identity', is_config=False)""",
        })

    self.__clock_identity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clock_identity(self):
    self.__clock_identity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9A-F]{2}(-[0-9A-F]{2}){7}'}), is_leaf=True, yang_name="clock-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:clock-identity', is_config=False)


  def _get_port_number(self):
    """
    Getter method for port_number, mapped from YANG variable /ptp/instances/instance/parent_ds/state/parent_port_identity/port_number (uint16)

    YANG Description: IEEE Std 1588 portNumber.
If portNumber is unavailable, the value 0 can
be used, or this leaf can be omitted from the
operational datastore.
    """
    return self.__port_number
      
  def _set_port_number(self, v, load=False):
    """
    Setter method for port_number, mapped from YANG variable /ptp/instances/instance/parent_ds/state/parent_port_identity/port_number (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_number() directly.

    YANG Description: IEEE Std 1588 portNumber.
If portNumber is unavailable, the value 0 can
be used, or this leaf can be omitted from the
operational datastore.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_number must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)""",
        })

    self.__port_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_number(self):
    self.__port_number = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)

  clock_identity = __builtin__.property(_get_clock_identity)
  port_number = __builtin__.property(_get_port_number)


  _pyangbind_elements = OrderedDict([('clock_identity', clock_identity), ('port_number', port_number), ])


