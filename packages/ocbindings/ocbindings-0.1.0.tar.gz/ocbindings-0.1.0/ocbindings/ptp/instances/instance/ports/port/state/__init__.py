# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/instances/instance/ports/port/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: operational state data of port data set of the clock
  """
  __slots__ = ('_path_helper', '_extmethods', '__port_index','__underlying_interface',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__port_index = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)
    self.__underlying_interface = YANGDynClass(base=str, is_leaf=True, yang_name="underlying-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='if:interface-ref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'instances', 'instance', 'ports', 'port', 'state']

  def _get_port_index(self):
    """
    Getter method for port_index, mapped from YANG variable /ptp/instances/instance/ports/port/state/port_index (uint16)

    YANG Description: The port list is indexed using a number that is
unique per PTP Port within the PTP Instance,
applicable to the management context only
(i.e., not used in PTP messages).
    """
    return self.__port_index
      
  def _set_port_index(self, v, load=False):
    """
    Setter method for port_index, mapped from YANG variable /ptp/instances/instance/ports/port/state/port_index (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_index() directly.

    YANG Description: The port list is indexed using a number that is
unique per PTP Port within the PTP Instance,
applicable to the management context only
(i.e., not used in PTP messages).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_index must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)""",
        })

    self.__port_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_index(self):
    self.__port_index = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)


  def _get_underlying_interface(self):
    """
    Getter method for underlying_interface, mapped from YANG variable /ptp/instances/instance/ports/port/state/underlying_interface (if:interface-ref)

    YANG Description: Reference to the configured underlying IETF YANG
interface that is used by this PTP Port for
transport of PTP messages. Among other data,
physical identifiers for the interface
(e.g., MAC address) can be obtained using this
reference.
    """
    return self.__underlying_interface
      
  def _set_underlying_interface(self, v, load=False):
    """
    Setter method for underlying_interface, mapped from YANG variable /ptp/instances/instance/ports/port/state/underlying_interface (if:interface-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_underlying_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_underlying_interface() directly.

    YANG Description: Reference to the configured underlying IETF YANG
interface that is used by this PTP Port for
transport of PTP messages. Among other data,
physical identifiers for the interface
(e.g., MAC address) can be obtained using this
reference.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="underlying-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='if:interface-ref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """underlying_interface must be of a type compatible with if:interface-ref""",
          'defined-type': "if:interface-ref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="underlying-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='if:interface-ref', is_config=False)""",
        })

    self.__underlying_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_underlying_interface(self):
    self.__underlying_interface = YANGDynClass(base=str, is_leaf=True, yang_name="underlying-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='if:interface-ref', is_config=False)

  port_index = __builtin__.property(_get_port_index)
  underlying_interface = __builtin__.property(_get_underlying_interface)


  _pyangbind_elements = OrderedDict([('port_index', port_index), ('underlying_interface', underlying_interface), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/instances/instance/ports/port/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: operational state data of port data set of the clock
  """
  __slots__ = ('_path_helper', '_extmethods', '__port_index','__underlying_interface',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__port_index = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)
    self.__underlying_interface = YANGDynClass(base=str, is_leaf=True, yang_name="underlying-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='if:interface-ref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'instances', 'instance', 'ports', 'port', 'state']

  def _get_port_index(self):
    """
    Getter method for port_index, mapped from YANG variable /ptp/instances/instance/ports/port/state/port_index (uint16)

    YANG Description: The port list is indexed using a number that is
unique per PTP Port within the PTP Instance,
applicable to the management context only
(i.e., not used in PTP messages).
    """
    return self.__port_index
      
  def _set_port_index(self, v, load=False):
    """
    Setter method for port_index, mapped from YANG variable /ptp/instances/instance/ports/port/state/port_index (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_index() directly.

    YANG Description: The port list is indexed using a number that is
unique per PTP Port within the PTP Instance,
applicable to the management context only
(i.e., not used in PTP messages).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_index must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)""",
        })

    self.__port_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_index(self):
    self.__port_index = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)


  def _get_underlying_interface(self):
    """
    Getter method for underlying_interface, mapped from YANG variable /ptp/instances/instance/ports/port/state/underlying_interface (if:interface-ref)

    YANG Description: Reference to the configured underlying IETF YANG
interface that is used by this PTP Port for
transport of PTP messages. Among other data,
physical identifiers for the interface
(e.g., MAC address) can be obtained using this
reference.
    """
    return self.__underlying_interface
      
  def _set_underlying_interface(self, v, load=False):
    """
    Setter method for underlying_interface, mapped from YANG variable /ptp/instances/instance/ports/port/state/underlying_interface (if:interface-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_underlying_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_underlying_interface() directly.

    YANG Description: Reference to the configured underlying IETF YANG
interface that is used by this PTP Port for
transport of PTP messages. Among other data,
physical identifiers for the interface
(e.g., MAC address) can be obtained using this
reference.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="underlying-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='if:interface-ref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """underlying_interface must be of a type compatible with if:interface-ref""",
          'defined-type': "if:interface-ref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="underlying-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='if:interface-ref', is_config=False)""",
        })

    self.__underlying_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_underlying_interface(self):
    self.__underlying_interface = YANGDynClass(base=str, is_leaf=True, yang_name="underlying-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='if:interface-ref', is_config=False)

  port_index = __builtin__.property(_get_port_index)
  underlying_interface = __builtin__.property(_get_underlying_interface)


  _pyangbind_elements = OrderedDict([('port_index', port_index), ('underlying_interface', underlying_interface), ])


