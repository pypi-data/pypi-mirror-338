# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import parent_port_identity
from . import grandmaster_clock_quality
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/instances/instance/parent-ds/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data of parent data set
  """
  __slots__ = ('_path_helper', '_extmethods', '__parent_port_identity','__parent_stats','__observed_parent_offset_scaled_log_variance','__observed_parent_clock_phase_change_rate','__grandmaster_identity','__grandmaster_clock_quality','__grandmaster_priority1','__grandmaster_priority2',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__parent_port_identity = YANGDynClass(base=parent_port_identity.parent_port_identity, is_container='container', yang_name="parent-port-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)
    self.__parent_stats = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="parent-stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=False)
    self.__observed_parent_offset_scaled_log_variance = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="observed-parent-offset-scaled-log-variance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)
    self.__observed_parent_clock_phase_change_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="observed-parent-clock-phase-change-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int32', is_config=False)
    self.__grandmaster_identity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9A-F]{2}(-[0-9A-F]{2}){7}'}), is_leaf=True, yang_name="grandmaster-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:clock-identity', is_config=False)
    self.__grandmaster_clock_quality = YANGDynClass(base=grandmaster_clock_quality.grandmaster_clock_quality, is_container='container', yang_name="grandmaster-clock-quality", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)
    self.__grandmaster_priority1 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="grandmaster-priority1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)
    self.__grandmaster_priority2 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="grandmaster-priority2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'instances', 'instance', 'parent-ds', 'state']

  def _get_parent_port_identity(self):
    """
    Getter method for parent_port_identity, mapped from YANG variable /ptp/instances/instance/parent_ds/state/parent_port_identity (container)

    YANG Description: The IEEE Std 1588 portIdentity of the PTP Port on the
Master PTP Instance that issues the Sync messages
used in synchronizing this PTP Instance.
    """
    return self.__parent_port_identity
      
  def _set_parent_port_identity(self, v, load=False):
    """
    Setter method for parent_port_identity, mapped from YANG variable /ptp/instances/instance/parent_ds/state/parent_port_identity (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_parent_port_identity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_parent_port_identity() directly.

    YANG Description: The IEEE Std 1588 portIdentity of the PTP Port on the
Master PTP Instance that issues the Sync messages
used in synchronizing this PTP Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=parent_port_identity.parent_port_identity, is_container='container', yang_name="parent-port-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """parent_port_identity must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=parent_port_identity.parent_port_identity, is_container='container', yang_name="parent-port-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)""",
        })

    self.__parent_port_identity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_parent_port_identity(self):
    self.__parent_port_identity = YANGDynClass(base=parent_port_identity.parent_port_identity, is_container='container', yang_name="parent-port-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)


  def _get_parent_stats(self):
    """
    Getter method for parent_stats, mapped from YANG variable /ptp/instances/instance/parent_ds/state/parent_stats (boolean)

    YANG Description: When set to true, the values of
parent-ds/observed-parent-offset-scaled-log-variance
and
parent-ds/observed-parent-clock-phase-change-rate
have been measured and are valid.
    """
    return self.__parent_stats
      
  def _set_parent_stats(self, v, load=False):
    """
    Setter method for parent_stats, mapped from YANG variable /ptp/instances/instance/parent_ds/state/parent_stats (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_parent_stats is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_parent_stats() directly.

    YANG Description: When set to true, the values of
parent-ds/observed-parent-offset-scaled-log-variance
and
parent-ds/observed-parent-clock-phase-change-rate
have been measured and are valid.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="parent-stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """parent_stats must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="parent-stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=False)""",
        })

    self.__parent_stats = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_parent_stats(self):
    self.__parent_stats = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="parent-stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=False)


  def _get_observed_parent_offset_scaled_log_variance(self):
    """
    Getter method for observed_parent_offset_scaled_log_variance, mapped from YANG variable /ptp/instances/instance/parent_ds/state/observed_parent_offset_scaled_log_variance (uint16)

    YANG Description: Estimate of the variance of the phase offset of the
Local PTP Clock of the Parent PTP Instance as measured
with respect to the Local PTP Clock in the Slave PTP
Instance. This measurement is optional, but if not made,
the value of parent-ds/parent-stats shall be false.
    """
    return self.__observed_parent_offset_scaled_log_variance
      
  def _set_observed_parent_offset_scaled_log_variance(self, v, load=False):
    """
    Setter method for observed_parent_offset_scaled_log_variance, mapped from YANG variable /ptp/instances/instance/parent_ds/state/observed_parent_offset_scaled_log_variance (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_observed_parent_offset_scaled_log_variance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_observed_parent_offset_scaled_log_variance() directly.

    YANG Description: Estimate of the variance of the phase offset of the
Local PTP Clock of the Parent PTP Instance as measured
with respect to the Local PTP Clock in the Slave PTP
Instance. This measurement is optional, but if not made,
the value of parent-ds/parent-stats shall be false.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="observed-parent-offset-scaled-log-variance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """observed_parent_offset_scaled_log_variance must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="observed-parent-offset-scaled-log-variance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)""",
        })

    self.__observed_parent_offset_scaled_log_variance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_observed_parent_offset_scaled_log_variance(self):
    self.__observed_parent_offset_scaled_log_variance = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="observed-parent-offset-scaled-log-variance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)


  def _get_observed_parent_clock_phase_change_rate(self):
    """
    Getter method for observed_parent_clock_phase_change_rate, mapped from YANG variable /ptp/instances/instance/parent_ds/state/observed_parent_clock_phase_change_rate (int32)

    YANG Description: Estimate of the phase change rate of the
Local PTP Clock of the Parent PTP Instance as measured
by the Slave PTP Instance using its Local PTP Clock.
If the estimate exceeds the capacity of its data type,
this value shall be set to 7FFF FFFF (base 16) or
8000 0000 (base 16), as appropriate. A positive sign
indicates that the phase change rate in the
Parent PTP Instance is greater than that in the
Slave PTP Instance. The measurement of this value is
optional, but if not measured, the value of
parent-ds/parent-stats shall be false.
    """
    return self.__observed_parent_clock_phase_change_rate
      
  def _set_observed_parent_clock_phase_change_rate(self, v, load=False):
    """
    Setter method for observed_parent_clock_phase_change_rate, mapped from YANG variable /ptp/instances/instance/parent_ds/state/observed_parent_clock_phase_change_rate (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_observed_parent_clock_phase_change_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_observed_parent_clock_phase_change_rate() directly.

    YANG Description: Estimate of the phase change rate of the
Local PTP Clock of the Parent PTP Instance as measured
by the Slave PTP Instance using its Local PTP Clock.
If the estimate exceeds the capacity of its data type,
this value shall be set to 7FFF FFFF (base 16) or
8000 0000 (base 16), as appropriate. A positive sign
indicates that the phase change rate in the
Parent PTP Instance is greater than that in the
Slave PTP Instance. The measurement of this value is
optional, but if not measured, the value of
parent-ds/parent-stats shall be false.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="observed-parent-clock-phase-change-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """observed_parent_clock_phase_change_rate must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="observed-parent-clock-phase-change-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int32', is_config=False)""",
        })

    self.__observed_parent_clock_phase_change_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_observed_parent_clock_phase_change_rate(self):
    self.__observed_parent_clock_phase_change_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="observed-parent-clock-phase-change-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int32', is_config=False)


  def _get_grandmaster_identity(self):
    """
    Getter method for grandmaster_identity, mapped from YANG variable /ptp/instances/instance/parent_ds/state/grandmaster_identity (oc-ptp-types:clock-identity)

    YANG Description: The IEEE Std 1588 clockIdentity of the Grandmaster PTP
Instance.
    """
    return self.__grandmaster_identity
      
  def _set_grandmaster_identity(self, v, load=False):
    """
    Setter method for grandmaster_identity, mapped from YANG variable /ptp/instances/instance/parent_ds/state/grandmaster_identity (oc-ptp-types:clock-identity)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_grandmaster_identity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_grandmaster_identity() directly.

    YANG Description: The IEEE Std 1588 clockIdentity of the Grandmaster PTP
Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9A-F]{2}(-[0-9A-F]{2}){7}'}), is_leaf=True, yang_name="grandmaster-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:clock-identity', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """grandmaster_identity must be of a type compatible with oc-ptp-types:clock-identity""",
          'defined-type': "oc-ptp-types:clock-identity",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9A-F]{2}(-[0-9A-F]{2}){7}'}), is_leaf=True, yang_name="grandmaster-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:clock-identity', is_config=False)""",
        })

    self.__grandmaster_identity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_grandmaster_identity(self):
    self.__grandmaster_identity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9A-F]{2}(-[0-9A-F]{2}){7}'}), is_leaf=True, yang_name="grandmaster-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:clock-identity', is_config=False)


  def _get_grandmaster_clock_quality(self):
    """
    Getter method for grandmaster_clock_quality, mapped from YANG variable /ptp/instances/instance/parent_ds/state/grandmaster_clock_quality (container)

    YANG Description: The IEEE Std 1588 clockQuality of the Grandmaster PTP
Instance.
    """
    return self.__grandmaster_clock_quality
      
  def _set_grandmaster_clock_quality(self, v, load=False):
    """
    Setter method for grandmaster_clock_quality, mapped from YANG variable /ptp/instances/instance/parent_ds/state/grandmaster_clock_quality (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_grandmaster_clock_quality is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_grandmaster_clock_quality() directly.

    YANG Description: The IEEE Std 1588 clockQuality of the Grandmaster PTP
Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=grandmaster_clock_quality.grandmaster_clock_quality, is_container='container', yang_name="grandmaster-clock-quality", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """grandmaster_clock_quality must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=grandmaster_clock_quality.grandmaster_clock_quality, is_container='container', yang_name="grandmaster-clock-quality", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)""",
        })

    self.__grandmaster_clock_quality = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_grandmaster_clock_quality(self):
    self.__grandmaster_clock_quality = YANGDynClass(base=grandmaster_clock_quality.grandmaster_clock_quality, is_container='container', yang_name="grandmaster-clock-quality", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)


  def _get_grandmaster_priority1(self):
    """
    Getter method for grandmaster_priority1, mapped from YANG variable /ptp/instances/instance/parent_ds/state/grandmaster_priority1 (uint8)

    YANG Description: The IEEE Std 1588 priority1 of the Grandmaster PTP
Instance.
    """
    return self.__grandmaster_priority1
      
  def _set_grandmaster_priority1(self, v, load=False):
    """
    Setter method for grandmaster_priority1, mapped from YANG variable /ptp/instances/instance/parent_ds/state/grandmaster_priority1 (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_grandmaster_priority1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_grandmaster_priority1() directly.

    YANG Description: The IEEE Std 1588 priority1 of the Grandmaster PTP
Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="grandmaster-priority1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """grandmaster_priority1 must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="grandmaster-priority1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)""",
        })

    self.__grandmaster_priority1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_grandmaster_priority1(self):
    self.__grandmaster_priority1 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="grandmaster-priority1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)


  def _get_grandmaster_priority2(self):
    """
    Getter method for grandmaster_priority2, mapped from YANG variable /ptp/instances/instance/parent_ds/state/grandmaster_priority2 (uint8)

    YANG Description: The IEEE Std 1588 priority2 of the Grandmaster PTP
Instance.
    """
    return self.__grandmaster_priority2
      
  def _set_grandmaster_priority2(self, v, load=False):
    """
    Setter method for grandmaster_priority2, mapped from YANG variable /ptp/instances/instance/parent_ds/state/grandmaster_priority2 (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_grandmaster_priority2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_grandmaster_priority2() directly.

    YANG Description: The IEEE Std 1588 priority2 of the Grandmaster PTP
Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="grandmaster-priority2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """grandmaster_priority2 must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="grandmaster-priority2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)""",
        })

    self.__grandmaster_priority2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_grandmaster_priority2(self):
    self.__grandmaster_priority2 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="grandmaster-priority2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)

  parent_port_identity = __builtin__.property(_get_parent_port_identity)
  parent_stats = __builtin__.property(_get_parent_stats)
  observed_parent_offset_scaled_log_variance = __builtin__.property(_get_observed_parent_offset_scaled_log_variance)
  observed_parent_clock_phase_change_rate = __builtin__.property(_get_observed_parent_clock_phase_change_rate)
  grandmaster_identity = __builtin__.property(_get_grandmaster_identity)
  grandmaster_clock_quality = __builtin__.property(_get_grandmaster_clock_quality)
  grandmaster_priority1 = __builtin__.property(_get_grandmaster_priority1)
  grandmaster_priority2 = __builtin__.property(_get_grandmaster_priority2)


  _pyangbind_elements = OrderedDict([('parent_port_identity', parent_port_identity), ('parent_stats', parent_stats), ('observed_parent_offset_scaled_log_variance', observed_parent_offset_scaled_log_variance), ('observed_parent_clock_phase_change_rate', observed_parent_clock_phase_change_rate), ('grandmaster_identity', grandmaster_identity), ('grandmaster_clock_quality', grandmaster_clock_quality), ('grandmaster_priority1', grandmaster_priority1), ('grandmaster_priority2', grandmaster_priority2), ])


from . import parent_port_identity
from . import grandmaster_clock_quality
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/instances/instance/parent-ds/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data of parent data set
  """
  __slots__ = ('_path_helper', '_extmethods', '__parent_port_identity','__parent_stats','__observed_parent_offset_scaled_log_variance','__observed_parent_clock_phase_change_rate','__grandmaster_identity','__grandmaster_clock_quality','__grandmaster_priority1','__grandmaster_priority2',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__parent_port_identity = YANGDynClass(base=parent_port_identity.parent_port_identity, is_container='container', yang_name="parent-port-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)
    self.__parent_stats = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="parent-stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=False)
    self.__observed_parent_offset_scaled_log_variance = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="observed-parent-offset-scaled-log-variance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)
    self.__observed_parent_clock_phase_change_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="observed-parent-clock-phase-change-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int32', is_config=False)
    self.__grandmaster_identity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9A-F]{2}(-[0-9A-F]{2}){7}'}), is_leaf=True, yang_name="grandmaster-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:clock-identity', is_config=False)
    self.__grandmaster_clock_quality = YANGDynClass(base=grandmaster_clock_quality.grandmaster_clock_quality, is_container='container', yang_name="grandmaster-clock-quality", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)
    self.__grandmaster_priority1 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="grandmaster-priority1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)
    self.__grandmaster_priority2 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="grandmaster-priority2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'instances', 'instance', 'parent-ds', 'state']

  def _get_parent_port_identity(self):
    """
    Getter method for parent_port_identity, mapped from YANG variable /ptp/instances/instance/parent_ds/state/parent_port_identity (container)

    YANG Description: The IEEE Std 1588 portIdentity of the PTP Port on the
Master PTP Instance that issues the Sync messages
used in synchronizing this PTP Instance.
    """
    return self.__parent_port_identity
      
  def _set_parent_port_identity(self, v, load=False):
    """
    Setter method for parent_port_identity, mapped from YANG variable /ptp/instances/instance/parent_ds/state/parent_port_identity (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_parent_port_identity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_parent_port_identity() directly.

    YANG Description: The IEEE Std 1588 portIdentity of the PTP Port on the
Master PTP Instance that issues the Sync messages
used in synchronizing this PTP Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=parent_port_identity.parent_port_identity, is_container='container', yang_name="parent-port-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """parent_port_identity must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=parent_port_identity.parent_port_identity, is_container='container', yang_name="parent-port-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)""",
        })

    self.__parent_port_identity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_parent_port_identity(self):
    self.__parent_port_identity = YANGDynClass(base=parent_port_identity.parent_port_identity, is_container='container', yang_name="parent-port-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)


  def _get_parent_stats(self):
    """
    Getter method for parent_stats, mapped from YANG variable /ptp/instances/instance/parent_ds/state/parent_stats (boolean)

    YANG Description: When set to true, the values of
parent-ds/observed-parent-offset-scaled-log-variance
and
parent-ds/observed-parent-clock-phase-change-rate
have been measured and are valid.
    """
    return self.__parent_stats
      
  def _set_parent_stats(self, v, load=False):
    """
    Setter method for parent_stats, mapped from YANG variable /ptp/instances/instance/parent_ds/state/parent_stats (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_parent_stats is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_parent_stats() directly.

    YANG Description: When set to true, the values of
parent-ds/observed-parent-offset-scaled-log-variance
and
parent-ds/observed-parent-clock-phase-change-rate
have been measured and are valid.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="parent-stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """parent_stats must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="parent-stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=False)""",
        })

    self.__parent_stats = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_parent_stats(self):
    self.__parent_stats = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="parent-stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=False)


  def _get_observed_parent_offset_scaled_log_variance(self):
    """
    Getter method for observed_parent_offset_scaled_log_variance, mapped from YANG variable /ptp/instances/instance/parent_ds/state/observed_parent_offset_scaled_log_variance (uint16)

    YANG Description: Estimate of the variance of the phase offset of the
Local PTP Clock of the Parent PTP Instance as measured
with respect to the Local PTP Clock in the Slave PTP
Instance. This measurement is optional, but if not made,
the value of parent-ds/parent-stats shall be false.
    """
    return self.__observed_parent_offset_scaled_log_variance
      
  def _set_observed_parent_offset_scaled_log_variance(self, v, load=False):
    """
    Setter method for observed_parent_offset_scaled_log_variance, mapped from YANG variable /ptp/instances/instance/parent_ds/state/observed_parent_offset_scaled_log_variance (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_observed_parent_offset_scaled_log_variance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_observed_parent_offset_scaled_log_variance() directly.

    YANG Description: Estimate of the variance of the phase offset of the
Local PTP Clock of the Parent PTP Instance as measured
with respect to the Local PTP Clock in the Slave PTP
Instance. This measurement is optional, but if not made,
the value of parent-ds/parent-stats shall be false.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="observed-parent-offset-scaled-log-variance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """observed_parent_offset_scaled_log_variance must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="observed-parent-offset-scaled-log-variance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)""",
        })

    self.__observed_parent_offset_scaled_log_variance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_observed_parent_offset_scaled_log_variance(self):
    self.__observed_parent_offset_scaled_log_variance = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="observed-parent-offset-scaled-log-variance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=False)


  def _get_observed_parent_clock_phase_change_rate(self):
    """
    Getter method for observed_parent_clock_phase_change_rate, mapped from YANG variable /ptp/instances/instance/parent_ds/state/observed_parent_clock_phase_change_rate (int32)

    YANG Description: Estimate of the phase change rate of the
Local PTP Clock of the Parent PTP Instance as measured
by the Slave PTP Instance using its Local PTP Clock.
If the estimate exceeds the capacity of its data type,
this value shall be set to 7FFF FFFF (base 16) or
8000 0000 (base 16), as appropriate. A positive sign
indicates that the phase change rate in the
Parent PTP Instance is greater than that in the
Slave PTP Instance. The measurement of this value is
optional, but if not measured, the value of
parent-ds/parent-stats shall be false.
    """
    return self.__observed_parent_clock_phase_change_rate
      
  def _set_observed_parent_clock_phase_change_rate(self, v, load=False):
    """
    Setter method for observed_parent_clock_phase_change_rate, mapped from YANG variable /ptp/instances/instance/parent_ds/state/observed_parent_clock_phase_change_rate (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_observed_parent_clock_phase_change_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_observed_parent_clock_phase_change_rate() directly.

    YANG Description: Estimate of the phase change rate of the
Local PTP Clock of the Parent PTP Instance as measured
by the Slave PTP Instance using its Local PTP Clock.
If the estimate exceeds the capacity of its data type,
this value shall be set to 7FFF FFFF (base 16) or
8000 0000 (base 16), as appropriate. A positive sign
indicates that the phase change rate in the
Parent PTP Instance is greater than that in the
Slave PTP Instance. The measurement of this value is
optional, but if not measured, the value of
parent-ds/parent-stats shall be false.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="observed-parent-clock-phase-change-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """observed_parent_clock_phase_change_rate must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="observed-parent-clock-phase-change-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int32', is_config=False)""",
        })

    self.__observed_parent_clock_phase_change_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_observed_parent_clock_phase_change_rate(self):
    self.__observed_parent_clock_phase_change_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="observed-parent-clock-phase-change-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int32', is_config=False)


  def _get_grandmaster_identity(self):
    """
    Getter method for grandmaster_identity, mapped from YANG variable /ptp/instances/instance/parent_ds/state/grandmaster_identity (oc-ptp-types:clock-identity)

    YANG Description: The IEEE Std 1588 clockIdentity of the Grandmaster PTP
Instance.
    """
    return self.__grandmaster_identity
      
  def _set_grandmaster_identity(self, v, load=False):
    """
    Setter method for grandmaster_identity, mapped from YANG variable /ptp/instances/instance/parent_ds/state/grandmaster_identity (oc-ptp-types:clock-identity)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_grandmaster_identity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_grandmaster_identity() directly.

    YANG Description: The IEEE Std 1588 clockIdentity of the Grandmaster PTP
Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9A-F]{2}(-[0-9A-F]{2}){7}'}), is_leaf=True, yang_name="grandmaster-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:clock-identity', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """grandmaster_identity must be of a type compatible with oc-ptp-types:clock-identity""",
          'defined-type': "oc-ptp-types:clock-identity",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9A-F]{2}(-[0-9A-F]{2}){7}'}), is_leaf=True, yang_name="grandmaster-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:clock-identity', is_config=False)""",
        })

    self.__grandmaster_identity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_grandmaster_identity(self):
    self.__grandmaster_identity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9A-F]{2}(-[0-9A-F]{2}){7}'}), is_leaf=True, yang_name="grandmaster-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:clock-identity', is_config=False)


  def _get_grandmaster_clock_quality(self):
    """
    Getter method for grandmaster_clock_quality, mapped from YANG variable /ptp/instances/instance/parent_ds/state/grandmaster_clock_quality (container)

    YANG Description: The IEEE Std 1588 clockQuality of the Grandmaster PTP
Instance.
    """
    return self.__grandmaster_clock_quality
      
  def _set_grandmaster_clock_quality(self, v, load=False):
    """
    Setter method for grandmaster_clock_quality, mapped from YANG variable /ptp/instances/instance/parent_ds/state/grandmaster_clock_quality (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_grandmaster_clock_quality is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_grandmaster_clock_quality() directly.

    YANG Description: The IEEE Std 1588 clockQuality of the Grandmaster PTP
Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=grandmaster_clock_quality.grandmaster_clock_quality, is_container='container', yang_name="grandmaster-clock-quality", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """grandmaster_clock_quality must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=grandmaster_clock_quality.grandmaster_clock_quality, is_container='container', yang_name="grandmaster-clock-quality", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)""",
        })

    self.__grandmaster_clock_quality = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_grandmaster_clock_quality(self):
    self.__grandmaster_clock_quality = YANGDynClass(base=grandmaster_clock_quality.grandmaster_clock_quality, is_container='container', yang_name="grandmaster-clock-quality", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)


  def _get_grandmaster_priority1(self):
    """
    Getter method for grandmaster_priority1, mapped from YANG variable /ptp/instances/instance/parent_ds/state/grandmaster_priority1 (uint8)

    YANG Description: The IEEE Std 1588 priority1 of the Grandmaster PTP
Instance.
    """
    return self.__grandmaster_priority1
      
  def _set_grandmaster_priority1(self, v, load=False):
    """
    Setter method for grandmaster_priority1, mapped from YANG variable /ptp/instances/instance/parent_ds/state/grandmaster_priority1 (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_grandmaster_priority1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_grandmaster_priority1() directly.

    YANG Description: The IEEE Std 1588 priority1 of the Grandmaster PTP
Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="grandmaster-priority1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """grandmaster_priority1 must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="grandmaster-priority1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)""",
        })

    self.__grandmaster_priority1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_grandmaster_priority1(self):
    self.__grandmaster_priority1 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="grandmaster-priority1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)


  def _get_grandmaster_priority2(self):
    """
    Getter method for grandmaster_priority2, mapped from YANG variable /ptp/instances/instance/parent_ds/state/grandmaster_priority2 (uint8)

    YANG Description: The IEEE Std 1588 priority2 of the Grandmaster PTP
Instance.
    """
    return self.__grandmaster_priority2
      
  def _set_grandmaster_priority2(self, v, load=False):
    """
    Setter method for grandmaster_priority2, mapped from YANG variable /ptp/instances/instance/parent_ds/state/grandmaster_priority2 (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_grandmaster_priority2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_grandmaster_priority2() directly.

    YANG Description: The IEEE Std 1588 priority2 of the Grandmaster PTP
Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="grandmaster-priority2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """grandmaster_priority2 must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="grandmaster-priority2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)""",
        })

    self.__grandmaster_priority2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_grandmaster_priority2(self):
    self.__grandmaster_priority2 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="grandmaster-priority2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)

  parent_port_identity = __builtin__.property(_get_parent_port_identity)
  parent_stats = __builtin__.property(_get_parent_stats)
  observed_parent_offset_scaled_log_variance = __builtin__.property(_get_observed_parent_offset_scaled_log_variance)
  observed_parent_clock_phase_change_rate = __builtin__.property(_get_observed_parent_clock_phase_change_rate)
  grandmaster_identity = __builtin__.property(_get_grandmaster_identity)
  grandmaster_clock_quality = __builtin__.property(_get_grandmaster_clock_quality)
  grandmaster_priority1 = __builtin__.property(_get_grandmaster_priority1)
  grandmaster_priority2 = __builtin__.property(_get_grandmaster_priority2)


  _pyangbind_elements = OrderedDict([('parent_port_identity', parent_port_identity), ('parent_stats', parent_stats), ('observed_parent_offset_scaled_log_variance', observed_parent_offset_scaled_log_variance), ('observed_parent_clock_phase_change_rate', observed_parent_clock_phase_change_rate), ('grandmaster_identity', grandmaster_identity), ('grandmaster_clock_quality', grandmaster_clock_quality), ('grandmaster_priority1', grandmaster_priority1), ('grandmaster_priority2', grandmaster_priority2), ])


