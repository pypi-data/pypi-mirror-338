# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import config
from . import state
from . import current_ds
from . import time_properties_ds
from . import default_ds
from . import parent_ds
from . import ports
class instance(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/instances/instance. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of one or more PTP Instances in the product (PTP Node). Each
PTP Instance represents a distinct instance of PTP implementation
(i.e. distinct Ordinary Clock, Boundary Clock, or Transparent Clock),
maintaining a distinct time. PTP Instances may be created or deleted
dynamically in implementations that support dynamic create/delete.
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__config','__state','__current_ds','__time_properties_ds','__default_ds','__parent_ds','__ports',)

  _yang_name = 'instance'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__id = YANGDynClass(base=str, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)
    self.__current_ds = YANGDynClass(base=current_ds.current_ds, is_container='container', yang_name="current-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    self.__time_properties_ds = YANGDynClass(base=time_properties_ds.time_properties_ds, is_container='container', yang_name="time-properties-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    self.__default_ds = YANGDynClass(base=default_ds.default_ds, is_container='container', yang_name="default-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    self.__parent_ds = YANGDynClass(base=parent_ds.parent_ds, is_container='container', yang_name="parent-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    self.__ports = YANGDynClass(base=ports.ports, is_container='container', yang_name="ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'instances', 'instance']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /ptp/instances/instance/id (leafref)

    YANG Description: The instance list is indexed using a number that is unique per PTP
Instance within the PTP Node, applicable to the management context
only (i.e. not used in PTP messages). The domain-number of the PTP
Instance is not used as the key to instance-list, since it is possible
for a PTP Node to contain multiple PTP Instances using the same
domain-number.
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /ptp/instances/instance/id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: The instance list is indexed using a number that is unique per PTP
Instance within the PTP Node, applicable to the management context
only (i.e. not used in PTP messages). The domain-number of the PTP
Instance is not used as the key to instance-list, since it is possible
for a PTP Node to contain multiple PTP Instances using the same
domain-number.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='leafref', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=str, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /ptp/instances/instance/config (container)

    YANG Description: Configuration data for PTP instance.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /ptp/instances/instance/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for PTP instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /ptp/instances/instance/state (container)

    YANG Description: Operational state data for PTP instance.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /ptp/instances/instance/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for PTP instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)


  def _get_current_ds(self):
    """
    Getter method for current_ds, mapped from YANG variable /ptp/instances/instance/current_ds (container)

    YANG Description: Current data set state data of PTP instance.
    """
    return self.__current_ds
      
  def _set_current_ds(self, v, load=False):
    """
    Setter method for current_ds, mapped from YANG variable /ptp/instances/instance/current_ds (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_current_ds is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_current_ds() directly.

    YANG Description: Current data set state data of PTP instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=current_ds.current_ds, is_container='container', yang_name="current-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """current_ds must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=current_ds.current_ds, is_container='container', yang_name="current-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__current_ds = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_current_ds(self):
    self.__current_ds = YANGDynClass(base=current_ds.current_ds, is_container='container', yang_name="current-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)


  def _get_time_properties_ds(self):
    """
    Getter method for time_properties_ds, mapped from YANG variable /ptp/instances/instance/time_properties_ds (container)

    YANG Description: Time properties data set of PTP instance.
    """
    return self.__time_properties_ds
      
  def _set_time_properties_ds(self, v, load=False):
    """
    Setter method for time_properties_ds, mapped from YANG variable /ptp/instances/instance/time_properties_ds (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_time_properties_ds is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_time_properties_ds() directly.

    YANG Description: Time properties data set of PTP instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=time_properties_ds.time_properties_ds, is_container='container', yang_name="time-properties-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """time_properties_ds must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=time_properties_ds.time_properties_ds, is_container='container', yang_name="time-properties-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__time_properties_ds = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_time_properties_ds(self):
    self.__time_properties_ds = YANGDynClass(base=time_properties_ds.time_properties_ds, is_container='container', yang_name="time-properties-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)


  def _get_default_ds(self):
    """
    Getter method for default_ds, mapped from YANG variable /ptp/instances/instance/default_ds (container)

    YANG Description: The default data set of the PTP Instance.
    """
    return self.__default_ds
      
  def _set_default_ds(self, v, load=False):
    """
    Setter method for default_ds, mapped from YANG variable /ptp/instances/instance/default_ds (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_ds is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_ds() directly.

    YANG Description: The default data set of the PTP Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=default_ds.default_ds, is_container='container', yang_name="default-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_ds must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=default_ds.default_ds, is_container='container', yang_name="default-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__default_ds = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_ds(self):
    self.__default_ds = YANGDynClass(base=default_ds.default_ds, is_container='container', yang_name="default-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)


  def _get_parent_ds(self):
    """
    Getter method for parent_ds, mapped from YANG variable /ptp/instances/instance/parent_ds (container)

    YANG Description: Provides data learned from the parent of this PTP Instance (i.e.
master port on the other side of the path/link).
    """
    return self.__parent_ds
      
  def _set_parent_ds(self, v, load=False):
    """
    Setter method for parent_ds, mapped from YANG variable /ptp/instances/instance/parent_ds (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_parent_ds is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_parent_ds() directly.

    YANG Description: Provides data learned from the parent of this PTP Instance (i.e.
master port on the other side of the path/link).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=parent_ds.parent_ds, is_container='container', yang_name="parent-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """parent_ds must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=parent_ds.parent_ds, is_container='container', yang_name="parent-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__parent_ds = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_parent_ds(self):
    self.__parent_ds = YANGDynClass(base=parent_ds.parent_ds, is_container='container', yang_name="parent-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)


  def _get_ports(self):
    """
    Getter method for ports, mapped from YANG variable /ptp/instances/instance/ports (container)

    YANG Description: YANG container that is used to get all PTP Ports
in the PTP Instance.
YANG does not allow get of all elements in a YANG list,
so a YANG container wrapping the YANG list is provided for
that purpose. The naming convention uses plural for the
wrapping YANG container, and singular for the YANG list.
    """
    return self.__ports
      
  def _set_ports(self, v, load=False):
    """
    Setter method for ports, mapped from YANG variable /ptp/instances/instance/ports (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ports is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ports() directly.

    YANG Description: YANG container that is used to get all PTP Ports
in the PTP Instance.
YANG does not allow get of all elements in a YANG list,
so a YANG container wrapping the YANG list is provided for
that purpose. The naming convention uses plural for the
wrapping YANG container, and singular for the YANG list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ports.ports, is_container='container', yang_name="ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ports must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ports.ports, is_container='container', yang_name="ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__ports = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ports(self):
    self.__ports = YANGDynClass(base=ports.ports, is_container='container', yang_name="ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  current_ds = __builtin__.property(_get_current_ds, _set_current_ds)
  time_properties_ds = __builtin__.property(_get_time_properties_ds, _set_time_properties_ds)
  default_ds = __builtin__.property(_get_default_ds, _set_default_ds)
  parent_ds = __builtin__.property(_get_parent_ds, _set_parent_ds)
  ports = __builtin__.property(_get_ports, _set_ports)


  _pyangbind_elements = OrderedDict([('id', id), ('config', config), ('state', state), ('current_ds', current_ds), ('time_properties_ds', time_properties_ds), ('default_ds', default_ds), ('parent_ds', parent_ds), ('ports', ports), ])


from . import config
from . import state
from . import current_ds
from . import time_properties_ds
from . import default_ds
from . import parent_ds
from . import ports
class instance(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/instances/instance. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of one or more PTP Instances in the product (PTP Node). Each
PTP Instance represents a distinct instance of PTP implementation
(i.e. distinct Ordinary Clock, Boundary Clock, or Transparent Clock),
maintaining a distinct time. PTP Instances may be created or deleted
dynamically in implementations that support dynamic create/delete.
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__config','__state','__current_ds','__time_properties_ds','__default_ds','__parent_ds','__ports',)

  _yang_name = 'instance'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__id = YANGDynClass(base=str, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)
    self.__current_ds = YANGDynClass(base=current_ds.current_ds, is_container='container', yang_name="current-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    self.__time_properties_ds = YANGDynClass(base=time_properties_ds.time_properties_ds, is_container='container', yang_name="time-properties-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    self.__default_ds = YANGDynClass(base=default_ds.default_ds, is_container='container', yang_name="default-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    self.__parent_ds = YANGDynClass(base=parent_ds.parent_ds, is_container='container', yang_name="parent-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    self.__ports = YANGDynClass(base=ports.ports, is_container='container', yang_name="ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'instances', 'instance']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /ptp/instances/instance/id (leafref)

    YANG Description: The instance list is indexed using a number that is unique per PTP
Instance within the PTP Node, applicable to the management context
only (i.e. not used in PTP messages). The domain-number of the PTP
Instance is not used as the key to instance-list, since it is possible
for a PTP Node to contain multiple PTP Instances using the same
domain-number.
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /ptp/instances/instance/id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: The instance list is indexed using a number that is unique per PTP
Instance within the PTP Node, applicable to the management context
only (i.e. not used in PTP messages). The domain-number of the PTP
Instance is not used as the key to instance-list, since it is possible
for a PTP Node to contain multiple PTP Instances using the same
domain-number.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='leafref', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=str, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /ptp/instances/instance/config (container)

    YANG Description: Configuration data for PTP instance.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /ptp/instances/instance/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for PTP instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /ptp/instances/instance/state (container)

    YANG Description: Operational state data for PTP instance.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /ptp/instances/instance/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for PTP instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)


  def _get_current_ds(self):
    """
    Getter method for current_ds, mapped from YANG variable /ptp/instances/instance/current_ds (container)

    YANG Description: Current data set state data of PTP instance.
    """
    return self.__current_ds
      
  def _set_current_ds(self, v, load=False):
    """
    Setter method for current_ds, mapped from YANG variable /ptp/instances/instance/current_ds (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_current_ds is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_current_ds() directly.

    YANG Description: Current data set state data of PTP instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=current_ds.current_ds, is_container='container', yang_name="current-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """current_ds must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=current_ds.current_ds, is_container='container', yang_name="current-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__current_ds = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_current_ds(self):
    self.__current_ds = YANGDynClass(base=current_ds.current_ds, is_container='container', yang_name="current-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)


  def _get_time_properties_ds(self):
    """
    Getter method for time_properties_ds, mapped from YANG variable /ptp/instances/instance/time_properties_ds (container)

    YANG Description: Time properties data set of PTP instance.
    """
    return self.__time_properties_ds
      
  def _set_time_properties_ds(self, v, load=False):
    """
    Setter method for time_properties_ds, mapped from YANG variable /ptp/instances/instance/time_properties_ds (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_time_properties_ds is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_time_properties_ds() directly.

    YANG Description: Time properties data set of PTP instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=time_properties_ds.time_properties_ds, is_container='container', yang_name="time-properties-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """time_properties_ds must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=time_properties_ds.time_properties_ds, is_container='container', yang_name="time-properties-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__time_properties_ds = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_time_properties_ds(self):
    self.__time_properties_ds = YANGDynClass(base=time_properties_ds.time_properties_ds, is_container='container', yang_name="time-properties-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)


  def _get_default_ds(self):
    """
    Getter method for default_ds, mapped from YANG variable /ptp/instances/instance/default_ds (container)

    YANG Description: The default data set of the PTP Instance.
    """
    return self.__default_ds
      
  def _set_default_ds(self, v, load=False):
    """
    Setter method for default_ds, mapped from YANG variable /ptp/instances/instance/default_ds (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_ds is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_ds() directly.

    YANG Description: The default data set of the PTP Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=default_ds.default_ds, is_container='container', yang_name="default-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_ds must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=default_ds.default_ds, is_container='container', yang_name="default-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__default_ds = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_ds(self):
    self.__default_ds = YANGDynClass(base=default_ds.default_ds, is_container='container', yang_name="default-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)


  def _get_parent_ds(self):
    """
    Getter method for parent_ds, mapped from YANG variable /ptp/instances/instance/parent_ds (container)

    YANG Description: Provides data learned from the parent of this PTP Instance (i.e.
master port on the other side of the path/link).
    """
    return self.__parent_ds
      
  def _set_parent_ds(self, v, load=False):
    """
    Setter method for parent_ds, mapped from YANG variable /ptp/instances/instance/parent_ds (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_parent_ds is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_parent_ds() directly.

    YANG Description: Provides data learned from the parent of this PTP Instance (i.e.
master port on the other side of the path/link).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=parent_ds.parent_ds, is_container='container', yang_name="parent-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """parent_ds must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=parent_ds.parent_ds, is_container='container', yang_name="parent-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__parent_ds = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_parent_ds(self):
    self.__parent_ds = YANGDynClass(base=parent_ds.parent_ds, is_container='container', yang_name="parent-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)


  def _get_ports(self):
    """
    Getter method for ports, mapped from YANG variable /ptp/instances/instance/ports (container)

    YANG Description: YANG container that is used to get all PTP Ports
in the PTP Instance.
YANG does not allow get of all elements in a YANG list,
so a YANG container wrapping the YANG list is provided for
that purpose. The naming convention uses plural for the
wrapping YANG container, and singular for the YANG list.
    """
    return self.__ports
      
  def _set_ports(self, v, load=False):
    """
    Setter method for ports, mapped from YANG variable /ptp/instances/instance/ports (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ports is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ports() directly.

    YANG Description: YANG container that is used to get all PTP Ports
in the PTP Instance.
YANG does not allow get of all elements in a YANG list,
so a YANG container wrapping the YANG list is provided for
that purpose. The naming convention uses plural for the
wrapping YANG container, and singular for the YANG list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ports.ports, is_container='container', yang_name="ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ports must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ports.ports, is_container='container', yang_name="ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__ports = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ports(self):
    self.__ports = YANGDynClass(base=ports.ports, is_container='container', yang_name="ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  current_ds = __builtin__.property(_get_current_ds, _set_current_ds)
  time_properties_ds = __builtin__.property(_get_time_properties_ds, _set_time_properties_ds)
  default_ds = __builtin__.property(_get_default_ds, _set_default_ds)
  parent_ds = __builtin__.property(_get_parent_ds, _set_parent_ds)
  ports = __builtin__.property(_get_ports, _set_ports)


  _pyangbind_elements = OrderedDict([('id', id), ('config', config), ('state', state), ('current_ds', current_ds), ('time_properties_ds', time_properties_ds), ('default_ds', default_ds), ('parent_ds', parent_ds), ('ports', ports), ])


