# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/instances/instance/default-ds/clock-quality/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Config state data of clock-quality
  """
  __slots__ = ('_path_helper', '_extmethods', '__clock_class','__clock_accuracy','__offset_scaled_log_variance',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__clock_class = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},), is_leaf=True, yang_name="clock-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='identityref', is_config=True)
    self.__clock_accuracy = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},), is_leaf=True, yang_name="clock-accuracy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='identityref', is_config=True)
    self.__offset_scaled_log_variance = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="offset-scaled-log-variance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'instances', 'instance', 'default-ds', 'clock-quality', 'config']

  def _get_clock_class(self):
    """
    Getter method for clock_class, mapped from YANG variable /ptp/instances/instance/default_ds/clock_quality/config/clock_class (identityref)

    YANG Description: The clockClass denotes the traceability of the time
or frequency distributed by the clock.
    """
    return self.__clock_class
      
  def _set_clock_class(self, v, load=False):
    """
    Setter method for clock_class, mapped from YANG variable /ptp/instances/instance/default_ds/clock_quality/config/clock_class (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clock_class is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clock_class() directly.

    YANG Description: The clockClass denotes the traceability of the time
or frequency distributed by the clock.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},), is_leaf=True, yang_name="clock-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clock_class must be of a type compatible with identityref""",
          'defined-type': "openconfig-ptp:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},), is_leaf=True, yang_name="clock-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='identityref', is_config=True)""",
        })

    self.__clock_class = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clock_class(self):
    self.__clock_class = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},), is_leaf=True, yang_name="clock-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='identityref', is_config=True)


  def _get_clock_accuracy(self):
    """
    Getter method for clock_accuracy, mapped from YANG variable /ptp/instances/instance/default_ds/clock_quality/config/clock_accuracy (identityref)

    YANG Description: The clockAccuracy indicates the accuracy of the clock
(Local Clock of the PTP Instance).
    """
    return self.__clock_accuracy
      
  def _set_clock_accuracy(self, v, load=False):
    """
    Setter method for clock_accuracy, mapped from YANG variable /ptp/instances/instance/default_ds/clock_quality/config/clock_accuracy (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clock_accuracy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clock_accuracy() directly.

    YANG Description: The clockAccuracy indicates the accuracy of the clock
(Local Clock of the PTP Instance).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},), is_leaf=True, yang_name="clock-accuracy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clock_accuracy must be of a type compatible with identityref""",
          'defined-type': "openconfig-ptp:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},), is_leaf=True, yang_name="clock-accuracy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='identityref', is_config=True)""",
        })

    self.__clock_accuracy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clock_accuracy(self):
    self.__clock_accuracy = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},), is_leaf=True, yang_name="clock-accuracy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='identityref', is_config=True)


  def _get_offset_scaled_log_variance(self):
    """
    Getter method for offset_scaled_log_variance, mapped from YANG variable /ptp/instances/instance/default_ds/clock_quality/config/offset_scaled_log_variance (uint16)

    YANG Description: The offsetScaledLogVariance indicates the stability of the
clock (Local Clock of the PTP Instance). It provides an
estimate of the variations of the clock from a linear timescale
when it is not synchronized to another clock using the
protocol.
    """
    return self.__offset_scaled_log_variance
      
  def _set_offset_scaled_log_variance(self, v, load=False):
    """
    Setter method for offset_scaled_log_variance, mapped from YANG variable /ptp/instances/instance/default_ds/clock_quality/config/offset_scaled_log_variance (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_offset_scaled_log_variance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_offset_scaled_log_variance() directly.

    YANG Description: The offsetScaledLogVariance indicates the stability of the
clock (Local Clock of the PTP Instance). It provides an
estimate of the variations of the clock from a linear timescale
when it is not synchronized to another clock using the
protocol.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="offset-scaled-log-variance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """offset_scaled_log_variance must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="offset-scaled-log-variance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=True)""",
        })

    self.__offset_scaled_log_variance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_offset_scaled_log_variance(self):
    self.__offset_scaled_log_variance = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="offset-scaled-log-variance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=True)

  clock_class = __builtin__.property(_get_clock_class, _set_clock_class)
  clock_accuracy = __builtin__.property(_get_clock_accuracy, _set_clock_accuracy)
  offset_scaled_log_variance = __builtin__.property(_get_offset_scaled_log_variance, _set_offset_scaled_log_variance)


  _pyangbind_elements = OrderedDict([('clock_class', clock_class), ('clock_accuracy', clock_accuracy), ('offset_scaled_log_variance', offset_scaled_log_variance), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/instances/instance/default-ds/clock-quality/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Config state data of clock-quality
  """
  __slots__ = ('_path_helper', '_extmethods', '__clock_class','__clock_accuracy','__offset_scaled_log_variance',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__clock_class = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},), is_leaf=True, yang_name="clock-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='identityref', is_config=True)
    self.__clock_accuracy = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},), is_leaf=True, yang_name="clock-accuracy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='identityref', is_config=True)
    self.__offset_scaled_log_variance = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="offset-scaled-log-variance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'instances', 'instance', 'default-ds', 'clock-quality', 'config']

  def _get_clock_class(self):
    """
    Getter method for clock_class, mapped from YANG variable /ptp/instances/instance/default_ds/clock_quality/config/clock_class (identityref)

    YANG Description: The clockClass denotes the traceability of the time
or frequency distributed by the clock.
    """
    return self.__clock_class
      
  def _set_clock_class(self, v, load=False):
    """
    Setter method for clock_class, mapped from YANG variable /ptp/instances/instance/default_ds/clock_quality/config/clock_class (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clock_class is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clock_class() directly.

    YANG Description: The clockClass denotes the traceability of the time
or frequency distributed by the clock.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},), is_leaf=True, yang_name="clock-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clock_class must be of a type compatible with identityref""",
          'defined-type': "openconfig-ptp:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},), is_leaf=True, yang_name="clock-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='identityref', is_config=True)""",
        })

    self.__clock_class = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clock_class(self):
    self.__clock_class = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},), is_leaf=True, yang_name="clock-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='identityref', is_config=True)


  def _get_clock_accuracy(self):
    """
    Getter method for clock_accuracy, mapped from YANG variable /ptp/instances/instance/default_ds/clock_quality/config/clock_accuracy (identityref)

    YANG Description: The clockAccuracy indicates the accuracy of the clock
(Local Clock of the PTP Instance).
    """
    return self.__clock_accuracy
      
  def _set_clock_accuracy(self, v, load=False):
    """
    Setter method for clock_accuracy, mapped from YANG variable /ptp/instances/instance/default_ds/clock_quality/config/clock_accuracy (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clock_accuracy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clock_accuracy() directly.

    YANG Description: The clockAccuracy indicates the accuracy of the clock
(Local Clock of the PTP Instance).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},), is_leaf=True, yang_name="clock-accuracy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clock_accuracy must be of a type compatible with identityref""",
          'defined-type': "openconfig-ptp:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},), is_leaf=True, yang_name="clock-accuracy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='identityref', is_config=True)""",
        })

    self.__clock_accuracy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clock_accuracy(self):
    self.__clock_accuracy = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={},), is_leaf=True, yang_name="clock-accuracy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='identityref', is_config=True)


  def _get_offset_scaled_log_variance(self):
    """
    Getter method for offset_scaled_log_variance, mapped from YANG variable /ptp/instances/instance/default_ds/clock_quality/config/offset_scaled_log_variance (uint16)

    YANG Description: The offsetScaledLogVariance indicates the stability of the
clock (Local Clock of the PTP Instance). It provides an
estimate of the variations of the clock from a linear timescale
when it is not synchronized to another clock using the
protocol.
    """
    return self.__offset_scaled_log_variance
      
  def _set_offset_scaled_log_variance(self, v, load=False):
    """
    Setter method for offset_scaled_log_variance, mapped from YANG variable /ptp/instances/instance/default_ds/clock_quality/config/offset_scaled_log_variance (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_offset_scaled_log_variance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_offset_scaled_log_variance() directly.

    YANG Description: The offsetScaledLogVariance indicates the stability of the
clock (Local Clock of the PTP Instance). It provides an
estimate of the variations of the clock from a linear timescale
when it is not synchronized to another clock using the
protocol.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="offset-scaled-log-variance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """offset_scaled_log_variance must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="offset-scaled-log-variance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=True)""",
        })

    self.__offset_scaled_log_variance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_offset_scaled_log_variance(self):
    self.__offset_scaled_log_variance = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="offset-scaled-log-variance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint16', is_config=True)

  clock_class = __builtin__.property(_get_clock_class, _set_clock_class)
  clock_accuracy = __builtin__.property(_get_clock_accuracy, _set_clock_accuracy)
  offset_scaled_log_variance = __builtin__.property(_get_offset_scaled_log_variance, _set_offset_scaled_log_variance)


  _pyangbind_elements = OrderedDict([('clock_class', clock_class), ('clock_accuracy', clock_accuracy), ('offset_scaled_log_variance', offset_scaled_log_variance), ])


