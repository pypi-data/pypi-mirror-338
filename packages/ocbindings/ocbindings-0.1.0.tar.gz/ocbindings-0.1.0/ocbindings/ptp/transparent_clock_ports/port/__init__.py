# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import config
from . import state
from . import port_ds
class port(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/transparent-clock-ports/port. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This list of Transparent Clock port data sets was specified
in IEEE Std 1588-2008, and under some interpretations,
it applied to all domains, which in turn means that it
represents multiple Transparent Clocks.
In IEEE Std 1588-2019, this list is specified as
applying to the PTP Node (all domains), but the list is
deprecated. For new designs, the standard recommends that
Transparent Clocks use the PTP Instance data sets
(i.e., /ptp/instances/instance[]), such that each
Transparent Clock supports a single PTP Instance
and domain.
  """
  __slots__ = ('_path_helper', '_extmethods', '__port_index','__config','__state','__port_ds',)

  _yang_name = 'port'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__port_index = YANGDynClass(base=str, is_leaf=True, yang_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)
    self.__port_ds = YANGDynClass(base=port_ds.port_ds, is_container='container', yang_name="port-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'transparent-clock-ports', 'port']

  def _get_port_index(self):
    """
    Getter method for port_index, mapped from YANG variable /ptp/transparent_clock_ports/port/port_index (leafref)

    YANG Description: The port list is indexed using a number that is
unique per PTP Port within the PTP Instance,
applicable to the management context only
(i.e., not used in PTP messages).
    """
    return self.__port_index
      
  def _set_port_index(self, v, load=False):
    """
    Setter method for port_index, mapped from YANG variable /ptp/transparent_clock_ports/port/port_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_index() directly.

    YANG Description: The port list is indexed using a number that is
unique per PTP Port within the PTP Instance,
applicable to the management context only
(i.e., not used in PTP messages).
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='leafref', is_config=True)""",
        })

    self.__port_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_index(self):
    self.__port_index = YANGDynClass(base=str, is_leaf=True, yang_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /ptp/transparent_clock_ports/port/config (container)

    YANG Description: Top-level container for configuration data of transparent clock port.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /ptp/transparent_clock_ports/port/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Top-level container for configuration data of transparent clock port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /ptp/transparent_clock_ports/port/state (container)

    YANG Description: Top-level container for operational state data of transparent clock port.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /ptp/transparent_clock_ports/port/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Top-level container for operational state data of transparent clock port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)


  def _get_port_ds(self):
    """
    Getter method for port_ds, mapped from YANG variable /ptp/transparent_clock_ports/port/port_ds (container)

    YANG Description: IEEE Std 1588 transparentClockPortDS.
    """
    return self.__port_ds
      
  def _set_port_ds(self, v, load=False):
    """
    Setter method for port_ds, mapped from YANG variable /ptp/transparent_clock_ports/port/port_ds (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_ds is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_ds() directly.

    YANG Description: IEEE Std 1588 transparentClockPortDS.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=port_ds.port_ds, is_container='container', yang_name="port-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_ds must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=port_ds.port_ds, is_container='container', yang_name="port-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__port_ds = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_ds(self):
    self.__port_ds = YANGDynClass(base=port_ds.port_ds, is_container='container', yang_name="port-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)

  port_index = __builtin__.property(_get_port_index, _set_port_index)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  port_ds = __builtin__.property(_get_port_ds, _set_port_ds)


  _pyangbind_elements = OrderedDict([('port_index', port_index), ('config', config), ('state', state), ('port_ds', port_ds), ])


from . import config
from . import state
from . import port_ds
class port(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/transparent-clock-ports/port. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This list of Transparent Clock port data sets was specified
in IEEE Std 1588-2008, and under some interpretations,
it applied to all domains, which in turn means that it
represents multiple Transparent Clocks.
In IEEE Std 1588-2019, this list is specified as
applying to the PTP Node (all domains), but the list is
deprecated. For new designs, the standard recommends that
Transparent Clocks use the PTP Instance data sets
(i.e., /ptp/instances/instance[]), such that each
Transparent Clock supports a single PTP Instance
and domain.
  """
  __slots__ = ('_path_helper', '_extmethods', '__port_index','__config','__state','__port_ds',)

  _yang_name = 'port'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__port_index = YANGDynClass(base=str, is_leaf=True, yang_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)
    self.__port_ds = YANGDynClass(base=port_ds.port_ds, is_container='container', yang_name="port-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'transparent-clock-ports', 'port']

  def _get_port_index(self):
    """
    Getter method for port_index, mapped from YANG variable /ptp/transparent_clock_ports/port/port_index (leafref)

    YANG Description: The port list is indexed using a number that is
unique per PTP Port within the PTP Instance,
applicable to the management context only
(i.e., not used in PTP messages).
    """
    return self.__port_index
      
  def _set_port_index(self, v, load=False):
    """
    Setter method for port_index, mapped from YANG variable /ptp/transparent_clock_ports/port/port_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_index() directly.

    YANG Description: The port list is indexed using a number that is
unique per PTP Port within the PTP Instance,
applicable to the management context only
(i.e., not used in PTP messages).
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='leafref', is_config=True)""",
        })

    self.__port_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_index(self):
    self.__port_index = YANGDynClass(base=str, is_leaf=True, yang_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /ptp/transparent_clock_ports/port/config (container)

    YANG Description: Top-level container for configuration data of transparent clock port.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /ptp/transparent_clock_ports/port/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Top-level container for configuration data of transparent clock port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /ptp/transparent_clock_ports/port/state (container)

    YANG Description: Top-level container for operational state data of transparent clock port.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /ptp/transparent_clock_ports/port/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Top-level container for operational state data of transparent clock port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=False)


  def _get_port_ds(self):
    """
    Getter method for port_ds, mapped from YANG variable /ptp/transparent_clock_ports/port/port_ds (container)

    YANG Description: IEEE Std 1588 transparentClockPortDS.
    """
    return self.__port_ds
      
  def _set_port_ds(self, v, load=False):
    """
    Setter method for port_ds, mapped from YANG variable /ptp/transparent_clock_ports/port/port_ds (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_ds is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_ds() directly.

    YANG Description: IEEE Std 1588 transparentClockPortDS.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=port_ds.port_ds, is_container='container', yang_name="port-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_ds must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=port_ds.port_ds, is_container='container', yang_name="port-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__port_ds = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_ds(self):
    self.__port_ds = YANGDynClass(base=port_ds.port_ds, is_container='container', yang_name="port-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)

  port_index = __builtin__.property(_get_port_index, _set_port_index)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  port_ds = __builtin__.property(_get_port_ds, _set_port_ds)


  _pyangbind_elements = OrderedDict([('port_index', port_index), ('config', config), ('state', state), ('port_ds', port_ds), ])


