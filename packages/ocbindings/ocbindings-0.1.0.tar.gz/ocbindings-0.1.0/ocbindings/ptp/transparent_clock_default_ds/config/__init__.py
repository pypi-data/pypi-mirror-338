# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/transparent-clock-default-ds/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for configuration data of transparent clock.
  """
  __slots__ = ('_path_helper', '_extmethods', '__delay_mechanism','__primary_domain','__two_step_flag',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__delay_mechanism = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'E2E': {'value': 1}, 'P2P': {'value': 2}, 'DISABLED': {'value': 254}},), is_leaf=True, yang_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:delay-mechanism-enumeration', is_config=True)
    self.__primary_domain = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="primary-domain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)
    self.__two_step_flag = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="two-step-flag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'transparent-clock-default-ds', 'config']

  def _get_delay_mechanism(self):
    """
    Getter method for delay_mechanism, mapped from YANG variable /ptp/transparent_clock_default_ds/config/delay_mechanism (oc-ptp-types:delay-mechanism-enumeration)

    YANG Description: The propagation delay measuring mechanism (e2e or p2p).
    """
    return self.__delay_mechanism
      
  def _set_delay_mechanism(self, v, load=False):
    """
    Setter method for delay_mechanism, mapped from YANG variable /ptp/transparent_clock_default_ds/config/delay_mechanism (oc-ptp-types:delay-mechanism-enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delay_mechanism is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delay_mechanism() directly.

    YANG Description: The propagation delay measuring mechanism (e2e or p2p).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'E2E': {'value': 1}, 'P2P': {'value': 2}, 'DISABLED': {'value': 254}},), is_leaf=True, yang_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:delay-mechanism-enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delay_mechanism must be of a type compatible with oc-ptp-types:delay-mechanism-enumeration""",
          'defined-type': "oc-ptp-types:delay-mechanism-enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'E2E': {'value': 1}, 'P2P': {'value': 2}, 'DISABLED': {'value': 254}},), is_leaf=True, yang_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:delay-mechanism-enumeration', is_config=True)""",
        })

    self.__delay_mechanism = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delay_mechanism(self):
    self.__delay_mechanism = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'E2E': {'value': 1}, 'P2P': {'value': 2}, 'DISABLED': {'value': 254}},), is_leaf=True, yang_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:delay-mechanism-enumeration', is_config=True)


  def _get_primary_domain(self):
    """
    Getter method for primary_domain, mapped from YANG variable /ptp/transparent_clock_default_ds/config/primary_domain (uint8)

    YANG Description: The domainNumber of the primary syntonization domain.
    """
    return self.__primary_domain
      
  def _set_primary_domain(self, v, load=False):
    """
    Setter method for primary_domain, mapped from YANG variable /ptp/transparent_clock_default_ds/config/primary_domain (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_primary_domain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_primary_domain() directly.

    YANG Description: The domainNumber of the primary syntonization domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="primary-domain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """primary_domain must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="primary-domain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)""",
        })

    self.__primary_domain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_primary_domain(self):
    self.__primary_domain = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="primary-domain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)


  def _get_two_step_flag(self):
    """
    Getter method for two_step_flag, mapped from YANG variable /ptp/transparent_clock_default_ds/config/two_step_flag (boolean)

    YANG Description: When set to true, the clock is a two-step clock;
otherwise,the clock is a one-step clock.
    """
    return self.__two_step_flag
      
  def _set_two_step_flag(self, v, load=False):
    """
    Setter method for two_step_flag, mapped from YANG variable /ptp/transparent_clock_default_ds/config/two_step_flag (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_two_step_flag is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_two_step_flag() directly.

    YANG Description: When set to true, the clock is a two-step clock;
otherwise,the clock is a one-step clock.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="two-step-flag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """two_step_flag must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="two-step-flag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=True)""",
        })

    self.__two_step_flag = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_two_step_flag(self):
    self.__two_step_flag = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="two-step-flag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=True)

  delay_mechanism = __builtin__.property(_get_delay_mechanism, _set_delay_mechanism)
  primary_domain = __builtin__.property(_get_primary_domain, _set_primary_domain)
  two_step_flag = __builtin__.property(_get_two_step_flag, _set_two_step_flag)


  _pyangbind_elements = OrderedDict([('delay_mechanism', delay_mechanism), ('primary_domain', primary_domain), ('two_step_flag', two_step_flag), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/transparent-clock-default-ds/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for configuration data of transparent clock.
  """
  __slots__ = ('_path_helper', '_extmethods', '__delay_mechanism','__primary_domain','__two_step_flag',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__delay_mechanism = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'E2E': {'value': 1}, 'P2P': {'value': 2}, 'DISABLED': {'value': 254}},), is_leaf=True, yang_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:delay-mechanism-enumeration', is_config=True)
    self.__primary_domain = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="primary-domain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)
    self.__two_step_flag = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="two-step-flag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'transparent-clock-default-ds', 'config']

  def _get_delay_mechanism(self):
    """
    Getter method for delay_mechanism, mapped from YANG variable /ptp/transparent_clock_default_ds/config/delay_mechanism (oc-ptp-types:delay-mechanism-enumeration)

    YANG Description: The propagation delay measuring mechanism (e2e or p2p).
    """
    return self.__delay_mechanism
      
  def _set_delay_mechanism(self, v, load=False):
    """
    Setter method for delay_mechanism, mapped from YANG variable /ptp/transparent_clock_default_ds/config/delay_mechanism (oc-ptp-types:delay-mechanism-enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delay_mechanism is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delay_mechanism() directly.

    YANG Description: The propagation delay measuring mechanism (e2e or p2p).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'E2E': {'value': 1}, 'P2P': {'value': 2}, 'DISABLED': {'value': 254}},), is_leaf=True, yang_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:delay-mechanism-enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delay_mechanism must be of a type compatible with oc-ptp-types:delay-mechanism-enumeration""",
          'defined-type': "oc-ptp-types:delay-mechanism-enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'E2E': {'value': 1}, 'P2P': {'value': 2}, 'DISABLED': {'value': 254}},), is_leaf=True, yang_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:delay-mechanism-enumeration', is_config=True)""",
        })

    self.__delay_mechanism = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delay_mechanism(self):
    self.__delay_mechanism = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'E2E': {'value': 1}, 'P2P': {'value': 2}, 'DISABLED': {'value': 254}},), is_leaf=True, yang_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:delay-mechanism-enumeration', is_config=True)


  def _get_primary_domain(self):
    """
    Getter method for primary_domain, mapped from YANG variable /ptp/transparent_clock_default_ds/config/primary_domain (uint8)

    YANG Description: The domainNumber of the primary syntonization domain.
    """
    return self.__primary_domain
      
  def _set_primary_domain(self, v, load=False):
    """
    Setter method for primary_domain, mapped from YANG variable /ptp/transparent_clock_default_ds/config/primary_domain (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_primary_domain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_primary_domain() directly.

    YANG Description: The domainNumber of the primary syntonization domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="primary-domain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """primary_domain must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="primary-domain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)""",
        })

    self.__primary_domain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_primary_domain(self):
    self.__primary_domain = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="primary-domain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=True)


  def _get_two_step_flag(self):
    """
    Getter method for two_step_flag, mapped from YANG variable /ptp/transparent_clock_default_ds/config/two_step_flag (boolean)

    YANG Description: When set to true, the clock is a two-step clock;
otherwise,the clock is a one-step clock.
    """
    return self.__two_step_flag
      
  def _set_two_step_flag(self, v, load=False):
    """
    Setter method for two_step_flag, mapped from YANG variable /ptp/transparent_clock_default_ds/config/two_step_flag (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_two_step_flag is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_two_step_flag() directly.

    YANG Description: When set to true, the clock is a two-step clock;
otherwise,the clock is a one-step clock.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="two-step-flag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """two_step_flag must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="two-step-flag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=True)""",
        })

    self.__two_step_flag = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_two_step_flag(self):
    self.__two_step_flag = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="two-step-flag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='boolean', is_config=True)

  delay_mechanism = __builtin__.property(_get_delay_mechanism, _set_delay_mechanism)
  primary_domain = __builtin__.property(_get_primary_domain, _set_primary_domain)
  two_step_flag = __builtin__.property(_get_two_step_flag, _set_two_step_flag)


  _pyangbind_elements = OrderedDict([('delay_mechanism', delay_mechanism), ('primary_domain', primary_domain), ('two_step_flag', two_step_flag), ])


