# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-lacp - based on the path /lacp/interfaces/interface/members/member/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: LACP protocol counters
  """
  __slots__ = ('_path_helper', '_extmethods', '__lacp_in_pkts','__lacp_out_pkts','__lacp_rx_errors','__lacp_tx_errors','__lacp_unknown_errors','__lacp_errors','__lacp_timeout_transitions',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/lacp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__lacp_in_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-in-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    self.__lacp_out_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-out-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    self.__lacp_rx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    self.__lacp_tx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-tx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    self.__lacp_unknown_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-unknown-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    self.__lacp_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    self.__lacp_timeout_transitions = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-timeout-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['lacp', 'interfaces', 'interface', 'members', 'member', 'state', 'counters']

  def _get_lacp_in_pkts(self):
    """
    Getter method for lacp_in_pkts, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_in_pkts (oc-yang:counter64)

    YANG Description: Number of LACPDUs received
    """
    return self.__lacp_in_pkts
      
  def _set_lacp_in_pkts(self, v, load=False):
    """
    Setter method for lacp_in_pkts, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_in_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lacp_in_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lacp_in_pkts() directly.

    YANG Description: Number of LACPDUs received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-in-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lacp_in_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-in-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__lacp_in_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lacp_in_pkts(self):
    self.__lacp_in_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-in-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)


  def _get_lacp_out_pkts(self):
    """
    Getter method for lacp_out_pkts, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_out_pkts (oc-yang:counter64)

    YANG Description: Number of LACPDUs transmitted
    """
    return self.__lacp_out_pkts
      
  def _set_lacp_out_pkts(self, v, load=False):
    """
    Setter method for lacp_out_pkts, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_out_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lacp_out_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lacp_out_pkts() directly.

    YANG Description: Number of LACPDUs transmitted
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-out-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lacp_out_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-out-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__lacp_out_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lacp_out_pkts(self):
    self.__lacp_out_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-out-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)


  def _get_lacp_rx_errors(self):
    """
    Getter method for lacp_rx_errors, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_rx_errors (oc-yang:counter64)

    YANG Description: Number of LACPDU receive packet errors
    """
    return self.__lacp_rx_errors
      
  def _set_lacp_rx_errors(self, v, load=False):
    """
    Setter method for lacp_rx_errors, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_rx_errors (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lacp_rx_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lacp_rx_errors() directly.

    YANG Description: Number of LACPDU receive packet errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lacp_rx_errors must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__lacp_rx_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lacp_rx_errors(self):
    self.__lacp_rx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)


  def _get_lacp_tx_errors(self):
    """
    Getter method for lacp_tx_errors, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_tx_errors (oc-yang:counter64)

    YANG Description: Number of LACPDU transmit packet errors
    """
    return self.__lacp_tx_errors
      
  def _set_lacp_tx_errors(self, v, load=False):
    """
    Setter method for lacp_tx_errors, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_tx_errors (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lacp_tx_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lacp_tx_errors() directly.

    YANG Description: Number of LACPDU transmit packet errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-tx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lacp_tx_errors must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-tx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__lacp_tx_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lacp_tx_errors(self):
    self.__lacp_tx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-tx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)


  def _get_lacp_unknown_errors(self):
    """
    Getter method for lacp_unknown_errors, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_unknown_errors (oc-yang:counter64)

    YANG Description: Number of LACPDU unknown packet errors
    """
    return self.__lacp_unknown_errors
      
  def _set_lacp_unknown_errors(self, v, load=False):
    """
    Setter method for lacp_unknown_errors, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_unknown_errors (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lacp_unknown_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lacp_unknown_errors() directly.

    YANG Description: Number of LACPDU unknown packet errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-unknown-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lacp_unknown_errors must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-unknown-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__lacp_unknown_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lacp_unknown_errors(self):
    self.__lacp_unknown_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-unknown-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)


  def _get_lacp_errors(self):
    """
    Getter method for lacp_errors, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_errors (oc-yang:counter64)

    YANG Description: Number of LACPDU illegal packet errors
    """
    return self.__lacp_errors
      
  def _set_lacp_errors(self, v, load=False):
    """
    Setter method for lacp_errors, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_errors (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lacp_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lacp_errors() directly.

    YANG Description: Number of LACPDU illegal packet errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lacp_errors must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__lacp_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lacp_errors(self):
    self.__lacp_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)


  def _get_lacp_timeout_transitions(self):
    """
    Getter method for lacp_timeout_transitions, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_timeout_transitions (oc-yang:counter64)

    YANG Description: Number of times the LACP state has transitioned
with a timeout since the time the device restarted
or the interface was brought up, whichever is most
recent. The last state change of the LACP timeout
is defined as what is reported as the operating state
to the system. The state change is both a timeout
event and when the timeout event is no longer active.
    """
    return self.__lacp_timeout_transitions
      
  def _set_lacp_timeout_transitions(self, v, load=False):
    """
    Setter method for lacp_timeout_transitions, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_timeout_transitions (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lacp_timeout_transitions is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lacp_timeout_transitions() directly.

    YANG Description: Number of times the LACP state has transitioned
with a timeout since the time the device restarted
or the interface was brought up, whichever is most
recent. The last state change of the LACP timeout
is defined as what is reported as the operating state
to the system. The state change is both a timeout
event and when the timeout event is no longer active.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-timeout-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lacp_timeout_transitions must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-timeout-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__lacp_timeout_transitions = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lacp_timeout_transitions(self):
    self.__lacp_timeout_transitions = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-timeout-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)

  lacp_in_pkts = __builtin__.property(_get_lacp_in_pkts)
  lacp_out_pkts = __builtin__.property(_get_lacp_out_pkts)
  lacp_rx_errors = __builtin__.property(_get_lacp_rx_errors)
  lacp_tx_errors = __builtin__.property(_get_lacp_tx_errors)
  lacp_unknown_errors = __builtin__.property(_get_lacp_unknown_errors)
  lacp_errors = __builtin__.property(_get_lacp_errors)
  lacp_timeout_transitions = __builtin__.property(_get_lacp_timeout_transitions)


  _pyangbind_elements = OrderedDict([('lacp_in_pkts', lacp_in_pkts), ('lacp_out_pkts', lacp_out_pkts), ('lacp_rx_errors', lacp_rx_errors), ('lacp_tx_errors', lacp_tx_errors), ('lacp_unknown_errors', lacp_unknown_errors), ('lacp_errors', lacp_errors), ('lacp_timeout_transitions', lacp_timeout_transitions), ])


class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-lacp - based on the path /lacp/interfaces/interface/members/member/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: LACP protocol counters
  """
  __slots__ = ('_path_helper', '_extmethods', '__lacp_in_pkts','__lacp_out_pkts','__lacp_rx_errors','__lacp_tx_errors','__lacp_unknown_errors','__lacp_errors','__lacp_timeout_transitions',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/lacp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__lacp_in_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-in-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    self.__lacp_out_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-out-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    self.__lacp_rx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    self.__lacp_tx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-tx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    self.__lacp_unknown_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-unknown-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    self.__lacp_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    self.__lacp_timeout_transitions = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-timeout-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['lacp', 'interfaces', 'interface', 'members', 'member', 'state', 'counters']

  def _get_lacp_in_pkts(self):
    """
    Getter method for lacp_in_pkts, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_in_pkts (oc-yang:counter64)

    YANG Description: Number of LACPDUs received
    """
    return self.__lacp_in_pkts
      
  def _set_lacp_in_pkts(self, v, load=False):
    """
    Setter method for lacp_in_pkts, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_in_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lacp_in_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lacp_in_pkts() directly.

    YANG Description: Number of LACPDUs received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-in-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lacp_in_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-in-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__lacp_in_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lacp_in_pkts(self):
    self.__lacp_in_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-in-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)


  def _get_lacp_out_pkts(self):
    """
    Getter method for lacp_out_pkts, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_out_pkts (oc-yang:counter64)

    YANG Description: Number of LACPDUs transmitted
    """
    return self.__lacp_out_pkts
      
  def _set_lacp_out_pkts(self, v, load=False):
    """
    Setter method for lacp_out_pkts, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_out_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lacp_out_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lacp_out_pkts() directly.

    YANG Description: Number of LACPDUs transmitted
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-out-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lacp_out_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-out-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__lacp_out_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lacp_out_pkts(self):
    self.__lacp_out_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-out-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)


  def _get_lacp_rx_errors(self):
    """
    Getter method for lacp_rx_errors, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_rx_errors (oc-yang:counter64)

    YANG Description: Number of LACPDU receive packet errors
    """
    return self.__lacp_rx_errors
      
  def _set_lacp_rx_errors(self, v, load=False):
    """
    Setter method for lacp_rx_errors, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_rx_errors (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lacp_rx_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lacp_rx_errors() directly.

    YANG Description: Number of LACPDU receive packet errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lacp_rx_errors must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__lacp_rx_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lacp_rx_errors(self):
    self.__lacp_rx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)


  def _get_lacp_tx_errors(self):
    """
    Getter method for lacp_tx_errors, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_tx_errors (oc-yang:counter64)

    YANG Description: Number of LACPDU transmit packet errors
    """
    return self.__lacp_tx_errors
      
  def _set_lacp_tx_errors(self, v, load=False):
    """
    Setter method for lacp_tx_errors, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_tx_errors (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lacp_tx_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lacp_tx_errors() directly.

    YANG Description: Number of LACPDU transmit packet errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-tx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lacp_tx_errors must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-tx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__lacp_tx_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lacp_tx_errors(self):
    self.__lacp_tx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-tx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)


  def _get_lacp_unknown_errors(self):
    """
    Getter method for lacp_unknown_errors, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_unknown_errors (oc-yang:counter64)

    YANG Description: Number of LACPDU unknown packet errors
    """
    return self.__lacp_unknown_errors
      
  def _set_lacp_unknown_errors(self, v, load=False):
    """
    Setter method for lacp_unknown_errors, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_unknown_errors (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lacp_unknown_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lacp_unknown_errors() directly.

    YANG Description: Number of LACPDU unknown packet errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-unknown-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lacp_unknown_errors must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-unknown-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__lacp_unknown_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lacp_unknown_errors(self):
    self.__lacp_unknown_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-unknown-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)


  def _get_lacp_errors(self):
    """
    Getter method for lacp_errors, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_errors (oc-yang:counter64)

    YANG Description: Number of LACPDU illegal packet errors
    """
    return self.__lacp_errors
      
  def _set_lacp_errors(self, v, load=False):
    """
    Setter method for lacp_errors, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_errors (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lacp_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lacp_errors() directly.

    YANG Description: Number of LACPDU illegal packet errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lacp_errors must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__lacp_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lacp_errors(self):
    self.__lacp_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)


  def _get_lacp_timeout_transitions(self):
    """
    Getter method for lacp_timeout_transitions, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_timeout_transitions (oc-yang:counter64)

    YANG Description: Number of times the LACP state has transitioned
with a timeout since the time the device restarted
or the interface was brought up, whichever is most
recent. The last state change of the LACP timeout
is defined as what is reported as the operating state
to the system. The state change is both a timeout
event and when the timeout event is no longer active.
    """
    return self.__lacp_timeout_transitions
      
  def _set_lacp_timeout_transitions(self, v, load=False):
    """
    Setter method for lacp_timeout_transitions, mapped from YANG variable /lacp/interfaces/interface/members/member/state/counters/lacp_timeout_transitions (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lacp_timeout_transitions is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lacp_timeout_transitions() directly.

    YANG Description: Number of times the LACP state has transitioned
with a timeout since the time the device restarted
or the interface was brought up, whichever is most
recent. The last state change of the LACP timeout
is defined as what is reported as the operating state
to the system. The state change is both a timeout
event and when the timeout event is no longer active.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-timeout-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lacp_timeout_transitions must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-timeout-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__lacp_timeout_transitions = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lacp_timeout_transitions(self):
    self.__lacp_timeout_transitions = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lacp-timeout-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/lacp', defining_module='openconfig-lacp', yang_type='oc-yang:counter64', is_config=False)

  lacp_in_pkts = __builtin__.property(_get_lacp_in_pkts)
  lacp_out_pkts = __builtin__.property(_get_lacp_out_pkts)
  lacp_rx_errors = __builtin__.property(_get_lacp_rx_errors)
  lacp_tx_errors = __builtin__.property(_get_lacp_tx_errors)
  lacp_unknown_errors = __builtin__.property(_get_lacp_unknown_errors)
  lacp_errors = __builtin__.property(_get_lacp_errors)
  lacp_timeout_transitions = __builtin__.property(_get_lacp_timeout_transitions)


  _pyangbind_elements = OrderedDict([('lacp_in_pkts', lacp_in_pkts), ('lacp_out_pkts', lacp_out_pkts), ('lacp_rx_errors', lacp_rx_errors), ('lacp_tx_errors', lacp_tx_errors), ('lacp_unknown_errors', lacp_unknown_errors), ('lacp_errors', lacp_errors), ('lacp_timeout_transitions', lacp_timeout_transitions), ])


