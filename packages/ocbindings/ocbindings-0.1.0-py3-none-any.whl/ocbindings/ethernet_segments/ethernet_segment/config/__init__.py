# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ethernet-segments - based on the path /ethernet-segments/ethernet-segment/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for the Ethernet Segments.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__esi_type','__esi','__redundancy_mode','__es_import_route_target','__interface','__subinterface',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/ethernet-segments'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='string', is_config=True)
    self.__esi_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'TYPE_0_OPERATOR_CONFIGURED': {'value': 0}, 'TYPE_1_LACP_BASED': {'value': 1}, 'TYPE_2_BRIDGE_PROTOCOL_BASED': {'value': 2}, 'TYPE_3_MAC_BASED': {'value': 3}, 'TYPE_4_ROUTER_ID_BASED': {'value': 4}, 'TYPE_5_AS_BASED': {'value': 5}},), default=str("TYPE_0_OPERATOR_CONFIGURED"), is_leaf=True, yang_name="esi-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='oc-evpn-types:esi-type', is_config=True)
    self.__esi = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='union', is_config=True)
    self.__redundancy_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="redundancy-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='identityref', is_config=True)
    self.__es_import_route_target = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="es-import-route-target", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='oc-yang-types:mac-address', is_config=True)
    self.__interface = YANGDynClass(base=str, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='leafref', is_config=True)
    self.__subinterface = YANGDynClass(base=str, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ethernet-segments', 'ethernet-segment', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /ethernet_segments/ethernet_segment/config/name (string)

    YANG Description: Ethernet Segment name
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /ethernet_segments/ethernet_segment/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Ethernet Segment name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='string', is_config=True)


  def _get_esi_type(self):
    """
    Getter method for esi_type, mapped from YANG variable /ethernet_segments/ethernet_segment/config/esi_type (oc-evpn-types:esi-type)

    YANG Description: ESI Type is a 1-octet field (most significant octet) that
specifies the format of the remaining 9 octets (ESI Value).
    """
    return self.__esi_type
      
  def _set_esi_type(self, v, load=False):
    """
    Setter method for esi_type, mapped from YANG variable /ethernet_segments/ethernet_segment/config/esi_type (oc-evpn-types:esi-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_esi_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_esi_type() directly.

    YANG Description: ESI Type is a 1-octet field (most significant octet) that
specifies the format of the remaining 9 octets (ESI Value).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'TYPE_0_OPERATOR_CONFIGURED': {'value': 0}, 'TYPE_1_LACP_BASED': {'value': 1}, 'TYPE_2_BRIDGE_PROTOCOL_BASED': {'value': 2}, 'TYPE_3_MAC_BASED': {'value': 3}, 'TYPE_4_ROUTER_ID_BASED': {'value': 4}, 'TYPE_5_AS_BASED': {'value': 5}},), default=str("TYPE_0_OPERATOR_CONFIGURED"), is_leaf=True, yang_name="esi-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='oc-evpn-types:esi-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """esi_type must be of a type compatible with oc-evpn-types:esi-type""",
          'defined-type': "oc-evpn-types:esi-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'TYPE_0_OPERATOR_CONFIGURED': {'value': 0}, 'TYPE_1_LACP_BASED': {'value': 1}, 'TYPE_2_BRIDGE_PROTOCOL_BASED': {'value': 2}, 'TYPE_3_MAC_BASED': {'value': 3}, 'TYPE_4_ROUTER_ID_BASED': {'value': 4}, 'TYPE_5_AS_BASED': {'value': 5}},), default=str("TYPE_0_OPERATOR_CONFIGURED"), is_leaf=True, yang_name="esi-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='oc-evpn-types:esi-type', is_config=True)""",
        })

    self.__esi_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_esi_type(self):
    self.__esi_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'TYPE_0_OPERATOR_CONFIGURED': {'value': 0}, 'TYPE_1_LACP_BASED': {'value': 1}, 'TYPE_2_BRIDGE_PROTOCOL_BASED': {'value': 2}, 'TYPE_3_MAC_BASED': {'value': 3}, 'TYPE_4_ROUTER_ID_BASED': {'value': 4}, 'TYPE_5_AS_BASED': {'value': 5}},), default=str("TYPE_0_OPERATOR_CONFIGURED"), is_leaf=True, yang_name="esi-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='oc-evpn-types:esi-type', is_config=True)


  def _get_esi(self):
    """
    Getter method for esi, mapped from YANG variable /ethernet_segments/ethernet_segment/config/esi (union)

    YANG Description: Ethernet Segment Identifier (ESI) value.
For ESI Type 0: The esi leaf value is directly configured by the operator.
For ESI Type 1: The AUTO enum must be used.
For ESI Type 2: The AUTO enum must be used.
For ESI Type 3: The directly configured or AUTO enum must be used.
For ESI Type 4: The directly configured or AUTO enum must be used.
For ESI Type 5: The directly configured or AUTO enum must be used.
    """
    return self.__esi
      
  def _set_esi(self, v, load=False):
    """
    Setter method for esi, mapped from YANG variable /ethernet_segments/ethernet_segment/config/esi (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_esi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_esi() directly.

    YANG Description: Ethernet Segment Identifier (ESI) value.
For ESI Type 0: The esi leaf value is directly configured by the operator.
For ESI Type 1: The AUTO enum must be used.
For ESI Type 2: The AUTO enum must be used.
For ESI Type 3: The directly configured or AUTO enum must be used.
For ESI Type 4: The directly configured or AUTO enum must be used.
For ESI Type 5: The directly configured or AUTO enum must be used.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """esi must be of a type compatible with union""",
          'defined-type': "openconfig-ethernet-segments:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='union', is_config=True)""",
        })

    self.__esi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_esi(self):
    self.__esi = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='union', is_config=True)


  def _get_redundancy_mode(self):
    """
    Getter method for redundancy_mode, mapped from YANG variable /ethernet_segments/ethernet_segment/config/redundancy_mode (identityref)

    YANG Description: Multihoming options for load balancing of
traffic in the Ethernet Segment.
    """
    return self.__redundancy_mode
      
  def _set_redundancy_mode(self, v, load=False):
    """
    Setter method for redundancy_mode, mapped from YANG variable /ethernet_segments/ethernet_segment/config/redundancy_mode (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_redundancy_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_redundancy_mode() directly.

    YANG Description: Multihoming options for load balancing of
traffic in the Ethernet Segment.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="redundancy-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """redundancy_mode must be of a type compatible with identityref""",
          'defined-type': "openconfig-ethernet-segments:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="redundancy-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='identityref', is_config=True)""",
        })

    self.__redundancy_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_redundancy_mode(self):
    self.__redundancy_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="redundancy-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='identityref', is_config=True)


  def _get_es_import_route_target(self):
    """
    Getter method for es_import_route_target, mapped from YANG variable /ethernet_segments/ethernet_segment/config/es_import_route_target (oc-yang-types:mac-address)

    YANG Description: Received ES routes with an ES-Import extended community set to this value
are imported into this ethernet segment.  When configured by a user, the
es-import-route-target will be used, otherwise the system automatically
derives the value used by following the procedures in RFC 7432 Section 7.6.
    """
    return self.__es_import_route_target
      
  def _set_es_import_route_target(self, v, load=False):
    """
    Setter method for es_import_route_target, mapped from YANG variable /ethernet_segments/ethernet_segment/config/es_import_route_target (oc-yang-types:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_es_import_route_target is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_es_import_route_target() directly.

    YANG Description: Received ES routes with an ES-Import extended community set to this value
are imported into this ethernet segment.  When configured by a user, the
es-import-route-target will be used, otherwise the system automatically
derives the value used by following the procedures in RFC 7432 Section 7.6.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="es-import-route-target", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='oc-yang-types:mac-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """es_import_route_target must be of a type compatible with oc-yang-types:mac-address""",
          'defined-type': "oc-yang-types:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="es-import-route-target", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='oc-yang-types:mac-address', is_config=True)""",
        })

    self.__es_import_route_target = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_es_import_route_target(self):
    self.__es_import_route_target = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="es-import-route-target", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='oc-yang-types:mac-address', is_config=True)


  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /ethernet_segments/ethernet_segment/config/interface (leafref)

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /ethernet_segments/ethernet_segment/config/interface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='leafref', is_config=True)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=str, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='leafref', is_config=True)


  def _get_subinterface(self):
    """
    Getter method for subinterface, mapped from YANG variable /ethernet_segments/ethernet_segment/config/subinterface (leafref)

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is required, this leaf should not be set.
    """
    return self.__subinterface
      
  def _set_subinterface(self, v, load=False):
    """
    Setter method for subinterface, mapped from YANG variable /ethernet_segments/ethernet_segment/config/subinterface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subinterface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subinterface() directly.

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is required, this leaf should not be set.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subinterface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='leafref', is_config=True)""",
        })

    self.__subinterface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subinterface(self):
    self.__subinterface = YANGDynClass(base=str, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  esi_type = __builtin__.property(_get_esi_type, _set_esi_type)
  esi = __builtin__.property(_get_esi, _set_esi)
  redundancy_mode = __builtin__.property(_get_redundancy_mode, _set_redundancy_mode)
  es_import_route_target = __builtin__.property(_get_es_import_route_target, _set_es_import_route_target)
  interface = __builtin__.property(_get_interface, _set_interface)
  subinterface = __builtin__.property(_get_subinterface, _set_subinterface)


  _pyangbind_elements = OrderedDict([('name', name), ('esi_type', esi_type), ('esi', esi), ('redundancy_mode', redundancy_mode), ('es_import_route_target', es_import_route_target), ('interface', interface), ('subinterface', subinterface), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ethernet-segments - based on the path /ethernet-segments/ethernet-segment/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for the Ethernet Segments.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__esi_type','__esi','__redundancy_mode','__es_import_route_target','__interface','__subinterface',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/ethernet-segments'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='string', is_config=True)
    self.__esi_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'TYPE_0_OPERATOR_CONFIGURED': {'value': 0}, 'TYPE_1_LACP_BASED': {'value': 1}, 'TYPE_2_BRIDGE_PROTOCOL_BASED': {'value': 2}, 'TYPE_3_MAC_BASED': {'value': 3}, 'TYPE_4_ROUTER_ID_BASED': {'value': 4}, 'TYPE_5_AS_BASED': {'value': 5}},), default=str("TYPE_0_OPERATOR_CONFIGURED"), is_leaf=True, yang_name="esi-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='oc-evpn-types:esi-type', is_config=True)
    self.__esi = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='union', is_config=True)
    self.__redundancy_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="redundancy-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='identityref', is_config=True)
    self.__es_import_route_target = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="es-import-route-target", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='oc-yang-types:mac-address', is_config=True)
    self.__interface = YANGDynClass(base=str, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='leafref', is_config=True)
    self.__subinterface = YANGDynClass(base=str, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ethernet-segments', 'ethernet-segment', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /ethernet_segments/ethernet_segment/config/name (string)

    YANG Description: Ethernet Segment name
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /ethernet_segments/ethernet_segment/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Ethernet Segment name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='string', is_config=True)


  def _get_esi_type(self):
    """
    Getter method for esi_type, mapped from YANG variable /ethernet_segments/ethernet_segment/config/esi_type (oc-evpn-types:esi-type)

    YANG Description: ESI Type is a 1-octet field (most significant octet) that
specifies the format of the remaining 9 octets (ESI Value).
    """
    return self.__esi_type
      
  def _set_esi_type(self, v, load=False):
    """
    Setter method for esi_type, mapped from YANG variable /ethernet_segments/ethernet_segment/config/esi_type (oc-evpn-types:esi-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_esi_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_esi_type() directly.

    YANG Description: ESI Type is a 1-octet field (most significant octet) that
specifies the format of the remaining 9 octets (ESI Value).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'TYPE_0_OPERATOR_CONFIGURED': {'value': 0}, 'TYPE_1_LACP_BASED': {'value': 1}, 'TYPE_2_BRIDGE_PROTOCOL_BASED': {'value': 2}, 'TYPE_3_MAC_BASED': {'value': 3}, 'TYPE_4_ROUTER_ID_BASED': {'value': 4}, 'TYPE_5_AS_BASED': {'value': 5}},), default=str("TYPE_0_OPERATOR_CONFIGURED"), is_leaf=True, yang_name="esi-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='oc-evpn-types:esi-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """esi_type must be of a type compatible with oc-evpn-types:esi-type""",
          'defined-type': "oc-evpn-types:esi-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'TYPE_0_OPERATOR_CONFIGURED': {'value': 0}, 'TYPE_1_LACP_BASED': {'value': 1}, 'TYPE_2_BRIDGE_PROTOCOL_BASED': {'value': 2}, 'TYPE_3_MAC_BASED': {'value': 3}, 'TYPE_4_ROUTER_ID_BASED': {'value': 4}, 'TYPE_5_AS_BASED': {'value': 5}},), default=str("TYPE_0_OPERATOR_CONFIGURED"), is_leaf=True, yang_name="esi-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='oc-evpn-types:esi-type', is_config=True)""",
        })

    self.__esi_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_esi_type(self):
    self.__esi_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'TYPE_0_OPERATOR_CONFIGURED': {'value': 0}, 'TYPE_1_LACP_BASED': {'value': 1}, 'TYPE_2_BRIDGE_PROTOCOL_BASED': {'value': 2}, 'TYPE_3_MAC_BASED': {'value': 3}, 'TYPE_4_ROUTER_ID_BASED': {'value': 4}, 'TYPE_5_AS_BASED': {'value': 5}},), default=str("TYPE_0_OPERATOR_CONFIGURED"), is_leaf=True, yang_name="esi-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='oc-evpn-types:esi-type', is_config=True)


  def _get_esi(self):
    """
    Getter method for esi, mapped from YANG variable /ethernet_segments/ethernet_segment/config/esi (union)

    YANG Description: Ethernet Segment Identifier (ESI) value.
For ESI Type 0: The esi leaf value is directly configured by the operator.
For ESI Type 1: The AUTO enum must be used.
For ESI Type 2: The AUTO enum must be used.
For ESI Type 3: The directly configured or AUTO enum must be used.
For ESI Type 4: The directly configured or AUTO enum must be used.
For ESI Type 5: The directly configured or AUTO enum must be used.
    """
    return self.__esi
      
  def _set_esi(self, v, load=False):
    """
    Setter method for esi, mapped from YANG variable /ethernet_segments/ethernet_segment/config/esi (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_esi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_esi() directly.

    YANG Description: Ethernet Segment Identifier (ESI) value.
For ESI Type 0: The esi leaf value is directly configured by the operator.
For ESI Type 1: The AUTO enum must be used.
For ESI Type 2: The AUTO enum must be used.
For ESI Type 3: The directly configured or AUTO enum must be used.
For ESI Type 4: The directly configured or AUTO enum must be used.
For ESI Type 5: The directly configured or AUTO enum must be used.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """esi must be of a type compatible with union""",
          'defined-type': "openconfig-ethernet-segments:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='union', is_config=True)""",
        })

    self.__esi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_esi(self):
    self.__esi = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['20']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'AUTO': {}},),], is_leaf=True, yang_name="esi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='union', is_config=True)


  def _get_redundancy_mode(self):
    """
    Getter method for redundancy_mode, mapped from YANG variable /ethernet_segments/ethernet_segment/config/redundancy_mode (identityref)

    YANG Description: Multihoming options for load balancing of
traffic in the Ethernet Segment.
    """
    return self.__redundancy_mode
      
  def _set_redundancy_mode(self, v, load=False):
    """
    Setter method for redundancy_mode, mapped from YANG variable /ethernet_segments/ethernet_segment/config/redundancy_mode (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_redundancy_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_redundancy_mode() directly.

    YANG Description: Multihoming options for load balancing of
traffic in the Ethernet Segment.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="redundancy-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """redundancy_mode must be of a type compatible with identityref""",
          'defined-type': "openconfig-ethernet-segments:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="redundancy-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='identityref', is_config=True)""",
        })

    self.__redundancy_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_redundancy_mode(self):
    self.__redundancy_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:SINGLE_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'openconfig-evpn-types:ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}, 'oc-evpn-types:ALL_ACTIVE': {'@module': 'openconfig-evpn-types', '@namespace': 'http://openconfig.net/yang/evpn-types'}},), is_leaf=True, yang_name="redundancy-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='identityref', is_config=True)


  def _get_es_import_route_target(self):
    """
    Getter method for es_import_route_target, mapped from YANG variable /ethernet_segments/ethernet_segment/config/es_import_route_target (oc-yang-types:mac-address)

    YANG Description: Received ES routes with an ES-Import extended community set to this value
are imported into this ethernet segment.  When configured by a user, the
es-import-route-target will be used, otherwise the system automatically
derives the value used by following the procedures in RFC 7432 Section 7.6.
    """
    return self.__es_import_route_target
      
  def _set_es_import_route_target(self, v, load=False):
    """
    Setter method for es_import_route_target, mapped from YANG variable /ethernet_segments/ethernet_segment/config/es_import_route_target (oc-yang-types:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_es_import_route_target is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_es_import_route_target() directly.

    YANG Description: Received ES routes with an ES-Import extended community set to this value
are imported into this ethernet segment.  When configured by a user, the
es-import-route-target will be used, otherwise the system automatically
derives the value used by following the procedures in RFC 7432 Section 7.6.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="es-import-route-target", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='oc-yang-types:mac-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """es_import_route_target must be of a type compatible with oc-yang-types:mac-address""",
          'defined-type': "oc-yang-types:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="es-import-route-target", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='oc-yang-types:mac-address', is_config=True)""",
        })

    self.__es_import_route_target = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_es_import_route_target(self):
    self.__es_import_route_target = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="es-import-route-target", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='oc-yang-types:mac-address', is_config=True)


  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /ethernet_segments/ethernet_segment/config/interface (leafref)

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /ethernet_segments/ethernet_segment/config/interface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='leafref', is_config=True)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=str, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='leafref', is_config=True)


  def _get_subinterface(self):
    """
    Getter method for subinterface, mapped from YANG variable /ethernet_segments/ethernet_segment/config/subinterface (leafref)

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is required, this leaf should not be set.
    """
    return self.__subinterface
      
  def _set_subinterface(self, v, load=False):
    """
    Setter method for subinterface, mapped from YANG variable /ethernet_segments/ethernet_segment/config/subinterface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subinterface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subinterface() directly.

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is required, this leaf should not be set.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subinterface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='leafref', is_config=True)""",
        })

    self.__subinterface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subinterface(self):
    self.__subinterface = YANGDynClass(base=str, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ethernet-segments', defining_module='openconfig-ethernet-segments', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  esi_type = __builtin__.property(_get_esi_type, _set_esi_type)
  esi = __builtin__.property(_get_esi, _set_esi)
  redundancy_mode = __builtin__.property(_get_redundancy_mode, _set_redundancy_mode)
  es_import_route_target = __builtin__.property(_get_es_import_route_target, _set_es_import_route_target)
  interface = __builtin__.property(_get_interface, _set_interface)
  subinterface = __builtin__.property(_get_subinterface, _set_subinterface)


  _pyangbind_elements = OrderedDict([('name', name), ('esi_type', esi_type), ('esi', esi), ('redundancy_mode', redundancy_mode), ('es_import_route_target', es_import_route_target), ('interface', interface), ('subinterface', subinterface), ])


