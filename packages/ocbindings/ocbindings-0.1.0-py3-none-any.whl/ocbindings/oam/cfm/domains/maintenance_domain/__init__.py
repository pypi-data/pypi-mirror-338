# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import config
from . import state
from . import maintenance_associations
class maintenance_domain(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/domains/maintenance-domain. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A Maintenance Domain managed object is required in order to create
an MA with a MAID that includes that Maintenance Domainâ€™s Name. From
this Maintenance Domain managed object, all Maintenance
Association managed objects associated with that Maintenance
Domain managed object can be accessed, and thus controlled.
  """
  __slots__ = ('_path_helper', '_extmethods', '__md_id','__config','__state','__maintenance_associations',)

  _yang_name = 'maintenance-domain'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__md_id = YANGDynClass(base=str, is_leaf=True, yang_name="md-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)
    self.__maintenance_associations = YANGDynClass(base=maintenance_associations.maintenance_associations, is_container='container', yang_name="maintenance-associations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'domains', 'maintenance-domain']

  def _get_md_id(self):
    """
    Getter method for md_id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/md_id (leafref)

    YANG Description: A unique maintenance domain name identifying the domain
    """
    return self.__md_id
      
  def _set_md_id(self, v, load=False):
    """
    Setter method for md_id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/md_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_md_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_md_id() directly.

    YANG Description: A unique maintenance domain name identifying the domain
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="md-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """md_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="md-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='leafref', is_config=True)""",
        })

    self.__md_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_md_id(self):
    self.__md_id = YANGDynClass(base=str, is_leaf=True, yang_name="md-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config (container)

    YANG Description: Configuration data for a maintenance domain.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for a maintenance domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/state (container)

    YANG Description: Operational data for a maintenance domain.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational data for a maintenance domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)


  def _get_maintenance_associations(self):
    """
    Getter method for maintenance_associations, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations (container)

    YANG Description: Collection of maintenance associations within a
maintenance domain.Provides configuration and operational data
for the Maintenance Associations. A Maintenance Association is a set
of MEPs, each configured with the same MAID and MD level,
established to verify the integrity of a single service
instance. A Maintenance Association can be thought of as a
full mesh of Maintenance Entities among a set of MEPs so
configured.
    """
    return self.__maintenance_associations
      
  def _set_maintenance_associations(self, v, load=False):
    """
    Setter method for maintenance_associations, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maintenance_associations is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maintenance_associations() directly.

    YANG Description: Collection of maintenance associations within a
maintenance domain.Provides configuration and operational data
for the Maintenance Associations. A Maintenance Association is a set
of MEPs, each configured with the same MAID and MD level,
established to verify the integrity of a single service
instance. A Maintenance Association can be thought of as a
full mesh of Maintenance Entities among a set of MEPs so
configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=maintenance_associations.maintenance_associations, is_container='container', yang_name="maintenance-associations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maintenance_associations must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=maintenance_associations.maintenance_associations, is_container='container', yang_name="maintenance-associations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)""",
        })

    self.__maintenance_associations = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maintenance_associations(self):
    self.__maintenance_associations = YANGDynClass(base=maintenance_associations.maintenance_associations, is_container='container', yang_name="maintenance-associations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)

  md_id = __builtin__.property(_get_md_id, _set_md_id)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  maintenance_associations = __builtin__.property(_get_maintenance_associations, _set_maintenance_associations)


  _pyangbind_elements = OrderedDict([('md_id', md_id), ('config', config), ('state', state), ('maintenance_associations', maintenance_associations), ])


from . import config
from . import state
from . import maintenance_associations
class maintenance_domain(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/domains/maintenance-domain. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A Maintenance Domain managed object is required in order to create
an MA with a MAID that includes that Maintenance Domainâ€™s Name. From
this Maintenance Domain managed object, all Maintenance
Association managed objects associated with that Maintenance
Domain managed object can be accessed, and thus controlled.
  """
  __slots__ = ('_path_helper', '_extmethods', '__md_id','__config','__state','__maintenance_associations',)

  _yang_name = 'maintenance-domain'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__md_id = YANGDynClass(base=str, is_leaf=True, yang_name="md-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)
    self.__maintenance_associations = YANGDynClass(base=maintenance_associations.maintenance_associations, is_container='container', yang_name="maintenance-associations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'domains', 'maintenance-domain']

  def _get_md_id(self):
    """
    Getter method for md_id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/md_id (leafref)

    YANG Description: A unique maintenance domain name identifying the domain
    """
    return self.__md_id
      
  def _set_md_id(self, v, load=False):
    """
    Setter method for md_id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/md_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_md_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_md_id() directly.

    YANG Description: A unique maintenance domain name identifying the domain
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="md-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """md_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="md-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='leafref', is_config=True)""",
        })

    self.__md_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_md_id(self):
    self.__md_id = YANGDynClass(base=str, is_leaf=True, yang_name="md-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config (container)

    YANG Description: Configuration data for a maintenance domain.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for a maintenance domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/state (container)

    YANG Description: Operational data for a maintenance domain.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /oam/cfm/domains/maintenance_domain/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational data for a maintenance domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)


  def _get_maintenance_associations(self):
    """
    Getter method for maintenance_associations, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations (container)

    YANG Description: Collection of maintenance associations within a
maintenance domain.Provides configuration and operational data
for the Maintenance Associations. A Maintenance Association is a set
of MEPs, each configured with the same MAID and MD level,
established to verify the integrity of a single service
instance. A Maintenance Association can be thought of as a
full mesh of Maintenance Entities among a set of MEPs so
configured.
    """
    return self.__maintenance_associations
      
  def _set_maintenance_associations(self, v, load=False):
    """
    Setter method for maintenance_associations, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maintenance_associations is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maintenance_associations() directly.

    YANG Description: Collection of maintenance associations within a
maintenance domain.Provides configuration and operational data
for the Maintenance Associations. A Maintenance Association is a set
of MEPs, each configured with the same MAID and MD level,
established to verify the integrity of a single service
instance. A Maintenance Association can be thought of as a
full mesh of Maintenance Entities among a set of MEPs so
configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=maintenance_associations.maintenance_associations, is_container='container', yang_name="maintenance-associations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maintenance_associations must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=maintenance_associations.maintenance_associations, is_container='container', yang_name="maintenance-associations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)""",
        })

    self.__maintenance_associations = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maintenance_associations(self):
    self.__maintenance_associations = YANGDynClass(base=maintenance_associations.maintenance_associations, is_container='container', yang_name="maintenance-associations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=True)

  md_id = __builtin__.property(_get_md_id, _set_md_id)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  maintenance_associations = __builtin__.property(_get_maintenance_associations, _set_maintenance_associations)


  _pyangbind_elements = OrderedDict([('md_id', md_id), ('config', config), ('state', state), ('maintenance_associations', maintenance_associations), ])


