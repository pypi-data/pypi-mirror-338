# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import counters
class delay_measurement_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Delay measurement state.
  """
  __slots__ = ('_path_helper', '_extmethods', '__frame_delay_two_way_min','__frame_delay_two_way_max','__frame_delay_two_way_average','__frame_delay_two_way_stddev','__counters',)

  _yang_name = 'delay-measurement-state'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__frame_delay_two_way_min = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__frame_delay_two_way_max = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__frame_delay_two_way_average = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-average", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__frame_delay_two_way_stddev = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-stddev", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'domains', 'maintenance-domain', 'maintenance-associations', 'maintenance-association', 'mep-endpoints', 'mep-endpoint', 'pm-profiles', 'pm-profile', 'state', 'delay-measurement-state']

  def _get_frame_delay_two_way_min(self):
    """
    Getter method for frame_delay_two_way_min, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/frame_delay_two_way_min (uint32)

    YANG Description: This object contains the minimum two-way frame delay calculated by this
MEP for this Measurement Interval.

This object is undefined if measurement-type is dm1-transmitted
or dm1-received.
    """
    return self.__frame_delay_two_way_min
      
  def _set_frame_delay_two_way_min(self, v, load=False):
    """
    Setter method for frame_delay_two_way_min, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/frame_delay_two_way_min (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frame_delay_two_way_min is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frame_delay_two_way_min() directly.

    YANG Description: This object contains the minimum two-way frame delay calculated by this
MEP for this Measurement Interval.

This object is undefined if measurement-type is dm1-transmitted
or dm1-received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frame_delay_two_way_min must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__frame_delay_two_way_min = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frame_delay_two_way_min(self):
    self.__frame_delay_two_way_min = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_frame_delay_two_way_max(self):
    """
    Getter method for frame_delay_two_way_max, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/frame_delay_two_way_max (uint32)

    YANG Description: This object contains the maximum two-way frame delay calculated by this
MEP for this Measurement Interval.

This object is undefined if measurement-type is dm1DmTx or
dm1-received.
    """
    return self.__frame_delay_two_way_max
      
  def _set_frame_delay_two_way_max(self, v, load=False):
    """
    Setter method for frame_delay_two_way_max, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/frame_delay_two_way_max (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frame_delay_two_way_max is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frame_delay_two_way_max() directly.

    YANG Description: This object contains the maximum two-way frame delay calculated by this
MEP for this Measurement Interval.

This object is undefined if measurement-type is dm1DmTx or
dm1-received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frame_delay_two_way_max must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__frame_delay_two_way_max = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frame_delay_two_way_max(self):
    self.__frame_delay_two_way_max = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_frame_delay_two_way_average(self):
    """
    Getter method for frame_delay_two_way_average, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/frame_delay_two_way_average (uint32)

    YANG Description: This object contains the average two-way frame delay calculated by this
MEP for this Measurement Interval.

This object is undefined if measurement-type is dm1-transmitted or
dm1-received.
    """
    return self.__frame_delay_two_way_average
      
  def _set_frame_delay_two_way_average(self, v, load=False):
    """
    Setter method for frame_delay_two_way_average, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/frame_delay_two_way_average (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frame_delay_two_way_average is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frame_delay_two_way_average() directly.

    YANG Description: This object contains the average two-way frame delay calculated by this
MEP for this Measurement Interval.

This object is undefined if measurement-type is dm1-transmitted or
dm1-received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-average", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frame_delay_two_way_average must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-average", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__frame_delay_two_way_average = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frame_delay_two_way_average(self):
    self.__frame_delay_two_way_average = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-average", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_frame_delay_two_way_stddev(self):
    """
    Getter method for frame_delay_two_way_stddev, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/frame_delay_two_way_stddev (uint32)

    YANG Description: This object contains the standard deviation of two-way frame delay calculated by this
MEP for this Measurement Interval.

This object is undefined if measurement-type is dm1DmTx or
dm1-received.
    """
    return self.__frame_delay_two_way_stddev
      
  def _set_frame_delay_two_way_stddev(self, v, load=False):
    """
    Setter method for frame_delay_two_way_stddev, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/frame_delay_two_way_stddev (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frame_delay_two_way_stddev is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frame_delay_two_way_stddev() directly.

    YANG Description: This object contains the standard deviation of two-way frame delay calculated by this
MEP for this Measurement Interval.

This object is undefined if measurement-type is dm1DmTx or
dm1-received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-stddev", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frame_delay_two_way_stddev must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-stddev", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__frame_delay_two_way_stddev = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frame_delay_two_way_stddev(self):
    self.__frame_delay_two_way_stddev = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-stddev", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_counters(self):
    """
    Getter method for counters, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/counters (container)

    YANG Description: A collection of delay-measurement-related statistics objects.
    """
    return self.__counters
      
  def _set_counters(self, v, load=False):
    """
    Setter method for counters, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/counters (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_counters is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_counters() directly.

    YANG Description: A collection of delay-measurement-related statistics objects.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """counters must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)""",
        })

    self.__counters = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_counters(self):
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)

  frame_delay_two_way_min = __builtin__.property(_get_frame_delay_two_way_min)
  frame_delay_two_way_max = __builtin__.property(_get_frame_delay_two_way_max)
  frame_delay_two_way_average = __builtin__.property(_get_frame_delay_two_way_average)
  frame_delay_two_way_stddev = __builtin__.property(_get_frame_delay_two_way_stddev)
  counters = __builtin__.property(_get_counters)


  _pyangbind_elements = OrderedDict([('frame_delay_two_way_min', frame_delay_two_way_min), ('frame_delay_two_way_max', frame_delay_two_way_max), ('frame_delay_two_way_average', frame_delay_two_way_average), ('frame_delay_two_way_stddev', frame_delay_two_way_stddev), ('counters', counters), ])


from . import counters
class delay_measurement_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/pm-profiles/pm-profile/state/delay-measurement-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Delay measurement state.
  """
  __slots__ = ('_path_helper', '_extmethods', '__frame_delay_two_way_min','__frame_delay_two_way_max','__frame_delay_two_way_average','__frame_delay_two_way_stddev','__counters',)

  _yang_name = 'delay-measurement-state'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__frame_delay_two_way_min = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__frame_delay_two_way_max = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__frame_delay_two_way_average = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-average", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__frame_delay_two_way_stddev = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-stddev", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'domains', 'maintenance-domain', 'maintenance-associations', 'maintenance-association', 'mep-endpoints', 'mep-endpoint', 'pm-profiles', 'pm-profile', 'state', 'delay-measurement-state']

  def _get_frame_delay_two_way_min(self):
    """
    Getter method for frame_delay_two_way_min, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/frame_delay_two_way_min (uint32)

    YANG Description: This object contains the minimum two-way frame delay calculated by this
MEP for this Measurement Interval.

This object is undefined if measurement-type is dm1-transmitted
or dm1-received.
    """
    return self.__frame_delay_two_way_min
      
  def _set_frame_delay_two_way_min(self, v, load=False):
    """
    Setter method for frame_delay_two_way_min, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/frame_delay_two_way_min (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frame_delay_two_way_min is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frame_delay_two_way_min() directly.

    YANG Description: This object contains the minimum two-way frame delay calculated by this
MEP for this Measurement Interval.

This object is undefined if measurement-type is dm1-transmitted
or dm1-received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frame_delay_two_way_min must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__frame_delay_two_way_min = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frame_delay_two_way_min(self):
    self.__frame_delay_two_way_min = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_frame_delay_two_way_max(self):
    """
    Getter method for frame_delay_two_way_max, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/frame_delay_two_way_max (uint32)

    YANG Description: This object contains the maximum two-way frame delay calculated by this
MEP for this Measurement Interval.

This object is undefined if measurement-type is dm1DmTx or
dm1-received.
    """
    return self.__frame_delay_two_way_max
      
  def _set_frame_delay_two_way_max(self, v, load=False):
    """
    Setter method for frame_delay_two_way_max, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/frame_delay_two_way_max (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frame_delay_two_way_max is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frame_delay_two_way_max() directly.

    YANG Description: This object contains the maximum two-way frame delay calculated by this
MEP for this Measurement Interval.

This object is undefined if measurement-type is dm1DmTx or
dm1-received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frame_delay_two_way_max must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__frame_delay_two_way_max = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frame_delay_two_way_max(self):
    self.__frame_delay_two_way_max = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_frame_delay_two_way_average(self):
    """
    Getter method for frame_delay_two_way_average, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/frame_delay_two_way_average (uint32)

    YANG Description: This object contains the average two-way frame delay calculated by this
MEP for this Measurement Interval.

This object is undefined if measurement-type is dm1-transmitted or
dm1-received.
    """
    return self.__frame_delay_two_way_average
      
  def _set_frame_delay_two_way_average(self, v, load=False):
    """
    Setter method for frame_delay_two_way_average, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/frame_delay_two_way_average (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frame_delay_two_way_average is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frame_delay_two_way_average() directly.

    YANG Description: This object contains the average two-way frame delay calculated by this
MEP for this Measurement Interval.

This object is undefined if measurement-type is dm1-transmitted or
dm1-received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-average", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frame_delay_two_way_average must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-average", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__frame_delay_two_way_average = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frame_delay_two_way_average(self):
    self.__frame_delay_two_way_average = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-average", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_frame_delay_two_way_stddev(self):
    """
    Getter method for frame_delay_two_way_stddev, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/frame_delay_two_way_stddev (uint32)

    YANG Description: This object contains the standard deviation of two-way frame delay calculated by this
MEP for this Measurement Interval.

This object is undefined if measurement-type is dm1DmTx or
dm1-received.
    """
    return self.__frame_delay_two_way_stddev
      
  def _set_frame_delay_two_way_stddev(self, v, load=False):
    """
    Setter method for frame_delay_two_way_stddev, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/frame_delay_two_way_stddev (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frame_delay_two_way_stddev is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frame_delay_two_way_stddev() directly.

    YANG Description: This object contains the standard deviation of two-way frame delay calculated by this
MEP for this Measurement Interval.

This object is undefined if measurement-type is dm1DmTx or
dm1-received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-stddev", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frame_delay_two_way_stddev must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-stddev", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__frame_delay_two_way_stddev = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frame_delay_two_way_stddev(self):
    self.__frame_delay_two_way_stddev = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frame-delay-two-way-stddev", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_counters(self):
    """
    Getter method for counters, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/counters (container)

    YANG Description: A collection of delay-measurement-related statistics objects.
    """
    return self.__counters
      
  def _set_counters(self, v, load=False):
    """
    Setter method for counters, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/pm_profiles/pm_profile/state/delay_measurement_state/counters (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_counters is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_counters() directly.

    YANG Description: A collection of delay-measurement-related statistics objects.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """counters must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)""",
        })

    self.__counters = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_counters(self):
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)

  frame_delay_two_way_min = __builtin__.property(_get_frame_delay_two_way_min)
  frame_delay_two_way_max = __builtin__.property(_get_frame_delay_two_way_max)
  frame_delay_two_way_average = __builtin__.property(_get_frame_delay_two_way_average)
  frame_delay_two_way_stddev = __builtin__.property(_get_frame_delay_two_way_stddev)
  counters = __builtin__.property(_get_counters)


  _pyangbind_elements = OrderedDict([('frame_delay_two_way_min', frame_delay_two_way_min), ('frame_delay_two_way_max', frame_delay_two_way_max), ('frame_delay_two_way_average', frame_delay_two_way_average), ('frame_delay_two_way_stddev', frame_delay_two_way_stddev), ('counters', counters), ])


