# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/domains/maintenance-domain/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for a maintenance domain.
  """
  __slots__ = ('_path_helper', '_extmethods', '__md_id','__level','__md_name_type','__none','__dns_like_name','__address','__unsigned_int','__char_string',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__md_id = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-zA-Z\\-_.]*', 'length': ['1..255']}), is_leaf=True, yang_name="md-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:name-key-type', is_config=True)
    self.__level = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..7']}), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint8', is_config=True)
    self.__md_name_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NONE': {}, 'DOMAIN_NAME': {}, 'MAC_ADDRESS_AND_UINT': {}, 'CHARACTER_STRING': {}},), is_leaf=True, yang_name="md-name-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    self.__none = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="none", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=True)
    self.__dns_like_name = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'length': ['1..43']}), is_leaf=True, yang_name="dns-like-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)
    self.__address = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:mac-address', is_config=True)
    self.__unsigned_int = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="unsigned-int", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    self.__char_string = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[ -~]*', 'length': ['1..43']}), is_leaf=True, yang_name="char-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'domains', 'maintenance-domain', 'config']

  def _get_md_id(self):
    """
    Getter method for md_id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/md_id (oc-cfm-types:name-key-type)

    YANG Description: The unique identifier for a Maintenance Domain.
    """
    return self.__md_id
      
  def _set_md_id(self, v, load=False):
    """
    Setter method for md_id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/md_id (oc-cfm-types:name-key-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_md_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_md_id() directly.

    YANG Description: The unique identifier for a Maintenance Domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-zA-Z\\-_.]*', 'length': ['1..255']}), is_leaf=True, yang_name="md-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:name-key-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """md_id must be of a type compatible with oc-cfm-types:name-key-type""",
          'defined-type': "oc-cfm-types:name-key-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-zA-Z\\-_.]*', 'length': ['1..255']}), is_leaf=True, yang_name="md-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:name-key-type', is_config=True)""",
        })

    self.__md_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_md_id(self):
    self.__md_id = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-zA-Z\\-_.]*', 'length': ['1..255']}), is_leaf=True, yang_name="md-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:name-key-type', is_config=True)


  def _get_level(self):
    """
    Getter method for level, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/level (uint8)

    YANG Description: Level of the maintenance domain.
    """
    return self.__level
      
  def _set_level(self, v, load=False):
    """
    Setter method for level, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/level (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_level() directly.

    YANG Description: Level of the maintenance domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..7']}), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """level must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..7']}), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint8', is_config=True)""",
        })

    self.__level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_level(self):
    self.__level = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..7']}), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint8', is_config=True)


  def _get_md_name_type(self):
    """
    Getter method for md_name_type, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/md_name_type (enumeration)

    YANG Description: Type discriminator for the value  described in the md 'name' leaf.
    """
    return self.__md_name_type
      
  def _set_md_name_type(self, v, load=False):
    """
    Setter method for md_name_type, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/md_name_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_md_name_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_md_name_type() directly.

    YANG Description: Type discriminator for the value  described in the md 'name' leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NONE': {}, 'DOMAIN_NAME': {}, 'MAC_ADDRESS_AND_UINT': {}, 'CHARACTER_STRING': {}},), is_leaf=True, yang_name="md-name-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """md_name_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-oam-cfm:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NONE': {}, 'DOMAIN_NAME': {}, 'MAC_ADDRESS_AND_UINT': {}, 'CHARACTER_STRING': {}},), is_leaf=True, yang_name="md-name-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)""",
        })

    self.__md_name_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_md_name_type(self):
    self.__md_name_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NONE': {}, 'DOMAIN_NAME': {}, 'MAC_ADDRESS_AND_UINT': {}, 'CHARACTER_STRING': {}},), is_leaf=True, yang_name="md-name-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)


  def _get_none(self):
    """
    Getter method for none, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/none (boolean)

    YANG Description: No format specified, usually because there is not a
Maintenance Domain Name. The Maintenance Domain name
inserted in CFM protocol messages will be a zero length
OCTET string.
    """
    return self.__none
      
  def _set_none(self, v, load=False):
    """
    Setter method for none, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/none (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_none is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_none() directly.

    YANG Description: No format specified, usually because there is not a
Maintenance Domain Name. The Maintenance Domain name
inserted in CFM protocol messages will be a zero length
OCTET string.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="none", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """none must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="none", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=True)""",
        })

    self.__none = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_none(self):
    self.__none = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="none", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=True)


  def _get_dns_like_name(self):
    """
    Getter method for dns_like_name, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/dns_like_name (string)

    YANG Description: Domain name like string, globally unique text string
 derived from a DNS name.
    """
    return self.__dns_like_name
      
  def _set_dns_like_name(self, v, load=False):
    """
    Setter method for dns_like_name, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/dns_like_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dns_like_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dns_like_name() directly.

    YANG Description: Domain name like string, globally unique text string
 derived from a DNS name.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'length': ['1..43']}), is_leaf=True, yang_name="dns-like-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dns_like_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'length': ['1..43']}), is_leaf=True, yang_name="dns-like-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)""",
        })

    self.__dns_like_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dns_like_name(self):
    self.__dns_like_name = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'length': ['1..43']}), is_leaf=True, yang_name="dns-like-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)


  def _get_address(self):
    """
    Getter method for address, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/address (oc-yang:mac-address)

    YANG Description: The MAC address.
    """
    return self.__address
      
  def _set_address(self, v, load=False):
    """
    Setter method for address, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/address (oc-yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_address() directly.

    YANG Description: The MAC address.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:mac-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """address must be of a type compatible with oc-yang:mac-address""",
          'defined-type': "oc-yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:mac-address', is_config=True)""",
        })

    self.__address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_address(self):
    self.__address = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:mac-address', is_config=True)


  def _get_unsigned_int(self):
    """
    Getter method for unsigned_int, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/unsigned_int (uint16)

    YANG Description: The additional 2-octet (unsigned) integer.
    """
    return self.__unsigned_int
      
  def _set_unsigned_int(self, v, load=False):
    """
    Setter method for unsigned_int, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/unsigned_int (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unsigned_int is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unsigned_int() directly.

    YANG Description: The additional 2-octet (unsigned) integer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="unsigned-int", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unsigned_int must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="unsigned-int", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)""",
        })

    self.__unsigned_int = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unsigned_int(self):
    self.__unsigned_int = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="unsigned-int", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)


  def _get_char_string(self):
    """
    Getter method for char_string, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/char_string (string)

    YANG Description: The character string name of the Maintenance Domain.
    """
    return self.__char_string
      
  def _set_char_string(self, v, load=False):
    """
    Setter method for char_string, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/char_string (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_char_string is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_char_string() directly.

    YANG Description: The character string name of the Maintenance Domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[ -~]*', 'length': ['1..43']}), is_leaf=True, yang_name="char-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """char_string must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[ -~]*', 'length': ['1..43']}), is_leaf=True, yang_name="char-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)""",
        })

    self.__char_string = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_char_string(self):
    self.__char_string = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[ -~]*', 'length': ['1..43']}), is_leaf=True, yang_name="char-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)

  md_id = __builtin__.property(_get_md_id, _set_md_id)
  level = __builtin__.property(_get_level, _set_level)
  md_name_type = __builtin__.property(_get_md_name_type, _set_md_name_type)
  none = __builtin__.property(_get_none, _set_none)
  dns_like_name = __builtin__.property(_get_dns_like_name, _set_dns_like_name)
  address = __builtin__.property(_get_address, _set_address)
  unsigned_int = __builtin__.property(_get_unsigned_int, _set_unsigned_int)
  char_string = __builtin__.property(_get_char_string, _set_char_string)


  _pyangbind_elements = OrderedDict([('md_id', md_id), ('level', level), ('md_name_type', md_name_type), ('none', none), ('dns_like_name', dns_like_name), ('address', address), ('unsigned_int', unsigned_int), ('char_string', char_string), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/domains/maintenance-domain/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for a maintenance domain.
  """
  __slots__ = ('_path_helper', '_extmethods', '__md_id','__level','__md_name_type','__none','__dns_like_name','__address','__unsigned_int','__char_string',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__md_id = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-zA-Z\\-_.]*', 'length': ['1..255']}), is_leaf=True, yang_name="md-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:name-key-type', is_config=True)
    self.__level = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..7']}), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint8', is_config=True)
    self.__md_name_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NONE': {}, 'DOMAIN_NAME': {}, 'MAC_ADDRESS_AND_UINT': {}, 'CHARACTER_STRING': {}},), is_leaf=True, yang_name="md-name-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    self.__none = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="none", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=True)
    self.__dns_like_name = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'length': ['1..43']}), is_leaf=True, yang_name="dns-like-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)
    self.__address = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:mac-address', is_config=True)
    self.__unsigned_int = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="unsigned-int", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    self.__char_string = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[ -~]*', 'length': ['1..43']}), is_leaf=True, yang_name="char-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'domains', 'maintenance-domain', 'config']

  def _get_md_id(self):
    """
    Getter method for md_id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/md_id (oc-cfm-types:name-key-type)

    YANG Description: The unique identifier for a Maintenance Domain.
    """
    return self.__md_id
      
  def _set_md_id(self, v, load=False):
    """
    Setter method for md_id, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/md_id (oc-cfm-types:name-key-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_md_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_md_id() directly.

    YANG Description: The unique identifier for a Maintenance Domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-zA-Z\\-_.]*', 'length': ['1..255']}), is_leaf=True, yang_name="md-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:name-key-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """md_id must be of a type compatible with oc-cfm-types:name-key-type""",
          'defined-type': "oc-cfm-types:name-key-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-zA-Z\\-_.]*', 'length': ['1..255']}), is_leaf=True, yang_name="md-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:name-key-type', is_config=True)""",
        })

    self.__md_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_md_id(self):
    self.__md_id = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-zA-Z\\-_.]*', 'length': ['1..255']}), is_leaf=True, yang_name="md-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-cfm-types:name-key-type', is_config=True)


  def _get_level(self):
    """
    Getter method for level, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/level (uint8)

    YANG Description: Level of the maintenance domain.
    """
    return self.__level
      
  def _set_level(self, v, load=False):
    """
    Setter method for level, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/level (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_level() directly.

    YANG Description: Level of the maintenance domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..7']}), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """level must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..7']}), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint8', is_config=True)""",
        })

    self.__level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_level(self):
    self.__level = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..7']}), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint8', is_config=True)


  def _get_md_name_type(self):
    """
    Getter method for md_name_type, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/md_name_type (enumeration)

    YANG Description: Type discriminator for the value  described in the md 'name' leaf.
    """
    return self.__md_name_type
      
  def _set_md_name_type(self, v, load=False):
    """
    Setter method for md_name_type, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/md_name_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_md_name_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_md_name_type() directly.

    YANG Description: Type discriminator for the value  described in the md 'name' leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NONE': {}, 'DOMAIN_NAME': {}, 'MAC_ADDRESS_AND_UINT': {}, 'CHARACTER_STRING': {}},), is_leaf=True, yang_name="md-name-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """md_name_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-oam-cfm:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NONE': {}, 'DOMAIN_NAME': {}, 'MAC_ADDRESS_AND_UINT': {}, 'CHARACTER_STRING': {}},), is_leaf=True, yang_name="md-name-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)""",
        })

    self.__md_name_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_md_name_type(self):
    self.__md_name_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'NONE': {}, 'DOMAIN_NAME': {}, 'MAC_ADDRESS_AND_UINT': {}, 'CHARACTER_STRING': {}},), is_leaf=True, yang_name="md-name-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)


  def _get_none(self):
    """
    Getter method for none, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/none (boolean)

    YANG Description: No format specified, usually because there is not a
Maintenance Domain Name. The Maintenance Domain name
inserted in CFM protocol messages will be a zero length
OCTET string.
    """
    return self.__none
      
  def _set_none(self, v, load=False):
    """
    Setter method for none, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/none (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_none is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_none() directly.

    YANG Description: No format specified, usually because there is not a
Maintenance Domain Name. The Maintenance Domain name
inserted in CFM protocol messages will be a zero length
OCTET string.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="none", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """none must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="none", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=True)""",
        })

    self.__none = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_none(self):
    self.__none = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="none", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=True)


  def _get_dns_like_name(self):
    """
    Getter method for dns_like_name, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/dns_like_name (string)

    YANG Description: Domain name like string, globally unique text string
 derived from a DNS name.
    """
    return self.__dns_like_name
      
  def _set_dns_like_name(self, v, load=False):
    """
    Setter method for dns_like_name, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/dns_like_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dns_like_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dns_like_name() directly.

    YANG Description: Domain name like string, globally unique text string
 derived from a DNS name.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'length': ['1..43']}), is_leaf=True, yang_name="dns-like-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dns_like_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'length': ['1..43']}), is_leaf=True, yang_name="dns-like-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)""",
        })

    self.__dns_like_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dns_like_name(self):
    self.__dns_like_name = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'length': ['1..43']}), is_leaf=True, yang_name="dns-like-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)


  def _get_address(self):
    """
    Getter method for address, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/address (oc-yang:mac-address)

    YANG Description: The MAC address.
    """
    return self.__address
      
  def _set_address(self, v, load=False):
    """
    Setter method for address, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/address (oc-yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_address() directly.

    YANG Description: The MAC address.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:mac-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """address must be of a type compatible with oc-yang:mac-address""",
          'defined-type': "oc-yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:mac-address', is_config=True)""",
        })

    self.__address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_address(self):
    self.__address = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:mac-address', is_config=True)


  def _get_unsigned_int(self):
    """
    Getter method for unsigned_int, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/unsigned_int (uint16)

    YANG Description: The additional 2-octet (unsigned) integer.
    """
    return self.__unsigned_int
      
  def _set_unsigned_int(self, v, load=False):
    """
    Setter method for unsigned_int, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/unsigned_int (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unsigned_int is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unsigned_int() directly.

    YANG Description: The additional 2-octet (unsigned) integer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="unsigned-int", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unsigned_int must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="unsigned-int", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)""",
        })

    self.__unsigned_int = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unsigned_int(self):
    self.__unsigned_int = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="unsigned-int", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)


  def _get_char_string(self):
    """
    Getter method for char_string, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/char_string (string)

    YANG Description: The character string name of the Maintenance Domain.
    """
    return self.__char_string
      
  def _set_char_string(self, v, load=False):
    """
    Setter method for char_string, mapped from YANG variable /oam/cfm/domains/maintenance_domain/config/char_string (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_char_string is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_char_string() directly.

    YANG Description: The character string name of the Maintenance Domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[ -~]*', 'length': ['1..43']}), is_leaf=True, yang_name="char-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """char_string must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[ -~]*', 'length': ['1..43']}), is_leaf=True, yang_name="char-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)""",
        })

    self.__char_string = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_char_string(self):
    self.__char_string = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[ -~]*', 'length': ['1..43']}), is_leaf=True, yang_name="char-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)

  md_id = __builtin__.property(_get_md_id, _set_md_id)
  level = __builtin__.property(_get_level, _set_level)
  md_name_type = __builtin__.property(_get_md_name_type, _set_md_name_type)
  none = __builtin__.property(_get_none, _set_none)
  dns_like_name = __builtin__.property(_get_dns_like_name, _set_dns_like_name)
  address = __builtin__.property(_get_address, _set_address)
  unsigned_int = __builtin__.property(_get_unsigned_int, _set_unsigned_int)
  char_string = __builtin__.property(_get_char_string, _set_char_string)


  _pyangbind_elements = OrderedDict([('md_id', md_id), ('level', level), ('md_name_type', md_name_type), ('none', none), ('dns_like_name', dns_like_name), ('address', address), ('unsigned_int', unsigned_int), ('char_string', char_string), ])


