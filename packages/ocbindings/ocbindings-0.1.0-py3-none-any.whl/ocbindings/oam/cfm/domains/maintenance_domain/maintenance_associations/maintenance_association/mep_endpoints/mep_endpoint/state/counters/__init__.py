# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A collection of mep-related statistics objects.
  """
  __slots__ = ('_path_helper', '_extmethods', '__mep_ccm_sequence_errors','__mep_ccms_sent',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mep_ccm_sequence_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mep-ccm-sequence-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:counter64', is_config=False)
    self.__mep_ccms_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mep-ccms-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'domains', 'maintenance-domain', 'maintenance-associations', 'maintenance-association', 'mep-endpoints', 'mep-endpoint', 'state', 'counters']

  def _get_mep_ccm_sequence_errors(self):
    """
    Getter method for mep_ccm_sequence_errors, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/state/counters/mep_ccm_sequence_errors (oc-yang:counter64)

    YANG Description: The total number of out-of-sequence CCMs received from
all remote MEPs.
    """
    return self.__mep_ccm_sequence_errors
      
  def _set_mep_ccm_sequence_errors(self, v, load=False):
    """
    Setter method for mep_ccm_sequence_errors, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/state/counters/mep_ccm_sequence_errors (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mep_ccm_sequence_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mep_ccm_sequence_errors() directly.

    YANG Description: The total number of out-of-sequence CCMs received from
all remote MEPs.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mep-ccm-sequence-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mep_ccm_sequence_errors must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mep-ccm-sequence-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__mep_ccm_sequence_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mep_ccm_sequence_errors(self):
    self.__mep_ccm_sequence_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mep-ccm-sequence-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:counter64', is_config=False)


  def _get_mep_ccms_sent(self):
    """
    Getter method for mep_ccms_sent, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/state/counters/mep_ccms_sent (oc-yang:counter64)

    YANG Description: Total number of CCMs transmitted by the local MEP
    """
    return self.__mep_ccms_sent
      
  def _set_mep_ccms_sent(self, v, load=False):
    """
    Setter method for mep_ccms_sent, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/state/counters/mep_ccms_sent (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mep_ccms_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mep_ccms_sent() directly.

    YANG Description: Total number of CCMs transmitted by the local MEP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mep-ccms-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mep_ccms_sent must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mep-ccms-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__mep_ccms_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mep_ccms_sent(self):
    self.__mep_ccms_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mep-ccms-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:counter64', is_config=False)

  mep_ccm_sequence_errors = __builtin__.property(_get_mep_ccm_sequence_errors)
  mep_ccms_sent = __builtin__.property(_get_mep_ccms_sent)


  _pyangbind_elements = OrderedDict([('mep_ccm_sequence_errors', mep_ccm_sequence_errors), ('mep_ccms_sent', mep_ccms_sent), ])


class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/domains/maintenance-domain/maintenance-associations/maintenance-association/mep-endpoints/mep-endpoint/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A collection of mep-related statistics objects.
  """
  __slots__ = ('_path_helper', '_extmethods', '__mep_ccm_sequence_errors','__mep_ccms_sent',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mep_ccm_sequence_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mep-ccm-sequence-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:counter64', is_config=False)
    self.__mep_ccms_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mep-ccms-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'domains', 'maintenance-domain', 'maintenance-associations', 'maintenance-association', 'mep-endpoints', 'mep-endpoint', 'state', 'counters']

  def _get_mep_ccm_sequence_errors(self):
    """
    Getter method for mep_ccm_sequence_errors, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/state/counters/mep_ccm_sequence_errors (oc-yang:counter64)

    YANG Description: The total number of out-of-sequence CCMs received from
all remote MEPs.
    """
    return self.__mep_ccm_sequence_errors
      
  def _set_mep_ccm_sequence_errors(self, v, load=False):
    """
    Setter method for mep_ccm_sequence_errors, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/state/counters/mep_ccm_sequence_errors (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mep_ccm_sequence_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mep_ccm_sequence_errors() directly.

    YANG Description: The total number of out-of-sequence CCMs received from
all remote MEPs.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mep-ccm-sequence-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mep_ccm_sequence_errors must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mep-ccm-sequence-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__mep_ccm_sequence_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mep_ccm_sequence_errors(self):
    self.__mep_ccm_sequence_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mep-ccm-sequence-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:counter64', is_config=False)


  def _get_mep_ccms_sent(self):
    """
    Getter method for mep_ccms_sent, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/state/counters/mep_ccms_sent (oc-yang:counter64)

    YANG Description: Total number of CCMs transmitted by the local MEP
    """
    return self.__mep_ccms_sent
      
  def _set_mep_ccms_sent(self, v, load=False):
    """
    Setter method for mep_ccms_sent, mapped from YANG variable /oam/cfm/domains/maintenance_domain/maintenance_associations/maintenance_association/mep_endpoints/mep_endpoint/state/counters/mep_ccms_sent (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mep_ccms_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mep_ccms_sent() directly.

    YANG Description: Total number of CCMs transmitted by the local MEP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mep-ccms-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mep_ccms_sent must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mep-ccms-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__mep_ccms_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mep_ccms_sent(self):
    self.__mep_ccms_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mep-ccms-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='oc-yang:counter64', is_config=False)

  mep_ccm_sequence_errors = __builtin__.property(_get_mep_ccm_sequence_errors)
  mep_ccms_sent = __builtin__.property(_get_mep_ccms_sent)


  _pyangbind_elements = OrderedDict([('mep_ccm_sequence_errors', mep_ccm_sequence_errors), ('mep_ccms_sent', mep_ccms_sent), ])


