# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import counters
class loss_measurement_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Loss measurement state container.
  """
  __slots__ = ('_path_helper', '_extmethods', '__far_end_min_frame_loss_ratio','__far_end_max_frame_loss_ratio','__far_end_average_frame_loss_ratio','__near_end_min_frame_loss_ratio','__near_end_max_frame_loss_ratio','__near_end_average_frame_loss_ratio','__counters',)

  _yang_name = 'loss-measurement-state'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__far_end_min_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-min-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__far_end_max_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-max-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__far_end_average_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-average-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__near_end_min_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-min-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__near_end_max_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-max-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__near_end_average_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-average-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'performance-measurement-profiles-global', 'performance-measurement-profile', 'state', 'loss-measurement-state']

  def _get_far_end_min_frame_loss_ratio(self):
    """
    Getter method for far_end_min_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/far_end_min_frame_loss_ratio (uint32)

    YANG Description: This object contains the minimum one-way availability flr in the
egress direction (source --> destination),
from among the set of availability flr values
calculated by the MEP in this Measurement Interval. There is
one availability flr value for each 'delta_t' time period
within the Measurement Interval, as specified in MEF 10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    return self.__far_end_min_frame_loss_ratio
      
  def _set_far_end_min_frame_loss_ratio(self, v, load=False):
    """
    Setter method for far_end_min_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/far_end_min_frame_loss_ratio (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_far_end_min_frame_loss_ratio is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_far_end_min_frame_loss_ratio() directly.

    YANG Description: This object contains the minimum one-way availability flr in the
egress direction (source --> destination),
from among the set of availability flr values
calculated by the MEP in this Measurement Interval. There is
one availability flr value for each 'delta_t' time period
within the Measurement Interval, as specified in MEF 10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-min-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """far_end_min_frame_loss_ratio must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-min-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__far_end_min_frame_loss_ratio = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_far_end_min_frame_loss_ratio(self):
    self.__far_end_min_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-min-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_far_end_max_frame_loss_ratio(self):
    """
    Getter method for far_end_max_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/far_end_max_frame_loss_ratio (uint32)

    YANG Description: This object contains the maximum one-way availability flr in the
forward direction (source --> destination),
from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    return self.__far_end_max_frame_loss_ratio
      
  def _set_far_end_max_frame_loss_ratio(self, v, load=False):
    """
    Setter method for far_end_max_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/far_end_max_frame_loss_ratio (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_far_end_max_frame_loss_ratio is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_far_end_max_frame_loss_ratio() directly.

    YANG Description: This object contains the maximum one-way availability flr in the
forward direction (source --> destination),
from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-max-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """far_end_max_frame_loss_ratio must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-max-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__far_end_max_frame_loss_ratio = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_far_end_max_frame_loss_ratio(self):
    self.__far_end_max_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-max-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_far_end_average_frame_loss_ratio(self):
    """
    Getter method for far_end_average_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/far_end_average_frame_loss_ratio (uint32)

    YANG Description: This object contains the average one-way availability flr in the
forward direction, from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    return self.__far_end_average_frame_loss_ratio
      
  def _set_far_end_average_frame_loss_ratio(self, v, load=False):
    """
    Setter method for far_end_average_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/far_end_average_frame_loss_ratio (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_far_end_average_frame_loss_ratio is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_far_end_average_frame_loss_ratio() directly.

    YANG Description: This object contains the average one-way availability flr in the
forward direction, from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-average-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """far_end_average_frame_loss_ratio must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-average-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__far_end_average_frame_loss_ratio = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_far_end_average_frame_loss_ratio(self):
    self.__far_end_average_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-average-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_near_end_min_frame_loss_ratio(self):
    """
    Getter method for near_end_min_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/near_end_min_frame_loss_ratio (uint32)

    YANG Description: This object contains the minimum one-way availability flr in the
backward direction (destination --> source),
from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    return self.__near_end_min_frame_loss_ratio
      
  def _set_near_end_min_frame_loss_ratio(self, v, load=False):
    """
    Setter method for near_end_min_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/near_end_min_frame_loss_ratio (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_near_end_min_frame_loss_ratio is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_near_end_min_frame_loss_ratio() directly.

    YANG Description: This object contains the minimum one-way availability flr in the
backward direction (destination --> source),
from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-min-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """near_end_min_frame_loss_ratio must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-min-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__near_end_min_frame_loss_ratio = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_near_end_min_frame_loss_ratio(self):
    self.__near_end_min_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-min-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_near_end_max_frame_loss_ratio(self):
    """
    Getter method for near_end_max_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/near_end_max_frame_loss_ratio (uint32)

    YANG Description: This object contains the maximum one-way availability flr in the
backward direction, from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).
Service OAM Performance Monitoring YANG Module
MEF 39

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    return self.__near_end_max_frame_loss_ratio
      
  def _set_near_end_max_frame_loss_ratio(self, v, load=False):
    """
    Setter method for near_end_max_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/near_end_max_frame_loss_ratio (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_near_end_max_frame_loss_ratio is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_near_end_max_frame_loss_ratio() directly.

    YANG Description: This object contains the maximum one-way availability flr in the
backward direction, from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).
Service OAM Performance Monitoring YANG Module
MEF 39

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-max-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """near_end_max_frame_loss_ratio must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-max-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__near_end_max_frame_loss_ratio = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_near_end_max_frame_loss_ratio(self):
    self.__near_end_max_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-max-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_near_end_average_frame_loss_ratio(self):
    """
    Getter method for near_end_average_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/near_end_average_frame_loss_ratio (uint32)

    YANG Description: This object contains the average one-way availability flr in the
backward direction, from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    return self.__near_end_average_frame_loss_ratio
      
  def _set_near_end_average_frame_loss_ratio(self, v, load=False):
    """
    Setter method for near_end_average_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/near_end_average_frame_loss_ratio (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_near_end_average_frame_loss_ratio is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_near_end_average_frame_loss_ratio() directly.

    YANG Description: This object contains the average one-way availability flr in the
backward direction, from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-average-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """near_end_average_frame_loss_ratio must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-average-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__near_end_average_frame_loss_ratio = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_near_end_average_frame_loss_ratio(self):
    self.__near_end_average_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-average-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_counters(self):
    """
    Getter method for counters, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/counters (container)

    YANG Description: A collection of loss-measurement-related statistics objects.
    """
    return self.__counters
      
  def _set_counters(self, v, load=False):
    """
    Setter method for counters, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/counters (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_counters is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_counters() directly.

    YANG Description: A collection of loss-measurement-related statistics objects.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """counters must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)""",
        })

    self.__counters = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_counters(self):
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)

  far_end_min_frame_loss_ratio = __builtin__.property(_get_far_end_min_frame_loss_ratio)
  far_end_max_frame_loss_ratio = __builtin__.property(_get_far_end_max_frame_loss_ratio)
  far_end_average_frame_loss_ratio = __builtin__.property(_get_far_end_average_frame_loss_ratio)
  near_end_min_frame_loss_ratio = __builtin__.property(_get_near_end_min_frame_loss_ratio)
  near_end_max_frame_loss_ratio = __builtin__.property(_get_near_end_max_frame_loss_ratio)
  near_end_average_frame_loss_ratio = __builtin__.property(_get_near_end_average_frame_loss_ratio)
  counters = __builtin__.property(_get_counters)


  _pyangbind_elements = OrderedDict([('far_end_min_frame_loss_ratio', far_end_min_frame_loss_ratio), ('far_end_max_frame_loss_ratio', far_end_max_frame_loss_ratio), ('far_end_average_frame_loss_ratio', far_end_average_frame_loss_ratio), ('near_end_min_frame_loss_ratio', near_end_min_frame_loss_ratio), ('near_end_max_frame_loss_ratio', near_end_max_frame_loss_ratio), ('near_end_average_frame_loss_ratio', near_end_average_frame_loss_ratio), ('counters', counters), ])


from . import counters
class loss_measurement_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/state/loss-measurement-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Loss measurement state container.
  """
  __slots__ = ('_path_helper', '_extmethods', '__far_end_min_frame_loss_ratio','__far_end_max_frame_loss_ratio','__far_end_average_frame_loss_ratio','__near_end_min_frame_loss_ratio','__near_end_max_frame_loss_ratio','__near_end_average_frame_loss_ratio','__counters',)

  _yang_name = 'loss-measurement-state'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__far_end_min_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-min-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__far_end_max_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-max-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__far_end_average_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-average-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__near_end_min_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-min-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__near_end_max_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-max-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__near_end_average_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-average-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'performance-measurement-profiles-global', 'performance-measurement-profile', 'state', 'loss-measurement-state']

  def _get_far_end_min_frame_loss_ratio(self):
    """
    Getter method for far_end_min_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/far_end_min_frame_loss_ratio (uint32)

    YANG Description: This object contains the minimum one-way availability flr in the
egress direction (source --> destination),
from among the set of availability flr values
calculated by the MEP in this Measurement Interval. There is
one availability flr value for each 'delta_t' time period
within the Measurement Interval, as specified in MEF 10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    return self.__far_end_min_frame_loss_ratio
      
  def _set_far_end_min_frame_loss_ratio(self, v, load=False):
    """
    Setter method for far_end_min_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/far_end_min_frame_loss_ratio (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_far_end_min_frame_loss_ratio is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_far_end_min_frame_loss_ratio() directly.

    YANG Description: This object contains the minimum one-way availability flr in the
egress direction (source --> destination),
from among the set of availability flr values
calculated by the MEP in this Measurement Interval. There is
one availability flr value for each 'delta_t' time period
within the Measurement Interval, as specified in MEF 10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-min-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """far_end_min_frame_loss_ratio must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-min-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__far_end_min_frame_loss_ratio = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_far_end_min_frame_loss_ratio(self):
    self.__far_end_min_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-min-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_far_end_max_frame_loss_ratio(self):
    """
    Getter method for far_end_max_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/far_end_max_frame_loss_ratio (uint32)

    YANG Description: This object contains the maximum one-way availability flr in the
forward direction (source --> destination),
from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    return self.__far_end_max_frame_loss_ratio
      
  def _set_far_end_max_frame_loss_ratio(self, v, load=False):
    """
    Setter method for far_end_max_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/far_end_max_frame_loss_ratio (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_far_end_max_frame_loss_ratio is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_far_end_max_frame_loss_ratio() directly.

    YANG Description: This object contains the maximum one-way availability flr in the
forward direction (source --> destination),
from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-max-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """far_end_max_frame_loss_ratio must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-max-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__far_end_max_frame_loss_ratio = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_far_end_max_frame_loss_ratio(self):
    self.__far_end_max_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-max-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_far_end_average_frame_loss_ratio(self):
    """
    Getter method for far_end_average_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/far_end_average_frame_loss_ratio (uint32)

    YANG Description: This object contains the average one-way availability flr in the
forward direction, from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    return self.__far_end_average_frame_loss_ratio
      
  def _set_far_end_average_frame_loss_ratio(self, v, load=False):
    """
    Setter method for far_end_average_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/far_end_average_frame_loss_ratio (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_far_end_average_frame_loss_ratio is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_far_end_average_frame_loss_ratio() directly.

    YANG Description: This object contains the average one-way availability flr in the
forward direction, from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-average-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """far_end_average_frame_loss_ratio must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-average-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__far_end_average_frame_loss_ratio = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_far_end_average_frame_loss_ratio(self):
    self.__far_end_average_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="far-end-average-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_near_end_min_frame_loss_ratio(self):
    """
    Getter method for near_end_min_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/near_end_min_frame_loss_ratio (uint32)

    YANG Description: This object contains the minimum one-way availability flr in the
backward direction (destination --> source),
from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    return self.__near_end_min_frame_loss_ratio
      
  def _set_near_end_min_frame_loss_ratio(self, v, load=False):
    """
    Setter method for near_end_min_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/near_end_min_frame_loss_ratio (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_near_end_min_frame_loss_ratio is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_near_end_min_frame_loss_ratio() directly.

    YANG Description: This object contains the minimum one-way availability flr in the
backward direction (destination --> source),
from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-min-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """near_end_min_frame_loss_ratio must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-min-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__near_end_min_frame_loss_ratio = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_near_end_min_frame_loss_ratio(self):
    self.__near_end_min_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-min-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_near_end_max_frame_loss_ratio(self):
    """
    Getter method for near_end_max_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/near_end_max_frame_loss_ratio (uint32)

    YANG Description: This object contains the maximum one-way availability flr in the
backward direction, from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).
Service OAM Performance Monitoring YANG Module
MEF 39

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    return self.__near_end_max_frame_loss_ratio
      
  def _set_near_end_max_frame_loss_ratio(self, v, load=False):
    """
    Setter method for near_end_max_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/near_end_max_frame_loss_ratio (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_near_end_max_frame_loss_ratio is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_near_end_max_frame_loss_ratio() directly.

    YANG Description: This object contains the maximum one-way availability flr in the
backward direction, from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).
Service OAM Performance Monitoring YANG Module
MEF 39

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-max-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """near_end_max_frame_loss_ratio must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-max-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__near_end_max_frame_loss_ratio = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_near_end_max_frame_loss_ratio(self):
    self.__near_end_max_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-max-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_near_end_average_frame_loss_ratio(self):
    """
    Getter method for near_end_average_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/near_end_average_frame_loss_ratio (uint32)

    YANG Description: This object contains the average one-way availability flr in the
backward direction, from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    return self.__near_end_average_frame_loss_ratio
      
  def _set_near_end_average_frame_loss_ratio(self, v, load=False):
    """
    Setter method for near_end_average_frame_loss_ratio, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/near_end_average_frame_loss_ratio (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_near_end_average_frame_loss_ratio is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_near_end_average_frame_loss_ratio() directly.

    YANG Description: This object contains the average one-way availability flr in the
backward direction, from among the set of availability flr
values calculated by the MEP in this Measurement Interval.
There is one availability flr value for each 'delta_t' time
period within the Measurement Interval, as specified in MEF
10.2.1.

The flr value is a ratio that is expressed as a percent with a
value of 0 (ratio 0.00) through 100000 (ratio 1.00).

Units are in milli-percent, where 1 indicates 0.001 percent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-average-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """near_end_average_frame_loss_ratio must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-average-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)""",
        })

    self.__near_end_average_frame_loss_ratio = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_near_end_average_frame_loss_ratio(self):
    self.__near_end_average_frame_loss_ratio = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['0..100000']}), is_leaf=True, yang_name="near-end-average-frame-loss-ratio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=False)


  def _get_counters(self):
    """
    Getter method for counters, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/counters (container)

    YANG Description: A collection of loss-measurement-related statistics objects.
    """
    return self.__counters
      
  def _set_counters(self, v, load=False):
    """
    Setter method for counters, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/state/loss_measurement_state/counters (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_counters is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_counters() directly.

    YANG Description: A collection of loss-measurement-related statistics objects.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """counters must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)""",
        })

    self.__counters = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_counters(self):
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='container', is_config=False)

  far_end_min_frame_loss_ratio = __builtin__.property(_get_far_end_min_frame_loss_ratio)
  far_end_max_frame_loss_ratio = __builtin__.property(_get_far_end_max_frame_loss_ratio)
  far_end_average_frame_loss_ratio = __builtin__.property(_get_far_end_average_frame_loss_ratio)
  near_end_min_frame_loss_ratio = __builtin__.property(_get_near_end_min_frame_loss_ratio)
  near_end_max_frame_loss_ratio = __builtin__.property(_get_near_end_max_frame_loss_ratio)
  near_end_average_frame_loss_ratio = __builtin__.property(_get_near_end_average_frame_loss_ratio)
  counters = __builtin__.property(_get_counters)


  _pyangbind_elements = OrderedDict([('far_end_min_frame_loss_ratio', far_end_min_frame_loss_ratio), ('far_end_max_frame_loss_ratio', far_end_max_frame_loss_ratio), ('far_end_average_frame_loss_ratio', far_end_average_frame_loss_ratio), ('near_end_min_frame_loss_ratio', near_end_min_frame_loss_ratio), ('near_end_max_frame_loss_ratio', near_end_max_frame_loss_ratio), ('near_end_average_frame_loss_ratio', near_end_average_frame_loss_ratio), ('counters', counters), ])


