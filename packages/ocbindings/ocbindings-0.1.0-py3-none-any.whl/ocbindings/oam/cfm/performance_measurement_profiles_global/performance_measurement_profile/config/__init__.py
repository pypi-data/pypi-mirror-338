# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for Performance measurement profile.
  """
  __slots__ = ('_path_helper', '_extmethods', '__profile_name','__enable','__measurement_type','__protocol_type','__frame_size','__measurement_interval','__repetition_period','__intervals_archived','__packets_per_meaurement_period','__burst_interval','__packet_per_burst',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__profile_name = YANGDynClass(base=str, is_leaf=True, yang_name="profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)
    self.__enable = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=True)
    self.__measurement_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LMM': {}, 'SLM': {}, 'DMM': {}, 'CCM': {}},), default=str("SLM"), is_leaf=True, yang_name="measurement-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    self.__protocol_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SINGLE_ENDED': {}, 'DUAL_ENDED': {}},), is_leaf=True, yang_name="protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    self.__frame_size = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="frame-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    self.__measurement_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..525600']}), is_leaf=True, yang_name="measurement-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    self.__repetition_period = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="repetition-period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    self.__intervals_archived = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="intervals-archived", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    self.__packets_per_meaurement_period = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="packets-per-meaurement-period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    self.__burst_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="burst-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    self.__packet_per_burst = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="packet-per-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'performance-measurement-profiles-global', 'performance-measurement-profile', 'config']

  def _get_profile_name(self):
    """
    Getter method for profile_name, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/profile_name (string)

    YANG Description: Name of the measurement profile.
    """
    return self.__profile_name
      
  def _set_profile_name(self, v, load=False):
    """
    Setter method for profile_name, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/profile_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_profile_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_profile_name() directly.

    YANG Description: Name of the measurement profile.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """profile_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)""",
        })

    self.__profile_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_profile_name(self):
    self.__profile_name = YANGDynClass(base=str, is_leaf=True, yang_name="profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)


  def _get_enable(self):
    """
    Getter method for enable, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/enable (boolean)

    YANG Description: Enable or disable measurement.
    """
    return self.__enable
      
  def _set_enable(self, v, load=False):
    """
    Setter method for enable, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/enable (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable() directly.

    YANG Description: Enable or disable measurement.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=True)""",
        })

    self.__enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable(self):
    self.__enable = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=True)


  def _get_measurement_type(self):
    """
    Getter method for measurement_type, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/measurement_type (enumeration)

    YANG Description: This object specifies what type of Performance Measurement will be
performed.
    """
    return self.__measurement_type
      
  def _set_measurement_type(self, v, load=False):
    """
    Setter method for measurement_type, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/measurement_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_measurement_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_measurement_type() directly.

    YANG Description: This object specifies what type of Performance Measurement will be
performed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LMM': {}, 'SLM': {}, 'DMM': {}, 'CCM': {}},), default=str("SLM"), is_leaf=True, yang_name="measurement-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """measurement_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-oam-cfm:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LMM': {}, 'SLM': {}, 'DMM': {}, 'CCM': {}},), default=str("SLM"), is_leaf=True, yang_name="measurement-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)""",
        })

    self.__measurement_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_measurement_type(self):
    self.__measurement_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LMM': {}, 'SLM': {}, 'DMM': {}, 'CCM': {}},), default=str("SLM"), is_leaf=True, yang_name="measurement-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)


  def _get_protocol_type(self):
    """
    Getter method for protocol_type, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/protocol_type (enumeration)

    YANG Description: protocol type.
    """
    return self.__protocol_type
      
  def _set_protocol_type(self, v, load=False):
    """
    Setter method for protocol_type, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/protocol_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol_type() directly.

    YANG Description: protocol type.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SINGLE_ENDED': {}, 'DUAL_ENDED': {}},), is_leaf=True, yang_name="protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-oam-cfm:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SINGLE_ENDED': {}, 'DUAL_ENDED': {}},), is_leaf=True, yang_name="protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)""",
        })

    self.__protocol_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol_type(self):
    self.__protocol_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SINGLE_ENDED': {}, 'DUAL_ENDED': {}},), is_leaf=True, yang_name="protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)


  def _get_frame_size(self):
    """
    Getter method for frame_size, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/frame_size (uint16)

    YANG Description: Probe Frame size for measurement.
    """
    return self.__frame_size
      
  def _set_frame_size(self, v, load=False):
    """
    Setter method for frame_size, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/frame_size (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frame_size is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frame_size() directly.

    YANG Description: Probe Frame size for measurement.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="frame-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frame_size must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="frame-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)""",
        })

    self.__frame_size = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frame_size(self):
    self.__frame_size = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="frame-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)


  def _get_measurement_interval(self):
    """
    Getter method for measurement_interval, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/measurement_interval (uint32)

    YANG Description: This object specifies the Measurement Interval for FLR statistics, in
minutes.
A Measurement Interval of 15 minutes needs to be supported,
other intervals may be supported.
    """
    return self.__measurement_interval
      
  def _set_measurement_interval(self, v, load=False):
    """
    Setter method for measurement_interval, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/measurement_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_measurement_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_measurement_interval() directly.

    YANG Description: This object specifies the Measurement Interval for FLR statistics, in
minutes.
A Measurement Interval of 15 minutes needs to be supported,
other intervals may be supported.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..525600']}), is_leaf=True, yang_name="measurement-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """measurement_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..525600']}), is_leaf=True, yang_name="measurement-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)""",
        })

    self.__measurement_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_measurement_interval(self):
    self.__measurement_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..525600']}), is_leaf=True, yang_name="measurement-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)


  def _get_repetition_period(self):
    """
    Getter method for repetition_period, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/repetition_period (uint32)

    YANG Description: This object specifies a configurable repetition time between
Measurement Intervals in a Measurement session in hundredths of a
second.

If the value is less than or equal to one Measurement Interval
there is no time gap between the end of one Measurement
Interval and the start of a new Measurement Interval. This is
the normal usage case.

If the value is greater than one Measurement Interval there is
time gap between the end of one Measurement Interval and the
start of the next Measurement Interval.
    """
    return self.__repetition_period
      
  def _set_repetition_period(self, v, load=False):
    """
    Setter method for repetition_period, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/repetition_period (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_repetition_period is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_repetition_period() directly.

    YANG Description: This object specifies a configurable repetition time between
Measurement Intervals in a Measurement session in hundredths of a
second.

If the value is less than or equal to one Measurement Interval
there is no time gap between the end of one Measurement
Interval and the start of a new Measurement Interval. This is
the normal usage case.

If the value is greater than one Measurement Interval there is
time gap between the end of one Measurement Interval and the
start of the next Measurement Interval.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="repetition-period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """repetition_period must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="repetition-period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)""",
        })

    self.__repetition_period = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_repetition_period(self):
    self.__repetition_period = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="repetition-period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)


  def _get_intervals_archived(self):
    """
    Getter method for intervals_archived, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/intervals_archived (uint16)

    YANG Description: This object specifies the number of completed measurement intervals to
store in the history statistic table.

At least 32 completed measurement intervals are to be
stored. 96 measurement intervals are recommended to be stored.
    """
    return self.__intervals_archived
      
  def _set_intervals_archived(self, v, load=False):
    """
    Setter method for intervals_archived, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/intervals_archived (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_intervals_archived is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_intervals_archived() directly.

    YANG Description: This object specifies the number of completed measurement intervals to
store in the history statistic table.

At least 32 completed measurement intervals are to be
stored. 96 measurement intervals are recommended to be stored.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="intervals-archived", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """intervals_archived must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="intervals-archived", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)""",
        })

    self.__intervals_archived = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_intervals_archived(self):
    self.__intervals_archived = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="intervals-archived", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)


  def _get_packets_per_meaurement_period(self):
    """
    Getter method for packets_per_meaurement_period, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/packets_per_meaurement_period (uint16)

    YANG Description: Number of probe packets to send within a measurement interval.
    """
    return self.__packets_per_meaurement_period
      
  def _set_packets_per_meaurement_period(self, v, load=False):
    """
    Setter method for packets_per_meaurement_period, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/packets_per_meaurement_period (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_packets_per_meaurement_period is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_packets_per_meaurement_period() directly.

    YANG Description: Number of probe packets to send within a measurement interval.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="packets-per-meaurement-period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """packets_per_meaurement_period must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="packets-per-meaurement-period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)""",
        })

    self.__packets_per_meaurement_period = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_packets_per_meaurement_period(self):
    self.__packets_per_meaurement_period = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="packets-per-meaurement-period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)


  def _get_burst_interval(self):
    """
    Getter method for burst_interval, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/burst_interval (uint32)

    YANG Description: Interval between bursts within a measurement interval.
    """
    return self.__burst_interval
      
  def _set_burst_interval(self, v, load=False):
    """
    Setter method for burst_interval, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/burst_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_burst_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_burst_interval() directly.

    YANG Description: Interval between bursts within a measurement interval.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="burst-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """burst_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="burst-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)""",
        })

    self.__burst_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_burst_interval(self):
    self.__burst_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="burst-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)


  def _get_packet_per_burst(self):
    """
    Getter method for packet_per_burst, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/packet_per_burst (uint32)

    YANG Description: if burst enabled. The leaf defines the number of packet per burst of probes.
packets-per-measurement-period / burst-interval
    """
    return self.__packet_per_burst
      
  def _set_packet_per_burst(self, v, load=False):
    """
    Setter method for packet_per_burst, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/packet_per_burst (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_packet_per_burst is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_packet_per_burst() directly.

    YANG Description: if burst enabled. The leaf defines the number of packet per burst of probes.
packets-per-measurement-period / burst-interval
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="packet-per-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """packet_per_burst must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="packet-per-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)""",
        })

    self.__packet_per_burst = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_packet_per_burst(self):
    self.__packet_per_burst = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="packet-per-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)

  profile_name = __builtin__.property(_get_profile_name, _set_profile_name)
  enable = __builtin__.property(_get_enable, _set_enable)
  measurement_type = __builtin__.property(_get_measurement_type, _set_measurement_type)
  protocol_type = __builtin__.property(_get_protocol_type, _set_protocol_type)
  frame_size = __builtin__.property(_get_frame_size, _set_frame_size)
  measurement_interval = __builtin__.property(_get_measurement_interval, _set_measurement_interval)
  repetition_period = __builtin__.property(_get_repetition_period, _set_repetition_period)
  intervals_archived = __builtin__.property(_get_intervals_archived, _set_intervals_archived)
  packets_per_meaurement_period = __builtin__.property(_get_packets_per_meaurement_period, _set_packets_per_meaurement_period)
  burst_interval = __builtin__.property(_get_burst_interval, _set_burst_interval)
  packet_per_burst = __builtin__.property(_get_packet_per_burst, _set_packet_per_burst)


  _pyangbind_elements = OrderedDict([('profile_name', profile_name), ('enable', enable), ('measurement_type', measurement_type), ('protocol_type', protocol_type), ('frame_size', frame_size), ('measurement_interval', measurement_interval), ('repetition_period', repetition_period), ('intervals_archived', intervals_archived), ('packets_per_meaurement_period', packets_per_meaurement_period), ('burst_interval', burst_interval), ('packet_per_burst', packet_per_burst), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-oam - based on the path /oam/cfm/performance-measurement-profiles-global/performance-measurement-profile/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for Performance measurement profile.
  """
  __slots__ = ('_path_helper', '_extmethods', '__profile_name','__enable','__measurement_type','__protocol_type','__frame_size','__measurement_interval','__repetition_period','__intervals_archived','__packets_per_meaurement_period','__burst_interval','__packet_per_burst',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/oam'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__profile_name = YANGDynClass(base=str, is_leaf=True, yang_name="profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)
    self.__enable = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=True)
    self.__measurement_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LMM': {}, 'SLM': {}, 'DMM': {}, 'CCM': {}},), default=str("SLM"), is_leaf=True, yang_name="measurement-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    self.__protocol_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SINGLE_ENDED': {}, 'DUAL_ENDED': {}},), is_leaf=True, yang_name="protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    self.__frame_size = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="frame-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    self.__measurement_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..525600']}), is_leaf=True, yang_name="measurement-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    self.__repetition_period = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="repetition-period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    self.__intervals_archived = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="intervals-archived", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    self.__packets_per_meaurement_period = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="packets-per-meaurement-period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    self.__burst_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="burst-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    self.__packet_per_burst = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="packet-per-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['oam', 'cfm', 'performance-measurement-profiles-global', 'performance-measurement-profile', 'config']

  def _get_profile_name(self):
    """
    Getter method for profile_name, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/profile_name (string)

    YANG Description: Name of the measurement profile.
    """
    return self.__profile_name
      
  def _set_profile_name(self, v, load=False):
    """
    Setter method for profile_name, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/profile_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_profile_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_profile_name() directly.

    YANG Description: Name of the measurement profile.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """profile_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)""",
        })

    self.__profile_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_profile_name(self):
    self.__profile_name = YANGDynClass(base=str, is_leaf=True, yang_name="profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='string', is_config=True)


  def _get_enable(self):
    """
    Getter method for enable, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/enable (boolean)

    YANG Description: Enable or disable measurement.
    """
    return self.__enable
      
  def _set_enable(self, v, load=False):
    """
    Setter method for enable, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/enable (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable() directly.

    YANG Description: Enable or disable measurement.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=True)""",
        })

    self.__enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable(self):
    self.__enable = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='boolean', is_config=True)


  def _get_measurement_type(self):
    """
    Getter method for measurement_type, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/measurement_type (enumeration)

    YANG Description: This object specifies what type of Performance Measurement will be
performed.
    """
    return self.__measurement_type
      
  def _set_measurement_type(self, v, load=False):
    """
    Setter method for measurement_type, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/measurement_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_measurement_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_measurement_type() directly.

    YANG Description: This object specifies what type of Performance Measurement will be
performed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LMM': {}, 'SLM': {}, 'DMM': {}, 'CCM': {}},), default=str("SLM"), is_leaf=True, yang_name="measurement-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """measurement_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-oam-cfm:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LMM': {}, 'SLM': {}, 'DMM': {}, 'CCM': {}},), default=str("SLM"), is_leaf=True, yang_name="measurement-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)""",
        })

    self.__measurement_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_measurement_type(self):
    self.__measurement_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LMM': {}, 'SLM': {}, 'DMM': {}, 'CCM': {}},), default=str("SLM"), is_leaf=True, yang_name="measurement-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)


  def _get_protocol_type(self):
    """
    Getter method for protocol_type, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/protocol_type (enumeration)

    YANG Description: protocol type.
    """
    return self.__protocol_type
      
  def _set_protocol_type(self, v, load=False):
    """
    Setter method for protocol_type, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/protocol_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol_type() directly.

    YANG Description: protocol type.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SINGLE_ENDED': {}, 'DUAL_ENDED': {}},), is_leaf=True, yang_name="protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-oam-cfm:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SINGLE_ENDED': {}, 'DUAL_ENDED': {}},), is_leaf=True, yang_name="protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)""",
        })

    self.__protocol_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol_type(self):
    self.__protocol_type = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SINGLE_ENDED': {}, 'DUAL_ENDED': {}},), is_leaf=True, yang_name="protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='enumeration', is_config=True)


  def _get_frame_size(self):
    """
    Getter method for frame_size, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/frame_size (uint16)

    YANG Description: Probe Frame size for measurement.
    """
    return self.__frame_size
      
  def _set_frame_size(self, v, load=False):
    """
    Setter method for frame_size, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/frame_size (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frame_size is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frame_size() directly.

    YANG Description: Probe Frame size for measurement.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="frame-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frame_size must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="frame-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)""",
        })

    self.__frame_size = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frame_size(self):
    self.__frame_size = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="frame-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)


  def _get_measurement_interval(self):
    """
    Getter method for measurement_interval, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/measurement_interval (uint32)

    YANG Description: This object specifies the Measurement Interval for FLR statistics, in
minutes.
A Measurement Interval of 15 minutes needs to be supported,
other intervals may be supported.
    """
    return self.__measurement_interval
      
  def _set_measurement_interval(self, v, load=False):
    """
    Setter method for measurement_interval, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/measurement_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_measurement_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_measurement_interval() directly.

    YANG Description: This object specifies the Measurement Interval for FLR statistics, in
minutes.
A Measurement Interval of 15 minutes needs to be supported,
other intervals may be supported.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..525600']}), is_leaf=True, yang_name="measurement-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """measurement_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..525600']}), is_leaf=True, yang_name="measurement-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)""",
        })

    self.__measurement_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_measurement_interval(self):
    self.__measurement_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..525600']}), is_leaf=True, yang_name="measurement-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)


  def _get_repetition_period(self):
    """
    Getter method for repetition_period, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/repetition_period (uint32)

    YANG Description: This object specifies a configurable repetition time between
Measurement Intervals in a Measurement session in hundredths of a
second.

If the value is less than or equal to one Measurement Interval
there is no time gap between the end of one Measurement
Interval and the start of a new Measurement Interval. This is
the normal usage case.

If the value is greater than one Measurement Interval there is
time gap between the end of one Measurement Interval and the
start of the next Measurement Interval.
    """
    return self.__repetition_period
      
  def _set_repetition_period(self, v, load=False):
    """
    Setter method for repetition_period, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/repetition_period (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_repetition_period is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_repetition_period() directly.

    YANG Description: This object specifies a configurable repetition time between
Measurement Intervals in a Measurement session in hundredths of a
second.

If the value is less than or equal to one Measurement Interval
there is no time gap between the end of one Measurement
Interval and the start of a new Measurement Interval. This is
the normal usage case.

If the value is greater than one Measurement Interval there is
time gap between the end of one Measurement Interval and the
start of the next Measurement Interval.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="repetition-period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """repetition_period must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="repetition-period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)""",
        })

    self.__repetition_period = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_repetition_period(self):
    self.__repetition_period = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="repetition-period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)


  def _get_intervals_archived(self):
    """
    Getter method for intervals_archived, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/intervals_archived (uint16)

    YANG Description: This object specifies the number of completed measurement intervals to
store in the history statistic table.

At least 32 completed measurement intervals are to be
stored. 96 measurement intervals are recommended to be stored.
    """
    return self.__intervals_archived
      
  def _set_intervals_archived(self, v, load=False):
    """
    Setter method for intervals_archived, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/intervals_archived (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_intervals_archived is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_intervals_archived() directly.

    YANG Description: This object specifies the number of completed measurement intervals to
store in the history statistic table.

At least 32 completed measurement intervals are to be
stored. 96 measurement intervals are recommended to be stored.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="intervals-archived", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """intervals_archived must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="intervals-archived", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)""",
        })

    self.__intervals_archived = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_intervals_archived(self):
    self.__intervals_archived = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="intervals-archived", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)


  def _get_packets_per_meaurement_period(self):
    """
    Getter method for packets_per_meaurement_period, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/packets_per_meaurement_period (uint16)

    YANG Description: Number of probe packets to send within a measurement interval.
    """
    return self.__packets_per_meaurement_period
      
  def _set_packets_per_meaurement_period(self, v, load=False):
    """
    Setter method for packets_per_meaurement_period, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/packets_per_meaurement_period (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_packets_per_meaurement_period is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_packets_per_meaurement_period() directly.

    YANG Description: Number of probe packets to send within a measurement interval.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="packets-per-meaurement-period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """packets_per_meaurement_period must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="packets-per-meaurement-period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)""",
        })

    self.__packets_per_meaurement_period = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_packets_per_meaurement_period(self):
    self.__packets_per_meaurement_period = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="packets-per-meaurement-period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint16', is_config=True)


  def _get_burst_interval(self):
    """
    Getter method for burst_interval, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/burst_interval (uint32)

    YANG Description: Interval between bursts within a measurement interval.
    """
    return self.__burst_interval
      
  def _set_burst_interval(self, v, load=False):
    """
    Setter method for burst_interval, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/burst_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_burst_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_burst_interval() directly.

    YANG Description: Interval between bursts within a measurement interval.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="burst-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """burst_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="burst-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)""",
        })

    self.__burst_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_burst_interval(self):
    self.__burst_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="burst-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)


  def _get_packet_per_burst(self):
    """
    Getter method for packet_per_burst, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/packet_per_burst (uint32)

    YANG Description: if burst enabled. The leaf defines the number of packet per burst of probes.
packets-per-measurement-period / burst-interval
    """
    return self.__packet_per_burst
      
  def _set_packet_per_burst(self, v, load=False):
    """
    Setter method for packet_per_burst, mapped from YANG variable /oam/cfm/performance_measurement_profiles_global/performance_measurement_profile/config/packet_per_burst (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_packet_per_burst is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_packet_per_burst() directly.

    YANG Description: if burst enabled. The leaf defines the number of packet per burst of probes.
packets-per-measurement-period / burst-interval
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="packet-per-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """packet_per_burst must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="packet-per-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)""",
        })

    self.__packet_per_burst = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_packet_per_burst(self):
    self.__packet_per_burst = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="packet-per-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oam/cfm', defining_module='openconfig-oam-cfm', yang_type='uint32', is_config=True)

  profile_name = __builtin__.property(_get_profile_name, _set_profile_name)
  enable = __builtin__.property(_get_enable, _set_enable)
  measurement_type = __builtin__.property(_get_measurement_type, _set_measurement_type)
  protocol_type = __builtin__.property(_get_protocol_type, _set_protocol_type)
  frame_size = __builtin__.property(_get_frame_size, _set_frame_size)
  measurement_interval = __builtin__.property(_get_measurement_interval, _set_measurement_interval)
  repetition_period = __builtin__.property(_get_repetition_period, _set_repetition_period)
  intervals_archived = __builtin__.property(_get_intervals_archived, _set_intervals_archived)
  packets_per_meaurement_period = __builtin__.property(_get_packets_per_meaurement_period, _set_packets_per_meaurement_period)
  burst_interval = __builtin__.property(_get_burst_interval, _set_burst_interval)
  packet_per_burst = __builtin__.property(_get_packet_per_burst, _set_packet_per_burst)


  _pyangbind_elements = OrderedDict([('profile_name', profile_name), ('enable', enable), ('measurement_type', measurement_type), ('protocol_type', protocol_type), ('frame_size', frame_size), ('measurement_interval', measurement_interval), ('repetition_period', repetition_period), ('intervals_archived', intervals_archived), ('packets_per_meaurement_period', packets_per_meaurement_period), ('burst_interval', burst_interval), ('packet_per_burst', packet_per_burst), ])


