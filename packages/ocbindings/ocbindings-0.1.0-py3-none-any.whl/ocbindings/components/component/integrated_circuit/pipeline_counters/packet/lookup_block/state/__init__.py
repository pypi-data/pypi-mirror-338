# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State and counters corresponding to the lookup subsystem of the
IC.
  """
  __slots__ = ('_path_helper', '_extmethods', '__lookup_utilization','__in_packets','__out_packets','__in_bytes','__out_bytes','__lookup_memory','__lookup_memory_used','__nexthop_memory','__nexthop_memory_used','__acl_memory_total_entries','__acl_memory_used_entries','__acl_memory_total_bytes','__acl_memory_used_bytes','__fragment_total_pkts',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__lookup_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="lookup-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-types:percentage', is_config=False)
    self.__in_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__in_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__lookup_memory = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__lookup_memory_used = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__nexthop_memory = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__nexthop_memory_used = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__acl_memory_total_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__acl_memory_used_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__acl_memory_total_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__acl_memory_used_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__fragment_total_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'packet', 'lookup-block', 'state']

  def _get_lookup_utilization(self):
    """
    Getter method for lookup_utilization, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_utilization (oc-types:percentage)

    YANG Description: The integrated-circuit lookup subsystem block utilization percentage.
    """
    return self.__lookup_utilization
      
  def _set_lookup_utilization(self, v, load=False):
    """
    Setter method for lookup_utilization, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_utilization (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_utilization is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_utilization() directly.

    YANG Description: The integrated-circuit lookup subsystem block utilization percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="lookup-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_utilization must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="lookup-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__lookup_utilization = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_utilization(self):
    self.__lookup_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="lookup-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-types:percentage', is_config=False)


  def _get_in_packets(self):
    """
    Getter method for in_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/in_packets (oc-yang:counter64)

    YANG Description: Incoming packets towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    return self.__in_packets
      
  def _set_in_packets(self, v, load=False):
    """
    Setter method for in_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/in_packets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_packets() directly.

    YANG Description: Incoming packets towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_packets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_packets(self):
    self.__in_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_packets(self):
    """
    Getter method for out_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/out_packets (oc-yang:counter64)

    YANG Description: Outgoing packets towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    return self.__out_packets
      
  def _set_out_packets(self, v, load=False):
    """
    Setter method for out_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/out_packets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_packets() directly.

    YANG Description: Outgoing packets towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_packets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_packets(self):
    self.__out_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_in_bytes(self):
    """
    Getter method for in_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/in_bytes (oc-yang:counter64)

    YANG Description: Incoming bytes towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    return self.__in_bytes
      
  def _set_in_bytes(self, v, load=False):
    """
    Setter method for in_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/in_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_bytes() directly.

    YANG Description: Incoming bytes towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_bytes(self):
    self.__in_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_bytes(self):
    """
    Getter method for out_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/out_bytes (oc-yang:counter64)

    YANG Description: Outgoing bytes towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    return self.__out_bytes
      
  def _set_out_bytes(self, v, load=False):
    """
    Setter method for out_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/out_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_bytes() directly.

    YANG Description: Outgoing bytes towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_bytes(self):
    self.__out_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_lookup_memory(self):
    """
    Getter method for lookup_memory, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_memory (uint64)

    YANG Description: The total amount of memory available in the lookup subsystem.
    """
    return self.__lookup_memory
      
  def _set_lookup_memory(self, v, load=False):
    """
    Setter method for lookup_memory, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_memory (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_memory is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_memory() directly.

    YANG Description: The total amount of memory available in the lookup subsystem.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_memory must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__lookup_memory = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_memory(self):
    self.__lookup_memory = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_lookup_memory_used(self):
    """
    Getter method for lookup_memory_used, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_memory_used (uint64)

    YANG Description: The amount of memory used in the lookup subsystem.
    """
    return self.__lookup_memory_used
      
  def _set_lookup_memory_used(self, v, load=False):
    """
    Setter method for lookup_memory_used, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_memory_used (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_memory_used is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_memory_used() directly.

    YANG Description: The amount of memory used in the lookup subsystem.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_memory_used must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__lookup_memory_used = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_memory_used(self):
    self.__lookup_memory_used = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_nexthop_memory(self):
    """
    Getter method for nexthop_memory, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/nexthop_memory (uint64)

    YANG Description: The total amount of nexthop memory available in the lookup subsystem.
    """
    return self.__nexthop_memory
      
  def _set_nexthop_memory(self, v, load=False):
    """
    Setter method for nexthop_memory, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/nexthop_memory (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nexthop_memory is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nexthop_memory() directly.

    YANG Description: The total amount of nexthop memory available in the lookup subsystem.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nexthop_memory must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__nexthop_memory = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nexthop_memory(self):
    self.__nexthop_memory = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_nexthop_memory_used(self):
    """
    Getter method for nexthop_memory_used, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/nexthop_memory_used (uint64)

    YANG Description: The amount of nexthops memory used in the lookup subsystem.
    """
    return self.__nexthop_memory_used
      
  def _set_nexthop_memory_used(self, v, load=False):
    """
    Setter method for nexthop_memory_used, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/nexthop_memory_used (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nexthop_memory_used is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nexthop_memory_used() directly.

    YANG Description: The amount of nexthops memory used in the lookup subsystem.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nexthop_memory_used must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__nexthop_memory_used = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nexthop_memory_used(self):
    self.__nexthop_memory_used = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_acl_memory_total_entries(self):
    """
    Getter method for acl_memory_total_entries, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_total_entries (uint64)

    YANG Description: Total firewall or ACL memory counter measured in entries.
    """
    return self.__acl_memory_total_entries
      
  def _set_acl_memory_total_entries(self, v, load=False):
    """
    Setter method for acl_memory_total_entries, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_total_entries (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_memory_total_entries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_memory_total_entries() directly.

    YANG Description: Total firewall or ACL memory counter measured in entries.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_memory_total_entries must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__acl_memory_total_entries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_memory_total_entries(self):
    self.__acl_memory_total_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_acl_memory_used_entries(self):
    """
    Getter method for acl_memory_used_entries, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_used_entries (uint64)

    YANG Description: Amount of used firewall or ACL memory counter measured in entries.
The number of used entries must include the entries
that are 'allocated but free' if the memory reaping algorithm makes
these entries practically unusable.
    """
    return self.__acl_memory_used_entries
      
  def _set_acl_memory_used_entries(self, v, load=False):
    """
    Setter method for acl_memory_used_entries, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_used_entries (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_memory_used_entries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_memory_used_entries() directly.

    YANG Description: Amount of used firewall or ACL memory counter measured in entries.
The number of used entries must include the entries
that are 'allocated but free' if the memory reaping algorithm makes
these entries practically unusable.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_memory_used_entries must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__acl_memory_used_entries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_memory_used_entries(self):
    self.__acl_memory_used_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_acl_memory_total_bytes(self):
    """
    Getter method for acl_memory_total_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_total_bytes (uint64)

    YANG Description: Total firewall or ACL memory counter measured in bytes.
    """
    return self.__acl_memory_total_bytes
      
  def _set_acl_memory_total_bytes(self, v, load=False):
    """
    Setter method for acl_memory_total_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_total_bytes (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_memory_total_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_memory_total_bytes() directly.

    YANG Description: Total firewall or ACL memory counter measured in bytes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_memory_total_bytes must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__acl_memory_total_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_memory_total_bytes(self):
    self.__acl_memory_total_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_acl_memory_used_bytes(self):
    """
    Getter method for acl_memory_used_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_used_bytes (uint64)

    YANG Description: Amount of used firewall or ACL memory counter measured in bytes.
The number of used bytes must include the bytes
that are 'allocated but free' if the memory reaping algorithm makes
these bytes practically unusable
    """
    return self.__acl_memory_used_bytes
      
  def _set_acl_memory_used_bytes(self, v, load=False):
    """
    Setter method for acl_memory_used_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_used_bytes (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_memory_used_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_memory_used_bytes() directly.

    YANG Description: Amount of used firewall or ACL memory counter measured in bytes.
The number of used bytes must include the bytes
that are 'allocated but free' if the memory reaping algorithm makes
these bytes practically unusable
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_memory_used_bytes must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__acl_memory_used_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_memory_used_bytes(self):
    self.__acl_memory_used_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_fragment_total_pkts(self):
    """
    Getter method for fragment_total_pkts, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/fragment_total_pkts (oc-yang:counter64)

    YANG Description: Total number of fragments generated by the CPU.
    """
    return self.__fragment_total_pkts
      
  def _set_fragment_total_pkts(self, v, load=False):
    """
    Setter method for fragment_total_pkts, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/fragment_total_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fragment_total_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fragment_total_pkts() directly.

    YANG Description: Total number of fragments generated by the CPU.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fragment_total_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__fragment_total_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fragment_total_pkts(self):
    self.__fragment_total_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  lookup_utilization = __builtin__.property(_get_lookup_utilization)
  in_packets = __builtin__.property(_get_in_packets)
  out_packets = __builtin__.property(_get_out_packets)
  in_bytes = __builtin__.property(_get_in_bytes)
  out_bytes = __builtin__.property(_get_out_bytes)
  lookup_memory = __builtin__.property(_get_lookup_memory)
  lookup_memory_used = __builtin__.property(_get_lookup_memory_used)
  nexthop_memory = __builtin__.property(_get_nexthop_memory)
  nexthop_memory_used = __builtin__.property(_get_nexthop_memory_used)
  acl_memory_total_entries = __builtin__.property(_get_acl_memory_total_entries)
  acl_memory_used_entries = __builtin__.property(_get_acl_memory_used_entries)
  acl_memory_total_bytes = __builtin__.property(_get_acl_memory_total_bytes)
  acl_memory_used_bytes = __builtin__.property(_get_acl_memory_used_bytes)
  fragment_total_pkts = __builtin__.property(_get_fragment_total_pkts)


  _pyangbind_elements = OrderedDict([('lookup_utilization', lookup_utilization), ('in_packets', in_packets), ('out_packets', out_packets), ('in_bytes', in_bytes), ('out_bytes', out_bytes), ('lookup_memory', lookup_memory), ('lookup_memory_used', lookup_memory_used), ('nexthop_memory', nexthop_memory), ('nexthop_memory_used', nexthop_memory_used), ('acl_memory_total_entries', acl_memory_total_entries), ('acl_memory_used_entries', acl_memory_used_entries), ('acl_memory_total_bytes', acl_memory_total_bytes), ('acl_memory_used_bytes', acl_memory_used_bytes), ('fragment_total_pkts', fragment_total_pkts), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State and counters corresponding to the lookup subsystem of the
IC.
  """
  __slots__ = ('_path_helper', '_extmethods', '__lookup_utilization','__in_packets','__out_packets','__in_bytes','__out_bytes','__lookup_memory','__lookup_memory_used','__nexthop_memory','__nexthop_memory_used','__acl_memory_total_entries','__acl_memory_used_entries','__acl_memory_total_bytes','__acl_memory_used_bytes','__fragment_total_pkts',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__lookup_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="lookup-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-types:percentage', is_config=False)
    self.__in_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__in_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__lookup_memory = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__lookup_memory_used = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__nexthop_memory = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__nexthop_memory_used = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__acl_memory_total_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__acl_memory_used_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__acl_memory_total_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__acl_memory_used_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__fragment_total_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'packet', 'lookup-block', 'state']

  def _get_lookup_utilization(self):
    """
    Getter method for lookup_utilization, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_utilization (oc-types:percentage)

    YANG Description: The integrated-circuit lookup subsystem block utilization percentage.
    """
    return self.__lookup_utilization
      
  def _set_lookup_utilization(self, v, load=False):
    """
    Setter method for lookup_utilization, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_utilization (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_utilization is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_utilization() directly.

    YANG Description: The integrated-circuit lookup subsystem block utilization percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="lookup-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_utilization must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="lookup-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__lookup_utilization = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_utilization(self):
    self.__lookup_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="lookup-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-types:percentage', is_config=False)


  def _get_in_packets(self):
    """
    Getter method for in_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/in_packets (oc-yang:counter64)

    YANG Description: Incoming packets towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    return self.__in_packets
      
  def _set_in_packets(self, v, load=False):
    """
    Setter method for in_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/in_packets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_packets() directly.

    YANG Description: Incoming packets towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_packets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_packets(self):
    self.__in_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_packets(self):
    """
    Getter method for out_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/out_packets (oc-yang:counter64)

    YANG Description: Outgoing packets towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    return self.__out_packets
      
  def _set_out_packets(self, v, load=False):
    """
    Setter method for out_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/out_packets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_packets() directly.

    YANG Description: Outgoing packets towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_packets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_packets(self):
    self.__out_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_in_bytes(self):
    """
    Getter method for in_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/in_bytes (oc-yang:counter64)

    YANG Description: Incoming bytes towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    return self.__in_bytes
      
  def _set_in_bytes(self, v, load=False):
    """
    Setter method for in_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/in_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_bytes() directly.

    YANG Description: Incoming bytes towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_bytes(self):
    self.__in_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_bytes(self):
    """
    Getter method for out_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/out_bytes (oc-yang:counter64)

    YANG Description: Outgoing bytes towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    return self.__out_bytes
      
  def _set_out_bytes(self, v, load=False):
    """
    Setter method for out_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/out_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_bytes() directly.

    YANG Description: Outgoing bytes towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_bytes(self):
    self.__out_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_lookup_memory(self):
    """
    Getter method for lookup_memory, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_memory (uint64)

    YANG Description: The total amount of memory available in the lookup subsystem.
    """
    return self.__lookup_memory
      
  def _set_lookup_memory(self, v, load=False):
    """
    Setter method for lookup_memory, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_memory (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_memory is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_memory() directly.

    YANG Description: The total amount of memory available in the lookup subsystem.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_memory must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__lookup_memory = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_memory(self):
    self.__lookup_memory = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_lookup_memory_used(self):
    """
    Getter method for lookup_memory_used, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_memory_used (uint64)

    YANG Description: The amount of memory used in the lookup subsystem.
    """
    return self.__lookup_memory_used
      
  def _set_lookup_memory_used(self, v, load=False):
    """
    Setter method for lookup_memory_used, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_memory_used (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_memory_used is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_memory_used() directly.

    YANG Description: The amount of memory used in the lookup subsystem.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_memory_used must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__lookup_memory_used = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_memory_used(self):
    self.__lookup_memory_used = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_nexthop_memory(self):
    """
    Getter method for nexthop_memory, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/nexthop_memory (uint64)

    YANG Description: The total amount of nexthop memory available in the lookup subsystem.
    """
    return self.__nexthop_memory
      
  def _set_nexthop_memory(self, v, load=False):
    """
    Setter method for nexthop_memory, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/nexthop_memory (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nexthop_memory is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nexthop_memory() directly.

    YANG Description: The total amount of nexthop memory available in the lookup subsystem.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nexthop_memory must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__nexthop_memory = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nexthop_memory(self):
    self.__nexthop_memory = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_nexthop_memory_used(self):
    """
    Getter method for nexthop_memory_used, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/nexthop_memory_used (uint64)

    YANG Description: The amount of nexthops memory used in the lookup subsystem.
    """
    return self.__nexthop_memory_used
      
  def _set_nexthop_memory_used(self, v, load=False):
    """
    Setter method for nexthop_memory_used, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/nexthop_memory_used (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nexthop_memory_used is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nexthop_memory_used() directly.

    YANG Description: The amount of nexthops memory used in the lookup subsystem.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nexthop_memory_used must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__nexthop_memory_used = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nexthop_memory_used(self):
    self.__nexthop_memory_used = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_acl_memory_total_entries(self):
    """
    Getter method for acl_memory_total_entries, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_total_entries (uint64)

    YANG Description: Total firewall or ACL memory counter measured in entries.
    """
    return self.__acl_memory_total_entries
      
  def _set_acl_memory_total_entries(self, v, load=False):
    """
    Setter method for acl_memory_total_entries, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_total_entries (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_memory_total_entries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_memory_total_entries() directly.

    YANG Description: Total firewall or ACL memory counter measured in entries.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_memory_total_entries must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__acl_memory_total_entries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_memory_total_entries(self):
    self.__acl_memory_total_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_acl_memory_used_entries(self):
    """
    Getter method for acl_memory_used_entries, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_used_entries (uint64)

    YANG Description: Amount of used firewall or ACL memory counter measured in entries.
The number of used entries must include the entries
that are 'allocated but free' if the memory reaping algorithm makes
these entries practically unusable.
    """
    return self.__acl_memory_used_entries
      
  def _set_acl_memory_used_entries(self, v, load=False):
    """
    Setter method for acl_memory_used_entries, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_used_entries (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_memory_used_entries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_memory_used_entries() directly.

    YANG Description: Amount of used firewall or ACL memory counter measured in entries.
The number of used entries must include the entries
that are 'allocated but free' if the memory reaping algorithm makes
these entries practically unusable.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_memory_used_entries must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__acl_memory_used_entries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_memory_used_entries(self):
    self.__acl_memory_used_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_acl_memory_total_bytes(self):
    """
    Getter method for acl_memory_total_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_total_bytes (uint64)

    YANG Description: Total firewall or ACL memory counter measured in bytes.
    """
    return self.__acl_memory_total_bytes
      
  def _set_acl_memory_total_bytes(self, v, load=False):
    """
    Setter method for acl_memory_total_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_total_bytes (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_memory_total_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_memory_total_bytes() directly.

    YANG Description: Total firewall or ACL memory counter measured in bytes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_memory_total_bytes must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__acl_memory_total_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_memory_total_bytes(self):
    self.__acl_memory_total_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_acl_memory_used_bytes(self):
    """
    Getter method for acl_memory_used_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_used_bytes (uint64)

    YANG Description: Amount of used firewall or ACL memory counter measured in bytes.
The number of used bytes must include the bytes
that are 'allocated but free' if the memory reaping algorithm makes
these bytes practically unusable
    """
    return self.__acl_memory_used_bytes
      
  def _set_acl_memory_used_bytes(self, v, load=False):
    """
    Setter method for acl_memory_used_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_used_bytes (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_memory_used_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_memory_used_bytes() directly.

    YANG Description: Amount of used firewall or ACL memory counter measured in bytes.
The number of used bytes must include the bytes
that are 'allocated but free' if the memory reaping algorithm makes
these bytes practically unusable
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_memory_used_bytes must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__acl_memory_used_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_memory_used_bytes(self):
    self.__acl_memory_used_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_fragment_total_pkts(self):
    """
    Getter method for fragment_total_pkts, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/fragment_total_pkts (oc-yang:counter64)

    YANG Description: Total number of fragments generated by the CPU.
    """
    return self.__fragment_total_pkts
      
  def _set_fragment_total_pkts(self, v, load=False):
    """
    Setter method for fragment_total_pkts, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/fragment_total_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fragment_total_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fragment_total_pkts() directly.

    YANG Description: Total number of fragments generated by the CPU.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fragment_total_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__fragment_total_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fragment_total_pkts(self):
    self.__fragment_total_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  lookup_utilization = __builtin__.property(_get_lookup_utilization)
  in_packets = __builtin__.property(_get_in_packets)
  out_packets = __builtin__.property(_get_out_packets)
  in_bytes = __builtin__.property(_get_in_bytes)
  out_bytes = __builtin__.property(_get_out_bytes)
  lookup_memory = __builtin__.property(_get_lookup_memory)
  lookup_memory_used = __builtin__.property(_get_lookup_memory_used)
  nexthop_memory = __builtin__.property(_get_nexthop_memory)
  nexthop_memory_used = __builtin__.property(_get_nexthop_memory_used)
  acl_memory_total_entries = __builtin__.property(_get_acl_memory_total_entries)
  acl_memory_used_entries = __builtin__.property(_get_acl_memory_used_entries)
  acl_memory_total_bytes = __builtin__.property(_get_acl_memory_total_bytes)
  acl_memory_used_bytes = __builtin__.property(_get_acl_memory_used_bytes)
  fragment_total_pkts = __builtin__.property(_get_fragment_total_pkts)


  _pyangbind_elements = OrderedDict([('lookup_utilization', lookup_utilization), ('in_packets', in_packets), ('out_packets', out_packets), ('in_bytes', in_bytes), ('out_bytes', out_bytes), ('lookup_memory', lookup_memory), ('lookup_memory_used', lookup_memory_used), ('nexthop_memory', nexthop_memory), ('nexthop_memory_used', nexthop_memory_used), ('acl_memory_total_entries', acl_memory_total_entries), ('acl_memory_used_entries', acl_memory_used_entries), ('acl_memory_total_bytes', acl_memory_total_bytes), ('acl_memory_used_bytes', acl_memory_used_bytes), ('fragment_total_pkts', fragment_total_pkts), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State and counters corresponding to the lookup subsystem of the
IC.
  """
  __slots__ = ('_path_helper', '_extmethods', '__lookup_utilization','__in_packets','__out_packets','__in_bytes','__out_bytes','__lookup_memory','__lookup_memory_used','__nexthop_memory','__nexthop_memory_used','__acl_memory_total_entries','__acl_memory_used_entries','__acl_memory_total_bytes','__acl_memory_used_bytes','__fragment_total_pkts',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__lookup_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="lookup-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-types:percentage', is_config=False)
    self.__in_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__in_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__lookup_memory = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__lookup_memory_used = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__nexthop_memory = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__nexthop_memory_used = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__acl_memory_total_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__acl_memory_used_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__acl_memory_total_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__acl_memory_used_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__fragment_total_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'packet', 'lookup-block', 'state']

  def _get_lookup_utilization(self):
    """
    Getter method for lookup_utilization, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_utilization (oc-types:percentage)

    YANG Description: The integrated-circuit lookup subsystem block utilization percentage.
    """
    return self.__lookup_utilization
      
  def _set_lookup_utilization(self, v, load=False):
    """
    Setter method for lookup_utilization, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_utilization (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_utilization is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_utilization() directly.

    YANG Description: The integrated-circuit lookup subsystem block utilization percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="lookup-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_utilization must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="lookup-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__lookup_utilization = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_utilization(self):
    self.__lookup_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="lookup-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-types:percentage', is_config=False)


  def _get_in_packets(self):
    """
    Getter method for in_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/in_packets (oc-yang:counter64)

    YANG Description: Incoming packets towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    return self.__in_packets
      
  def _set_in_packets(self, v, load=False):
    """
    Setter method for in_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/in_packets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_packets() directly.

    YANG Description: Incoming packets towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_packets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_packets(self):
    self.__in_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_packets(self):
    """
    Getter method for out_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/out_packets (oc-yang:counter64)

    YANG Description: Outgoing packets towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    return self.__out_packets
      
  def _set_out_packets(self, v, load=False):
    """
    Setter method for out_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/out_packets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_packets() directly.

    YANG Description: Outgoing packets towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_packets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_packets(self):
    self.__out_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_in_bytes(self):
    """
    Getter method for in_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/in_bytes (oc-yang:counter64)

    YANG Description: Incoming bytes towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    return self.__in_bytes
      
  def _set_in_bytes(self, v, load=False):
    """
    Setter method for in_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/in_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_bytes() directly.

    YANG Description: Incoming bytes towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_bytes(self):
    self.__in_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_bytes(self):
    """
    Getter method for out_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/out_bytes (oc-yang:counter64)

    YANG Description: Outgoing bytes towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    return self.__out_bytes
      
  def _set_out_bytes(self, v, load=False):
    """
    Setter method for out_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/out_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_bytes() directly.

    YANG Description: Outgoing bytes towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_bytes(self):
    self.__out_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_lookup_memory(self):
    """
    Getter method for lookup_memory, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_memory (uint64)

    YANG Description: The total amount of memory available in the lookup subsystem.
    """
    return self.__lookup_memory
      
  def _set_lookup_memory(self, v, load=False):
    """
    Setter method for lookup_memory, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_memory (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_memory is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_memory() directly.

    YANG Description: The total amount of memory available in the lookup subsystem.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_memory must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__lookup_memory = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_memory(self):
    self.__lookup_memory = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_lookup_memory_used(self):
    """
    Getter method for lookup_memory_used, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_memory_used (uint64)

    YANG Description: The amount of memory used in the lookup subsystem.
    """
    return self.__lookup_memory_used
      
  def _set_lookup_memory_used(self, v, load=False):
    """
    Setter method for lookup_memory_used, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_memory_used (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_memory_used is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_memory_used() directly.

    YANG Description: The amount of memory used in the lookup subsystem.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_memory_used must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__lookup_memory_used = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_memory_used(self):
    self.__lookup_memory_used = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_nexthop_memory(self):
    """
    Getter method for nexthop_memory, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/nexthop_memory (uint64)

    YANG Description: The total amount of nexthop memory available in the lookup subsystem.
    """
    return self.__nexthop_memory
      
  def _set_nexthop_memory(self, v, load=False):
    """
    Setter method for nexthop_memory, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/nexthop_memory (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nexthop_memory is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nexthop_memory() directly.

    YANG Description: The total amount of nexthop memory available in the lookup subsystem.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nexthop_memory must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__nexthop_memory = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nexthop_memory(self):
    self.__nexthop_memory = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_nexthop_memory_used(self):
    """
    Getter method for nexthop_memory_used, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/nexthop_memory_used (uint64)

    YANG Description: The amount of nexthops memory used in the lookup subsystem.
    """
    return self.__nexthop_memory_used
      
  def _set_nexthop_memory_used(self, v, load=False):
    """
    Setter method for nexthop_memory_used, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/nexthop_memory_used (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nexthop_memory_used is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nexthop_memory_used() directly.

    YANG Description: The amount of nexthops memory used in the lookup subsystem.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nexthop_memory_used must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__nexthop_memory_used = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nexthop_memory_used(self):
    self.__nexthop_memory_used = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_acl_memory_total_entries(self):
    """
    Getter method for acl_memory_total_entries, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_total_entries (uint64)

    YANG Description: Total firewall or ACL memory counter measured in entries.
    """
    return self.__acl_memory_total_entries
      
  def _set_acl_memory_total_entries(self, v, load=False):
    """
    Setter method for acl_memory_total_entries, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_total_entries (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_memory_total_entries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_memory_total_entries() directly.

    YANG Description: Total firewall or ACL memory counter measured in entries.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_memory_total_entries must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__acl_memory_total_entries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_memory_total_entries(self):
    self.__acl_memory_total_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_acl_memory_used_entries(self):
    """
    Getter method for acl_memory_used_entries, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_used_entries (uint64)

    YANG Description: Amount of used firewall or ACL memory counter measured in entries.
The number of used entries must include the entries
that are 'allocated but free' if the memory reaping algorithm makes
these entries practically unusable.
    """
    return self.__acl_memory_used_entries
      
  def _set_acl_memory_used_entries(self, v, load=False):
    """
    Setter method for acl_memory_used_entries, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_used_entries (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_memory_used_entries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_memory_used_entries() directly.

    YANG Description: Amount of used firewall or ACL memory counter measured in entries.
The number of used entries must include the entries
that are 'allocated but free' if the memory reaping algorithm makes
these entries practically unusable.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_memory_used_entries must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__acl_memory_used_entries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_memory_used_entries(self):
    self.__acl_memory_used_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_acl_memory_total_bytes(self):
    """
    Getter method for acl_memory_total_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_total_bytes (uint64)

    YANG Description: Total firewall or ACL memory counter measured in bytes.
    """
    return self.__acl_memory_total_bytes
      
  def _set_acl_memory_total_bytes(self, v, load=False):
    """
    Setter method for acl_memory_total_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_total_bytes (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_memory_total_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_memory_total_bytes() directly.

    YANG Description: Total firewall or ACL memory counter measured in bytes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_memory_total_bytes must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__acl_memory_total_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_memory_total_bytes(self):
    self.__acl_memory_total_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_acl_memory_used_bytes(self):
    """
    Getter method for acl_memory_used_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_used_bytes (uint64)

    YANG Description: Amount of used firewall or ACL memory counter measured in bytes.
The number of used bytes must include the bytes
that are 'allocated but free' if the memory reaping algorithm makes
these bytes practically unusable
    """
    return self.__acl_memory_used_bytes
      
  def _set_acl_memory_used_bytes(self, v, load=False):
    """
    Setter method for acl_memory_used_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_used_bytes (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_memory_used_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_memory_used_bytes() directly.

    YANG Description: Amount of used firewall or ACL memory counter measured in bytes.
The number of used bytes must include the bytes
that are 'allocated but free' if the memory reaping algorithm makes
these bytes practically unusable
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_memory_used_bytes must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__acl_memory_used_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_memory_used_bytes(self):
    self.__acl_memory_used_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_fragment_total_pkts(self):
    """
    Getter method for fragment_total_pkts, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/fragment_total_pkts (oc-yang:counter64)

    YANG Description: Total number of fragments generated by the CPU.
    """
    return self.__fragment_total_pkts
      
  def _set_fragment_total_pkts(self, v, load=False):
    """
    Setter method for fragment_total_pkts, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/fragment_total_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fragment_total_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fragment_total_pkts() directly.

    YANG Description: Total number of fragments generated by the CPU.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fragment_total_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__fragment_total_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fragment_total_pkts(self):
    self.__fragment_total_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  lookup_utilization = __builtin__.property(_get_lookup_utilization)
  in_packets = __builtin__.property(_get_in_packets)
  out_packets = __builtin__.property(_get_out_packets)
  in_bytes = __builtin__.property(_get_in_bytes)
  out_bytes = __builtin__.property(_get_out_bytes)
  lookup_memory = __builtin__.property(_get_lookup_memory)
  lookup_memory_used = __builtin__.property(_get_lookup_memory_used)
  nexthop_memory = __builtin__.property(_get_nexthop_memory)
  nexthop_memory_used = __builtin__.property(_get_nexthop_memory_used)
  acl_memory_total_entries = __builtin__.property(_get_acl_memory_total_entries)
  acl_memory_used_entries = __builtin__.property(_get_acl_memory_used_entries)
  acl_memory_total_bytes = __builtin__.property(_get_acl_memory_total_bytes)
  acl_memory_used_bytes = __builtin__.property(_get_acl_memory_used_bytes)
  fragment_total_pkts = __builtin__.property(_get_fragment_total_pkts)


  _pyangbind_elements = OrderedDict([('lookup_utilization', lookup_utilization), ('in_packets', in_packets), ('out_packets', out_packets), ('in_bytes', in_bytes), ('out_bytes', out_bytes), ('lookup_memory', lookup_memory), ('lookup_memory_used', lookup_memory_used), ('nexthop_memory', nexthop_memory), ('nexthop_memory_used', nexthop_memory_used), ('acl_memory_total_entries', acl_memory_total_entries), ('acl_memory_used_entries', acl_memory_used_entries), ('acl_memory_total_bytes', acl_memory_total_bytes), ('acl_memory_used_bytes', acl_memory_used_bytes), ('fragment_total_pkts', fragment_total_pkts), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State and counters corresponding to the lookup subsystem of the
IC.
  """
  __slots__ = ('_path_helper', '_extmethods', '__lookup_utilization','__in_packets','__out_packets','__in_bytes','__out_bytes','__lookup_memory','__lookup_memory_used','__nexthop_memory','__nexthop_memory_used','__acl_memory_total_entries','__acl_memory_used_entries','__acl_memory_total_bytes','__acl_memory_used_bytes','__fragment_total_pkts',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__lookup_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="lookup-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-types:percentage', is_config=False)
    self.__in_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__in_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__lookup_memory = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__lookup_memory_used = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__nexthop_memory = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__nexthop_memory_used = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__acl_memory_total_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__acl_memory_used_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__acl_memory_total_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__acl_memory_used_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__fragment_total_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'packet', 'lookup-block', 'state']

  def _get_lookup_utilization(self):
    """
    Getter method for lookup_utilization, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_utilization (oc-types:percentage)

    YANG Description: The integrated-circuit lookup subsystem block utilization percentage.
    """
    return self.__lookup_utilization
      
  def _set_lookup_utilization(self, v, load=False):
    """
    Setter method for lookup_utilization, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_utilization (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_utilization is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_utilization() directly.

    YANG Description: The integrated-circuit lookup subsystem block utilization percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="lookup-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_utilization must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="lookup-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__lookup_utilization = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_utilization(self):
    self.__lookup_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="lookup-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-types:percentage', is_config=False)


  def _get_in_packets(self):
    """
    Getter method for in_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/in_packets (oc-yang:counter64)

    YANG Description: Incoming packets towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    return self.__in_packets
      
  def _set_in_packets(self, v, load=False):
    """
    Setter method for in_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/in_packets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_packets() directly.

    YANG Description: Incoming packets towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_packets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_packets(self):
    self.__in_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_packets(self):
    """
    Getter method for out_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/out_packets (oc-yang:counter64)

    YANG Description: Outgoing packets towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    return self.__out_packets
      
  def _set_out_packets(self, v, load=False):
    """
    Setter method for out_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/out_packets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_packets() directly.

    YANG Description: Outgoing packets towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_packets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_packets(self):
    self.__out_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_in_bytes(self):
    """
    Getter method for in_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/in_bytes (oc-yang:counter64)

    YANG Description: Incoming bytes towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    return self.__in_bytes
      
  def _set_in_bytes(self, v, load=False):
    """
    Setter method for in_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/in_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_bytes() directly.

    YANG Description: Incoming bytes towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_bytes(self):
    self.__in_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_bytes(self):
    """
    Getter method for out_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/out_bytes (oc-yang:counter64)

    YANG Description: Outgoing bytes towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    return self.__out_bytes
      
  def _set_out_bytes(self, v, load=False):
    """
    Setter method for out_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/out_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_bytes() directly.

    YANG Description: Outgoing bytes towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_bytes(self):
    self.__out_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_lookup_memory(self):
    """
    Getter method for lookup_memory, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_memory (uint64)

    YANG Description: The total amount of memory available in the lookup subsystem.
    """
    return self.__lookup_memory
      
  def _set_lookup_memory(self, v, load=False):
    """
    Setter method for lookup_memory, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_memory (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_memory is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_memory() directly.

    YANG Description: The total amount of memory available in the lookup subsystem.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_memory must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__lookup_memory = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_memory(self):
    self.__lookup_memory = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_lookup_memory_used(self):
    """
    Getter method for lookup_memory_used, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_memory_used (uint64)

    YANG Description: The amount of memory used in the lookup subsystem.
    """
    return self.__lookup_memory_used
      
  def _set_lookup_memory_used(self, v, load=False):
    """
    Setter method for lookup_memory_used, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/lookup_memory_used (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_memory_used is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_memory_used() directly.

    YANG Description: The amount of memory used in the lookup subsystem.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_memory_used must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__lookup_memory_used = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_memory_used(self):
    self.__lookup_memory_used = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lookup-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_nexthop_memory(self):
    """
    Getter method for nexthop_memory, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/nexthop_memory (uint64)

    YANG Description: The total amount of nexthop memory available in the lookup subsystem.
    """
    return self.__nexthop_memory
      
  def _set_nexthop_memory(self, v, load=False):
    """
    Setter method for nexthop_memory, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/nexthop_memory (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nexthop_memory is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nexthop_memory() directly.

    YANG Description: The total amount of nexthop memory available in the lookup subsystem.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nexthop_memory must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__nexthop_memory = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nexthop_memory(self):
    self.__nexthop_memory = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_nexthop_memory_used(self):
    """
    Getter method for nexthop_memory_used, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/nexthop_memory_used (uint64)

    YANG Description: The amount of nexthops memory used in the lookup subsystem.
    """
    return self.__nexthop_memory_used
      
  def _set_nexthop_memory_used(self, v, load=False):
    """
    Setter method for nexthop_memory_used, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/nexthop_memory_used (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nexthop_memory_used is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nexthop_memory_used() directly.

    YANG Description: The amount of nexthops memory used in the lookup subsystem.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nexthop_memory_used must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__nexthop_memory_used = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nexthop_memory_used(self):
    self.__nexthop_memory_used = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nexthop-memory-used", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_acl_memory_total_entries(self):
    """
    Getter method for acl_memory_total_entries, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_total_entries (uint64)

    YANG Description: Total firewall or ACL memory counter measured in entries.
    """
    return self.__acl_memory_total_entries
      
  def _set_acl_memory_total_entries(self, v, load=False):
    """
    Setter method for acl_memory_total_entries, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_total_entries (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_memory_total_entries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_memory_total_entries() directly.

    YANG Description: Total firewall or ACL memory counter measured in entries.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_memory_total_entries must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__acl_memory_total_entries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_memory_total_entries(self):
    self.__acl_memory_total_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_acl_memory_used_entries(self):
    """
    Getter method for acl_memory_used_entries, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_used_entries (uint64)

    YANG Description: Amount of used firewall or ACL memory counter measured in entries.
The number of used entries must include the entries
that are 'allocated but free' if the memory reaping algorithm makes
these entries practically unusable.
    """
    return self.__acl_memory_used_entries
      
  def _set_acl_memory_used_entries(self, v, load=False):
    """
    Setter method for acl_memory_used_entries, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_used_entries (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_memory_used_entries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_memory_used_entries() directly.

    YANG Description: Amount of used firewall or ACL memory counter measured in entries.
The number of used entries must include the entries
that are 'allocated but free' if the memory reaping algorithm makes
these entries practically unusable.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_memory_used_entries must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__acl_memory_used_entries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_memory_used_entries(self):
    self.__acl_memory_used_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_acl_memory_total_bytes(self):
    """
    Getter method for acl_memory_total_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_total_bytes (uint64)

    YANG Description: Total firewall or ACL memory counter measured in bytes.
    """
    return self.__acl_memory_total_bytes
      
  def _set_acl_memory_total_bytes(self, v, load=False):
    """
    Setter method for acl_memory_total_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_total_bytes (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_memory_total_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_memory_total_bytes() directly.

    YANG Description: Total firewall or ACL memory counter measured in bytes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_memory_total_bytes must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__acl_memory_total_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_memory_total_bytes(self):
    self.__acl_memory_total_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-total-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_acl_memory_used_bytes(self):
    """
    Getter method for acl_memory_used_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_used_bytes (uint64)

    YANG Description: Amount of used firewall or ACL memory counter measured in bytes.
The number of used bytes must include the bytes
that are 'allocated but free' if the memory reaping algorithm makes
these bytes practically unusable
    """
    return self.__acl_memory_used_bytes
      
  def _set_acl_memory_used_bytes(self, v, load=False):
    """
    Setter method for acl_memory_used_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/acl_memory_used_bytes (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_memory_used_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_memory_used_bytes() directly.

    YANG Description: Amount of used firewall or ACL memory counter measured in bytes.
The number of used bytes must include the bytes
that are 'allocated but free' if the memory reaping algorithm makes
these bytes practically unusable
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_memory_used_bytes must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__acl_memory_used_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_memory_used_bytes(self):
    self.__acl_memory_used_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="acl-memory-used-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_fragment_total_pkts(self):
    """
    Getter method for fragment_total_pkts, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/fragment_total_pkts (oc-yang:counter64)

    YANG Description: Total number of fragments generated by the CPU.
    """
    return self.__fragment_total_pkts
      
  def _set_fragment_total_pkts(self, v, load=False):
    """
    Setter method for fragment_total_pkts, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/lookup_block/state/fragment_total_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fragment_total_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fragment_total_pkts() directly.

    YANG Description: Total number of fragments generated by the CPU.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fragment_total_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__fragment_total_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fragment_total_pkts(self):
    self.__fragment_total_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fragment-total-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  lookup_utilization = __builtin__.property(_get_lookup_utilization)
  in_packets = __builtin__.property(_get_in_packets)
  out_packets = __builtin__.property(_get_out_packets)
  in_bytes = __builtin__.property(_get_in_bytes)
  out_bytes = __builtin__.property(_get_out_bytes)
  lookup_memory = __builtin__.property(_get_lookup_memory)
  lookup_memory_used = __builtin__.property(_get_lookup_memory_used)
  nexthop_memory = __builtin__.property(_get_nexthop_memory)
  nexthop_memory_used = __builtin__.property(_get_nexthop_memory_used)
  acl_memory_total_entries = __builtin__.property(_get_acl_memory_total_entries)
  acl_memory_used_entries = __builtin__.property(_get_acl_memory_used_entries)
  acl_memory_total_bytes = __builtin__.property(_get_acl_memory_total_bytes)
  acl_memory_used_bytes = __builtin__.property(_get_acl_memory_used_bytes)
  fragment_total_pkts = __builtin__.property(_get_fragment_total_pkts)


  _pyangbind_elements = OrderedDict([('lookup_utilization', lookup_utilization), ('in_packets', in_packets), ('out_packets', out_packets), ('in_bytes', in_bytes), ('out_bytes', out_bytes), ('lookup_memory', lookup_memory), ('lookup_memory_used', lookup_memory_used), ('nexthop_memory', nexthop_memory), ('nexthop_memory_used', nexthop_memory_used), ('acl_memory_total_entries', acl_memory_total_entries), ('acl_memory_used_entries', acl_memory_used_entries), ('acl_memory_total_bytes', acl_memory_total_bytes), ('acl_memory_used_bytes', acl_memory_used_bytes), ('fragment_total_pkts', fragment_total_pkts), ])


