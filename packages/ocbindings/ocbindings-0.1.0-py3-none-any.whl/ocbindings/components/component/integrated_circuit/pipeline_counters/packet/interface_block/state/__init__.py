# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/integrated-circuit/pipeline-counters/packet/interface-block/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State and counters corresponding to the interface subsystem of
the IC.
  """
  __slots__ = ('_path_helper', '_extmethods', '__in_packets','__out_packets','__in_bytes','__out_bytes',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__in_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__in_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'packet', 'interface-block', 'state']

  def _get_in_packets(self):
    """
    Getter method for in_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/in_packets (oc-yang:counter64)

    YANG Description: Incoming packets towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    return self.__in_packets
      
  def _set_in_packets(self, v, load=False):
    """
    Setter method for in_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/in_packets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_packets() directly.

    YANG Description: Incoming packets towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_packets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_packets(self):
    self.__in_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_packets(self):
    """
    Getter method for out_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/out_packets (oc-yang:counter64)

    YANG Description: Outgoing packets towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    return self.__out_packets
      
  def _set_out_packets(self, v, load=False):
    """
    Setter method for out_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/out_packets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_packets() directly.

    YANG Description: Outgoing packets towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_packets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_packets(self):
    self.__out_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_in_bytes(self):
    """
    Getter method for in_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/in_bytes (oc-yang:counter64)

    YANG Description: Incoming bytes towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    return self.__in_bytes
      
  def _set_in_bytes(self, v, load=False):
    """
    Setter method for in_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/in_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_bytes() directly.

    YANG Description: Incoming bytes towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_bytes(self):
    self.__in_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_bytes(self):
    """
    Getter method for out_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/out_bytes (oc-yang:counter64)

    YANG Description: Outgoing bytes towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    return self.__out_bytes
      
  def _set_out_bytes(self, v, load=False):
    """
    Setter method for out_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/out_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_bytes() directly.

    YANG Description: Outgoing bytes towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_bytes(self):
    self.__out_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  in_packets = __builtin__.property(_get_in_packets)
  out_packets = __builtin__.property(_get_out_packets)
  in_bytes = __builtin__.property(_get_in_bytes)
  out_bytes = __builtin__.property(_get_out_bytes)


  _pyangbind_elements = OrderedDict([('in_packets', in_packets), ('out_packets', out_packets), ('in_bytes', in_bytes), ('out_bytes', out_bytes), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/integrated-circuit/pipeline-counters/packet/interface-block/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State and counters corresponding to the interface subsystem of
the IC.
  """
  __slots__ = ('_path_helper', '_extmethods', '__in_packets','__out_packets','__in_bytes','__out_bytes',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__in_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__in_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'packet', 'interface-block', 'state']

  def _get_in_packets(self):
    """
    Getter method for in_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/in_packets (oc-yang:counter64)

    YANG Description: Incoming packets towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    return self.__in_packets
      
  def _set_in_packets(self, v, load=False):
    """
    Setter method for in_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/in_packets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_packets() directly.

    YANG Description: Incoming packets towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_packets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_packets(self):
    self.__in_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_packets(self):
    """
    Getter method for out_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/out_packets (oc-yang:counter64)

    YANG Description: Outgoing packets towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    return self.__out_packets
      
  def _set_out_packets(self, v, load=False):
    """
    Setter method for out_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/out_packets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_packets() directly.

    YANG Description: Outgoing packets towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_packets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_packets(self):
    self.__out_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_in_bytes(self):
    """
    Getter method for in_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/in_bytes (oc-yang:counter64)

    YANG Description: Incoming bytes towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    return self.__in_bytes
      
  def _set_in_bytes(self, v, load=False):
    """
    Setter method for in_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/in_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_bytes() directly.

    YANG Description: Incoming bytes towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_bytes(self):
    self.__in_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_bytes(self):
    """
    Getter method for out_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/out_bytes (oc-yang:counter64)

    YANG Description: Outgoing bytes towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    return self.__out_bytes
      
  def _set_out_bytes(self, v, load=False):
    """
    Setter method for out_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/out_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_bytes() directly.

    YANG Description: Outgoing bytes towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_bytes(self):
    self.__out_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  in_packets = __builtin__.property(_get_in_packets)
  out_packets = __builtin__.property(_get_out_packets)
  in_bytes = __builtin__.property(_get_in_bytes)
  out_bytes = __builtin__.property(_get_out_bytes)


  _pyangbind_elements = OrderedDict([('in_packets', in_packets), ('out_packets', out_packets), ('in_bytes', in_bytes), ('out_bytes', out_bytes), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/integrated-circuit/pipeline-counters/packet/interface-block/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State and counters corresponding to the interface subsystem of
the IC.
  """
  __slots__ = ('_path_helper', '_extmethods', '__in_packets','__out_packets','__in_bytes','__out_bytes',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__in_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__in_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'packet', 'interface-block', 'state']

  def _get_in_packets(self):
    """
    Getter method for in_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/in_packets (oc-yang:counter64)

    YANG Description: Incoming packets towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    return self.__in_packets
      
  def _set_in_packets(self, v, load=False):
    """
    Setter method for in_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/in_packets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_packets() directly.

    YANG Description: Incoming packets towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_packets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_packets(self):
    self.__in_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_packets(self):
    """
    Getter method for out_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/out_packets (oc-yang:counter64)

    YANG Description: Outgoing packets towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    return self.__out_packets
      
  def _set_out_packets(self, v, load=False):
    """
    Setter method for out_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/out_packets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_packets() directly.

    YANG Description: Outgoing packets towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_packets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_packets(self):
    self.__out_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_in_bytes(self):
    """
    Getter method for in_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/in_bytes (oc-yang:counter64)

    YANG Description: Incoming bytes towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    return self.__in_bytes
      
  def _set_in_bytes(self, v, load=False):
    """
    Setter method for in_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/in_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_bytes() directly.

    YANG Description: Incoming bytes towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_bytes(self):
    self.__in_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_bytes(self):
    """
    Getter method for out_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/out_bytes (oc-yang:counter64)

    YANG Description: Outgoing bytes towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    return self.__out_bytes
      
  def _set_out_bytes(self, v, load=False):
    """
    Setter method for out_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/out_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_bytes() directly.

    YANG Description: Outgoing bytes towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_bytes(self):
    self.__out_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  in_packets = __builtin__.property(_get_in_packets)
  out_packets = __builtin__.property(_get_out_packets)
  in_bytes = __builtin__.property(_get_in_bytes)
  out_bytes = __builtin__.property(_get_out_bytes)


  _pyangbind_elements = OrderedDict([('in_packets', in_packets), ('out_packets', out_packets), ('in_bytes', in_bytes), ('out_bytes', out_bytes), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/integrated-circuit/pipeline-counters/packet/interface-block/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State and counters corresponding to the interface subsystem of
the IC.
  """
  __slots__ = ('_path_helper', '_extmethods', '__in_packets','__out_packets','__in_bytes','__out_bytes',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__in_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__in_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    self.__out_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'packet', 'interface-block', 'state']

  def _get_in_packets(self):
    """
    Getter method for in_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/in_packets (oc-yang:counter64)

    YANG Description: Incoming packets towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    return self.__in_packets
      
  def _set_in_packets(self, v, load=False):
    """
    Setter method for in_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/in_packets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_packets() directly.

    YANG Description: Incoming packets towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_packets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_packets(self):
    self.__in_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_packets(self):
    """
    Getter method for out_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/out_packets (oc-yang:counter64)

    YANG Description: Outgoing packets towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    return self.__out_packets
      
  def _set_out_packets(self, v, load=False):
    """
    Setter method for out_packets, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/out_packets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_packets() directly.

    YANG Description: Outgoing packets towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_packets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_packets(self):
    self.__out_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_in_bytes(self):
    """
    Getter method for in_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/in_bytes (oc-yang:counter64)

    YANG Description: Incoming bytes towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    return self.__in_bytes
      
  def _set_in_bytes(self, v, load=False):
    """
    Setter method for in_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/in_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_bytes() directly.

    YANG Description: Incoming bytes towards the integrated-circuit interface
subsystem block from the line interfaces or fabric.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_bytes(self):
    self.__in_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_bytes(self):
    """
    Getter method for out_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/out_bytes (oc-yang:counter64)

    YANG Description: Outgoing bytes towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    return self.__out_bytes
      
  def _set_out_bytes(self, v, load=False):
    """
    Setter method for out_bytes, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet/interface_block/state/out_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_bytes() directly.

    YANG Description: Outgoing bytes towards the line interfaces or fabric from the
integrated-circuit interface subsystem block.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_bytes(self):
    self.__out_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='oc-yang:counter64', is_config=False)

  in_packets = __builtin__.property(_get_in_packets)
  out_packets = __builtin__.property(_get_out_packets)
  in_bytes = __builtin__.property(_get_in_bytes)
  out_bytes = __builtin__.property(_get_out_bytes)


  _pyangbind_elements = OrderedDict([('in_packets', in_packets), ('out_packets', out_packets), ('in_bytes', in_bytes), ('out_bytes', out_bytes), ])


