# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import packet
from . import drop
from . import errors
from . import control_plane_traffic
class pipeline_counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/integrated-circuit/pipeline-counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for the packet, drop, and error counters for the
five NPU sub-blocks.
  """
  __slots__ = ('_path_helper', '_extmethods', '__packet','__drop','__errors','__control_plane_traffic',)

  _yang_name = 'pipeline-counters'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__packet = YANGDynClass(base=packet.packet, is_container='container', yang_name="packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__drop = YANGDynClass(base=drop.drop, is_container='container', yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__errors = YANGDynClass(base=errors.errors, is_container='container', yang_name="errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__control_plane_traffic = YANGDynClass(base=control_plane_traffic.control_plane_traffic, is_container='container', yang_name="control-plane-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters']

  def _get_packet(self):
    """
    Getter method for packet, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet (container)

    YANG Description: IC packet counters for all five NPU sub-blocks.
    """
    return self.__packet
      
  def _set_packet(self, v, load=False):
    """
    Setter method for packet, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_packet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_packet() directly.

    YANG Description: IC packet counters for all five NPU sub-blocks.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=packet.packet, is_container='container', yang_name="packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """packet must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=packet.packet, is_container='container', yang_name="packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__packet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_packet(self):
    self.__packet = YANGDynClass(base=packet.packet, is_container='container', yang_name="packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop (container)

    YANG Description: IC drop counters for all five NPU sub-blocks.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: IC drop counters for all five NPU sub-blocks.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=drop.drop, is_container='container', yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=drop.drop, is_container='container', yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=drop.drop, is_container='container', yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_errors(self):
    """
    Getter method for errors, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors (container)

    YANG Description: IC errors for all five NPU sub-blocks.
    """
    return self.__errors
      
  def _set_errors(self, v, load=False):
    """
    Setter method for errors, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_errors() directly.

    YANG Description: IC errors for all five NPU sub-blocks.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=errors.errors, is_container='container', yang_name="errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """errors must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=errors.errors, is_container='container', yang_name="errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_errors(self):
    self.__errors = YANGDynClass(base=errors.errors, is_container='container', yang_name="errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_control_plane_traffic(self):
    """
    Getter method for control_plane_traffic, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic (container)

    YANG Description: Counters that are related to traffic destined to the control-plane.
    """
    return self.__control_plane_traffic
      
  def _set_control_plane_traffic(self, v, load=False):
    """
    Setter method for control_plane_traffic, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_control_plane_traffic is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_control_plane_traffic() directly.

    YANG Description: Counters that are related to traffic destined to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=control_plane_traffic.control_plane_traffic, is_container='container', yang_name="control-plane-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """control_plane_traffic must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=control_plane_traffic.control_plane_traffic, is_container='container', yang_name="control-plane-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__control_plane_traffic = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_control_plane_traffic(self):
    self.__control_plane_traffic = YANGDynClass(base=control_plane_traffic.control_plane_traffic, is_container='container', yang_name="control-plane-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)

  packet = __builtin__.property(_get_packet)
  drop = __builtin__.property(_get_drop)
  errors = __builtin__.property(_get_errors)
  control_plane_traffic = __builtin__.property(_get_control_plane_traffic)


  _pyangbind_elements = OrderedDict([('packet', packet), ('drop', drop), ('errors', errors), ('control_plane_traffic', control_plane_traffic), ])


from . import packet
from . import drop
from . import errors
from . import control_plane_traffic
class pipeline_counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/integrated-circuit/pipeline-counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for the packet, drop, and error counters for the
five NPU sub-blocks.
  """
  __slots__ = ('_path_helper', '_extmethods', '__packet','__drop','__errors','__control_plane_traffic',)

  _yang_name = 'pipeline-counters'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__packet = YANGDynClass(base=packet.packet, is_container='container', yang_name="packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__drop = YANGDynClass(base=drop.drop, is_container='container', yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__errors = YANGDynClass(base=errors.errors, is_container='container', yang_name="errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__control_plane_traffic = YANGDynClass(base=control_plane_traffic.control_plane_traffic, is_container='container', yang_name="control-plane-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters']

  def _get_packet(self):
    """
    Getter method for packet, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet (container)

    YANG Description: IC packet counters for all five NPU sub-blocks.
    """
    return self.__packet
      
  def _set_packet(self, v, load=False):
    """
    Setter method for packet, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_packet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_packet() directly.

    YANG Description: IC packet counters for all five NPU sub-blocks.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=packet.packet, is_container='container', yang_name="packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """packet must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=packet.packet, is_container='container', yang_name="packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__packet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_packet(self):
    self.__packet = YANGDynClass(base=packet.packet, is_container='container', yang_name="packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop (container)

    YANG Description: IC drop counters for all five NPU sub-blocks.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: IC drop counters for all five NPU sub-blocks.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=drop.drop, is_container='container', yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=drop.drop, is_container='container', yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=drop.drop, is_container='container', yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_errors(self):
    """
    Getter method for errors, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors (container)

    YANG Description: IC errors for all five NPU sub-blocks.
    """
    return self.__errors
      
  def _set_errors(self, v, load=False):
    """
    Setter method for errors, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_errors() directly.

    YANG Description: IC errors for all five NPU sub-blocks.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=errors.errors, is_container='container', yang_name="errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """errors must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=errors.errors, is_container='container', yang_name="errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_errors(self):
    self.__errors = YANGDynClass(base=errors.errors, is_container='container', yang_name="errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_control_plane_traffic(self):
    """
    Getter method for control_plane_traffic, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic (container)

    YANG Description: Counters that are related to traffic destined to the control-plane.
    """
    return self.__control_plane_traffic
      
  def _set_control_plane_traffic(self, v, load=False):
    """
    Setter method for control_plane_traffic, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_control_plane_traffic is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_control_plane_traffic() directly.

    YANG Description: Counters that are related to traffic destined to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=control_plane_traffic.control_plane_traffic, is_container='container', yang_name="control-plane-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """control_plane_traffic must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=control_plane_traffic.control_plane_traffic, is_container='container', yang_name="control-plane-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__control_plane_traffic = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_control_plane_traffic(self):
    self.__control_plane_traffic = YANGDynClass(base=control_plane_traffic.control_plane_traffic, is_container='container', yang_name="control-plane-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)

  packet = __builtin__.property(_get_packet)
  drop = __builtin__.property(_get_drop)
  errors = __builtin__.property(_get_errors)
  control_plane_traffic = __builtin__.property(_get_control_plane_traffic)


  _pyangbind_elements = OrderedDict([('packet', packet), ('drop', drop), ('errors', errors), ('control_plane_traffic', control_plane_traffic), ])


from . import packet
from . import drop
from . import errors
from . import control_plane_traffic
class pipeline_counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/integrated-circuit/pipeline-counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for the packet, drop, and error counters for the
five NPU sub-blocks.
  """
  __slots__ = ('_path_helper', '_extmethods', '__packet','__drop','__errors','__control_plane_traffic',)

  _yang_name = 'pipeline-counters'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__packet = YANGDynClass(base=packet.packet, is_container='container', yang_name="packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__drop = YANGDynClass(base=drop.drop, is_container='container', yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__errors = YANGDynClass(base=errors.errors, is_container='container', yang_name="errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__control_plane_traffic = YANGDynClass(base=control_plane_traffic.control_plane_traffic, is_container='container', yang_name="control-plane-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters']

  def _get_packet(self):
    """
    Getter method for packet, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet (container)

    YANG Description: IC packet counters for all five NPU sub-blocks.
    """
    return self.__packet
      
  def _set_packet(self, v, load=False):
    """
    Setter method for packet, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_packet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_packet() directly.

    YANG Description: IC packet counters for all five NPU sub-blocks.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=packet.packet, is_container='container', yang_name="packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """packet must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=packet.packet, is_container='container', yang_name="packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__packet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_packet(self):
    self.__packet = YANGDynClass(base=packet.packet, is_container='container', yang_name="packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop (container)

    YANG Description: IC drop counters for all five NPU sub-blocks.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: IC drop counters for all five NPU sub-blocks.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=drop.drop, is_container='container', yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=drop.drop, is_container='container', yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=drop.drop, is_container='container', yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_errors(self):
    """
    Getter method for errors, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors (container)

    YANG Description: IC errors for all five NPU sub-blocks.
    """
    return self.__errors
      
  def _set_errors(self, v, load=False):
    """
    Setter method for errors, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_errors() directly.

    YANG Description: IC errors for all five NPU sub-blocks.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=errors.errors, is_container='container', yang_name="errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """errors must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=errors.errors, is_container='container', yang_name="errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_errors(self):
    self.__errors = YANGDynClass(base=errors.errors, is_container='container', yang_name="errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_control_plane_traffic(self):
    """
    Getter method for control_plane_traffic, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic (container)

    YANG Description: Counters that are related to traffic destined to the control-plane.
    """
    return self.__control_plane_traffic
      
  def _set_control_plane_traffic(self, v, load=False):
    """
    Setter method for control_plane_traffic, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_control_plane_traffic is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_control_plane_traffic() directly.

    YANG Description: Counters that are related to traffic destined to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=control_plane_traffic.control_plane_traffic, is_container='container', yang_name="control-plane-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """control_plane_traffic must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=control_plane_traffic.control_plane_traffic, is_container='container', yang_name="control-plane-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__control_plane_traffic = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_control_plane_traffic(self):
    self.__control_plane_traffic = YANGDynClass(base=control_plane_traffic.control_plane_traffic, is_container='container', yang_name="control-plane-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)

  packet = __builtin__.property(_get_packet)
  drop = __builtin__.property(_get_drop)
  errors = __builtin__.property(_get_errors)
  control_plane_traffic = __builtin__.property(_get_control_plane_traffic)


  _pyangbind_elements = OrderedDict([('packet', packet), ('drop', drop), ('errors', errors), ('control_plane_traffic', control_plane_traffic), ])


from . import packet
from . import drop
from . import errors
from . import control_plane_traffic
class pipeline_counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/integrated-circuit/pipeline-counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for the packet, drop, and error counters for the
five NPU sub-blocks.
  """
  __slots__ = ('_path_helper', '_extmethods', '__packet','__drop','__errors','__control_plane_traffic',)

  _yang_name = 'pipeline-counters'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__packet = YANGDynClass(base=packet.packet, is_container='container', yang_name="packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__drop = YANGDynClass(base=drop.drop, is_container='container', yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__errors = YANGDynClass(base=errors.errors, is_container='container', yang_name="errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    self.__control_plane_traffic = YANGDynClass(base=control_plane_traffic.control_plane_traffic, is_container='container', yang_name="control-plane-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters']

  def _get_packet(self):
    """
    Getter method for packet, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet (container)

    YANG Description: IC packet counters for all five NPU sub-blocks.
    """
    return self.__packet
      
  def _set_packet(self, v, load=False):
    """
    Setter method for packet, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/packet (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_packet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_packet() directly.

    YANG Description: IC packet counters for all five NPU sub-blocks.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=packet.packet, is_container='container', yang_name="packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """packet must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=packet.packet, is_container='container', yang_name="packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__packet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_packet(self):
    self.__packet = YANGDynClass(base=packet.packet, is_container='container', yang_name="packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop (container)

    YANG Description: IC drop counters for all five NPU sub-blocks.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/drop (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: IC drop counters for all five NPU sub-blocks.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=drop.drop, is_container='container', yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=drop.drop, is_container='container', yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=drop.drop, is_container='container', yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_errors(self):
    """
    Getter method for errors, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors (container)

    YANG Description: IC errors for all five NPU sub-blocks.
    """
    return self.__errors
      
  def _set_errors(self, v, load=False):
    """
    Setter method for errors, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_errors() directly.

    YANG Description: IC errors for all five NPU sub-blocks.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=errors.errors, is_container='container', yang_name="errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """errors must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=errors.errors, is_container='container', yang_name="errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_errors(self):
    self.__errors = YANGDynClass(base=errors.errors, is_container='container', yang_name="errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)


  def _get_control_plane_traffic(self):
    """
    Getter method for control_plane_traffic, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic (container)

    YANG Description: Counters that are related to traffic destined to the control-plane.
    """
    return self.__control_plane_traffic
      
  def _set_control_plane_traffic(self, v, load=False):
    """
    Setter method for control_plane_traffic, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/control_plane_traffic (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_control_plane_traffic is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_control_plane_traffic() directly.

    YANG Description: Counters that are related to traffic destined to the control-plane.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=control_plane_traffic.control_plane_traffic, is_container='container', yang_name="control-plane-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """control_plane_traffic must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=control_plane_traffic.control_plane_traffic, is_container='container', yang_name="control-plane-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)""",
        })

    self.__control_plane_traffic = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_control_plane_traffic(self):
    self.__control_plane_traffic = YANGDynClass(base=control_plane_traffic.control_plane_traffic, is_container='container', yang_name="control-plane-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='container', is_config=False)

  packet = __builtin__.property(_get_packet)
  drop = __builtin__.property(_get_drop)
  errors = __builtin__.property(_get_errors)
  control_plane_traffic = __builtin__.property(_get_control_plane_traffic)


  _pyangbind_elements = OrderedDict([('packet', packet), ('drop', drop), ('errors', errors), ('control_plane_traffic', control_plane_traffic), ])


