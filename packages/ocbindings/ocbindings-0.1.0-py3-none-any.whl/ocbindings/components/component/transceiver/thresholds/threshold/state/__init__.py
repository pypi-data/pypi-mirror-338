# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/transceiver/thresholds/threshold/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational alarm thresholds for the transceiver.
  """
  __slots__ = ('_path_helper', '_extmethods', '__severity','__laser_temperature_upper','__laser_temperature_lower','__output_power_upper','__output_power_lower','__input_power_upper','__input_power_lower','__laser_bias_current_upper','__laser_bias_current_lower','__supply_voltage_upper','__supply_voltage_lower','__module_temperature_lower','__module_temperature_upper',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__severity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='identityref', is_config=False)
    self.__laser_temperature_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__laser_temperature_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__output_power_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__output_power_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__input_power_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__input_power_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__laser_bias_current_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__laser_bias_current_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__supply_voltage_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__supply_voltage_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__module_temperature_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__module_temperature_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'transceiver', 'thresholds', 'threshold', 'state']

  def _get_severity(self):
    """
    Getter method for severity, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/severity (identityref)

    YANG Description: The type of alarm to which the thresholds apply.
    """
    return self.__severity
      
  def _set_severity(self, v, load=False):
    """
    Setter method for severity, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/severity (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_severity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_severity() directly.

    YANG Description: The type of alarm to which the thresholds apply.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """severity must be of a type compatible with identityref""",
          'defined-type': "openconfig-platform-transceiver:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='identityref', is_config=False)""",
        })

    self.__severity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_severity(self):
    self.__severity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='identityref', is_config=False)


  def _get_laser_temperature_upper(self):
    """
    Getter method for laser_temperature_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_temperature_upper (decimal64)

    YANG Description: The upper temperature threshold for the laser temperature sensor.
This leaf value is compared to the instant value of
laser-temperature.
    """
    return self.__laser_temperature_upper
      
  def _set_laser_temperature_upper(self, v, load=False):
    """
    Setter method for laser_temperature_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_temperature_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_laser_temperature_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_laser_temperature_upper() directly.

    YANG Description: The upper temperature threshold for the laser temperature sensor.
This leaf value is compared to the instant value of
laser-temperature.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """laser_temperature_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__laser_temperature_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_laser_temperature_upper(self):
    self.__laser_temperature_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_laser_temperature_lower(self):
    """
    Getter method for laser_temperature_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_temperature_lower (decimal64)

    YANG Description: The lower temperature threshold for the laser temperature sensor.
This leaf value is compared to the instant value of
laser-temperature.
    """
    return self.__laser_temperature_lower
      
  def _set_laser_temperature_lower(self, v, load=False):
    """
    Setter method for laser_temperature_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_temperature_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_laser_temperature_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_laser_temperature_lower() directly.

    YANG Description: The lower temperature threshold for the laser temperature sensor.
This leaf value is compared to the instant value of
laser-temperature.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """laser_temperature_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__laser_temperature_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_laser_temperature_lower(self):
    self.__laser_temperature_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_output_power_upper(self):
    """
    Getter method for output_power_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/output_power_upper (decimal64)

    YANG Description: The upper power threshold for the laser output power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-output-power. This leaf
value is compared to the instant value of optical-output-power.
    """
    return self.__output_power_upper
      
  def _set_output_power_upper(self, v, load=False):
    """
    Setter method for output_power_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/output_power_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_power_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_power_upper() directly.

    YANG Description: The upper power threshold for the laser output power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-output-power. This leaf
value is compared to the instant value of optical-output-power.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_power_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__output_power_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_power_upper(self):
    self.__output_power_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_output_power_lower(self):
    """
    Getter method for output_power_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/output_power_lower (decimal64)

    YANG Description: The lower power threshold for the laser output power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-output-power. This leaf
value is compared to the instant value of optical-output-power.
    """
    return self.__output_power_lower
      
  def _set_output_power_lower(self, v, load=False):
    """
    Setter method for output_power_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/output_power_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_power_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_power_lower() directly.

    YANG Description: The lower power threshold for the laser output power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-output-power. This leaf
value is compared to the instant value of optical-output-power.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_power_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__output_power_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_power_lower(self):
    self.__output_power_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_input_power_upper(self):
    """
    Getter method for input_power_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/input_power_upper (decimal64)

    YANG Description: The upper power threshold for the laser input power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-input-power. This leaf
value is compared to the instant value of optical-input-power.
    """
    return self.__input_power_upper
      
  def _set_input_power_upper(self, v, load=False):
    """
    Setter method for input_power_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/input_power_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input_power_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input_power_upper() directly.

    YANG Description: The upper power threshold for the laser input power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-input-power. This leaf
value is compared to the instant value of optical-input-power.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input_power_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__input_power_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input_power_upper(self):
    self.__input_power_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_input_power_lower(self):
    """
    Getter method for input_power_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/input_power_lower (decimal64)

    YANG Description: The lower power threshold for the laser input power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-input-power. This leaf
value is compared to the instant value of optical-input-power.
    """
    return self.__input_power_lower
      
  def _set_input_power_lower(self, v, load=False):
    """
    Setter method for input_power_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/input_power_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input_power_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input_power_lower() directly.

    YANG Description: The lower power threshold for the laser input power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-input-power. This leaf
value is compared to the instant value of optical-input-power.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input_power_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__input_power_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input_power_lower(self):
    self.__input_power_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_laser_bias_current_upper(self):
    """
    Getter method for laser_bias_current_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_bias_current_upper (decimal64)

    YANG Description: The upper threshold for the laser bias current. This leaf value is
compared to the instant value of last-bias-current.
    """
    return self.__laser_bias_current_upper
      
  def _set_laser_bias_current_upper(self, v, load=False):
    """
    Setter method for laser_bias_current_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_bias_current_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_laser_bias_current_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_laser_bias_current_upper() directly.

    YANG Description: The upper threshold for the laser bias current. This leaf value is
compared to the instant value of last-bias-current.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """laser_bias_current_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__laser_bias_current_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_laser_bias_current_upper(self):
    self.__laser_bias_current_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_laser_bias_current_lower(self):
    """
    Getter method for laser_bias_current_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_bias_current_lower (decimal64)

    YANG Description: The lower threshold for the laser bias current. This leaf value is
compared to the instant value of last-bias-current.
    """
    return self.__laser_bias_current_lower
      
  def _set_laser_bias_current_lower(self, v, load=False):
    """
    Setter method for laser_bias_current_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_bias_current_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_laser_bias_current_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_laser_bias_current_lower() directly.

    YANG Description: The lower threshold for the laser bias current. This leaf value is
compared to the instant value of last-bias-current.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """laser_bias_current_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__laser_bias_current_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_laser_bias_current_lower(self):
    self.__laser_bias_current_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_supply_voltage_upper(self):
    """
    Getter method for supply_voltage_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/supply_voltage_upper (decimal64)

    YANG Description: The upper threshold for the transceiver supply voltage. This leaf
value is compared to the instant value of supply-voltage.
    """
    return self.__supply_voltage_upper
      
  def _set_supply_voltage_upper(self, v, load=False):
    """
    Setter method for supply_voltage_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/supply_voltage_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_supply_voltage_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_supply_voltage_upper() directly.

    YANG Description: The upper threshold for the transceiver supply voltage. This leaf
value is compared to the instant value of supply-voltage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """supply_voltage_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__supply_voltage_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_supply_voltage_upper(self):
    self.__supply_voltage_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_supply_voltage_lower(self):
    """
    Getter method for supply_voltage_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/supply_voltage_lower (decimal64)

    YANG Description: The lower threshold for the transceiver supply voltage. This leaf
value is compared to the instant value of supply-voltage.
    """
    return self.__supply_voltage_lower
      
  def _set_supply_voltage_lower(self, v, load=False):
    """
    Setter method for supply_voltage_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/supply_voltage_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_supply_voltage_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_supply_voltage_lower() directly.

    YANG Description: The lower threshold for the transceiver supply voltage. This leaf
value is compared to the instant value of supply-voltage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """supply_voltage_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__supply_voltage_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_supply_voltage_lower(self):
    self.__supply_voltage_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_module_temperature_lower(self):
    """
    Getter method for module_temperature_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/module_temperature_lower (decimal64)

    YANG Description: The lower temperature threshold for the transceiver module. This
leaf value is compared to the instant value of module-temperature.
    """
    return self.__module_temperature_lower
      
  def _set_module_temperature_lower(self, v, load=False):
    """
    Setter method for module_temperature_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/module_temperature_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_module_temperature_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_module_temperature_lower() directly.

    YANG Description: The lower temperature threshold for the transceiver module. This
leaf value is compared to the instant value of module-temperature.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """module_temperature_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__module_temperature_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_module_temperature_lower(self):
    self.__module_temperature_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_module_temperature_upper(self):
    """
    Getter method for module_temperature_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/module_temperature_upper (decimal64)

    YANG Description: The upper temperature threshold for the transceiver module. This
leaf value is compared to the instant value of module-temperature.
    """
    return self.__module_temperature_upper
      
  def _set_module_temperature_upper(self, v, load=False):
    """
    Setter method for module_temperature_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/module_temperature_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_module_temperature_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_module_temperature_upper() directly.

    YANG Description: The upper temperature threshold for the transceiver module. This
leaf value is compared to the instant value of module-temperature.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """module_temperature_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__module_temperature_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_module_temperature_upper(self):
    self.__module_temperature_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)

  severity = __builtin__.property(_get_severity)
  laser_temperature_upper = __builtin__.property(_get_laser_temperature_upper)
  laser_temperature_lower = __builtin__.property(_get_laser_temperature_lower)
  output_power_upper = __builtin__.property(_get_output_power_upper)
  output_power_lower = __builtin__.property(_get_output_power_lower)
  input_power_upper = __builtin__.property(_get_input_power_upper)
  input_power_lower = __builtin__.property(_get_input_power_lower)
  laser_bias_current_upper = __builtin__.property(_get_laser_bias_current_upper)
  laser_bias_current_lower = __builtin__.property(_get_laser_bias_current_lower)
  supply_voltage_upper = __builtin__.property(_get_supply_voltage_upper)
  supply_voltage_lower = __builtin__.property(_get_supply_voltage_lower)
  module_temperature_lower = __builtin__.property(_get_module_temperature_lower)
  module_temperature_upper = __builtin__.property(_get_module_temperature_upper)


  _pyangbind_elements = OrderedDict([('severity', severity), ('laser_temperature_upper', laser_temperature_upper), ('laser_temperature_lower', laser_temperature_lower), ('output_power_upper', output_power_upper), ('output_power_lower', output_power_lower), ('input_power_upper', input_power_upper), ('input_power_lower', input_power_lower), ('laser_bias_current_upper', laser_bias_current_upper), ('laser_bias_current_lower', laser_bias_current_lower), ('supply_voltage_upper', supply_voltage_upper), ('supply_voltage_lower', supply_voltage_lower), ('module_temperature_lower', module_temperature_lower), ('module_temperature_upper', module_temperature_upper), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/transceiver/thresholds/threshold/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational alarm thresholds for the transceiver.
  """
  __slots__ = ('_path_helper', '_extmethods', '__severity','__laser_temperature_upper','__laser_temperature_lower','__output_power_upper','__output_power_lower','__input_power_upper','__input_power_lower','__laser_bias_current_upper','__laser_bias_current_lower','__supply_voltage_upper','__supply_voltage_lower','__module_temperature_lower','__module_temperature_upper',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__severity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='identityref', is_config=False)
    self.__laser_temperature_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__laser_temperature_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__output_power_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__output_power_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__input_power_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__input_power_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__laser_bias_current_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__laser_bias_current_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__supply_voltage_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__supply_voltage_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__module_temperature_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__module_temperature_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'transceiver', 'thresholds', 'threshold', 'state']

  def _get_severity(self):
    """
    Getter method for severity, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/severity (identityref)

    YANG Description: The type of alarm to which the thresholds apply.
    """
    return self.__severity
      
  def _set_severity(self, v, load=False):
    """
    Setter method for severity, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/severity (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_severity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_severity() directly.

    YANG Description: The type of alarm to which the thresholds apply.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """severity must be of a type compatible with identityref""",
          'defined-type': "openconfig-platform-transceiver:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='identityref', is_config=False)""",
        })

    self.__severity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_severity(self):
    self.__severity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='identityref', is_config=False)


  def _get_laser_temperature_upper(self):
    """
    Getter method for laser_temperature_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_temperature_upper (decimal64)

    YANG Description: The upper temperature threshold for the laser temperature sensor.
This leaf value is compared to the instant value of
laser-temperature.
    """
    return self.__laser_temperature_upper
      
  def _set_laser_temperature_upper(self, v, load=False):
    """
    Setter method for laser_temperature_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_temperature_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_laser_temperature_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_laser_temperature_upper() directly.

    YANG Description: The upper temperature threshold for the laser temperature sensor.
This leaf value is compared to the instant value of
laser-temperature.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """laser_temperature_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__laser_temperature_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_laser_temperature_upper(self):
    self.__laser_temperature_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_laser_temperature_lower(self):
    """
    Getter method for laser_temperature_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_temperature_lower (decimal64)

    YANG Description: The lower temperature threshold for the laser temperature sensor.
This leaf value is compared to the instant value of
laser-temperature.
    """
    return self.__laser_temperature_lower
      
  def _set_laser_temperature_lower(self, v, load=False):
    """
    Setter method for laser_temperature_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_temperature_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_laser_temperature_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_laser_temperature_lower() directly.

    YANG Description: The lower temperature threshold for the laser temperature sensor.
This leaf value is compared to the instant value of
laser-temperature.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """laser_temperature_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__laser_temperature_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_laser_temperature_lower(self):
    self.__laser_temperature_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_output_power_upper(self):
    """
    Getter method for output_power_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/output_power_upper (decimal64)

    YANG Description: The upper power threshold for the laser output power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-output-power. This leaf
value is compared to the instant value of optical-output-power.
    """
    return self.__output_power_upper
      
  def _set_output_power_upper(self, v, load=False):
    """
    Setter method for output_power_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/output_power_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_power_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_power_upper() directly.

    YANG Description: The upper power threshold for the laser output power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-output-power. This leaf
value is compared to the instant value of optical-output-power.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_power_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__output_power_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_power_upper(self):
    self.__output_power_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_output_power_lower(self):
    """
    Getter method for output_power_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/output_power_lower (decimal64)

    YANG Description: The lower power threshold for the laser output power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-output-power. This leaf
value is compared to the instant value of optical-output-power.
    """
    return self.__output_power_lower
      
  def _set_output_power_lower(self, v, load=False):
    """
    Setter method for output_power_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/output_power_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_power_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_power_lower() directly.

    YANG Description: The lower power threshold for the laser output power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-output-power. This leaf
value is compared to the instant value of optical-output-power.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_power_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__output_power_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_power_lower(self):
    self.__output_power_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_input_power_upper(self):
    """
    Getter method for input_power_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/input_power_upper (decimal64)

    YANG Description: The upper power threshold for the laser input power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-input-power. This leaf
value is compared to the instant value of optical-input-power.
    """
    return self.__input_power_upper
      
  def _set_input_power_upper(self, v, load=False):
    """
    Setter method for input_power_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/input_power_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input_power_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input_power_upper() directly.

    YANG Description: The upper power threshold for the laser input power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-input-power. This leaf
value is compared to the instant value of optical-input-power.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input_power_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__input_power_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input_power_upper(self):
    self.__input_power_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_input_power_lower(self):
    """
    Getter method for input_power_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/input_power_lower (decimal64)

    YANG Description: The lower power threshold for the laser input power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-input-power. This leaf
value is compared to the instant value of optical-input-power.
    """
    return self.__input_power_lower
      
  def _set_input_power_lower(self, v, load=False):
    """
    Setter method for input_power_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/input_power_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input_power_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input_power_lower() directly.

    YANG Description: The lower power threshold for the laser input power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-input-power. This leaf
value is compared to the instant value of optical-input-power.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input_power_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__input_power_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input_power_lower(self):
    self.__input_power_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_laser_bias_current_upper(self):
    """
    Getter method for laser_bias_current_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_bias_current_upper (decimal64)

    YANG Description: The upper threshold for the laser bias current. This leaf value is
compared to the instant value of last-bias-current.
    """
    return self.__laser_bias_current_upper
      
  def _set_laser_bias_current_upper(self, v, load=False):
    """
    Setter method for laser_bias_current_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_bias_current_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_laser_bias_current_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_laser_bias_current_upper() directly.

    YANG Description: The upper threshold for the laser bias current. This leaf value is
compared to the instant value of last-bias-current.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """laser_bias_current_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__laser_bias_current_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_laser_bias_current_upper(self):
    self.__laser_bias_current_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_laser_bias_current_lower(self):
    """
    Getter method for laser_bias_current_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_bias_current_lower (decimal64)

    YANG Description: The lower threshold for the laser bias current. This leaf value is
compared to the instant value of last-bias-current.
    """
    return self.__laser_bias_current_lower
      
  def _set_laser_bias_current_lower(self, v, load=False):
    """
    Setter method for laser_bias_current_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_bias_current_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_laser_bias_current_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_laser_bias_current_lower() directly.

    YANG Description: The lower threshold for the laser bias current. This leaf value is
compared to the instant value of last-bias-current.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """laser_bias_current_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__laser_bias_current_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_laser_bias_current_lower(self):
    self.__laser_bias_current_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_supply_voltage_upper(self):
    """
    Getter method for supply_voltage_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/supply_voltage_upper (decimal64)

    YANG Description: The upper threshold for the transceiver supply voltage. This leaf
value is compared to the instant value of supply-voltage.
    """
    return self.__supply_voltage_upper
      
  def _set_supply_voltage_upper(self, v, load=False):
    """
    Setter method for supply_voltage_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/supply_voltage_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_supply_voltage_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_supply_voltage_upper() directly.

    YANG Description: The upper threshold for the transceiver supply voltage. This leaf
value is compared to the instant value of supply-voltage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """supply_voltage_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__supply_voltage_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_supply_voltage_upper(self):
    self.__supply_voltage_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_supply_voltage_lower(self):
    """
    Getter method for supply_voltage_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/supply_voltage_lower (decimal64)

    YANG Description: The lower threshold for the transceiver supply voltage. This leaf
value is compared to the instant value of supply-voltage.
    """
    return self.__supply_voltage_lower
      
  def _set_supply_voltage_lower(self, v, load=False):
    """
    Setter method for supply_voltage_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/supply_voltage_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_supply_voltage_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_supply_voltage_lower() directly.

    YANG Description: The lower threshold for the transceiver supply voltage. This leaf
value is compared to the instant value of supply-voltage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """supply_voltage_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__supply_voltage_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_supply_voltage_lower(self):
    self.__supply_voltage_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_module_temperature_lower(self):
    """
    Getter method for module_temperature_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/module_temperature_lower (decimal64)

    YANG Description: The lower temperature threshold for the transceiver module. This
leaf value is compared to the instant value of module-temperature.
    """
    return self.__module_temperature_lower
      
  def _set_module_temperature_lower(self, v, load=False):
    """
    Setter method for module_temperature_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/module_temperature_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_module_temperature_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_module_temperature_lower() directly.

    YANG Description: The lower temperature threshold for the transceiver module. This
leaf value is compared to the instant value of module-temperature.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """module_temperature_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__module_temperature_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_module_temperature_lower(self):
    self.__module_temperature_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_module_temperature_upper(self):
    """
    Getter method for module_temperature_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/module_temperature_upper (decimal64)

    YANG Description: The upper temperature threshold for the transceiver module. This
leaf value is compared to the instant value of module-temperature.
    """
    return self.__module_temperature_upper
      
  def _set_module_temperature_upper(self, v, load=False):
    """
    Setter method for module_temperature_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/module_temperature_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_module_temperature_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_module_temperature_upper() directly.

    YANG Description: The upper temperature threshold for the transceiver module. This
leaf value is compared to the instant value of module-temperature.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """module_temperature_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__module_temperature_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_module_temperature_upper(self):
    self.__module_temperature_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)

  severity = __builtin__.property(_get_severity)
  laser_temperature_upper = __builtin__.property(_get_laser_temperature_upper)
  laser_temperature_lower = __builtin__.property(_get_laser_temperature_lower)
  output_power_upper = __builtin__.property(_get_output_power_upper)
  output_power_lower = __builtin__.property(_get_output_power_lower)
  input_power_upper = __builtin__.property(_get_input_power_upper)
  input_power_lower = __builtin__.property(_get_input_power_lower)
  laser_bias_current_upper = __builtin__.property(_get_laser_bias_current_upper)
  laser_bias_current_lower = __builtin__.property(_get_laser_bias_current_lower)
  supply_voltage_upper = __builtin__.property(_get_supply_voltage_upper)
  supply_voltage_lower = __builtin__.property(_get_supply_voltage_lower)
  module_temperature_lower = __builtin__.property(_get_module_temperature_lower)
  module_temperature_upper = __builtin__.property(_get_module_temperature_upper)


  _pyangbind_elements = OrderedDict([('severity', severity), ('laser_temperature_upper', laser_temperature_upper), ('laser_temperature_lower', laser_temperature_lower), ('output_power_upper', output_power_upper), ('output_power_lower', output_power_lower), ('input_power_upper', input_power_upper), ('input_power_lower', input_power_lower), ('laser_bias_current_upper', laser_bias_current_upper), ('laser_bias_current_lower', laser_bias_current_lower), ('supply_voltage_upper', supply_voltage_upper), ('supply_voltage_lower', supply_voltage_lower), ('module_temperature_lower', module_temperature_lower), ('module_temperature_upper', module_temperature_upper), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/transceiver/thresholds/threshold/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational alarm thresholds for the transceiver.
  """
  __slots__ = ('_path_helper', '_extmethods', '__severity','__laser_temperature_upper','__laser_temperature_lower','__output_power_upper','__output_power_lower','__input_power_upper','__input_power_lower','__laser_bias_current_upper','__laser_bias_current_lower','__supply_voltage_upper','__supply_voltage_lower','__module_temperature_lower','__module_temperature_upper',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__severity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='identityref', is_config=False)
    self.__laser_temperature_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__laser_temperature_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__output_power_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__output_power_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__input_power_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__input_power_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__laser_bias_current_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__laser_bias_current_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__supply_voltage_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__supply_voltage_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__module_temperature_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__module_temperature_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'transceiver', 'thresholds', 'threshold', 'state']

  def _get_severity(self):
    """
    Getter method for severity, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/severity (identityref)

    YANG Description: The type of alarm to which the thresholds apply.
    """
    return self.__severity
      
  def _set_severity(self, v, load=False):
    """
    Setter method for severity, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/severity (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_severity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_severity() directly.

    YANG Description: The type of alarm to which the thresholds apply.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """severity must be of a type compatible with identityref""",
          'defined-type': "openconfig-platform-transceiver:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='identityref', is_config=False)""",
        })

    self.__severity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_severity(self):
    self.__severity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='identityref', is_config=False)


  def _get_laser_temperature_upper(self):
    """
    Getter method for laser_temperature_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_temperature_upper (decimal64)

    YANG Description: The upper temperature threshold for the laser temperature sensor.
This leaf value is compared to the instant value of
laser-temperature.
    """
    return self.__laser_temperature_upper
      
  def _set_laser_temperature_upper(self, v, load=False):
    """
    Setter method for laser_temperature_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_temperature_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_laser_temperature_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_laser_temperature_upper() directly.

    YANG Description: The upper temperature threshold for the laser temperature sensor.
This leaf value is compared to the instant value of
laser-temperature.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """laser_temperature_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__laser_temperature_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_laser_temperature_upper(self):
    self.__laser_temperature_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_laser_temperature_lower(self):
    """
    Getter method for laser_temperature_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_temperature_lower (decimal64)

    YANG Description: The lower temperature threshold for the laser temperature sensor.
This leaf value is compared to the instant value of
laser-temperature.
    """
    return self.__laser_temperature_lower
      
  def _set_laser_temperature_lower(self, v, load=False):
    """
    Setter method for laser_temperature_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_temperature_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_laser_temperature_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_laser_temperature_lower() directly.

    YANG Description: The lower temperature threshold for the laser temperature sensor.
This leaf value is compared to the instant value of
laser-temperature.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """laser_temperature_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__laser_temperature_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_laser_temperature_lower(self):
    self.__laser_temperature_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_output_power_upper(self):
    """
    Getter method for output_power_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/output_power_upper (decimal64)

    YANG Description: The upper power threshold for the laser output power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-output-power. This leaf
value is compared to the instant value of optical-output-power.
    """
    return self.__output_power_upper
      
  def _set_output_power_upper(self, v, load=False):
    """
    Setter method for output_power_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/output_power_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_power_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_power_upper() directly.

    YANG Description: The upper power threshold for the laser output power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-output-power. This leaf
value is compared to the instant value of optical-output-power.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_power_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__output_power_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_power_upper(self):
    self.__output_power_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_output_power_lower(self):
    """
    Getter method for output_power_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/output_power_lower (decimal64)

    YANG Description: The lower power threshold for the laser output power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-output-power. This leaf
value is compared to the instant value of optical-output-power.
    """
    return self.__output_power_lower
      
  def _set_output_power_lower(self, v, load=False):
    """
    Setter method for output_power_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/output_power_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_power_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_power_lower() directly.

    YANG Description: The lower power threshold for the laser output power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-output-power. This leaf
value is compared to the instant value of optical-output-power.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_power_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__output_power_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_power_lower(self):
    self.__output_power_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_input_power_upper(self):
    """
    Getter method for input_power_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/input_power_upper (decimal64)

    YANG Description: The upper power threshold for the laser input power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-input-power. This leaf
value is compared to the instant value of optical-input-power.
    """
    return self.__input_power_upper
      
  def _set_input_power_upper(self, v, load=False):
    """
    Setter method for input_power_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/input_power_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input_power_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input_power_upper() directly.

    YANG Description: The upper power threshold for the laser input power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-input-power. This leaf
value is compared to the instant value of optical-input-power.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input_power_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__input_power_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input_power_upper(self):
    self.__input_power_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_input_power_lower(self):
    """
    Getter method for input_power_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/input_power_lower (decimal64)

    YANG Description: The lower power threshold for the laser input power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-input-power. This leaf
value is compared to the instant value of optical-input-power.
    """
    return self.__input_power_lower
      
  def _set_input_power_lower(self, v, load=False):
    """
    Setter method for input_power_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/input_power_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input_power_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input_power_lower() directly.

    YANG Description: The lower power threshold for the laser input power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-input-power. This leaf
value is compared to the instant value of optical-input-power.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input_power_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__input_power_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input_power_lower(self):
    self.__input_power_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_laser_bias_current_upper(self):
    """
    Getter method for laser_bias_current_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_bias_current_upper (decimal64)

    YANG Description: The upper threshold for the laser bias current. This leaf value is
compared to the instant value of last-bias-current.
    """
    return self.__laser_bias_current_upper
      
  def _set_laser_bias_current_upper(self, v, load=False):
    """
    Setter method for laser_bias_current_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_bias_current_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_laser_bias_current_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_laser_bias_current_upper() directly.

    YANG Description: The upper threshold for the laser bias current. This leaf value is
compared to the instant value of last-bias-current.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """laser_bias_current_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__laser_bias_current_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_laser_bias_current_upper(self):
    self.__laser_bias_current_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_laser_bias_current_lower(self):
    """
    Getter method for laser_bias_current_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_bias_current_lower (decimal64)

    YANG Description: The lower threshold for the laser bias current. This leaf value is
compared to the instant value of last-bias-current.
    """
    return self.__laser_bias_current_lower
      
  def _set_laser_bias_current_lower(self, v, load=False):
    """
    Setter method for laser_bias_current_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_bias_current_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_laser_bias_current_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_laser_bias_current_lower() directly.

    YANG Description: The lower threshold for the laser bias current. This leaf value is
compared to the instant value of last-bias-current.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """laser_bias_current_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__laser_bias_current_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_laser_bias_current_lower(self):
    self.__laser_bias_current_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_supply_voltage_upper(self):
    """
    Getter method for supply_voltage_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/supply_voltage_upper (decimal64)

    YANG Description: The upper threshold for the transceiver supply voltage. This leaf
value is compared to the instant value of supply-voltage.
    """
    return self.__supply_voltage_upper
      
  def _set_supply_voltage_upper(self, v, load=False):
    """
    Setter method for supply_voltage_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/supply_voltage_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_supply_voltage_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_supply_voltage_upper() directly.

    YANG Description: The upper threshold for the transceiver supply voltage. This leaf
value is compared to the instant value of supply-voltage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """supply_voltage_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__supply_voltage_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_supply_voltage_upper(self):
    self.__supply_voltage_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_supply_voltage_lower(self):
    """
    Getter method for supply_voltage_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/supply_voltage_lower (decimal64)

    YANG Description: The lower threshold for the transceiver supply voltage. This leaf
value is compared to the instant value of supply-voltage.
    """
    return self.__supply_voltage_lower
      
  def _set_supply_voltage_lower(self, v, load=False):
    """
    Setter method for supply_voltage_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/supply_voltage_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_supply_voltage_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_supply_voltage_lower() directly.

    YANG Description: The lower threshold for the transceiver supply voltage. This leaf
value is compared to the instant value of supply-voltage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """supply_voltage_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__supply_voltage_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_supply_voltage_lower(self):
    self.__supply_voltage_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_module_temperature_lower(self):
    """
    Getter method for module_temperature_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/module_temperature_lower (decimal64)

    YANG Description: The lower temperature threshold for the transceiver module. This
leaf value is compared to the instant value of module-temperature.
    """
    return self.__module_temperature_lower
      
  def _set_module_temperature_lower(self, v, load=False):
    """
    Setter method for module_temperature_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/module_temperature_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_module_temperature_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_module_temperature_lower() directly.

    YANG Description: The lower temperature threshold for the transceiver module. This
leaf value is compared to the instant value of module-temperature.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """module_temperature_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__module_temperature_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_module_temperature_lower(self):
    self.__module_temperature_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_module_temperature_upper(self):
    """
    Getter method for module_temperature_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/module_temperature_upper (decimal64)

    YANG Description: The upper temperature threshold for the transceiver module. This
leaf value is compared to the instant value of module-temperature.
    """
    return self.__module_temperature_upper
      
  def _set_module_temperature_upper(self, v, load=False):
    """
    Setter method for module_temperature_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/module_temperature_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_module_temperature_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_module_temperature_upper() directly.

    YANG Description: The upper temperature threshold for the transceiver module. This
leaf value is compared to the instant value of module-temperature.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """module_temperature_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__module_temperature_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_module_temperature_upper(self):
    self.__module_temperature_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)

  severity = __builtin__.property(_get_severity)
  laser_temperature_upper = __builtin__.property(_get_laser_temperature_upper)
  laser_temperature_lower = __builtin__.property(_get_laser_temperature_lower)
  output_power_upper = __builtin__.property(_get_output_power_upper)
  output_power_lower = __builtin__.property(_get_output_power_lower)
  input_power_upper = __builtin__.property(_get_input_power_upper)
  input_power_lower = __builtin__.property(_get_input_power_lower)
  laser_bias_current_upper = __builtin__.property(_get_laser_bias_current_upper)
  laser_bias_current_lower = __builtin__.property(_get_laser_bias_current_lower)
  supply_voltage_upper = __builtin__.property(_get_supply_voltage_upper)
  supply_voltage_lower = __builtin__.property(_get_supply_voltage_lower)
  module_temperature_lower = __builtin__.property(_get_module_temperature_lower)
  module_temperature_upper = __builtin__.property(_get_module_temperature_upper)


  _pyangbind_elements = OrderedDict([('severity', severity), ('laser_temperature_upper', laser_temperature_upper), ('laser_temperature_lower', laser_temperature_lower), ('output_power_upper', output_power_upper), ('output_power_lower', output_power_lower), ('input_power_upper', input_power_upper), ('input_power_lower', input_power_lower), ('laser_bias_current_upper', laser_bias_current_upper), ('laser_bias_current_lower', laser_bias_current_lower), ('supply_voltage_upper', supply_voltage_upper), ('supply_voltage_lower', supply_voltage_lower), ('module_temperature_lower', module_temperature_lower), ('module_temperature_upper', module_temperature_upper), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/transceiver/thresholds/threshold/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational alarm thresholds for the transceiver.
  """
  __slots__ = ('_path_helper', '_extmethods', '__severity','__laser_temperature_upper','__laser_temperature_lower','__output_power_upper','__output_power_lower','__input_power_upper','__input_power_lower','__laser_bias_current_upper','__laser_bias_current_lower','__supply_voltage_upper','__supply_voltage_lower','__module_temperature_lower','__module_temperature_upper',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__severity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='identityref', is_config=False)
    self.__laser_temperature_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__laser_temperature_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__output_power_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__output_power_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__input_power_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__input_power_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__laser_bias_current_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__laser_bias_current_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__supply_voltage_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__supply_voltage_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__module_temperature_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    self.__module_temperature_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'transceiver', 'thresholds', 'threshold', 'state']

  def _get_severity(self):
    """
    Getter method for severity, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/severity (identityref)

    YANG Description: The type of alarm to which the thresholds apply.
    """
    return self.__severity
      
  def _set_severity(self, v, load=False):
    """
    Setter method for severity, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/severity (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_severity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_severity() directly.

    YANG Description: The type of alarm to which the thresholds apply.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """severity must be of a type compatible with identityref""",
          'defined-type': "openconfig-platform-transceiver:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='identityref', is_config=False)""",
        })

    self.__severity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_severity(self):
    self.__severity = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:UNKNOWN': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MINOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:WARNING': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:MAJOR': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'openconfig-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}, 'oc-alarm-types:CRITICAL': {'@module': 'openconfig-alarm-types', '@namespace': 'http://openconfig.net/yang/alarms/types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='identityref', is_config=False)


  def _get_laser_temperature_upper(self):
    """
    Getter method for laser_temperature_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_temperature_upper (decimal64)

    YANG Description: The upper temperature threshold for the laser temperature sensor.
This leaf value is compared to the instant value of
laser-temperature.
    """
    return self.__laser_temperature_upper
      
  def _set_laser_temperature_upper(self, v, load=False):
    """
    Setter method for laser_temperature_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_temperature_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_laser_temperature_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_laser_temperature_upper() directly.

    YANG Description: The upper temperature threshold for the laser temperature sensor.
This leaf value is compared to the instant value of
laser-temperature.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """laser_temperature_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__laser_temperature_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_laser_temperature_upper(self):
    self.__laser_temperature_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_laser_temperature_lower(self):
    """
    Getter method for laser_temperature_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_temperature_lower (decimal64)

    YANG Description: The lower temperature threshold for the laser temperature sensor.
This leaf value is compared to the instant value of
laser-temperature.
    """
    return self.__laser_temperature_lower
      
  def _set_laser_temperature_lower(self, v, load=False):
    """
    Setter method for laser_temperature_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_temperature_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_laser_temperature_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_laser_temperature_lower() directly.

    YANG Description: The lower temperature threshold for the laser temperature sensor.
This leaf value is compared to the instant value of
laser-temperature.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """laser_temperature_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__laser_temperature_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_laser_temperature_lower(self):
    self.__laser_temperature_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="laser-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_output_power_upper(self):
    """
    Getter method for output_power_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/output_power_upper (decimal64)

    YANG Description: The upper power threshold for the laser output power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-output-power. This leaf
value is compared to the instant value of optical-output-power.
    """
    return self.__output_power_upper
      
  def _set_output_power_upper(self, v, load=False):
    """
    Setter method for output_power_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/output_power_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_power_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_power_upper() directly.

    YANG Description: The upper power threshold for the laser output power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-output-power. This leaf
value is compared to the instant value of optical-output-power.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_power_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__output_power_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_power_upper(self):
    self.__output_power_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_output_power_lower(self):
    """
    Getter method for output_power_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/output_power_lower (decimal64)

    YANG Description: The lower power threshold for the laser output power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-output-power. This leaf
value is compared to the instant value of optical-output-power.
    """
    return self.__output_power_lower
      
  def _set_output_power_lower(self, v, load=False):
    """
    Setter method for output_power_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/output_power_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_power_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_power_lower() directly.

    YANG Description: The lower power threshold for the laser output power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-output-power. This leaf
value is compared to the instant value of optical-output-power.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_power_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__output_power_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_power_lower(self):
    self.__output_power_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="output-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_input_power_upper(self):
    """
    Getter method for input_power_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/input_power_upper (decimal64)

    YANG Description: The upper power threshold for the laser input power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-input-power. This leaf
value is compared to the instant value of optical-input-power.
    """
    return self.__input_power_upper
      
  def _set_input_power_upper(self, v, load=False):
    """
    Setter method for input_power_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/input_power_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input_power_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input_power_upper() directly.

    YANG Description: The upper power threshold for the laser input power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-input-power. This leaf
value is compared to the instant value of optical-input-power.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input_power_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__input_power_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input_power_upper(self):
    self.__input_power_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_input_power_lower(self):
    """
    Getter method for input_power_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/input_power_lower (decimal64)

    YANG Description: The lower power threshold for the laser input power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-input-power. This leaf
value is compared to the instant value of optical-input-power.
    """
    return self.__input_power_lower
      
  def _set_input_power_lower(self, v, load=False):
    """
    Setter method for input_power_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/input_power_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input_power_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input_power_lower() directly.

    YANG Description: The lower power threshold for the laser input power. This threshold
applies to every physical-channel on the transceiver and does not
apply to the aggregate transceiver optical-input-power. This leaf
value is compared to the instant value of optical-input-power.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input_power_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__input_power_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input_power_lower(self):
    self.__input_power_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="input-power-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_laser_bias_current_upper(self):
    """
    Getter method for laser_bias_current_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_bias_current_upper (decimal64)

    YANG Description: The upper threshold for the laser bias current. This leaf value is
compared to the instant value of last-bias-current.
    """
    return self.__laser_bias_current_upper
      
  def _set_laser_bias_current_upper(self, v, load=False):
    """
    Setter method for laser_bias_current_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_bias_current_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_laser_bias_current_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_laser_bias_current_upper() directly.

    YANG Description: The upper threshold for the laser bias current. This leaf value is
compared to the instant value of last-bias-current.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """laser_bias_current_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__laser_bias_current_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_laser_bias_current_upper(self):
    self.__laser_bias_current_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_laser_bias_current_lower(self):
    """
    Getter method for laser_bias_current_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_bias_current_lower (decimal64)

    YANG Description: The lower threshold for the laser bias current. This leaf value is
compared to the instant value of last-bias-current.
    """
    return self.__laser_bias_current_lower
      
  def _set_laser_bias_current_lower(self, v, load=False):
    """
    Setter method for laser_bias_current_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/laser_bias_current_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_laser_bias_current_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_laser_bias_current_lower() directly.

    YANG Description: The lower threshold for the laser bias current. This leaf value is
compared to the instant value of last-bias-current.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """laser_bias_current_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__laser_bias_current_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_laser_bias_current_lower(self):
    self.__laser_bias_current_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="laser-bias-current-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_supply_voltage_upper(self):
    """
    Getter method for supply_voltage_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/supply_voltage_upper (decimal64)

    YANG Description: The upper threshold for the transceiver supply voltage. This leaf
value is compared to the instant value of supply-voltage.
    """
    return self.__supply_voltage_upper
      
  def _set_supply_voltage_upper(self, v, load=False):
    """
    Setter method for supply_voltage_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/supply_voltage_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_supply_voltage_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_supply_voltage_upper() directly.

    YANG Description: The upper threshold for the transceiver supply voltage. This leaf
value is compared to the instant value of supply-voltage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """supply_voltage_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__supply_voltage_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_supply_voltage_upper(self):
    self.__supply_voltage_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_supply_voltage_lower(self):
    """
    Getter method for supply_voltage_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/supply_voltage_lower (decimal64)

    YANG Description: The lower threshold for the transceiver supply voltage. This leaf
value is compared to the instant value of supply-voltage.
    """
    return self.__supply_voltage_lower
      
  def _set_supply_voltage_lower(self, v, load=False):
    """
    Setter method for supply_voltage_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/supply_voltage_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_supply_voltage_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_supply_voltage_lower() directly.

    YANG Description: The lower threshold for the transceiver supply voltage. This leaf
value is compared to the instant value of supply-voltage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """supply_voltage_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__supply_voltage_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_supply_voltage_lower(self):
    self.__supply_voltage_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="supply-voltage-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_module_temperature_lower(self):
    """
    Getter method for module_temperature_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/module_temperature_lower (decimal64)

    YANG Description: The lower temperature threshold for the transceiver module. This
leaf value is compared to the instant value of module-temperature.
    """
    return self.__module_temperature_lower
      
  def _set_module_temperature_lower(self, v, load=False):
    """
    Setter method for module_temperature_lower, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/module_temperature_lower (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_module_temperature_lower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_module_temperature_lower() directly.

    YANG Description: The lower temperature threshold for the transceiver module. This
leaf value is compared to the instant value of module-temperature.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """module_temperature_lower must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__module_temperature_lower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_module_temperature_lower(self):
    self.__module_temperature_lower = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-lower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)


  def _get_module_temperature_upper(self):
    """
    Getter method for module_temperature_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/module_temperature_upper (decimal64)

    YANG Description: The upper temperature threshold for the transceiver module. This
leaf value is compared to the instant value of module-temperature.
    """
    return self.__module_temperature_upper
      
  def _set_module_temperature_upper(self, v, load=False):
    """
    Setter method for module_temperature_upper, mapped from YANG variable /components/component/transceiver/thresholds/threshold/state/module_temperature_upper (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_module_temperature_upper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_module_temperature_upper() directly.

    YANG Description: The upper temperature threshold for the transceiver module. This
leaf value is compared to the instant value of module-temperature.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """module_temperature_upper must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)""",
        })

    self.__module_temperature_upper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_module_temperature_upper(self):
    self.__module_temperature_upper = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=1), is_leaf=True, yang_name="module-temperature-upper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='decimal64', is_config=False)

  severity = __builtin__.property(_get_severity)
  laser_temperature_upper = __builtin__.property(_get_laser_temperature_upper)
  laser_temperature_lower = __builtin__.property(_get_laser_temperature_lower)
  output_power_upper = __builtin__.property(_get_output_power_upper)
  output_power_lower = __builtin__.property(_get_output_power_lower)
  input_power_upper = __builtin__.property(_get_input_power_upper)
  input_power_lower = __builtin__.property(_get_input_power_lower)
  laser_bias_current_upper = __builtin__.property(_get_laser_bias_current_upper)
  laser_bias_current_lower = __builtin__.property(_get_laser_bias_current_lower)
  supply_voltage_upper = __builtin__.property(_get_supply_voltage_upper)
  supply_voltage_lower = __builtin__.property(_get_supply_voltage_lower)
  module_temperature_lower = __builtin__.property(_get_module_temperature_lower)
  module_temperature_upper = __builtin__.property(_get_module_temperature_upper)


  _pyangbind_elements = OrderedDict([('severity', severity), ('laser_temperature_upper', laser_temperature_upper), ('laser_temperature_lower', laser_temperature_lower), ('output_power_upper', output_power_upper), ('output_power_lower', output_power_lower), ('input_power_upper', input_power_upper), ('input_power_lower', input_power_lower), ('laser_bias_current_upper', laser_bias_current_upper), ('laser_bias_current_lower', laser_bias_current_lower), ('supply_voltage_upper', supply_voltage_upper), ('supply_voltage_lower', supply_voltage_lower), ('module_temperature_lower', module_temperature_lower), ('module_temperature_upper', module_temperature_upper), ])


