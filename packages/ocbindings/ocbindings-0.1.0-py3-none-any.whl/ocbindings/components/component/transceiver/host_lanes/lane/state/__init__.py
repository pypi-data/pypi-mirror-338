# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/transceiver/host-lanes/lane/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for host lanes.
  """
  __slots__ = ('_path_helper', '_extmethods', '__lane_number','__tx_los','__tx_cdr_lol',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__lane_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="lane-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='uint8', is_config=False)
    self.__tx_los = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-los", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)
    self.__tx_cdr_lol = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-cdr-lol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'transceiver', 'host-lanes', 'lane', 'state']

  def _get_lane_number(self):
    """
    Getter method for lane_number, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/lane_number (uint8)

    YANG Description: Number identifying an electrical host lane carrying one serial
signal.  Lanes are numbered starting with 1.
    """
    return self.__lane_number
      
  def _set_lane_number(self, v, load=False):
    """
    Setter method for lane_number, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/lane_number (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lane_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lane_number() directly.

    YANG Description: Number identifying an electrical host lane carrying one serial
signal.  Lanes are numbered starting with 1.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="lane-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lane_number must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="lane-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='uint8', is_config=False)""",
        })

    self.__lane_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lane_number(self):
    self.__lane_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="lane-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='uint8', is_config=False)


  def _get_tx_los(self):
    """
    Getter method for tx_los, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/tx_los (boolean)

    YANG Description: Transmitter loss-of-signal flag.
    """
    return self.__tx_los
      
  def _set_tx_los(self, v, load=False):
    """
    Setter method for tx_los, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/tx_los (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_los is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_los() directly.

    YANG Description: Transmitter loss-of-signal flag.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="tx-los", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_los must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-los", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)""",
        })

    self.__tx_los = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_los(self):
    self.__tx_los = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-los", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)


  def _get_tx_cdr_lol(self):
    """
    Getter method for tx_cdr_lol, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/tx_cdr_lol (boolean)

    YANG Description: Transmitter clock-and-data-recovery loss-of-lock flag.
    """
    return self.__tx_cdr_lol
      
  def _set_tx_cdr_lol(self, v, load=False):
    """
    Setter method for tx_cdr_lol, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/tx_cdr_lol (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_cdr_lol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_cdr_lol() directly.

    YANG Description: Transmitter clock-and-data-recovery loss-of-lock flag.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="tx-cdr-lol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_cdr_lol must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-cdr-lol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)""",
        })

    self.__tx_cdr_lol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_cdr_lol(self):
    self.__tx_cdr_lol = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-cdr-lol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)

  lane_number = __builtin__.property(_get_lane_number)
  tx_los = __builtin__.property(_get_tx_los)
  tx_cdr_lol = __builtin__.property(_get_tx_cdr_lol)


  _pyangbind_elements = OrderedDict([('lane_number', lane_number), ('tx_los', tx_los), ('tx_cdr_lol', tx_cdr_lol), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/transceiver/host-lanes/lane/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for host lanes.
  """
  __slots__ = ('_path_helper', '_extmethods', '__lane_number','__tx_los','__tx_cdr_lol',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__lane_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="lane-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='uint8', is_config=False)
    self.__tx_los = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-los", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)
    self.__tx_cdr_lol = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-cdr-lol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'transceiver', 'host-lanes', 'lane', 'state']

  def _get_lane_number(self):
    """
    Getter method for lane_number, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/lane_number (uint8)

    YANG Description: Number identifying an electrical host lane carrying one serial
signal.  Lanes are numbered starting with 1.
    """
    return self.__lane_number
      
  def _set_lane_number(self, v, load=False):
    """
    Setter method for lane_number, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/lane_number (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lane_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lane_number() directly.

    YANG Description: Number identifying an electrical host lane carrying one serial
signal.  Lanes are numbered starting with 1.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="lane-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lane_number must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="lane-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='uint8', is_config=False)""",
        })

    self.__lane_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lane_number(self):
    self.__lane_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="lane-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='uint8', is_config=False)


  def _get_tx_los(self):
    """
    Getter method for tx_los, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/tx_los (boolean)

    YANG Description: Transmitter loss-of-signal flag.
    """
    return self.__tx_los
      
  def _set_tx_los(self, v, load=False):
    """
    Setter method for tx_los, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/tx_los (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_los is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_los() directly.

    YANG Description: Transmitter loss-of-signal flag.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="tx-los", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_los must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-los", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)""",
        })

    self.__tx_los = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_los(self):
    self.__tx_los = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-los", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)


  def _get_tx_cdr_lol(self):
    """
    Getter method for tx_cdr_lol, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/tx_cdr_lol (boolean)

    YANG Description: Transmitter clock-and-data-recovery loss-of-lock flag.
    """
    return self.__tx_cdr_lol
      
  def _set_tx_cdr_lol(self, v, load=False):
    """
    Setter method for tx_cdr_lol, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/tx_cdr_lol (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_cdr_lol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_cdr_lol() directly.

    YANG Description: Transmitter clock-and-data-recovery loss-of-lock flag.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="tx-cdr-lol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_cdr_lol must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-cdr-lol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)""",
        })

    self.__tx_cdr_lol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_cdr_lol(self):
    self.__tx_cdr_lol = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-cdr-lol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)

  lane_number = __builtin__.property(_get_lane_number)
  tx_los = __builtin__.property(_get_tx_los)
  tx_cdr_lol = __builtin__.property(_get_tx_cdr_lol)


  _pyangbind_elements = OrderedDict([('lane_number', lane_number), ('tx_los', tx_los), ('tx_cdr_lol', tx_cdr_lol), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/transceiver/host-lanes/lane/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for host lanes.
  """
  __slots__ = ('_path_helper', '_extmethods', '__lane_number','__tx_los','__tx_cdr_lol',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__lane_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="lane-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='uint8', is_config=False)
    self.__tx_los = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-los", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)
    self.__tx_cdr_lol = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-cdr-lol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'transceiver', 'host-lanes', 'lane', 'state']

  def _get_lane_number(self):
    """
    Getter method for lane_number, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/lane_number (uint8)

    YANG Description: Number identifying an electrical host lane carrying one serial
signal.  Lanes are numbered starting with 1.
    """
    return self.__lane_number
      
  def _set_lane_number(self, v, load=False):
    """
    Setter method for lane_number, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/lane_number (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lane_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lane_number() directly.

    YANG Description: Number identifying an electrical host lane carrying one serial
signal.  Lanes are numbered starting with 1.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="lane-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lane_number must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="lane-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='uint8', is_config=False)""",
        })

    self.__lane_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lane_number(self):
    self.__lane_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="lane-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='uint8', is_config=False)


  def _get_tx_los(self):
    """
    Getter method for tx_los, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/tx_los (boolean)

    YANG Description: Transmitter loss-of-signal flag.
    """
    return self.__tx_los
      
  def _set_tx_los(self, v, load=False):
    """
    Setter method for tx_los, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/tx_los (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_los is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_los() directly.

    YANG Description: Transmitter loss-of-signal flag.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="tx-los", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_los must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-los", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)""",
        })

    self.__tx_los = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_los(self):
    self.__tx_los = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-los", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)


  def _get_tx_cdr_lol(self):
    """
    Getter method for tx_cdr_lol, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/tx_cdr_lol (boolean)

    YANG Description: Transmitter clock-and-data-recovery loss-of-lock flag.
    """
    return self.__tx_cdr_lol
      
  def _set_tx_cdr_lol(self, v, load=False):
    """
    Setter method for tx_cdr_lol, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/tx_cdr_lol (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_cdr_lol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_cdr_lol() directly.

    YANG Description: Transmitter clock-and-data-recovery loss-of-lock flag.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="tx-cdr-lol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_cdr_lol must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-cdr-lol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)""",
        })

    self.__tx_cdr_lol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_cdr_lol(self):
    self.__tx_cdr_lol = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-cdr-lol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)

  lane_number = __builtin__.property(_get_lane_number)
  tx_los = __builtin__.property(_get_tx_los)
  tx_cdr_lol = __builtin__.property(_get_tx_cdr_lol)


  _pyangbind_elements = OrderedDict([('lane_number', lane_number), ('tx_los', tx_los), ('tx_cdr_lol', tx_cdr_lol), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform-common - based on the path /components/component/transceiver/host-lanes/lane/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for host lanes.
  """
  __slots__ = ('_path_helper', '_extmethods', '__lane_number','__tx_los','__tx_cdr_lol',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/platform'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__lane_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="lane-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='uint8', is_config=False)
    self.__tx_los = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-los", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)
    self.__tx_cdr_lol = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-cdr-lol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'transceiver', 'host-lanes', 'lane', 'state']

  def _get_lane_number(self):
    """
    Getter method for lane_number, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/lane_number (uint8)

    YANG Description: Number identifying an electrical host lane carrying one serial
signal.  Lanes are numbered starting with 1.
    """
    return self.__lane_number
      
  def _set_lane_number(self, v, load=False):
    """
    Setter method for lane_number, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/lane_number (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lane_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lane_number() directly.

    YANG Description: Number identifying an electrical host lane carrying one serial
signal.  Lanes are numbered starting with 1.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="lane-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lane_number must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="lane-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='uint8', is_config=False)""",
        })

    self.__lane_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lane_number(self):
    self.__lane_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="lane-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='uint8', is_config=False)


  def _get_tx_los(self):
    """
    Getter method for tx_los, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/tx_los (boolean)

    YANG Description: Transmitter loss-of-signal flag.
    """
    return self.__tx_los
      
  def _set_tx_los(self, v, load=False):
    """
    Setter method for tx_los, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/tx_los (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_los is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_los() directly.

    YANG Description: Transmitter loss-of-signal flag.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="tx-los", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_los must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-los", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)""",
        })

    self.__tx_los = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_los(self):
    self.__tx_los = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-los", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)


  def _get_tx_cdr_lol(self):
    """
    Getter method for tx_cdr_lol, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/tx_cdr_lol (boolean)

    YANG Description: Transmitter clock-and-data-recovery loss-of-lock flag.
    """
    return self.__tx_cdr_lol
      
  def _set_tx_cdr_lol(self, v, load=False):
    """
    Setter method for tx_cdr_lol, mapped from YANG variable /components/component/transceiver/host_lanes/lane/state/tx_cdr_lol (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_cdr_lol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_cdr_lol() directly.

    YANG Description: Transmitter clock-and-data-recovery loss-of-lock flag.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="tx-cdr-lol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_cdr_lol must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-cdr-lol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)""",
        })

    self.__tx_cdr_lol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_cdr_lol(self):
    self.__tx_cdr_lol = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="tx-cdr-lol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform/transceiver', defining_module='openconfig-platform-transceiver', yang_type='boolean', is_config=False)

  lane_number = __builtin__.property(_get_lane_number)
  tx_los = __builtin__.property(_get_tx_los)
  tx_cdr_lol = __builtin__.property(_get_tx_cdr_lol)


  _pyangbind_elements = OrderedDict([('lane_number', lane_number), ('tx_los', tx_los), ('tx_cdr_lol', tx_cdr_lol), ])


