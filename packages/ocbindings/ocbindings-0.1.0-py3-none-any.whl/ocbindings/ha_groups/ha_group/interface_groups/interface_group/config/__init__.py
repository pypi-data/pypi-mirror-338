# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-fw-high-availability - based on the path /ha-groups/ha-group/interface-groups/interface-group/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters for the interface-groups
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__monitored_interfaces','__group_policy',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/oc-fw-ha'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__id = YANGDynClass(base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8),str,], is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='union', is_config=True)
    self.__monitored_interfaces = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="monitored-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='oc-if:base-interface-ref', is_config=True)
    self.__group_policy = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ANY': {}, 'ALL': {}},), is_leaf=True, yang_name="group-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ha-groups', 'ha-group', 'interface-groups', 'interface-group', 'config']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /ha_groups/ha_group/interface_groups/interface_group/config/id (union)

    YANG Description: Assign a unique id to an interface group
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /ha_groups/ha_group/interface_groups/interface_group/config/id (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: Assign a unique id to an interface group
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8),str,], is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with union""",
          'defined-type': "openconfig-fw-high-availability:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8),str,], is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='union', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8),str,], is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='union', is_config=True)


  def _get_monitored_interfaces(self):
    """
    Getter method for monitored_interfaces, mapped from YANG variable /ha_groups/ha_group/interface_groups/interface_group/config/monitored_interfaces (oc-if:base-interface-ref)

    YANG Description: Interface being monitored
    """
    return self.__monitored_interfaces
      
  def _set_monitored_interfaces(self, v, load=False):
    """
    Setter method for monitored_interfaces, mapped from YANG variable /ha_groups/ha_group/interface_groups/interface_group/config/monitored_interfaces (oc-if:base-interface-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_monitored_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_monitored_interfaces() directly.

    YANG Description: Interface being monitored
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="monitored-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='oc-if:base-interface-ref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """monitored_interfaces must be of a type compatible with oc-if:base-interface-ref""",
          'defined-type': "oc-if:base-interface-ref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="monitored-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='oc-if:base-interface-ref', is_config=True)""",
        })

    self.__monitored_interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_monitored_interfaces(self):
    self.__monitored_interfaces = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="monitored-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='oc-if:base-interface-ref', is_config=True)


  def _get_group_policy(self):
    """
    Getter method for group_policy, mapped from YANG variable /ha_groups/ha_group/interface_groups/interface_group/config/group_policy (enumeration)

    YANG Description: Determines how the State of monitored-interfaces is used to
determine the State of the group they are a member of
    """
    return self.__group_policy
      
  def _set_group_policy(self, v, load=False):
    """
    Setter method for group_policy, mapped from YANG variable /ha_groups/ha_group/interface_groups/interface_group/config/group_policy (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_group_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_group_policy() directly.

    YANG Description: Determines how the State of monitored-interfaces is used to
determine the State of the group they are a member of
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ANY': {}, 'ALL': {}},), is_leaf=True, yang_name="group-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """group_policy must be of a type compatible with enumeration""",
          'defined-type': "openconfig-fw-high-availability:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ANY': {}, 'ALL': {}},), is_leaf=True, yang_name="group-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='enumeration', is_config=True)""",
        })

    self.__group_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_group_policy(self):
    self.__group_policy = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ANY': {}, 'ALL': {}},), is_leaf=True, yang_name="group-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='enumeration', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  monitored_interfaces = __builtin__.property(_get_monitored_interfaces, _set_monitored_interfaces)
  group_policy = __builtin__.property(_get_group_policy, _set_group_policy)


  _pyangbind_elements = OrderedDict([('id', id), ('monitored_interfaces', monitored_interfaces), ('group_policy', group_policy), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-fw-high-availability - based on the path /ha-groups/ha-group/interface-groups/interface-group/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters for the interface-groups
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__monitored_interfaces','__group_policy',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/oc-fw-ha'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__id = YANGDynClass(base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8),str,], is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='union', is_config=True)
    self.__monitored_interfaces = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="monitored-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='oc-if:base-interface-ref', is_config=True)
    self.__group_policy = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ANY': {}, 'ALL': {}},), is_leaf=True, yang_name="group-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ha-groups', 'ha-group', 'interface-groups', 'interface-group', 'config']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /ha_groups/ha_group/interface_groups/interface_group/config/id (union)

    YANG Description: Assign a unique id to an interface group
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /ha_groups/ha_group/interface_groups/interface_group/config/id (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: Assign a unique id to an interface group
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8),str,], is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with union""",
          'defined-type': "openconfig-fw-high-availability:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8),str,], is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='union', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8),str,], is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='union', is_config=True)


  def _get_monitored_interfaces(self):
    """
    Getter method for monitored_interfaces, mapped from YANG variable /ha_groups/ha_group/interface_groups/interface_group/config/monitored_interfaces (oc-if:base-interface-ref)

    YANG Description: Interface being monitored
    """
    return self.__monitored_interfaces
      
  def _set_monitored_interfaces(self, v, load=False):
    """
    Setter method for monitored_interfaces, mapped from YANG variable /ha_groups/ha_group/interface_groups/interface_group/config/monitored_interfaces (oc-if:base-interface-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_monitored_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_monitored_interfaces() directly.

    YANG Description: Interface being monitored
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="monitored-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='oc-if:base-interface-ref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """monitored_interfaces must be of a type compatible with oc-if:base-interface-ref""",
          'defined-type': "oc-if:base-interface-ref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="monitored-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='oc-if:base-interface-ref', is_config=True)""",
        })

    self.__monitored_interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_monitored_interfaces(self):
    self.__monitored_interfaces = YANGDynClass(unique=True, base=TypedListType(allowed_type=str), is_leaf=False, yang_name="monitored-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='oc-if:base-interface-ref', is_config=True)


  def _get_group_policy(self):
    """
    Getter method for group_policy, mapped from YANG variable /ha_groups/ha_group/interface_groups/interface_group/config/group_policy (enumeration)

    YANG Description: Determines how the State of monitored-interfaces is used to
determine the State of the group they are a member of
    """
    return self.__group_policy
      
  def _set_group_policy(self, v, load=False):
    """
    Setter method for group_policy, mapped from YANG variable /ha_groups/ha_group/interface_groups/interface_group/config/group_policy (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_group_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_group_policy() directly.

    YANG Description: Determines how the State of monitored-interfaces is used to
determine the State of the group they are a member of
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ANY': {}, 'ALL': {}},), is_leaf=True, yang_name="group-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """group_policy must be of a type compatible with enumeration""",
          'defined-type': "openconfig-fw-high-availability:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ANY': {}, 'ALL': {}},), is_leaf=True, yang_name="group-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='enumeration', is_config=True)""",
        })

    self.__group_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_group_policy(self):
    self.__group_policy = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ANY': {}, 'ALL': {}},), is_leaf=True, yang_name="group-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/oc-fw-ha', defining_module='openconfig-fw-high-availability', yang_type='enumeration', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  monitored_interfaces = __builtin__.property(_get_monitored_interfaces, _set_monitored_interfaces)
  group_policy = __builtin__.property(_get_group_policy, _set_group_policy)


  _pyangbind_elements = OrderedDict([('id', id), ('monitored_interfaces', monitored_interfaces), ('group_policy', group_policy), ])


