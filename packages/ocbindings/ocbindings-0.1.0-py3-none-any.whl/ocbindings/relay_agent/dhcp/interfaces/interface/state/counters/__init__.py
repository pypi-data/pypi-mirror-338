# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-relay-agent - based on the path /relay-agent/dhcp/interfaces/interface/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Counters and statistics for relay agent operation.
  """
  __slots__ = ('_path_helper', '_extmethods', '__total_dropped','__invalid_opcode','__invalid_options','__bootrequest_received','__dhcp_decline_received','__dhcp_discover_received','__dhcp_inform_received','__dhcp_release_received','__dhcp_request_received','__bootrequest_sent','__bootreply_sent','__dhcp_offer_sent','__dhcp_ack_sent','__dhcp_nack_sent',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/relay-agent'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__total_dropped = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__invalid_opcode = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-opcode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__invalid_options = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-options", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__bootrequest_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootrequest-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcp_decline_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-decline-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcp_discover_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-discover-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcp_inform_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-inform-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcp_release_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-release-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcp_request_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__bootrequest_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootrequest-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__bootreply_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootreply-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcp_offer_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-offer-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcp_ack_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-ack-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcp_nack_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-nack-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['relay-agent', 'dhcp', 'interfaces', 'interface', 'state', 'counters']

  def _get_total_dropped(self):
    """
    Getter method for total_dropped, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/total_dropped (yang:counter64)

    YANG Description: Total number of DHCP packets dropped by the relay agent
    """
    return self.__total_dropped
      
  def _set_total_dropped(self, v, load=False):
    """
    Setter method for total_dropped, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/total_dropped (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_dropped is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_dropped() directly.

    YANG Description: Total number of DHCP packets dropped by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_dropped must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__total_dropped = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_dropped(self):
    self.__total_dropped = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_invalid_opcode(self):
    """
    Getter method for invalid_opcode, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/invalid_opcode (yang:counter64)

    YANG Description: Number of DHCP packets dropped due to an invalid opcode
    """
    return self.__invalid_opcode
      
  def _set_invalid_opcode(self, v, load=False):
    """
    Setter method for invalid_opcode, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/invalid_opcode (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_opcode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_opcode() directly.

    YANG Description: Number of DHCP packets dropped due to an invalid opcode
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-opcode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_opcode must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-opcode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__invalid_opcode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_opcode(self):
    self.__invalid_opcode = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-opcode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_invalid_options(self):
    """
    Getter method for invalid_options, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/invalid_options (yang:counter64)

    YANG Description: Number of DHCP packets dropped due to an invalid option
    """
    return self.__invalid_options
      
  def _set_invalid_options(self, v, load=False):
    """
    Setter method for invalid_options, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/invalid_options (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_options is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_options() directly.

    YANG Description: Number of DHCP packets dropped due to an invalid option
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-options", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_options must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-options", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__invalid_options = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_options(self):
    self.__invalid_options = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-options", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_bootrequest_received(self):
    """
    Getter method for bootrequest_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/bootrequest_received (yang:counter64)

    YANG Description: BOOTREQUEST messages received by the relay agent
    """
    return self.__bootrequest_received
      
  def _set_bootrequest_received(self, v, load=False):
    """
    Setter method for bootrequest_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/bootrequest_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bootrequest_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bootrequest_received() directly.

    YANG Description: BOOTREQUEST messages received by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootrequest-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bootrequest_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootrequest-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__bootrequest_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bootrequest_received(self):
    self.__bootrequest_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootrequest-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcp_decline_received(self):
    """
    Getter method for dhcp_decline_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_decline_received (yang:counter64)

    YANG Description: DHCP DECLINE messages received by the relay agent
    """
    return self.__dhcp_decline_received
      
  def _set_dhcp_decline_received(self, v, load=False):
    """
    Setter method for dhcp_decline_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_decline_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_decline_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_decline_received() directly.

    YANG Description: DHCP DECLINE messages received by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-decline-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_decline_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-decline-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcp_decline_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_decline_received(self):
    self.__dhcp_decline_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-decline-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcp_discover_received(self):
    """
    Getter method for dhcp_discover_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_discover_received (yang:counter64)

    YANG Description: DHCP DISCOVER messages received by the relay agent
    """
    return self.__dhcp_discover_received
      
  def _set_dhcp_discover_received(self, v, load=False):
    """
    Setter method for dhcp_discover_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_discover_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_discover_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_discover_received() directly.

    YANG Description: DHCP DISCOVER messages received by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-discover-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_discover_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-discover-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcp_discover_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_discover_received(self):
    self.__dhcp_discover_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-discover-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcp_inform_received(self):
    """
    Getter method for dhcp_inform_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_inform_received (yang:counter64)

    YANG Description: DHCP INFORM messages received by the relay agent
    """
    return self.__dhcp_inform_received
      
  def _set_dhcp_inform_received(self, v, load=False):
    """
    Setter method for dhcp_inform_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_inform_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_inform_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_inform_received() directly.

    YANG Description: DHCP INFORM messages received by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-inform-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_inform_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-inform-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcp_inform_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_inform_received(self):
    self.__dhcp_inform_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-inform-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcp_release_received(self):
    """
    Getter method for dhcp_release_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_release_received (yang:counter64)

    YANG Description: DHCP RELEASE messages received by the relay agent
    """
    return self.__dhcp_release_received
      
  def _set_dhcp_release_received(self, v, load=False):
    """
    Setter method for dhcp_release_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_release_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_release_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_release_received() directly.

    YANG Description: DHCP RELEASE messages received by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-release-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_release_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-release-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcp_release_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_release_received(self):
    self.__dhcp_release_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-release-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcp_request_received(self):
    """
    Getter method for dhcp_request_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_request_received (yang:counter64)

    YANG Description: DHCP REQUEST messages received by the relay agent
    """
    return self.__dhcp_request_received
      
  def _set_dhcp_request_received(self, v, load=False):
    """
    Setter method for dhcp_request_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_request_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_request_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_request_received() directly.

    YANG Description: DHCP REQUEST messages received by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_request_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcp_request_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_request_received(self):
    self.__dhcp_request_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_bootrequest_sent(self):
    """
    Getter method for bootrequest_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/bootrequest_sent (yang:counter64)

    YANG Description: BOOTREQUEST messages forwarded by the relay agent
    """
    return self.__bootrequest_sent
      
  def _set_bootrequest_sent(self, v, load=False):
    """
    Setter method for bootrequest_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/bootrequest_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bootrequest_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bootrequest_sent() directly.

    YANG Description: BOOTREQUEST messages forwarded by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootrequest-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bootrequest_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootrequest-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__bootrequest_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bootrequest_sent(self):
    self.__bootrequest_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootrequest-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_bootreply_sent(self):
    """
    Getter method for bootreply_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/bootreply_sent (yang:counter64)

    YANG Description: BOOTREPLY messages forwarded by the relay agent
    """
    return self.__bootreply_sent
      
  def _set_bootreply_sent(self, v, load=False):
    """
    Setter method for bootreply_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/bootreply_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bootreply_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bootreply_sent() directly.

    YANG Description: BOOTREPLY messages forwarded by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootreply-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bootreply_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootreply-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__bootreply_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bootreply_sent(self):
    self.__bootreply_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootreply-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcp_offer_sent(self):
    """
    Getter method for dhcp_offer_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_offer_sent (yang:counter64)

    YANG Description: DHCP OFFER messages sent by the relay agent
    """
    return self.__dhcp_offer_sent
      
  def _set_dhcp_offer_sent(self, v, load=False):
    """
    Setter method for dhcp_offer_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_offer_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_offer_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_offer_sent() directly.

    YANG Description: DHCP OFFER messages sent by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-offer-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_offer_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-offer-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcp_offer_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_offer_sent(self):
    self.__dhcp_offer_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-offer-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcp_ack_sent(self):
    """
    Getter method for dhcp_ack_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_ack_sent (yang:counter64)

    YANG Description: DHCP ACK messages sent by the relay agent
    """
    return self.__dhcp_ack_sent
      
  def _set_dhcp_ack_sent(self, v, load=False):
    """
    Setter method for dhcp_ack_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_ack_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_ack_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_ack_sent() directly.

    YANG Description: DHCP ACK messages sent by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-ack-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_ack_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-ack-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcp_ack_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_ack_sent(self):
    self.__dhcp_ack_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-ack-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcp_nack_sent(self):
    """
    Getter method for dhcp_nack_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_nack_sent (yang:counter64)

    YANG Description: DHCP NACK messages sent by the relay agent
    """
    return self.__dhcp_nack_sent
      
  def _set_dhcp_nack_sent(self, v, load=False):
    """
    Setter method for dhcp_nack_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_nack_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_nack_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_nack_sent() directly.

    YANG Description: DHCP NACK messages sent by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-nack-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_nack_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-nack-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcp_nack_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_nack_sent(self):
    self.__dhcp_nack_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-nack-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)

  total_dropped = __builtin__.property(_get_total_dropped)
  invalid_opcode = __builtin__.property(_get_invalid_opcode)
  invalid_options = __builtin__.property(_get_invalid_options)
  bootrequest_received = __builtin__.property(_get_bootrequest_received)
  dhcp_decline_received = __builtin__.property(_get_dhcp_decline_received)
  dhcp_discover_received = __builtin__.property(_get_dhcp_discover_received)
  dhcp_inform_received = __builtin__.property(_get_dhcp_inform_received)
  dhcp_release_received = __builtin__.property(_get_dhcp_release_received)
  dhcp_request_received = __builtin__.property(_get_dhcp_request_received)
  bootrequest_sent = __builtin__.property(_get_bootrequest_sent)
  bootreply_sent = __builtin__.property(_get_bootreply_sent)
  dhcp_offer_sent = __builtin__.property(_get_dhcp_offer_sent)
  dhcp_ack_sent = __builtin__.property(_get_dhcp_ack_sent)
  dhcp_nack_sent = __builtin__.property(_get_dhcp_nack_sent)


  _pyangbind_elements = OrderedDict([('total_dropped', total_dropped), ('invalid_opcode', invalid_opcode), ('invalid_options', invalid_options), ('bootrequest_received', bootrequest_received), ('dhcp_decline_received', dhcp_decline_received), ('dhcp_discover_received', dhcp_discover_received), ('dhcp_inform_received', dhcp_inform_received), ('dhcp_release_received', dhcp_release_received), ('dhcp_request_received', dhcp_request_received), ('bootrequest_sent', bootrequest_sent), ('bootreply_sent', bootreply_sent), ('dhcp_offer_sent', dhcp_offer_sent), ('dhcp_ack_sent', dhcp_ack_sent), ('dhcp_nack_sent', dhcp_nack_sent), ])


class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-relay-agent - based on the path /relay-agent/dhcp/interfaces/interface/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Counters and statistics for relay agent operation.
  """
  __slots__ = ('_path_helper', '_extmethods', '__total_dropped','__invalid_opcode','__invalid_options','__bootrequest_received','__dhcp_decline_received','__dhcp_discover_received','__dhcp_inform_received','__dhcp_release_received','__dhcp_request_received','__bootrequest_sent','__bootreply_sent','__dhcp_offer_sent','__dhcp_ack_sent','__dhcp_nack_sent',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/relay-agent'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__total_dropped = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__invalid_opcode = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-opcode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__invalid_options = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-options", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__bootrequest_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootrequest-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcp_decline_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-decline-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcp_discover_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-discover-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcp_inform_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-inform-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcp_release_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-release-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcp_request_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__bootrequest_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootrequest-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__bootreply_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootreply-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcp_offer_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-offer-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcp_ack_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-ack-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    self.__dhcp_nack_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-nack-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['relay-agent', 'dhcp', 'interfaces', 'interface', 'state', 'counters']

  def _get_total_dropped(self):
    """
    Getter method for total_dropped, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/total_dropped (yang:counter64)

    YANG Description: Total number of DHCP packets dropped by the relay agent
    """
    return self.__total_dropped
      
  def _set_total_dropped(self, v, load=False):
    """
    Setter method for total_dropped, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/total_dropped (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_dropped is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_dropped() directly.

    YANG Description: Total number of DHCP packets dropped by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_dropped must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__total_dropped = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_dropped(self):
    self.__total_dropped = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_invalid_opcode(self):
    """
    Getter method for invalid_opcode, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/invalid_opcode (yang:counter64)

    YANG Description: Number of DHCP packets dropped due to an invalid opcode
    """
    return self.__invalid_opcode
      
  def _set_invalid_opcode(self, v, load=False):
    """
    Setter method for invalid_opcode, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/invalid_opcode (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_opcode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_opcode() directly.

    YANG Description: Number of DHCP packets dropped due to an invalid opcode
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-opcode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_opcode must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-opcode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__invalid_opcode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_opcode(self):
    self.__invalid_opcode = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-opcode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_invalid_options(self):
    """
    Getter method for invalid_options, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/invalid_options (yang:counter64)

    YANG Description: Number of DHCP packets dropped due to an invalid option
    """
    return self.__invalid_options
      
  def _set_invalid_options(self, v, load=False):
    """
    Setter method for invalid_options, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/invalid_options (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_options is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_options() directly.

    YANG Description: Number of DHCP packets dropped due to an invalid option
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-options", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_options must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-options", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__invalid_options = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_options(self):
    self.__invalid_options = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-options", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_bootrequest_received(self):
    """
    Getter method for bootrequest_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/bootrequest_received (yang:counter64)

    YANG Description: BOOTREQUEST messages received by the relay agent
    """
    return self.__bootrequest_received
      
  def _set_bootrequest_received(self, v, load=False):
    """
    Setter method for bootrequest_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/bootrequest_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bootrequest_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bootrequest_received() directly.

    YANG Description: BOOTREQUEST messages received by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootrequest-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bootrequest_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootrequest-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__bootrequest_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bootrequest_received(self):
    self.__bootrequest_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootrequest-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcp_decline_received(self):
    """
    Getter method for dhcp_decline_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_decline_received (yang:counter64)

    YANG Description: DHCP DECLINE messages received by the relay agent
    """
    return self.__dhcp_decline_received
      
  def _set_dhcp_decline_received(self, v, load=False):
    """
    Setter method for dhcp_decline_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_decline_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_decline_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_decline_received() directly.

    YANG Description: DHCP DECLINE messages received by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-decline-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_decline_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-decline-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcp_decline_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_decline_received(self):
    self.__dhcp_decline_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-decline-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcp_discover_received(self):
    """
    Getter method for dhcp_discover_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_discover_received (yang:counter64)

    YANG Description: DHCP DISCOVER messages received by the relay agent
    """
    return self.__dhcp_discover_received
      
  def _set_dhcp_discover_received(self, v, load=False):
    """
    Setter method for dhcp_discover_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_discover_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_discover_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_discover_received() directly.

    YANG Description: DHCP DISCOVER messages received by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-discover-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_discover_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-discover-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcp_discover_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_discover_received(self):
    self.__dhcp_discover_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-discover-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcp_inform_received(self):
    """
    Getter method for dhcp_inform_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_inform_received (yang:counter64)

    YANG Description: DHCP INFORM messages received by the relay agent
    """
    return self.__dhcp_inform_received
      
  def _set_dhcp_inform_received(self, v, load=False):
    """
    Setter method for dhcp_inform_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_inform_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_inform_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_inform_received() directly.

    YANG Description: DHCP INFORM messages received by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-inform-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_inform_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-inform-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcp_inform_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_inform_received(self):
    self.__dhcp_inform_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-inform-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcp_release_received(self):
    """
    Getter method for dhcp_release_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_release_received (yang:counter64)

    YANG Description: DHCP RELEASE messages received by the relay agent
    """
    return self.__dhcp_release_received
      
  def _set_dhcp_release_received(self, v, load=False):
    """
    Setter method for dhcp_release_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_release_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_release_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_release_received() directly.

    YANG Description: DHCP RELEASE messages received by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-release-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_release_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-release-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcp_release_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_release_received(self):
    self.__dhcp_release_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-release-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcp_request_received(self):
    """
    Getter method for dhcp_request_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_request_received (yang:counter64)

    YANG Description: DHCP REQUEST messages received by the relay agent
    """
    return self.__dhcp_request_received
      
  def _set_dhcp_request_received(self, v, load=False):
    """
    Setter method for dhcp_request_received, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_request_received (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_request_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_request_received() directly.

    YANG Description: DHCP REQUEST messages received by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_request_received must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcp_request_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_request_received(self):
    self.__dhcp_request_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-request-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_bootrequest_sent(self):
    """
    Getter method for bootrequest_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/bootrequest_sent (yang:counter64)

    YANG Description: BOOTREQUEST messages forwarded by the relay agent
    """
    return self.__bootrequest_sent
      
  def _set_bootrequest_sent(self, v, load=False):
    """
    Setter method for bootrequest_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/bootrequest_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bootrequest_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bootrequest_sent() directly.

    YANG Description: BOOTREQUEST messages forwarded by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootrequest-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bootrequest_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootrequest-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__bootrequest_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bootrequest_sent(self):
    self.__bootrequest_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootrequest-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_bootreply_sent(self):
    """
    Getter method for bootreply_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/bootreply_sent (yang:counter64)

    YANG Description: BOOTREPLY messages forwarded by the relay agent
    """
    return self.__bootreply_sent
      
  def _set_bootreply_sent(self, v, load=False):
    """
    Setter method for bootreply_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/bootreply_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bootreply_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bootreply_sent() directly.

    YANG Description: BOOTREPLY messages forwarded by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootreply-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bootreply_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootreply-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__bootreply_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bootreply_sent(self):
    self.__bootreply_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bootreply-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcp_offer_sent(self):
    """
    Getter method for dhcp_offer_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_offer_sent (yang:counter64)

    YANG Description: DHCP OFFER messages sent by the relay agent
    """
    return self.__dhcp_offer_sent
      
  def _set_dhcp_offer_sent(self, v, load=False):
    """
    Setter method for dhcp_offer_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_offer_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_offer_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_offer_sent() directly.

    YANG Description: DHCP OFFER messages sent by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-offer-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_offer_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-offer-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcp_offer_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_offer_sent(self):
    self.__dhcp_offer_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-offer-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcp_ack_sent(self):
    """
    Getter method for dhcp_ack_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_ack_sent (yang:counter64)

    YANG Description: DHCP ACK messages sent by the relay agent
    """
    return self.__dhcp_ack_sent
      
  def _set_dhcp_ack_sent(self, v, load=False):
    """
    Setter method for dhcp_ack_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_ack_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_ack_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_ack_sent() directly.

    YANG Description: DHCP ACK messages sent by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-ack-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_ack_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-ack-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcp_ack_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_ack_sent(self):
    self.__dhcp_ack_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-ack-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)


  def _get_dhcp_nack_sent(self):
    """
    Getter method for dhcp_nack_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_nack_sent (yang:counter64)

    YANG Description: DHCP NACK messages sent by the relay agent
    """
    return self.__dhcp_nack_sent
      
  def _set_dhcp_nack_sent(self, v, load=False):
    """
    Setter method for dhcp_nack_sent, mapped from YANG variable /relay_agent/dhcp/interfaces/interface/state/counters/dhcp_nack_sent (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_nack_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_nack_sent() directly.

    YANG Description: DHCP NACK messages sent by the relay agent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-nack-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_nack_sent must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-nack-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)""",
        })

    self.__dhcp_nack_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_nack_sent(self):
    self.__dhcp_nack_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dhcp-nack-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/relay-agent', defining_module='openconfig-relay-agent', yang_type='yang:counter64', is_config=False)

  total_dropped = __builtin__.property(_get_total_dropped)
  invalid_opcode = __builtin__.property(_get_invalid_opcode)
  invalid_options = __builtin__.property(_get_invalid_options)
  bootrequest_received = __builtin__.property(_get_bootrequest_received)
  dhcp_decline_received = __builtin__.property(_get_dhcp_decline_received)
  dhcp_discover_received = __builtin__.property(_get_dhcp_discover_received)
  dhcp_inform_received = __builtin__.property(_get_dhcp_inform_received)
  dhcp_release_received = __builtin__.property(_get_dhcp_release_received)
  dhcp_request_received = __builtin__.property(_get_dhcp_request_received)
  bootrequest_sent = __builtin__.property(_get_bootrequest_sent)
  bootreply_sent = __builtin__.property(_get_bootreply_sent)
  dhcp_offer_sent = __builtin__.property(_get_dhcp_offer_sent)
  dhcp_ack_sent = __builtin__.property(_get_dhcp_ack_sent)
  dhcp_nack_sent = __builtin__.property(_get_dhcp_nack_sent)


  _pyangbind_elements = OrderedDict([('total_dropped', total_dropped), ('invalid_opcode', invalid_opcode), ('invalid_options', invalid_options), ('bootrequest_received', bootrequest_received), ('dhcp_decline_received', dhcp_decline_received), ('dhcp_discover_received', dhcp_discover_received), ('dhcp_inform_received', dhcp_inform_received), ('dhcp_release_received', dhcp_release_received), ('dhcp_request_received', dhcp_request_received), ('bootrequest_sent', bootrequest_sent), ('bootreply_sent', bootreply_sent), ('dhcp_offer_sent', dhcp_offer_sent), ('dhcp_ack_sent', dhcp_ack_sent), ('dhcp_nack_sent', dhcp_nack_sent), ])


