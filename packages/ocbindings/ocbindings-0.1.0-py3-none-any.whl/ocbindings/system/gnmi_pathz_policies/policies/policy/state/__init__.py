# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/gnmi-pathz-policies/policies/policy/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for an OpenConfig-path-based
authorization policies.
  """
  __slots__ = ('_path_helper', '_extmethods', '__instance','__version','__created_on',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__instance = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ACTIVE': {'value': 1}, 'SANDBOX': {'value': 2}},), is_leaf=True, yang_name="instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='enumeration', is_config=False)
    self.__version = YANGDynClass(base=str, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='version', is_config=False)
    self.__created_on = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='created-on', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'gnmi-pathz-policies', 'policies', 'policy', 'state']

  def _get_instance(self):
    """
    Getter method for instance, mapped from YANG variable /system/gnmi_pathz_policies/policies/policy/state/instance (enumeration)

    YANG Description: The instance identifier of the gNMI OpenConfig-path-based
authorization policy.
    """
    return self.__instance
      
  def _set_instance(self, v, load=False):
    """
    Setter method for instance, mapped from YANG variable /system/gnmi_pathz_policies/policies/policy/state/instance (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance() directly.

    YANG Description: The instance identifier of the gNMI OpenConfig-path-based
authorization policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ACTIVE': {'value': 1}, 'SANDBOX': {'value': 2}},), is_leaf=True, yang_name="instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance must be of a type compatible with enumeration""",
          'defined-type': "openconfig-gnsi-pathz:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ACTIVE': {'value': 1}, 'SANDBOX': {'value': 2}},), is_leaf=True, yang_name="instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='enumeration', is_config=False)""",
        })

    self.__instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance(self):
    self.__instance = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ACTIVE': {'value': 1}, 'SANDBOX': {'value': 2}},), is_leaf=True, yang_name="instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='enumeration', is_config=False)


  def _get_version(self):
    """
    Getter method for version, mapped from YANG variable /system/gnmi_pathz_policies/policies/policy/state/version (version)

    YANG Description: The version of the gNMI OpenConfig-path-based authorization
policy.
    """
    return self.__version
      
  def _set_version(self, v, load=False):
    """
    Setter method for version, mapped from YANG variable /system/gnmi_pathz_policies/policies/policy/state/version (version)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_version() directly.

    YANG Description: The version of the gNMI OpenConfig-path-based authorization
policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='version', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """version must be of a type compatible with version""",
          'defined-type': "openconfig-gnsi-pathz:version",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='version', is_config=False)""",
        })

    self.__version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_version(self):
    self.__version = YANGDynClass(base=str, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='version', is_config=False)


  def _get_created_on(self):
    """
    Getter method for created_on, mapped from YANG variable /system/gnmi_pathz_policies/policies/policy/state/created_on (created-on)

    YANG Description: The timestamp of the moment when the policy was
created.
    """
    return self.__created_on
      
  def _set_created_on(self, v, load=False):
    """
    Setter method for created_on, mapped from YANG variable /system/gnmi_pathz_policies/policies/policy/state/created_on (created-on)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_created_on is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_created_on() directly.

    YANG Description: The timestamp of the moment when the policy was
created.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='created-on', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """created_on must be of a type compatible with created-on""",
          'defined-type': "openconfig-gnsi-pathz:created-on",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='created-on', is_config=False)""",
        })

    self.__created_on = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_created_on(self):
    self.__created_on = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='created-on', is_config=False)

  instance = __builtin__.property(_get_instance)
  version = __builtin__.property(_get_version)
  created_on = __builtin__.property(_get_created_on)


  _pyangbind_elements = OrderedDict([('instance', instance), ('version', version), ('created_on', created_on), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/gnmi-pathz-policies/policies/policy/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for an OpenConfig-path-based
authorization policies.
  """
  __slots__ = ('_path_helper', '_extmethods', '__instance','__version','__created_on',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__instance = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ACTIVE': {'value': 1}, 'SANDBOX': {'value': 2}},), is_leaf=True, yang_name="instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='enumeration', is_config=False)
    self.__version = YANGDynClass(base=str, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='version', is_config=False)
    self.__created_on = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='created-on', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'gnmi-pathz-policies', 'policies', 'policy', 'state']

  def _get_instance(self):
    """
    Getter method for instance, mapped from YANG variable /system/gnmi_pathz_policies/policies/policy/state/instance (enumeration)

    YANG Description: The instance identifier of the gNMI OpenConfig-path-based
authorization policy.
    """
    return self.__instance
      
  def _set_instance(self, v, load=False):
    """
    Setter method for instance, mapped from YANG variable /system/gnmi_pathz_policies/policies/policy/state/instance (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance() directly.

    YANG Description: The instance identifier of the gNMI OpenConfig-path-based
authorization policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ACTIVE': {'value': 1}, 'SANDBOX': {'value': 2}},), is_leaf=True, yang_name="instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance must be of a type compatible with enumeration""",
          'defined-type': "openconfig-gnsi-pathz:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ACTIVE': {'value': 1}, 'SANDBOX': {'value': 2}},), is_leaf=True, yang_name="instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='enumeration', is_config=False)""",
        })

    self.__instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance(self):
    self.__instance = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ACTIVE': {'value': 1}, 'SANDBOX': {'value': 2}},), is_leaf=True, yang_name="instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='enumeration', is_config=False)


  def _get_version(self):
    """
    Getter method for version, mapped from YANG variable /system/gnmi_pathz_policies/policies/policy/state/version (version)

    YANG Description: The version of the gNMI OpenConfig-path-based authorization
policy.
    """
    return self.__version
      
  def _set_version(self, v, load=False):
    """
    Setter method for version, mapped from YANG variable /system/gnmi_pathz_policies/policies/policy/state/version (version)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_version() directly.

    YANG Description: The version of the gNMI OpenConfig-path-based authorization
policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='version', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """version must be of a type compatible with version""",
          'defined-type': "openconfig-gnsi-pathz:version",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='version', is_config=False)""",
        })

    self.__version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_version(self):
    self.__version = YANGDynClass(base=str, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='version', is_config=False)


  def _get_created_on(self):
    """
    Getter method for created_on, mapped from YANG variable /system/gnmi_pathz_policies/policies/policy/state/created_on (created-on)

    YANG Description: The timestamp of the moment when the policy was
created.
    """
    return self.__created_on
      
  def _set_created_on(self, v, load=False):
    """
    Setter method for created_on, mapped from YANG variable /system/gnmi_pathz_policies/policies/policy/state/created_on (created-on)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_created_on is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_created_on() directly.

    YANG Description: The timestamp of the moment when the policy was
created.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='created-on', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """created_on must be of a type compatible with created-on""",
          'defined-type': "openconfig-gnsi-pathz:created-on",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='created-on', is_config=False)""",
        })

    self.__created_on = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_created_on(self):
    self.__created_on = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="created-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='created-on', is_config=False)

  instance = __builtin__.property(_get_instance)
  version = __builtin__.property(_get_version)
  created_on = __builtin__.property(_get_created_on)


  _pyangbind_elements = OrderedDict([('instance', instance), ('version', version), ('created_on', created_on), ])


