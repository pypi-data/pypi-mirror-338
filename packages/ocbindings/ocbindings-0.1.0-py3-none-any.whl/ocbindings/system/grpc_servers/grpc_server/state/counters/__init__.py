# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/grpc-servers/grpc-server/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A collection of counters that were collected by the gRPC during
the authentication process.
  """
  __slots__ = ('_path_helper', '_extmethods', '__connection_rejects','__last_connection_reject','__connection_accepts','__last_connection_accept',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__connection_rejects = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-rejects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-yang:counter64', is_config=False)
    self.__last_connection_reject = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-connection-reject", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-types:timeticks64', is_config=False)
    self.__connection_accepts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-yang:counter64', is_config=False)
    self.__last_connection_accept = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-connection-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-types:timeticks64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'grpc-servers', 'grpc-server', 'state', 'counters']

  def _get_connection_rejects(self):
    """
    Getter method for connection_rejects, mapped from YANG variable /system/grpc_servers/grpc_server/state/counters/connection_rejects (oc-yang:counter64)

    YANG Description: The total number of times that gRPC clients have failed
in establishing a connection to the server.
    """
    return self.__connection_rejects
      
  def _set_connection_rejects(self, v, load=False):
    """
    Setter method for connection_rejects, mapped from YANG variable /system/grpc_servers/grpc_server/state/counters/connection_rejects (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_connection_rejects is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_connection_rejects() directly.

    YANG Description: The total number of times that gRPC clients have failed
in establishing a connection to the server.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-rejects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """connection_rejects must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-rejects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__connection_rejects = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_connection_rejects(self):
    self.__connection_rejects = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-rejects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-yang:counter64', is_config=False)


  def _get_last_connection_reject(self):
    """
    Getter method for last_connection_reject, mapped from YANG variable /system/grpc_servers/grpc_server/state/counters/last_connection_reject (oc-types:timeticks64)

    YANG Description: A timestamp of the last time a gRPC client failed
in establishing a connection to the server.
    """
    return self.__last_connection_reject
      
  def _set_last_connection_reject(self, v, load=False):
    """
    Setter method for last_connection_reject, mapped from YANG variable /system/grpc_servers/grpc_server/state/counters/last_connection_reject (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_connection_reject is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_connection_reject() directly.

    YANG Description: A timestamp of the last time a gRPC client failed
in establishing a connection to the server.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-connection-reject", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_connection_reject must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-connection-reject", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_connection_reject = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_connection_reject(self):
    self.__last_connection_reject = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-connection-reject", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-types:timeticks64', is_config=False)


  def _get_connection_accepts(self):
    """
    Getter method for connection_accepts, mapped from YANG variable /system/grpc_servers/grpc_server/state/counters/connection_accepts (oc-yang:counter64)

    YANG Description: The total number of times that gRPC clients have succeeded
in establishing a connection to the server.
    """
    return self.__connection_accepts
      
  def _set_connection_accepts(self, v, load=False):
    """
    Setter method for connection_accepts, mapped from YANG variable /system/grpc_servers/grpc_server/state/counters/connection_accepts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_connection_accepts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_connection_accepts() directly.

    YANG Description: The total number of times that gRPC clients have succeeded
in establishing a connection to the server.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """connection_accepts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__connection_accepts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_connection_accepts(self):
    self.__connection_accepts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-yang:counter64', is_config=False)


  def _get_last_connection_accept(self):
    """
    Getter method for last_connection_accept, mapped from YANG variable /system/grpc_servers/grpc_server/state/counters/last_connection_accept (oc-types:timeticks64)

    YANG Description: A timestamp of the last time a gRPC client succeeded
in establishing a connection to the server.
    """
    return self.__last_connection_accept
      
  def _set_last_connection_accept(self, v, load=False):
    """
    Setter method for last_connection_accept, mapped from YANG variable /system/grpc_servers/grpc_server/state/counters/last_connection_accept (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_connection_accept is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_connection_accept() directly.

    YANG Description: A timestamp of the last time a gRPC client succeeded
in establishing a connection to the server.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-connection-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_connection_accept must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-connection-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_connection_accept = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_connection_accept(self):
    self.__last_connection_accept = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-connection-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-types:timeticks64', is_config=False)

  connection_rejects = __builtin__.property(_get_connection_rejects)
  last_connection_reject = __builtin__.property(_get_last_connection_reject)
  connection_accepts = __builtin__.property(_get_connection_accepts)
  last_connection_accept = __builtin__.property(_get_last_connection_accept)


  _pyangbind_elements = OrderedDict([('connection_rejects', connection_rejects), ('last_connection_reject', last_connection_reject), ('connection_accepts', connection_accepts), ('last_connection_accept', last_connection_accept), ])


class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/grpc-servers/grpc-server/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A collection of counters that were collected by the gRPC during
the authentication process.
  """
  __slots__ = ('_path_helper', '_extmethods', '__connection_rejects','__last_connection_reject','__connection_accepts','__last_connection_accept',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__connection_rejects = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-rejects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-yang:counter64', is_config=False)
    self.__last_connection_reject = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-connection-reject", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-types:timeticks64', is_config=False)
    self.__connection_accepts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-yang:counter64', is_config=False)
    self.__last_connection_accept = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-connection-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-types:timeticks64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'grpc-servers', 'grpc-server', 'state', 'counters']

  def _get_connection_rejects(self):
    """
    Getter method for connection_rejects, mapped from YANG variable /system/grpc_servers/grpc_server/state/counters/connection_rejects (oc-yang:counter64)

    YANG Description: The total number of times that gRPC clients have failed
in establishing a connection to the server.
    """
    return self.__connection_rejects
      
  def _set_connection_rejects(self, v, load=False):
    """
    Setter method for connection_rejects, mapped from YANG variable /system/grpc_servers/grpc_server/state/counters/connection_rejects (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_connection_rejects is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_connection_rejects() directly.

    YANG Description: The total number of times that gRPC clients have failed
in establishing a connection to the server.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-rejects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """connection_rejects must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-rejects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__connection_rejects = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_connection_rejects(self):
    self.__connection_rejects = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-rejects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-yang:counter64', is_config=False)


  def _get_last_connection_reject(self):
    """
    Getter method for last_connection_reject, mapped from YANG variable /system/grpc_servers/grpc_server/state/counters/last_connection_reject (oc-types:timeticks64)

    YANG Description: A timestamp of the last time a gRPC client failed
in establishing a connection to the server.
    """
    return self.__last_connection_reject
      
  def _set_last_connection_reject(self, v, load=False):
    """
    Setter method for last_connection_reject, mapped from YANG variable /system/grpc_servers/grpc_server/state/counters/last_connection_reject (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_connection_reject is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_connection_reject() directly.

    YANG Description: A timestamp of the last time a gRPC client failed
in establishing a connection to the server.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-connection-reject", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_connection_reject must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-connection-reject", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_connection_reject = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_connection_reject(self):
    self.__last_connection_reject = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-connection-reject", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-types:timeticks64', is_config=False)


  def _get_connection_accepts(self):
    """
    Getter method for connection_accepts, mapped from YANG variable /system/grpc_servers/grpc_server/state/counters/connection_accepts (oc-yang:counter64)

    YANG Description: The total number of times that gRPC clients have succeeded
in establishing a connection to the server.
    """
    return self.__connection_accepts
      
  def _set_connection_accepts(self, v, load=False):
    """
    Setter method for connection_accepts, mapped from YANG variable /system/grpc_servers/grpc_server/state/counters/connection_accepts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_connection_accepts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_connection_accepts() directly.

    YANG Description: The total number of times that gRPC clients have succeeded
in establishing a connection to the server.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """connection_accepts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__connection_accepts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_connection_accepts(self):
    self.__connection_accepts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="connection-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-yang:counter64', is_config=False)


  def _get_last_connection_accept(self):
    """
    Getter method for last_connection_accept, mapped from YANG variable /system/grpc_servers/grpc_server/state/counters/last_connection_accept (oc-types:timeticks64)

    YANG Description: A timestamp of the last time a gRPC client succeeded
in establishing a connection to the server.
    """
    return self.__last_connection_accept
      
  def _set_last_connection_accept(self, v, load=False):
    """
    Setter method for last_connection_accept, mapped from YANG variable /system/grpc_servers/grpc_server/state/counters/last_connection_accept (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_connection_accept is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_connection_accept() directly.

    YANG Description: A timestamp of the last time a gRPC client succeeded
in establishing a connection to the server.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-connection-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_connection_accept must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-connection-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_connection_accept = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_connection_accept(self):
    self.__last_connection_accept = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-connection-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/certz', defining_module='openconfig-gnsi-certz', yang_type='oc-types:timeticks64', is_config=False)

  connection_rejects = __builtin__.property(_get_connection_rejects)
  last_connection_reject = __builtin__.property(_get_last_connection_reject)
  connection_accepts = __builtin__.property(_get_connection_accepts)
  last_connection_accept = __builtin__.property(_get_last_connection_accept)


  _pyangbind_elements = OrderedDict([('connection_rejects', connection_rejects), ('last_connection_reject', last_connection_reject), ('connection_accepts', connection_accepts), ('last_connection_accept', last_connection_accept), ])


