# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/grpc-servers/grpc-server/connections/connection/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational data for gRPC counters.
  """
  __slots__ = ('_path_helper', '_extmethods', '__bytes_sent','__packets_sent','__data_send_error',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__bytes_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bytes-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)
    self.__packets_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packets-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)
    self.__data_send_error = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="data-send-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'grpc-servers', 'grpc-server', 'connections', 'connection', 'state', 'counters']

  def _get_bytes_sent(self):
    """
    Getter method for bytes_sent, mapped from YANG variable /system/grpc_servers/grpc_server/connections/connection/state/counters/bytes_sent (oc-yang:counter64)

    YANG Description: The total number of bytes sent to the client.
    """
    return self.__bytes_sent
      
  def _set_bytes_sent(self, v, load=False):
    """
    Setter method for bytes_sent, mapped from YANG variable /system/grpc_servers/grpc_server/connections/connection/state/counters/bytes_sent (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bytes_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bytes_sent() directly.

    YANG Description: The total number of bytes sent to the client.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bytes-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bytes_sent must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bytes-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__bytes_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bytes_sent(self):
    self.__bytes_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bytes-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)


  def _get_packets_sent(self):
    """
    Getter method for packets_sent, mapped from YANG variable /system/grpc_servers/grpc_server/connections/connection/state/counters/packets_sent (oc-yang:counter64)

    YANG Description: The total number of packets sent to the client.
    """
    return self.__packets_sent
      
  def _set_packets_sent(self, v, load=False):
    """
    Setter method for packets_sent, mapped from YANG variable /system/grpc_servers/grpc_server/connections/connection/state/counters/packets_sent (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_packets_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_packets_sent() directly.

    YANG Description: The total number of packets sent to the client.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packets-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """packets_sent must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packets-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__packets_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_packets_sent(self):
    self.__packets_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packets-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)


  def _get_data_send_error(self):
    """
    Getter method for data_send_error, mapped from YANG variable /system/grpc_servers/grpc_server/connections/connection/state/counters/data_send_error (oc-yang:counter64)

    YANG Description: A count of errors the gRPC server encountered when
sending data to a grpc client.
    """
    return self.__data_send_error
      
  def _set_data_send_error(self, v, load=False):
    """
    Setter method for data_send_error, mapped from YANG variable /system/grpc_servers/grpc_server/connections/connection/state/counters/data_send_error (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_data_send_error is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_data_send_error() directly.

    YANG Description: A count of errors the gRPC server encountered when
sending data to a grpc client.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="data-send-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """data_send_error must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="data-send-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__data_send_error = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_data_send_error(self):
    self.__data_send_error = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="data-send-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)

  bytes_sent = __builtin__.property(_get_bytes_sent)
  packets_sent = __builtin__.property(_get_packets_sent)
  data_send_error = __builtin__.property(_get_data_send_error)


  _pyangbind_elements = OrderedDict([('bytes_sent', bytes_sent), ('packets_sent', packets_sent), ('data_send_error', data_send_error), ])


class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/grpc-servers/grpc-server/connections/connection/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational data for gRPC counters.
  """
  __slots__ = ('_path_helper', '_extmethods', '__bytes_sent','__packets_sent','__data_send_error',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__bytes_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bytes-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)
    self.__packets_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packets-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)
    self.__data_send_error = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="data-send-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'grpc-servers', 'grpc-server', 'connections', 'connection', 'state', 'counters']

  def _get_bytes_sent(self):
    """
    Getter method for bytes_sent, mapped from YANG variable /system/grpc_servers/grpc_server/connections/connection/state/counters/bytes_sent (oc-yang:counter64)

    YANG Description: The total number of bytes sent to the client.
    """
    return self.__bytes_sent
      
  def _set_bytes_sent(self, v, load=False):
    """
    Setter method for bytes_sent, mapped from YANG variable /system/grpc_servers/grpc_server/connections/connection/state/counters/bytes_sent (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bytes_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bytes_sent() directly.

    YANG Description: The total number of bytes sent to the client.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bytes-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bytes_sent must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bytes-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__bytes_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bytes_sent(self):
    self.__bytes_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bytes-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)


  def _get_packets_sent(self):
    """
    Getter method for packets_sent, mapped from YANG variable /system/grpc_servers/grpc_server/connections/connection/state/counters/packets_sent (oc-yang:counter64)

    YANG Description: The total number of packets sent to the client.
    """
    return self.__packets_sent
      
  def _set_packets_sent(self, v, load=False):
    """
    Setter method for packets_sent, mapped from YANG variable /system/grpc_servers/grpc_server/connections/connection/state/counters/packets_sent (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_packets_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_packets_sent() directly.

    YANG Description: The total number of packets sent to the client.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packets-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """packets_sent must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packets-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__packets_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_packets_sent(self):
    self.__packets_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packets-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)


  def _get_data_send_error(self):
    """
    Getter method for data_send_error, mapped from YANG variable /system/grpc_servers/grpc_server/connections/connection/state/counters/data_send_error (oc-yang:counter64)

    YANG Description: A count of errors the gRPC server encountered when
sending data to a grpc client.
    """
    return self.__data_send_error
      
  def _set_data_send_error(self, v, load=False):
    """
    Setter method for data_send_error, mapped from YANG variable /system/grpc_servers/grpc_server/connections/connection/state/counters/data_send_error (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_data_send_error is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_data_send_error() directly.

    YANG Description: A count of errors the gRPC server encountered when
sending data to a grpc client.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="data-send-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """data_send_error must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="data-send-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__data_send_error = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_data_send_error(self):
    self.__data_send_error = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="data-send-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='oc-yang:counter64', is_config=False)

  bytes_sent = __builtin__.property(_get_bytes_sent)
  packets_sent = __builtin__.property(_get_packets_sent)
  data_send_error = __builtin__.property(_get_data_send_error)


  _pyangbind_elements = OrderedDict([('bytes_sent', bytes_sent), ('packets_sent', packets_sent), ('data_send_error', data_send_error), ])


