# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: operational state for authz policy success/failure counters.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__access_rejects','__last_access_reject','__access_accepts','__last_access_accept',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='string', is_config=False)
    self.__access_rejects = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="access-rejects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-yang:counter64', is_config=False)
    self.__last_access_reject = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-access-reject", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-types:timeticks64', is_config=False)
    self.__access_accepts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="access-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-yang:counter64', is_config=False)
    self.__last_access_accept = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-access-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-types:timeticks64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'grpc-servers', 'grpc-server', 'authz-policy-counters', 'rpcs', 'rpc', 'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/name (string)

    YANG Description: The name of the RPC the counters were collected for.

The name MUST match the HTTP/2 Path header value in
https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests

For example,
/gnmi.gNMI/Subscribe
/gnoi.healthz.Healthz/Get

    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The name of the RPC the counters were collected for.

The name MUST match the HTTP/2 Path header value in
https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests

For example,
/gnmi.gNMI/Subscribe
/gnoi.healthz.Healthz/Get

    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='string', is_config=False)


  def _get_access_rejects(self):
    """
    Getter method for access_rejects, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/access_rejects (oc-yang:counter64)

    YANG Description: The total number of times the gNSI.authz module denied access
to a RPC.
    """
    return self.__access_rejects
      
  def _set_access_rejects(self, v, load=False):
    """
    Setter method for access_rejects, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/access_rejects (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_access_rejects is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_access_rejects() directly.

    YANG Description: The total number of times the gNSI.authz module denied access
to a RPC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="access-rejects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """access_rejects must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="access-rejects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__access_rejects = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_access_rejects(self):
    self.__access_rejects = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="access-rejects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-yang:counter64', is_config=False)


  def _get_last_access_reject(self):
    """
    Getter method for last_access_reject, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/last_access_reject (oc-types:timeticks64)

    YANG Description: A timestamp of the last time the gNSI.authz denied access to
a RPC.
    """
    return self.__last_access_reject
      
  def _set_last_access_reject(self, v, load=False):
    """
    Setter method for last_access_reject, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/last_access_reject (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_access_reject is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_access_reject() directly.

    YANG Description: A timestamp of the last time the gNSI.authz denied access to
a RPC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-access-reject", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_access_reject must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-access-reject", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_access_reject = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_access_reject(self):
    self.__last_access_reject = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-access-reject", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-types:timeticks64', is_config=False)


  def _get_access_accepts(self):
    """
    Getter method for access_accepts, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/access_accepts (oc-yang:counter64)

    YANG Description: The total number of times the gNSI.authz module allowed access
to a RPC.
    """
    return self.__access_accepts
      
  def _set_access_accepts(self, v, load=False):
    """
    Setter method for access_accepts, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/access_accepts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_access_accepts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_access_accepts() directly.

    YANG Description: The total number of times the gNSI.authz module allowed access
to a RPC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="access-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """access_accepts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="access-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__access_accepts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_access_accepts(self):
    self.__access_accepts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="access-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-yang:counter64', is_config=False)


  def _get_last_access_accept(self):
    """
    Getter method for last_access_accept, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/last_access_accept (oc-types:timeticks64)

    YANG Description: A timestamp of the last time the gNSI.authz allowed access to
a RPC.
    """
    return self.__last_access_accept
      
  def _set_last_access_accept(self, v, load=False):
    """
    Setter method for last_access_accept, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/last_access_accept (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_access_accept is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_access_accept() directly.

    YANG Description: A timestamp of the last time the gNSI.authz allowed access to
a RPC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-access-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_access_accept must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-access-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_access_accept = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_access_accept(self):
    self.__last_access_accept = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-access-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-types:timeticks64', is_config=False)

  name = __builtin__.property(_get_name)
  access_rejects = __builtin__.property(_get_access_rejects)
  last_access_reject = __builtin__.property(_get_last_access_reject)
  access_accepts = __builtin__.property(_get_access_accepts)
  last_access_accept = __builtin__.property(_get_last_access_accept)


  _pyangbind_elements = OrderedDict([('name', name), ('access_rejects', access_rejects), ('last_access_reject', last_access_reject), ('access_accepts', access_accepts), ('last_access_accept', last_access_accept), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: operational state for authz policy success/failure counters.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__access_rejects','__last_access_reject','__access_accepts','__last_access_accept',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='string', is_config=False)
    self.__access_rejects = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="access-rejects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-yang:counter64', is_config=False)
    self.__last_access_reject = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-access-reject", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-types:timeticks64', is_config=False)
    self.__access_accepts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="access-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-yang:counter64', is_config=False)
    self.__last_access_accept = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-access-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-types:timeticks64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'grpc-servers', 'grpc-server', 'authz-policy-counters', 'rpcs', 'rpc', 'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/name (string)

    YANG Description: The name of the RPC the counters were collected for.

The name MUST match the HTTP/2 Path header value in
https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests

For example,
/gnmi.gNMI/Subscribe
/gnoi.healthz.Healthz/Get

    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The name of the RPC the counters were collected for.

The name MUST match the HTTP/2 Path header value in
https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests

For example,
/gnmi.gNMI/Subscribe
/gnoi.healthz.Healthz/Get

    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='string', is_config=False)


  def _get_access_rejects(self):
    """
    Getter method for access_rejects, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/access_rejects (oc-yang:counter64)

    YANG Description: The total number of times the gNSI.authz module denied access
to a RPC.
    """
    return self.__access_rejects
      
  def _set_access_rejects(self, v, load=False):
    """
    Setter method for access_rejects, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/access_rejects (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_access_rejects is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_access_rejects() directly.

    YANG Description: The total number of times the gNSI.authz module denied access
to a RPC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="access-rejects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """access_rejects must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="access-rejects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__access_rejects = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_access_rejects(self):
    self.__access_rejects = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="access-rejects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-yang:counter64', is_config=False)


  def _get_last_access_reject(self):
    """
    Getter method for last_access_reject, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/last_access_reject (oc-types:timeticks64)

    YANG Description: A timestamp of the last time the gNSI.authz denied access to
a RPC.
    """
    return self.__last_access_reject
      
  def _set_last_access_reject(self, v, load=False):
    """
    Setter method for last_access_reject, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/last_access_reject (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_access_reject is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_access_reject() directly.

    YANG Description: A timestamp of the last time the gNSI.authz denied access to
a RPC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-access-reject", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_access_reject must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-access-reject", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_access_reject = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_access_reject(self):
    self.__last_access_reject = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-access-reject", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-types:timeticks64', is_config=False)


  def _get_access_accepts(self):
    """
    Getter method for access_accepts, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/access_accepts (oc-yang:counter64)

    YANG Description: The total number of times the gNSI.authz module allowed access
to a RPC.
    """
    return self.__access_accepts
      
  def _set_access_accepts(self, v, load=False):
    """
    Setter method for access_accepts, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/access_accepts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_access_accepts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_access_accepts() directly.

    YANG Description: The total number of times the gNSI.authz module allowed access
to a RPC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="access-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """access_accepts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="access-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__access_accepts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_access_accepts(self):
    self.__access_accepts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="access-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-yang:counter64', is_config=False)


  def _get_last_access_accept(self):
    """
    Getter method for last_access_accept, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/last_access_accept (oc-types:timeticks64)

    YANG Description: A timestamp of the last time the gNSI.authz allowed access to
a RPC.
    """
    return self.__last_access_accept
      
  def _set_last_access_accept(self, v, load=False):
    """
    Setter method for last_access_accept, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters/rpcs/rpc/state/last_access_accept (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_access_accept is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_access_accept() directly.

    YANG Description: A timestamp of the last time the gNSI.authz allowed access to
a RPC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-access-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_access_accept must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-access-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_access_accept = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_access_accept(self):
    self.__last_access_accept = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-access-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='oc-types:timeticks64', is_config=False)

  name = __builtin__.property(_get_name)
  access_rejects = __builtin__.property(_get_access_rejects)
  last_access_reject = __builtin__.property(_get_last_access_reject)
  access_accepts = __builtin__.property(_get_access_accepts)
  last_access_accept = __builtin__.property(_get_last_access_accept)


  _pyangbind_elements = OrderedDict([('name', name), ('access_rejects', access_rejects), ('last_access_reject', last_access_reject), ('access_accepts', access_accepts), ('last_access_accept', last_access_accept), ])


