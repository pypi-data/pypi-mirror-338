# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import config
from . import state
from . import connections
from . import gnmi_pathz_policy_counters
from . import acctz
from . import authz_policy_counters
class grpc_server(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/grpc-servers/grpc-server. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The list of gRPC servers that are running on the device. Each
instance within this list corresponds to an individual gRPC listener
that listens on a single TCP port on the specified addresses.
Where there are multiple services that run on a single port, these
are enabled through the service leaf-list which uses the GRPC_SERVICE
identity to list the supported service types.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config','__state','__connections','__gnmi_pathz_policy_counters','__acctz','__authz_policy_counters',)

  _yang_name = 'grpc-server'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=False)
    self.__connections = YANGDynClass(base=connections.connections, is_container='container', yang_name="connections", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=False)
    self.__gnmi_pathz_policy_counters = YANGDynClass(base=gnmi_pathz_policy_counters.gnmi_pathz_policy_counters, is_container='container', yang_name="gnmi-pathz-policy-counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)
    self.__acctz = YANGDynClass(base=acctz.acctz, is_container='container', yang_name="acctz", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='container', is_config=False)
    self.__authz_policy_counters = YANGDynClass(base=authz_policy_counters.authz_policy_counters, is_container='container', yang_name="authz-policy-counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'grpc-servers', 'grpc-server']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /system/grpc_servers/grpc_server/name (leafref)

    YANG Description: Reference to the name of the service that is to be enabled.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /system/grpc_servers/grpc_server/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the name of the service that is to be enabled.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /system/grpc_servers/grpc_server/config (container)

    YANG Description: Configuration parameters relating to the gRPC service.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /system/grpc_servers/grpc_server/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to the gRPC service.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /system/grpc_servers/grpc_server/state (container)

    YANG Description: Operational state relating to the gRPC service.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /system/grpc_servers/grpc_server/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state relating to the gRPC service.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=False)


  def _get_connections(self):
    """
    Getter method for connections, mapped from YANG variable /system/grpc_servers/grpc_server/connections (container)

    YANG Description: Enclosing container for list of gRPC connections.
    """
    return self.__connections
      
  def _set_connections(self, v, load=False):
    """
    Setter method for connections, mapped from YANG variable /system/grpc_servers/grpc_server/connections (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_connections is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_connections() directly.

    YANG Description: Enclosing container for list of gRPC connections.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=connections.connections, is_container='container', yang_name="connections", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """connections must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=connections.connections, is_container='container', yang_name="connections", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=False)""",
        })

    self.__connections = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_connections(self):
    self.__connections = YANGDynClass(base=connections.connections, is_container='container', yang_name="connections", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=False)


  def _get_gnmi_pathz_policy_counters(self):
    """
    Getter method for gnmi_pathz_policy_counters, mapped from YANG variable /system/grpc_servers/grpc_server/gnmi_pathz_policy_counters (container)

    YANG Description: A collection of per-OpenConfig path counters.
    """
    return self.__gnmi_pathz_policy_counters
      
  def _set_gnmi_pathz_policy_counters(self, v, load=False):
    """
    Setter method for gnmi_pathz_policy_counters, mapped from YANG variable /system/grpc_servers/grpc_server/gnmi_pathz_policy_counters (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_gnmi_pathz_policy_counters is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_gnmi_pathz_policy_counters() directly.

    YANG Description: A collection of per-OpenConfig path counters.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=gnmi_pathz_policy_counters.gnmi_pathz_policy_counters, is_container='container', yang_name="gnmi-pathz-policy-counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """gnmi_pathz_policy_counters must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=gnmi_pathz_policy_counters.gnmi_pathz_policy_counters, is_container='container', yang_name="gnmi-pathz-policy-counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)""",
        })

    self.__gnmi_pathz_policy_counters = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_gnmi_pathz_policy_counters(self):
    self.__gnmi_pathz_policy_counters = YANGDynClass(base=gnmi_pathz_policy_counters.gnmi_pathz_policy_counters, is_container='container', yang_name="gnmi-pathz-policy-counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)


  def _get_acctz(self):
    """
    Getter method for acctz, mapped from YANG variable /system/grpc_servers/grpc_server/acctz (container)

    YANG Description: A collection of counters from the gNSI.acctz module that exist
per grpc server.
    """
    return self.__acctz
      
  def _set_acctz(self, v, load=False):
    """
    Setter method for acctz, mapped from YANG variable /system/grpc_servers/grpc_server/acctz (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acctz is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acctz() directly.

    YANG Description: A collection of counters from the gNSI.acctz module that exist
per grpc server.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=acctz.acctz, is_container='container', yang_name="acctz", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acctz must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=acctz.acctz, is_container='container', yang_name="acctz", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='container', is_config=False)""",
        })

    self.__acctz = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acctz(self):
    self.__acctz = YANGDynClass(base=acctz.acctz, is_container='container', yang_name="acctz", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='container', is_config=False)


  def _get_authz_policy_counters(self):
    """
    Getter method for authz_policy_counters, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters (container)

    YANG Description: A collection of counters collected by the gNSI.authz module.
    """
    return self.__authz_policy_counters
      
  def _set_authz_policy_counters(self, v, load=False):
    """
    Setter method for authz_policy_counters, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_authz_policy_counters is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_authz_policy_counters() directly.

    YANG Description: A collection of counters collected by the gNSI.authz module.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=authz_policy_counters.authz_policy_counters, is_container='container', yang_name="authz-policy-counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """authz_policy_counters must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=authz_policy_counters.authz_policy_counters, is_container='container', yang_name="authz-policy-counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='container', is_config=False)""",
        })

    self.__authz_policy_counters = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_authz_policy_counters(self):
    self.__authz_policy_counters = YANGDynClass(base=authz_policy_counters.authz_policy_counters, is_container='container', yang_name="authz-policy-counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='container', is_config=False)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  connections = __builtin__.property(_get_connections)
  gnmi_pathz_policy_counters = __builtin__.property(_get_gnmi_pathz_policy_counters)
  acctz = __builtin__.property(_get_acctz)
  authz_policy_counters = __builtin__.property(_get_authz_policy_counters)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ('state', state), ('connections', connections), ('gnmi_pathz_policy_counters', gnmi_pathz_policy_counters), ('acctz', acctz), ('authz_policy_counters', authz_policy_counters), ])


from . import config
from . import state
from . import connections
from . import gnmi_pathz_policy_counters
from . import acctz
from . import authz_policy_counters
class grpc_server(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/grpc-servers/grpc-server. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The list of gRPC servers that are running on the device. Each
instance within this list corresponds to an individual gRPC listener
that listens on a single TCP port on the specified addresses.
Where there are multiple services that run on a single port, these
are enabled through the service leaf-list which uses the GRPC_SERVICE
identity to list the supported service types.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config','__state','__connections','__gnmi_pathz_policy_counters','__acctz','__authz_policy_counters',)

  _yang_name = 'grpc-server'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=False)
    self.__connections = YANGDynClass(base=connections.connections, is_container='container', yang_name="connections", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=False)
    self.__gnmi_pathz_policy_counters = YANGDynClass(base=gnmi_pathz_policy_counters.gnmi_pathz_policy_counters, is_container='container', yang_name="gnmi-pathz-policy-counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)
    self.__acctz = YANGDynClass(base=acctz.acctz, is_container='container', yang_name="acctz", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='container', is_config=False)
    self.__authz_policy_counters = YANGDynClass(base=authz_policy_counters.authz_policy_counters, is_container='container', yang_name="authz-policy-counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'grpc-servers', 'grpc-server']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /system/grpc_servers/grpc_server/name (leafref)

    YANG Description: Reference to the name of the service that is to be enabled.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /system/grpc_servers/grpc_server/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the name of the service that is to be enabled.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /system/grpc_servers/grpc_server/config (container)

    YANG Description: Configuration parameters relating to the gRPC service.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /system/grpc_servers/grpc_server/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to the gRPC service.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /system/grpc_servers/grpc_server/state (container)

    YANG Description: Operational state relating to the gRPC service.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /system/grpc_servers/grpc_server/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state relating to the gRPC service.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=False)


  def _get_connections(self):
    """
    Getter method for connections, mapped from YANG variable /system/grpc_servers/grpc_server/connections (container)

    YANG Description: Enclosing container for list of gRPC connections.
    """
    return self.__connections
      
  def _set_connections(self, v, load=False):
    """
    Setter method for connections, mapped from YANG variable /system/grpc_servers/grpc_server/connections (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_connections is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_connections() directly.

    YANG Description: Enclosing container for list of gRPC connections.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=connections.connections, is_container='container', yang_name="connections", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """connections must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=connections.connections, is_container='container', yang_name="connections", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=False)""",
        })

    self.__connections = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_connections(self):
    self.__connections = YANGDynClass(base=connections.connections, is_container='container', yang_name="connections", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system-grpc', defining_module='openconfig-system-grpc', yang_type='container', is_config=False)


  def _get_gnmi_pathz_policy_counters(self):
    """
    Getter method for gnmi_pathz_policy_counters, mapped from YANG variable /system/grpc_servers/grpc_server/gnmi_pathz_policy_counters (container)

    YANG Description: A collection of per-OpenConfig path counters.
    """
    return self.__gnmi_pathz_policy_counters
      
  def _set_gnmi_pathz_policy_counters(self, v, load=False):
    """
    Setter method for gnmi_pathz_policy_counters, mapped from YANG variable /system/grpc_servers/grpc_server/gnmi_pathz_policy_counters (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_gnmi_pathz_policy_counters is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_gnmi_pathz_policy_counters() directly.

    YANG Description: A collection of per-OpenConfig path counters.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=gnmi_pathz_policy_counters.gnmi_pathz_policy_counters, is_container='container', yang_name="gnmi-pathz-policy-counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """gnmi_pathz_policy_counters must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=gnmi_pathz_policy_counters.gnmi_pathz_policy_counters, is_container='container', yang_name="gnmi-pathz-policy-counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)""",
        })

    self.__gnmi_pathz_policy_counters = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_gnmi_pathz_policy_counters(self):
    self.__gnmi_pathz_policy_counters = YANGDynClass(base=gnmi_pathz_policy_counters.gnmi_pathz_policy_counters, is_container='container', yang_name="gnmi-pathz-policy-counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/pathz', defining_module='openconfig-gnsi-pathz', yang_type='container', is_config=False)


  def _get_acctz(self):
    """
    Getter method for acctz, mapped from YANG variable /system/grpc_servers/grpc_server/acctz (container)

    YANG Description: A collection of counters from the gNSI.acctz module that exist
per grpc server.
    """
    return self.__acctz
      
  def _set_acctz(self, v, load=False):
    """
    Setter method for acctz, mapped from YANG variable /system/grpc_servers/grpc_server/acctz (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acctz is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acctz() directly.

    YANG Description: A collection of counters from the gNSI.acctz module that exist
per grpc server.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=acctz.acctz, is_container='container', yang_name="acctz", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acctz must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=acctz.acctz, is_container='container', yang_name="acctz", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='container', is_config=False)""",
        })

    self.__acctz = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acctz(self):
    self.__acctz = YANGDynClass(base=acctz.acctz, is_container='container', yang_name="acctz", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/acctz', defining_module='openconfig-gnsi-acctz', yang_type='container', is_config=False)


  def _get_authz_policy_counters(self):
    """
    Getter method for authz_policy_counters, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters (container)

    YANG Description: A collection of counters collected by the gNSI.authz module.
    """
    return self.__authz_policy_counters
      
  def _set_authz_policy_counters(self, v, load=False):
    """
    Setter method for authz_policy_counters, mapped from YANG variable /system/grpc_servers/grpc_server/authz_policy_counters (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_authz_policy_counters is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_authz_policy_counters() directly.

    YANG Description: A collection of counters collected by the gNSI.authz module.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=authz_policy_counters.authz_policy_counters, is_container='container', yang_name="authz-policy-counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """authz_policy_counters must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=authz_policy_counters.authz_policy_counters, is_container='container', yang_name="authz-policy-counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='container', is_config=False)""",
        })

    self.__authz_policy_counters = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_authz_policy_counters(self):
    self.__authz_policy_counters = YANGDynClass(base=authz_policy_counters.authz_policy_counters, is_container='container', yang_name="authz-policy-counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://github.com/openconfig/yang/gnsi/authz', defining_module='openconfig-gnsi-authz', yang_type='container', is_config=False)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  connections = __builtin__.property(_get_connections)
  gnmi_pathz_policy_counters = __builtin__.property(_get_gnmi_pathz_policy_counters)
  acctz = __builtin__.property(_get_acctz)
  authz_policy_counters = __builtin__.property(_get_authz_policy_counters)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ('state', state), ('connections', connections), ('gnmi_pathz_policy_counters', gnmi_pathz_policy_counters), ('acctz', acctz), ('authz_policy_counters', authz_policy_counters), ])


