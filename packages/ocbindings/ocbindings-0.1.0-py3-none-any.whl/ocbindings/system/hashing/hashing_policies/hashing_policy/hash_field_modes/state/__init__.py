# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/hashing/hashing-policies/hashing-policy/hash-field-modes/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data at the hashing
inputs level.
  """
  __slots__ = ('_path_helper', '_extmethods', '__ingress_interface','__ip_protocol_type',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ingress_interface = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ingress-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/hashing', defining_module='openconfig-hashing', yang_type='boolean', is_config=False)
    self.__ip_protocol_type = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ip-protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/hashing', defining_module='openconfig-hashing', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'hashing', 'hashing-policies', 'hashing-policy', 'hash-field-modes', 'state']

  def _get_ingress_interface(self):
    """
    Getter method for ingress_interface, mapped from YANG variable /system/hashing/hashing_policies/hashing_policy/hash_field_modes/state/ingress_interface (boolean)

    YANG Description: Include the ingress subinterface identified in the
calculation of the hash.
    """
    return self.__ingress_interface
      
  def _set_ingress_interface(self, v, load=False):
    """
    Setter method for ingress_interface, mapped from YANG variable /system/hashing/hashing_policies/hashing_policy/hash_field_modes/state/ingress_interface (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ingress_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ingress_interface() directly.

    YANG Description: Include the ingress subinterface identified in the
calculation of the hash.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ingress-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/hashing', defining_module='openconfig-hashing', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ingress_interface must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ingress-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/hashing', defining_module='openconfig-hashing', yang_type='boolean', is_config=False)""",
        })

    self.__ingress_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ingress_interface(self):
    self.__ingress_interface = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ingress-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/hashing', defining_module='openconfig-hashing', yang_type='boolean', is_config=False)


  def _get_ip_protocol_type(self):
    """
    Getter method for ip_protocol_type, mapped from YANG variable /system/hashing/hashing_policies/hashing_policy/hash_field_modes/state/ip_protocol_type (boolean)

    YANG Description: Include the IP protocol type in the calculation of the hash.
    """
    return self.__ip_protocol_type
      
  def _set_ip_protocol_type(self, v, load=False):
    """
    Setter method for ip_protocol_type, mapped from YANG variable /system/hashing/hashing_policies/hashing_policy/hash_field_modes/state/ip_protocol_type (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_protocol_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_protocol_type() directly.

    YANG Description: Include the IP protocol type in the calculation of the hash.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ip-protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/hashing', defining_module='openconfig-hashing', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_protocol_type must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ip-protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/hashing', defining_module='openconfig-hashing', yang_type='boolean', is_config=False)""",
        })

    self.__ip_protocol_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_protocol_type(self):
    self.__ip_protocol_type = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ip-protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/hashing', defining_module='openconfig-hashing', yang_type='boolean', is_config=False)

  ingress_interface = __builtin__.property(_get_ingress_interface)
  ip_protocol_type = __builtin__.property(_get_ip_protocol_type)


  _pyangbind_elements = OrderedDict([('ingress_interface', ingress_interface), ('ip_protocol_type', ip_protocol_type), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/hashing/hashing-policies/hashing-policy/hash-field-modes/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data at the hashing
inputs level.
  """
  __slots__ = ('_path_helper', '_extmethods', '__ingress_interface','__ip_protocol_type',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ingress_interface = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ingress-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/hashing', defining_module='openconfig-hashing', yang_type='boolean', is_config=False)
    self.__ip_protocol_type = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ip-protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/hashing', defining_module='openconfig-hashing', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'hashing', 'hashing-policies', 'hashing-policy', 'hash-field-modes', 'state']

  def _get_ingress_interface(self):
    """
    Getter method for ingress_interface, mapped from YANG variable /system/hashing/hashing_policies/hashing_policy/hash_field_modes/state/ingress_interface (boolean)

    YANG Description: Include the ingress subinterface identified in the
calculation of the hash.
    """
    return self.__ingress_interface
      
  def _set_ingress_interface(self, v, load=False):
    """
    Setter method for ingress_interface, mapped from YANG variable /system/hashing/hashing_policies/hashing_policy/hash_field_modes/state/ingress_interface (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ingress_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ingress_interface() directly.

    YANG Description: Include the ingress subinterface identified in the
calculation of the hash.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ingress-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/hashing', defining_module='openconfig-hashing', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ingress_interface must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ingress-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/hashing', defining_module='openconfig-hashing', yang_type='boolean', is_config=False)""",
        })

    self.__ingress_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ingress_interface(self):
    self.__ingress_interface = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ingress-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/hashing', defining_module='openconfig-hashing', yang_type='boolean', is_config=False)


  def _get_ip_protocol_type(self):
    """
    Getter method for ip_protocol_type, mapped from YANG variable /system/hashing/hashing_policies/hashing_policy/hash_field_modes/state/ip_protocol_type (boolean)

    YANG Description: Include the IP protocol type in the calculation of the hash.
    """
    return self.__ip_protocol_type
      
  def _set_ip_protocol_type(self, v, load=False):
    """
    Setter method for ip_protocol_type, mapped from YANG variable /system/hashing/hashing_policies/hashing_policy/hash_field_modes/state/ip_protocol_type (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_protocol_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_protocol_type() directly.

    YANG Description: Include the IP protocol type in the calculation of the hash.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ip-protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/hashing', defining_module='openconfig-hashing', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_protocol_type must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ip-protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/hashing', defining_module='openconfig-hashing', yang_type='boolean', is_config=False)""",
        })

    self.__ip_protocol_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_protocol_type(self):
    self.__ip_protocol_type = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ip-protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/hashing', defining_module='openconfig-hashing', yang_type='boolean', is_config=False)

  ingress_interface = __builtin__.property(_get_ingress_interface)
  ip_protocol_type = __builtin__.property(_get_ip_protocol_type)


  _pyangbind_elements = OrderedDict([('ingress_interface', ingress_interface), ('ip_protocol_type', ip_protocol_type), ])


