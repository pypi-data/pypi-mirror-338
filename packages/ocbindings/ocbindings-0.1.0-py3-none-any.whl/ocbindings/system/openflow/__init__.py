# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import controllers
from . import agent
class openflow(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/openflow. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Container for Openflow model
  """
  __slots__ = ('_path_helper', '_extmethods', '__controllers','__agent',)

  _yang_name = 'openflow'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__controllers = YANGDynClass(base=controllers.controllers, is_container='container', yang_name="controllers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openflow', defining_module='openconfig-openflow', yang_type='container', is_config=True)
    self.__agent = YANGDynClass(base=agent.agent, is_container='container', yang_name="agent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openflow', defining_module='openconfig-openflow', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'openflow']

  def _get_controllers(self):
    """
    Getter method for controllers, mapped from YANG variable /system/openflow/controllers (container)

    YANG Description: Container for the Openflow controllers model
    """
    return self.__controllers
      
  def _set_controllers(self, v, load=False):
    """
    Setter method for controllers, mapped from YANG variable /system/openflow/controllers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_controllers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_controllers() directly.

    YANG Description: Container for the Openflow controllers model
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=controllers.controllers, is_container='container', yang_name="controllers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openflow', defining_module='openconfig-openflow', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """controllers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=controllers.controllers, is_container='container', yang_name="controllers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openflow', defining_module='openconfig-openflow', yang_type='container', is_config=True)""",
        })

    self.__controllers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_controllers(self):
    self.__controllers = YANGDynClass(base=controllers.controllers, is_container='container', yang_name="controllers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openflow', defining_module='openconfig-openflow', yang_type='container', is_config=True)


  def _get_agent(self):
    """
    Getter method for agent, mapped from YANG variable /system/openflow/agent (container)

    YANG Description: Container for the Openflow agent model.
    """
    return self.__agent
      
  def _set_agent(self, v, load=False):
    """
    Setter method for agent, mapped from YANG variable /system/openflow/agent (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_agent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_agent() directly.

    YANG Description: Container for the Openflow agent model.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=agent.agent, is_container='container', yang_name="agent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openflow', defining_module='openconfig-openflow', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """agent must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=agent.agent, is_container='container', yang_name="agent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openflow', defining_module='openconfig-openflow', yang_type='container', is_config=True)""",
        })

    self.__agent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_agent(self):
    self.__agent = YANGDynClass(base=agent.agent, is_container='container', yang_name="agent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openflow', defining_module='openconfig-openflow', yang_type='container', is_config=True)

  controllers = __builtin__.property(_get_controllers, _set_controllers)
  agent = __builtin__.property(_get_agent, _set_agent)


  _pyangbind_elements = OrderedDict([('controllers', controllers), ('agent', agent), ])


from . import controllers
from . import agent
class openflow(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-system - based on the path /system/openflow. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Container for Openflow model
  """
  __slots__ = ('_path_helper', '_extmethods', '__controllers','__agent',)

  _yang_name = 'openflow'
  _yang_namespace = 'http://openconfig.net/yang/system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__controllers = YANGDynClass(base=controllers.controllers, is_container='container', yang_name="controllers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openflow', defining_module='openconfig-openflow', yang_type='container', is_config=True)
    self.__agent = YANGDynClass(base=agent.agent, is_container='container', yang_name="agent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openflow', defining_module='openconfig-openflow', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['system', 'openflow']

  def _get_controllers(self):
    """
    Getter method for controllers, mapped from YANG variable /system/openflow/controllers (container)

    YANG Description: Container for the Openflow controllers model
    """
    return self.__controllers
      
  def _set_controllers(self, v, load=False):
    """
    Setter method for controllers, mapped from YANG variable /system/openflow/controllers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_controllers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_controllers() directly.

    YANG Description: Container for the Openflow controllers model
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=controllers.controllers, is_container='container', yang_name="controllers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openflow', defining_module='openconfig-openflow', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """controllers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=controllers.controllers, is_container='container', yang_name="controllers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openflow', defining_module='openconfig-openflow', yang_type='container', is_config=True)""",
        })

    self.__controllers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_controllers(self):
    self.__controllers = YANGDynClass(base=controllers.controllers, is_container='container', yang_name="controllers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openflow', defining_module='openconfig-openflow', yang_type='container', is_config=True)


  def _get_agent(self):
    """
    Getter method for agent, mapped from YANG variable /system/openflow/agent (container)

    YANG Description: Container for the Openflow agent model.
    """
    return self.__agent
      
  def _set_agent(self, v, load=False):
    """
    Setter method for agent, mapped from YANG variable /system/openflow/agent (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_agent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_agent() directly.

    YANG Description: Container for the Openflow agent model.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=agent.agent, is_container='container', yang_name="agent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openflow', defining_module='openconfig-openflow', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """agent must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=agent.agent, is_container='container', yang_name="agent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openflow', defining_module='openconfig-openflow', yang_type='container', is_config=True)""",
        })

    self.__agent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_agent(self):
    self.__agent = YANGDynClass(base=agent.agent, is_container='container', yang_name="agent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openflow', defining_module='openconfig-openflow', yang_type='container', is_config=True)

  controllers = __builtin__.property(_get_controllers, _set_controllers)
  agent = __builtin__.property(_get_agent, _set_agent)


  _pyangbind_elements = OrderedDict([('controllers', controllers), ('agent', agent), ])


