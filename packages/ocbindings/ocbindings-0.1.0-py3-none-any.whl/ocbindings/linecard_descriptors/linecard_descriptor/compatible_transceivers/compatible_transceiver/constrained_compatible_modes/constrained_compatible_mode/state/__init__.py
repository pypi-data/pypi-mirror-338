# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-terminal-device-properties - based on the path /linecard-descriptors/linecard-descriptor/compatible-transceivers/compatible-transceiver/constrained-compatible-modes/constrained-compatible-mode/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State container for linecard constrained compatible modes
  """
  __slots__ = ('_path_helper', '_extmethods', '__mode_id','__mode_descriptor_id',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/openconfig-terminal-device-properties'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mode_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mode-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='uint16', is_config=False)
    self.__mode_descriptor_id = YANGDynClass(base=str, is_leaf=True, yang_name="mode-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['linecard-descriptors', 'linecard-descriptor', 'compatible-transceivers', 'compatible-transceiver', 'constrained-compatible-modes', 'constrained-compatible-mode', 'state']

  def _get_mode_id(self):
    """
    Getter method for mode_id, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/state/mode_id (uint16)

    YANG Description: Absolute reference to an operational-mode-id. Each value shall
reference a valid mode-id included in the operational-mode-descriptors
list.
    """
    return self.__mode_id
      
  def _set_mode_id(self, v, load=False):
    """
    Setter method for mode_id, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/state/mode_id (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mode_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mode_id() directly.

    YANG Description: Absolute reference to an operational-mode-id. Each value shall
reference a valid mode-id included in the operational-mode-descriptors
list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mode-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mode_id must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mode-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='uint16', is_config=False)""",
        })

    self.__mode_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mode_id(self):
    self.__mode_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mode-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='uint16', is_config=False)


  def _get_mode_descriptor_id(self):
    """
    Getter method for mode_descriptor_id, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/state/mode_descriptor_id (leafref)

    YANG Description: Reference to the associated mode-descriptor-id which describes
the specific design properties of the mode once it is being transmitted
by the parent transceiver component.
    """
    return self.__mode_descriptor_id
      
  def _set_mode_descriptor_id(self, v, load=False):
    """
    Setter method for mode_descriptor_id, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/state/mode_descriptor_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mode_descriptor_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mode_descriptor_id() directly.

    YANG Description: Reference to the associated mode-descriptor-id which describes
the specific design properties of the mode once it is being transmitted
by the parent transceiver component.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="mode-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mode_descriptor_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="mode-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)""",
        })

    self.__mode_descriptor_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mode_descriptor_id(self):
    self.__mode_descriptor_id = YANGDynClass(base=str, is_leaf=True, yang_name="mode-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)

  mode_id = __builtin__.property(_get_mode_id)
  mode_descriptor_id = __builtin__.property(_get_mode_descriptor_id)


  _pyangbind_elements = OrderedDict([('mode_id', mode_id), ('mode_descriptor_id', mode_descriptor_id), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-terminal-device-properties - based on the path /linecard-descriptors/linecard-descriptor/compatible-transceivers/compatible-transceiver/constrained-compatible-modes/constrained-compatible-mode/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State container for linecard constrained compatible modes
  """
  __slots__ = ('_path_helper', '_extmethods', '__mode_id','__mode_descriptor_id',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/openconfig-terminal-device-properties'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mode_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mode-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='uint16', is_config=False)
    self.__mode_descriptor_id = YANGDynClass(base=str, is_leaf=True, yang_name="mode-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['linecard-descriptors', 'linecard-descriptor', 'compatible-transceivers', 'compatible-transceiver', 'constrained-compatible-modes', 'constrained-compatible-mode', 'state']

  def _get_mode_id(self):
    """
    Getter method for mode_id, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/state/mode_id (uint16)

    YANG Description: Absolute reference to an operational-mode-id. Each value shall
reference a valid mode-id included in the operational-mode-descriptors
list.
    """
    return self.__mode_id
      
  def _set_mode_id(self, v, load=False):
    """
    Setter method for mode_id, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/state/mode_id (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mode_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mode_id() directly.

    YANG Description: Absolute reference to an operational-mode-id. Each value shall
reference a valid mode-id included in the operational-mode-descriptors
list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mode-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mode_id must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mode-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='uint16', is_config=False)""",
        })

    self.__mode_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mode_id(self):
    self.__mode_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mode-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='uint16', is_config=False)


  def _get_mode_descriptor_id(self):
    """
    Getter method for mode_descriptor_id, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/state/mode_descriptor_id (leafref)

    YANG Description: Reference to the associated mode-descriptor-id which describes
the specific design properties of the mode once it is being transmitted
by the parent transceiver component.
    """
    return self.__mode_descriptor_id
      
  def _set_mode_descriptor_id(self, v, load=False):
    """
    Setter method for mode_descriptor_id, mapped from YANG variable /linecard_descriptors/linecard_descriptor/compatible_transceivers/compatible_transceiver/constrained_compatible_modes/constrained_compatible_mode/state/mode_descriptor_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mode_descriptor_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mode_descriptor_id() directly.

    YANG Description: Reference to the associated mode-descriptor-id which describes
the specific design properties of the mode once it is being transmitted
by the parent transceiver component.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="mode-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mode_descriptor_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="mode-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)""",
        })

    self.__mode_descriptor_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mode_descriptor_id(self):
    self.__mode_descriptor_id = YANGDynClass(base=str, is_leaf=True, yang_name="mode-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)

  mode_id = __builtin__.property(_get_mode_id)
  mode_descriptor_id = __builtin__.property(_get_mode_descriptor_id)


  _pyangbind_elements = OrderedDict([('mode_id', mode_id), ('mode_descriptor_id', mode_descriptor_id), ])


