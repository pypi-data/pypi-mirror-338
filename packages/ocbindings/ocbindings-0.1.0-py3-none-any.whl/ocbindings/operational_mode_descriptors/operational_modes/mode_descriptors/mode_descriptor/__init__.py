# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import state
from . import penalties
from . import interoperable_modes
class mode_descriptor(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-terminal-device-properties - based on the path /operational-mode-descriptors/operational-modes/mode-descriptors/mode-descriptor. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: 
  """
  __slots__ = ('_path_helper', '_extmethods', '__mode_descriptor_id','__state','__penalties','__interoperable_modes',)

  _yang_name = 'mode-descriptor'
  _yang_namespace = 'http://openconfig.net/yang/openconfig-terminal-device-properties'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mode_descriptor_id = YANGDynClass(base=str, is_leaf=True, yang_name="mode-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)
    self.__penalties = YANGDynClass(base=penalties.penalties, is_container='container', yang_name="penalties", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)
    self.__interoperable_modes = YANGDynClass(base=interoperable_modes.interoperable_modes, is_container='container', yang_name="interoperable-modes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['operational-mode-descriptors', 'operational-modes', 'mode-descriptors', 'mode-descriptor']

  def _get_mode_descriptor_id(self):
    """
    Getter method for mode_descriptor_id, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/mode_descriptor_id (leafref)

    YANG Description: Reference to mode-descriptor-id
    """
    return self.__mode_descriptor_id
      
  def _set_mode_descriptor_id(self, v, load=False):
    """
    Setter method for mode_descriptor_id, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/mode_descriptor_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mode_descriptor_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mode_descriptor_id() directly.

    YANG Description: Reference to mode-descriptor-id
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="mode-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mode_descriptor_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="mode-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)""",
        })

    self.__mode_descriptor_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mode_descriptor_id(self):
    self.__mode_descriptor_id = YANGDynClass(base=str, is_leaf=True, yang_name="mode-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/state (container)

    YANG Description: Mode-descriptor state attributes top container.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Mode-descriptor state attributes top container.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)


  def _get_penalties(self):
    """
    Getter method for penalties, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/penalties (container)

    YANG Description: Enconsing list's container.
    """
    return self.__penalties
      
  def _set_penalties(self, v, load=False):
    """
    Setter method for penalties, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/penalties (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_penalties is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_penalties() directly.

    YANG Description: Enconsing list's container.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=penalties.penalties, is_container='container', yang_name="penalties", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """penalties must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=penalties.penalties, is_container='container', yang_name="penalties", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)""",
        })

    self.__penalties = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_penalties(self):
    self.__penalties = YANGDynClass(base=penalties.penalties, is_container='container', yang_name="penalties", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)


  def _get_interoperable_modes(self):
    """
    Getter method for interoperable_modes, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/interoperable_modes (container)

    YANG Description: Top level container of interoperable modes.
    """
    return self.__interoperable_modes
      
  def _set_interoperable_modes(self, v, load=False):
    """
    Setter method for interoperable_modes, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/interoperable_modes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interoperable_modes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interoperable_modes() directly.

    YANG Description: Top level container of interoperable modes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interoperable_modes.interoperable_modes, is_container='container', yang_name="interoperable-modes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interoperable_modes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interoperable_modes.interoperable_modes, is_container='container', yang_name="interoperable-modes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)""",
        })

    self.__interoperable_modes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interoperable_modes(self):
    self.__interoperable_modes = YANGDynClass(base=interoperable_modes.interoperable_modes, is_container='container', yang_name="interoperable-modes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)

  mode_descriptor_id = __builtin__.property(_get_mode_descriptor_id)
  state = __builtin__.property(_get_state)
  penalties = __builtin__.property(_get_penalties)
  interoperable_modes = __builtin__.property(_get_interoperable_modes)


  _pyangbind_elements = OrderedDict([('mode_descriptor_id', mode_descriptor_id), ('state', state), ('penalties', penalties), ('interoperable_modes', interoperable_modes), ])


from . import state
from . import penalties
from . import interoperable_modes
class mode_descriptor(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-terminal-device-properties - based on the path /operational-mode-descriptors/operational-modes/mode-descriptors/mode-descriptor. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: 
  """
  __slots__ = ('_path_helper', '_extmethods', '__mode_descriptor_id','__state','__penalties','__interoperable_modes',)

  _yang_name = 'mode-descriptor'
  _yang_namespace = 'http://openconfig.net/yang/openconfig-terminal-device-properties'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mode_descriptor_id = YANGDynClass(base=str, is_leaf=True, yang_name="mode-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)
    self.__penalties = YANGDynClass(base=penalties.penalties, is_container='container', yang_name="penalties", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)
    self.__interoperable_modes = YANGDynClass(base=interoperable_modes.interoperable_modes, is_container='container', yang_name="interoperable-modes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['operational-mode-descriptors', 'operational-modes', 'mode-descriptors', 'mode-descriptor']

  def _get_mode_descriptor_id(self):
    """
    Getter method for mode_descriptor_id, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/mode_descriptor_id (leafref)

    YANG Description: Reference to mode-descriptor-id
    """
    return self.__mode_descriptor_id
      
  def _set_mode_descriptor_id(self, v, load=False):
    """
    Setter method for mode_descriptor_id, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/mode_descriptor_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mode_descriptor_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mode_descriptor_id() directly.

    YANG Description: Reference to mode-descriptor-id
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="mode-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mode_descriptor_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="mode-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)""",
        })

    self.__mode_descriptor_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mode_descriptor_id(self):
    self.__mode_descriptor_id = YANGDynClass(base=str, is_leaf=True, yang_name="mode-descriptor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/state (container)

    YANG Description: Mode-descriptor state attributes top container.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Mode-descriptor state attributes top container.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)


  def _get_penalties(self):
    """
    Getter method for penalties, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/penalties (container)

    YANG Description: Enconsing list's container.
    """
    return self.__penalties
      
  def _set_penalties(self, v, load=False):
    """
    Setter method for penalties, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/penalties (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_penalties is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_penalties() directly.

    YANG Description: Enconsing list's container.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=penalties.penalties, is_container='container', yang_name="penalties", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """penalties must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=penalties.penalties, is_container='container', yang_name="penalties", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)""",
        })

    self.__penalties = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_penalties(self):
    self.__penalties = YANGDynClass(base=penalties.penalties, is_container='container', yang_name="penalties", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)


  def _get_interoperable_modes(self):
    """
    Getter method for interoperable_modes, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/interoperable_modes (container)

    YANG Description: Top level container of interoperable modes.
    """
    return self.__interoperable_modes
      
  def _set_interoperable_modes(self, v, load=False):
    """
    Setter method for interoperable_modes, mapped from YANG variable /operational_mode_descriptors/operational_modes/mode_descriptors/mode_descriptor/interoperable_modes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interoperable_modes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interoperable_modes() directly.

    YANG Description: Top level container of interoperable modes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interoperable_modes.interoperable_modes, is_container='container', yang_name="interoperable-modes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interoperable_modes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interoperable_modes.interoperable_modes, is_container='container', yang_name="interoperable-modes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)""",
        })

    self.__interoperable_modes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interoperable_modes(self):
    self.__interoperable_modes = YANGDynClass(base=interoperable_modes.interoperable_modes, is_container='container', yang_name="interoperable-modes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/openconfig-terminal-device-properties', defining_module='openconfig-terminal-device-properties', yang_type='container', is_config=False)

  mode_descriptor_id = __builtin__.property(_get_mode_descriptor_id)
  state = __builtin__.property(_get_state)
  penalties = __builtin__.property(_get_penalties)
  interoperable_modes = __builtin__.property(_get_interoperable_modes)


  _pyangbind_elements = OrderedDict([('mode_descriptor_id', mode_descriptor_id), ('state', state), ('penalties', penalties), ('interoperable_modes', interoperable_modes), ])


