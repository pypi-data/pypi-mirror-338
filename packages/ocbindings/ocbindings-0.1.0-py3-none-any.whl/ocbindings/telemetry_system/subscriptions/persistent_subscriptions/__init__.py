# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import persistent_subscription
class persistent_subscriptions(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-telemetry - based on the path /telemetry-system/subscriptions/persistent-subscriptions. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container holds information relating to persistent
telemetry subscriptions. A persistent telemetry
subscription is configued locally on the device through
configuration, and is persistent across device restarts or
other redundancy changes.
  """
  __slots__ = ('_path_helper', '_extmethods', '__persistent_subscription',)

  _yang_name = 'persistent-subscriptions'
  _yang_namespace = 'http://openconfig.net/yang/telemetry'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__persistent_subscription = YANGDynClass(base=YANGListType("name",persistent_subscription.persistent_subscription, yang_name="persistent-subscription", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="persistent-subscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['telemetry-system', 'subscriptions', 'persistent-subscriptions']

  def _get_persistent_subscription(self):
    """
    Getter method for persistent_subscription, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription (list)

    YANG Description: List of telemetry subscriptions. A telemetry
subscription consists of a set of collection
destinations, stream attributes, and associated paths to
state information in the model (sensor data)
    """
    return self.__persistent_subscription
      
  def _set_persistent_subscription(self, v, load=False):
    """
    Setter method for persistent_subscription, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_persistent_subscription is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_persistent_subscription() directly.

    YANG Description: List of telemetry subscriptions. A telemetry
subscription consists of a set of collection
destinations, stream attributes, and associated paths to
state information in the model (sensor data)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",persistent_subscription.persistent_subscription, yang_name="persistent-subscription", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="persistent-subscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """persistent_subscription must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",persistent_subscription.persistent_subscription, yang_name="persistent-subscription", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="persistent-subscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='list', is_config=True)""",
        })

    self.__persistent_subscription = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_persistent_subscription(self):
    self.__persistent_subscription = YANGDynClass(base=YANGListType("name",persistent_subscription.persistent_subscription, yang_name="persistent-subscription", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="persistent-subscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='list', is_config=True)

  persistent_subscription = __builtin__.property(_get_persistent_subscription, _set_persistent_subscription)


  _pyangbind_elements = OrderedDict([('persistent_subscription', persistent_subscription), ])


from . import persistent_subscription
class persistent_subscriptions(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-telemetry - based on the path /telemetry-system/subscriptions/persistent-subscriptions. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container holds information relating to persistent
telemetry subscriptions. A persistent telemetry
subscription is configued locally on the device through
configuration, and is persistent across device restarts or
other redundancy changes.
  """
  __slots__ = ('_path_helper', '_extmethods', '__persistent_subscription',)

  _yang_name = 'persistent-subscriptions'
  _yang_namespace = 'http://openconfig.net/yang/telemetry'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__persistent_subscription = YANGDynClass(base=YANGListType("name",persistent_subscription.persistent_subscription, yang_name="persistent-subscription", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="persistent-subscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['telemetry-system', 'subscriptions', 'persistent-subscriptions']

  def _get_persistent_subscription(self):
    """
    Getter method for persistent_subscription, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription (list)

    YANG Description: List of telemetry subscriptions. A telemetry
subscription consists of a set of collection
destinations, stream attributes, and associated paths to
state information in the model (sensor data)
    """
    return self.__persistent_subscription
      
  def _set_persistent_subscription(self, v, load=False):
    """
    Setter method for persistent_subscription, mapped from YANG variable /telemetry_system/subscriptions/persistent_subscriptions/persistent_subscription (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_persistent_subscription is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_persistent_subscription() directly.

    YANG Description: List of telemetry subscriptions. A telemetry
subscription consists of a set of collection
destinations, stream attributes, and associated paths to
state information in the model (sensor data)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",persistent_subscription.persistent_subscription, yang_name="persistent-subscription", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="persistent-subscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """persistent_subscription must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",persistent_subscription.persistent_subscription, yang_name="persistent-subscription", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="persistent-subscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='list', is_config=True)""",
        })

    self.__persistent_subscription = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_persistent_subscription(self):
    self.__persistent_subscription = YANGDynClass(base=YANGListType("name",persistent_subscription.persistent_subscription, yang_name="persistent-subscription", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="persistent-subscription", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/telemetry', defining_module='openconfig-telemetry', yang_type='list', is_config=True)

  persistent_subscription = __builtin__.property(_get_persistent_subscription, _set_persistent_subscription)


  _pyangbind_elements = OrderedDict([('persistent_subscription', persistent_subscription), ])


