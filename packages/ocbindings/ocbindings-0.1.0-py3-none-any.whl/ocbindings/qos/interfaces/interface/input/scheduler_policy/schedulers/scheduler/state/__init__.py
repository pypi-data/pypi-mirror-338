# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the scheduler
policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__conforming_pkts','__conforming_octets','__exceeding_pkts','__exceeding_octets','__violating_pkts','__violating_octets',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'input', 'scheduler-policy', 'schedulers', 'scheduler', 'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/sequence (leafref)

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_conforming_pkts(self):
    """
    Getter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    return self.__conforming_pkts
      
  def _set_conforming_pkts(self, v, load=False):
    """
    Setter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_pkts() directly.

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_pkts(self):
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_conforming_octets(self):
    """
    Getter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    return self.__conforming_octets
      
  def _set_conforming_octets(self, v, load=False):
    """
    Setter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_octets() directly.

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_octets(self):
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_pkts(self):
    """
    Getter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    return self.__exceeding_pkts
      
  def _set_exceeding_pkts(self, v, load=False):
    """
    Setter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_pkts() directly.

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_pkts(self):
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_octets(self):
    """
    Getter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    return self.__exceeding_octets
      
  def _set_exceeding_octets(self, v, load=False):
    """
    Setter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_octets() directly.

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_octets(self):
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_pkts(self):
    """
    Getter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    return self.__violating_pkts
      
  def _set_violating_pkts(self, v, load=False):
    """
    Setter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_pkts() directly.

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_pkts(self):
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_octets(self):
    """
    Getter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    return self.__violating_octets
      
  def _set_violating_octets(self, v, load=False):
    """
    Setter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_octets() directly.

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_octets(self):
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  conforming_pkts = __builtin__.property(_get_conforming_pkts)
  conforming_octets = __builtin__.property(_get_conforming_octets)
  exceeding_pkts = __builtin__.property(_get_exceeding_pkts)
  exceeding_octets = __builtin__.property(_get_exceeding_octets)
  violating_pkts = __builtin__.property(_get_violating_pkts)
  violating_octets = __builtin__.property(_get_violating_octets)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('conforming_pkts', conforming_pkts), ('conforming_octets', conforming_octets), ('exceeding_pkts', exceeding_pkts), ('exceeding_octets', exceeding_octets), ('violating_pkts', violating_pkts), ('violating_octets', violating_octets), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the scheduler
policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__conforming_pkts','__conforming_octets','__exceeding_pkts','__exceeding_octets','__violating_pkts','__violating_octets',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'input', 'scheduler-policy', 'schedulers', 'scheduler', 'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/sequence (leafref)

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_conforming_pkts(self):
    """
    Getter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    return self.__conforming_pkts
      
  def _set_conforming_pkts(self, v, load=False):
    """
    Setter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_pkts() directly.

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_pkts(self):
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_conforming_octets(self):
    """
    Getter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    return self.__conforming_octets
      
  def _set_conforming_octets(self, v, load=False):
    """
    Setter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_octets() directly.

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_octets(self):
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_pkts(self):
    """
    Getter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    return self.__exceeding_pkts
      
  def _set_exceeding_pkts(self, v, load=False):
    """
    Setter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_pkts() directly.

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_pkts(self):
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_octets(self):
    """
    Getter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    return self.__exceeding_octets
      
  def _set_exceeding_octets(self, v, load=False):
    """
    Setter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_octets() directly.

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_octets(self):
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_pkts(self):
    """
    Getter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    return self.__violating_pkts
      
  def _set_violating_pkts(self, v, load=False):
    """
    Setter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_pkts() directly.

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_pkts(self):
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_octets(self):
    """
    Getter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    return self.__violating_octets
      
  def _set_violating_octets(self, v, load=False):
    """
    Setter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_octets() directly.

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_octets(self):
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  conforming_pkts = __builtin__.property(_get_conforming_pkts)
  conforming_octets = __builtin__.property(_get_conforming_octets)
  exceeding_pkts = __builtin__.property(_get_exceeding_pkts)
  exceeding_octets = __builtin__.property(_get_exceeding_octets)
  violating_pkts = __builtin__.property(_get_violating_pkts)
  violating_octets = __builtin__.property(_get_violating_octets)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('conforming_pkts', conforming_pkts), ('conforming_octets', conforming_octets), ('exceeding_pkts', exceeding_pkts), ('exceeding_octets', exceeding_octets), ('violating_pkts', violating_pkts), ('violating_octets', violating_octets), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the scheduler
policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__conforming_pkts','__conforming_octets','__exceeding_pkts','__exceeding_octets','__violating_pkts','__violating_octets',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'input', 'scheduler-policy', 'schedulers', 'scheduler', 'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/sequence (leafref)

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_conforming_pkts(self):
    """
    Getter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    return self.__conforming_pkts
      
  def _set_conforming_pkts(self, v, load=False):
    """
    Setter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_pkts() directly.

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_pkts(self):
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_conforming_octets(self):
    """
    Getter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    return self.__conforming_octets
      
  def _set_conforming_octets(self, v, load=False):
    """
    Setter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_octets() directly.

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_octets(self):
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_pkts(self):
    """
    Getter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    return self.__exceeding_pkts
      
  def _set_exceeding_pkts(self, v, load=False):
    """
    Setter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_pkts() directly.

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_pkts(self):
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_octets(self):
    """
    Getter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    return self.__exceeding_octets
      
  def _set_exceeding_octets(self, v, load=False):
    """
    Setter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_octets() directly.

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_octets(self):
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_pkts(self):
    """
    Getter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    return self.__violating_pkts
      
  def _set_violating_pkts(self, v, load=False):
    """
    Setter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_pkts() directly.

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_pkts(self):
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_octets(self):
    """
    Getter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    return self.__violating_octets
      
  def _set_violating_octets(self, v, load=False):
    """
    Setter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_octets() directly.

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_octets(self):
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  conforming_pkts = __builtin__.property(_get_conforming_pkts)
  conforming_octets = __builtin__.property(_get_conforming_octets)
  exceeding_pkts = __builtin__.property(_get_exceeding_pkts)
  exceeding_octets = __builtin__.property(_get_exceeding_octets)
  violating_pkts = __builtin__.property(_get_violating_pkts)
  violating_octets = __builtin__.property(_get_violating_octets)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('conforming_pkts', conforming_pkts), ('conforming_octets', conforming_octets), ('exceeding_pkts', exceeding_pkts), ('exceeding_octets', exceeding_octets), ('violating_pkts', violating_pkts), ('violating_octets', violating_octets), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the scheduler
policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__conforming_pkts','__conforming_octets','__exceeding_pkts','__exceeding_octets','__violating_pkts','__violating_octets',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'input', 'scheduler-policy', 'schedulers', 'scheduler', 'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/sequence (leafref)

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_conforming_pkts(self):
    """
    Getter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    return self.__conforming_pkts
      
  def _set_conforming_pkts(self, v, load=False):
    """
    Setter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_pkts() directly.

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_pkts(self):
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_conforming_octets(self):
    """
    Getter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    return self.__conforming_octets
      
  def _set_conforming_octets(self, v, load=False):
    """
    Setter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_octets() directly.

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_octets(self):
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_pkts(self):
    """
    Getter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    return self.__exceeding_pkts
      
  def _set_exceeding_pkts(self, v, load=False):
    """
    Setter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_pkts() directly.

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_pkts(self):
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_octets(self):
    """
    Getter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    return self.__exceeding_octets
      
  def _set_exceeding_octets(self, v, load=False):
    """
    Setter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_octets() directly.

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_octets(self):
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_pkts(self):
    """
    Getter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    return self.__violating_pkts
      
  def _set_violating_pkts(self, v, load=False):
    """
    Setter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_pkts() directly.

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_pkts(self):
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_octets(self):
    """
    Getter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    return self.__violating_octets
      
  def _set_violating_octets(self, v, load=False):
    """
    Setter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_octets() directly.

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_octets(self):
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  conforming_pkts = __builtin__.property(_get_conforming_pkts)
  conforming_octets = __builtin__.property(_get_conforming_octets)
  exceeding_pkts = __builtin__.property(_get_exceeding_pkts)
  exceeding_octets = __builtin__.property(_get_exceeding_octets)
  violating_pkts = __builtin__.property(_get_violating_pkts)
  violating_octets = __builtin__.property(_get_violating_octets)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('conforming_pkts', conforming_pkts), ('conforming_octets', conforming_octets), ('exceeding_pkts', exceeding_pkts), ('exceeding_octets', exceeding_octets), ('violating_pkts', violating_pkts), ('violating_octets', violating_octets), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the scheduler
policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__conforming_pkts','__conforming_octets','__exceeding_pkts','__exceeding_octets','__violating_pkts','__violating_octets',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'input', 'scheduler-policy', 'schedulers', 'scheduler', 'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/sequence (leafref)

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_conforming_pkts(self):
    """
    Getter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    return self.__conforming_pkts
      
  def _set_conforming_pkts(self, v, load=False):
    """
    Setter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_pkts() directly.

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_pkts(self):
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_conforming_octets(self):
    """
    Getter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    return self.__conforming_octets
      
  def _set_conforming_octets(self, v, load=False):
    """
    Setter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_octets() directly.

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_octets(self):
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_pkts(self):
    """
    Getter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    return self.__exceeding_pkts
      
  def _set_exceeding_pkts(self, v, load=False):
    """
    Setter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_pkts() directly.

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_pkts(self):
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_octets(self):
    """
    Getter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    return self.__exceeding_octets
      
  def _set_exceeding_octets(self, v, load=False):
    """
    Setter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_octets() directly.

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_octets(self):
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_pkts(self):
    """
    Getter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    return self.__violating_pkts
      
  def _set_violating_pkts(self, v, load=False):
    """
    Setter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_pkts() directly.

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_pkts(self):
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_octets(self):
    """
    Getter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    return self.__violating_octets
      
  def _set_violating_octets(self, v, load=False):
    """
    Setter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_octets() directly.

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_octets(self):
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  conforming_pkts = __builtin__.property(_get_conforming_pkts)
  conforming_octets = __builtin__.property(_get_conforming_octets)
  exceeding_pkts = __builtin__.property(_get_exceeding_pkts)
  exceeding_octets = __builtin__.property(_get_exceeding_octets)
  violating_pkts = __builtin__.property(_get_violating_pkts)
  violating_octets = __builtin__.property(_get_violating_octets)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('conforming_pkts', conforming_pkts), ('conforming_octets', conforming_octets), ('exceeding_pkts', exceeding_pkts), ('exceeding_octets', exceeding_octets), ('violating_pkts', violating_pkts), ('violating_octets', violating_octets), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the scheduler
policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__conforming_pkts','__conforming_octets','__exceeding_pkts','__exceeding_octets','__violating_pkts','__violating_octets',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'input', 'scheduler-policy', 'schedulers', 'scheduler', 'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/sequence (leafref)

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_conforming_pkts(self):
    """
    Getter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    return self.__conforming_pkts
      
  def _set_conforming_pkts(self, v, load=False):
    """
    Setter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_pkts() directly.

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_pkts(self):
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_conforming_octets(self):
    """
    Getter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    return self.__conforming_octets
      
  def _set_conforming_octets(self, v, load=False):
    """
    Setter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_octets() directly.

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_octets(self):
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_pkts(self):
    """
    Getter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    return self.__exceeding_pkts
      
  def _set_exceeding_pkts(self, v, load=False):
    """
    Setter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_pkts() directly.

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_pkts(self):
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_octets(self):
    """
    Getter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    return self.__exceeding_octets
      
  def _set_exceeding_octets(self, v, load=False):
    """
    Setter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_octets() directly.

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_octets(self):
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_pkts(self):
    """
    Getter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    return self.__violating_pkts
      
  def _set_violating_pkts(self, v, load=False):
    """
    Setter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_pkts() directly.

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_pkts(self):
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_octets(self):
    """
    Getter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    return self.__violating_octets
      
  def _set_violating_octets(self, v, load=False):
    """
    Setter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_octets() directly.

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_octets(self):
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  conforming_pkts = __builtin__.property(_get_conforming_pkts)
  conforming_octets = __builtin__.property(_get_conforming_octets)
  exceeding_pkts = __builtin__.property(_get_exceeding_pkts)
  exceeding_octets = __builtin__.property(_get_exceeding_octets)
  violating_pkts = __builtin__.property(_get_violating_pkts)
  violating_octets = __builtin__.property(_get_violating_octets)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('conforming_pkts', conforming_pkts), ('conforming_octets', conforming_octets), ('exceeding_pkts', exceeding_pkts), ('exceeding_octets', exceeding_octets), ('violating_pkts', violating_pkts), ('violating_octets', violating_octets), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the scheduler
policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__conforming_pkts','__conforming_octets','__exceeding_pkts','__exceeding_octets','__violating_pkts','__violating_octets',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'input', 'scheduler-policy', 'schedulers', 'scheduler', 'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/sequence (leafref)

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_conforming_pkts(self):
    """
    Getter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    return self.__conforming_pkts
      
  def _set_conforming_pkts(self, v, load=False):
    """
    Setter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_pkts() directly.

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_pkts(self):
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_conforming_octets(self):
    """
    Getter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    return self.__conforming_octets
      
  def _set_conforming_octets(self, v, load=False):
    """
    Setter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_octets() directly.

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_octets(self):
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_pkts(self):
    """
    Getter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    return self.__exceeding_pkts
      
  def _set_exceeding_pkts(self, v, load=False):
    """
    Setter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_pkts() directly.

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_pkts(self):
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_octets(self):
    """
    Getter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    return self.__exceeding_octets
      
  def _set_exceeding_octets(self, v, load=False):
    """
    Setter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_octets() directly.

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_octets(self):
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_pkts(self):
    """
    Getter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    return self.__violating_pkts
      
  def _set_violating_pkts(self, v, load=False):
    """
    Setter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_pkts() directly.

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_pkts(self):
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_octets(self):
    """
    Getter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    return self.__violating_octets
      
  def _set_violating_octets(self, v, load=False):
    """
    Setter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_octets() directly.

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_octets(self):
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  conforming_pkts = __builtin__.property(_get_conforming_pkts)
  conforming_octets = __builtin__.property(_get_conforming_octets)
  exceeding_pkts = __builtin__.property(_get_exceeding_pkts)
  exceeding_octets = __builtin__.property(_get_exceeding_octets)
  violating_pkts = __builtin__.property(_get_violating_pkts)
  violating_octets = __builtin__.property(_get_violating_octets)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('conforming_pkts', conforming_pkts), ('conforming_octets', conforming_octets), ('exceeding_pkts', exceeding_pkts), ('exceeding_octets', exceeding_octets), ('violating_pkts', violating_pkts), ('violating_octets', violating_octets), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the scheduler
policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__conforming_pkts','__conforming_octets','__exceeding_pkts','__exceeding_octets','__violating_pkts','__violating_octets',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'input', 'scheduler-policy', 'schedulers', 'scheduler', 'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/sequence (leafref)

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=str, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_conforming_pkts(self):
    """
    Getter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    return self.__conforming_pkts
      
  def _set_conforming_pkts(self, v, load=False):
    """
    Setter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_pkts() directly.

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_pkts(self):
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_conforming_octets(self):
    """
    Getter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    return self.__conforming_octets
      
  def _set_conforming_octets(self, v, load=False):
    """
    Setter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_octets() directly.

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_octets(self):
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_pkts(self):
    """
    Getter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    return self.__exceeding_pkts
      
  def _set_exceeding_pkts(self, v, load=False):
    """
    Setter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_pkts() directly.

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_pkts(self):
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_octets(self):
    """
    Getter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    return self.__exceeding_octets
      
  def _set_exceeding_octets(self, v, load=False):
    """
    Setter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_octets() directly.

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_octets(self):
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_pkts(self):
    """
    Getter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    return self.__violating_pkts
      
  def _set_violating_pkts(self, v, load=False):
    """
    Setter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_pkts() directly.

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_pkts(self):
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_octets(self):
    """
    Getter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    return self.__violating_octets
      
  def _set_violating_octets(self, v, load=False):
    """
    Setter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/input/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_octets() directly.

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_octets(self):
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  conforming_pkts = __builtin__.property(_get_conforming_pkts)
  conforming_octets = __builtin__.property(_get_conforming_octets)
  exceeding_pkts = __builtin__.property(_get_exceeding_pkts)
  exceeding_octets = __builtin__.property(_get_exceeding_octets)
  violating_pkts = __builtin__.property(_get_violating_pkts)
  violating_octets = __builtin__.property(_get_violating_octets)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('conforming_pkts', conforming_pkts), ('conforming_octets', conforming_octets), ('exceeding_pkts', exceeding_pkts), ('exceeding_octets', exceeding_octets), ('violating_pkts', violating_pkts), ('violating_octets', violating_octets), ])


