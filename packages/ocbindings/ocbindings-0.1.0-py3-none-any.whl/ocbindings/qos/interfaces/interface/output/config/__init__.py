# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/output/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for QoS on the egress interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__buffer_allocation_profile','__multicast_buffer_allocation_profile','__unicast_buffer_allocation_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__multicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__unicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'output', 'config']

  def _get_buffer_allocation_profile(self):
    """
    Getter method for buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This leaf is used in deployment cases where the operator or system
requires common allocation profiles covering unicast and multicast
packets.
    """
    return self.__buffer_allocation_profile
      
  def _set_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This leaf is used in deployment cases where the operator or system
requires common allocation profiles covering unicast and multicast
packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_buffer_allocation_profile(self):
    self.__buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_multicast_buffer_allocation_profile(self):
    """
    Getter method for multicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/multicast_buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only multicast packets on
the interface - if specified, the unicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to unicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    return self.__multicast_buffer_allocation_profile
      
  def _set_multicast_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for multicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/multicast_buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multicast_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multicast_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only multicast packets on
the interface - if specified, the unicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to unicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multicast_buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__multicast_buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multicast_buffer_allocation_profile(self):
    self.__multicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_unicast_buffer_allocation_profile(self):
    """
    Getter method for unicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/unicast_buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only unicast packets on
the interface - if specified, the multicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to multicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    return self.__unicast_buffer_allocation_profile
      
  def _set_unicast_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for unicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/unicast_buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unicast_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unicast_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only unicast packets on
the interface - if specified, the multicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to multicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unicast_buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__unicast_buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unicast_buffer_allocation_profile(self):
    self.__unicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  buffer_allocation_profile = __builtin__.property(_get_buffer_allocation_profile, _set_buffer_allocation_profile)
  multicast_buffer_allocation_profile = __builtin__.property(_get_multicast_buffer_allocation_profile, _set_multicast_buffer_allocation_profile)
  unicast_buffer_allocation_profile = __builtin__.property(_get_unicast_buffer_allocation_profile, _set_unicast_buffer_allocation_profile)


  _pyangbind_elements = OrderedDict([('buffer_allocation_profile', buffer_allocation_profile), ('multicast_buffer_allocation_profile', multicast_buffer_allocation_profile), ('unicast_buffer_allocation_profile', unicast_buffer_allocation_profile), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/output/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for QoS on the egress interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__buffer_allocation_profile','__multicast_buffer_allocation_profile','__unicast_buffer_allocation_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__multicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__unicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'output', 'config']

  def _get_buffer_allocation_profile(self):
    """
    Getter method for buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This leaf is used in deployment cases where the operator or system
requires common allocation profiles covering unicast and multicast
packets.
    """
    return self.__buffer_allocation_profile
      
  def _set_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This leaf is used in deployment cases where the operator or system
requires common allocation profiles covering unicast and multicast
packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_buffer_allocation_profile(self):
    self.__buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_multicast_buffer_allocation_profile(self):
    """
    Getter method for multicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/multicast_buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only multicast packets on
the interface - if specified, the unicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to unicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    return self.__multicast_buffer_allocation_profile
      
  def _set_multicast_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for multicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/multicast_buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multicast_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multicast_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only multicast packets on
the interface - if specified, the unicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to unicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multicast_buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__multicast_buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multicast_buffer_allocation_profile(self):
    self.__multicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_unicast_buffer_allocation_profile(self):
    """
    Getter method for unicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/unicast_buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only unicast packets on
the interface - if specified, the multicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to multicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    return self.__unicast_buffer_allocation_profile
      
  def _set_unicast_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for unicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/unicast_buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unicast_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unicast_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only unicast packets on
the interface - if specified, the multicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to multicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unicast_buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__unicast_buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unicast_buffer_allocation_profile(self):
    self.__unicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  buffer_allocation_profile = __builtin__.property(_get_buffer_allocation_profile, _set_buffer_allocation_profile)
  multicast_buffer_allocation_profile = __builtin__.property(_get_multicast_buffer_allocation_profile, _set_multicast_buffer_allocation_profile)
  unicast_buffer_allocation_profile = __builtin__.property(_get_unicast_buffer_allocation_profile, _set_unicast_buffer_allocation_profile)


  _pyangbind_elements = OrderedDict([('buffer_allocation_profile', buffer_allocation_profile), ('multicast_buffer_allocation_profile', multicast_buffer_allocation_profile), ('unicast_buffer_allocation_profile', unicast_buffer_allocation_profile), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/output/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for QoS on the egress interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__buffer_allocation_profile','__multicast_buffer_allocation_profile','__unicast_buffer_allocation_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__multicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__unicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'output', 'config']

  def _get_buffer_allocation_profile(self):
    """
    Getter method for buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This leaf is used in deployment cases where the operator or system
requires common allocation profiles covering unicast and multicast
packets.
    """
    return self.__buffer_allocation_profile
      
  def _set_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This leaf is used in deployment cases where the operator or system
requires common allocation profiles covering unicast and multicast
packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_buffer_allocation_profile(self):
    self.__buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_multicast_buffer_allocation_profile(self):
    """
    Getter method for multicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/multicast_buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only multicast packets on
the interface - if specified, the unicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to unicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    return self.__multicast_buffer_allocation_profile
      
  def _set_multicast_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for multicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/multicast_buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multicast_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multicast_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only multicast packets on
the interface - if specified, the unicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to unicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multicast_buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__multicast_buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multicast_buffer_allocation_profile(self):
    self.__multicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_unicast_buffer_allocation_profile(self):
    """
    Getter method for unicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/unicast_buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only unicast packets on
the interface - if specified, the multicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to multicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    return self.__unicast_buffer_allocation_profile
      
  def _set_unicast_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for unicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/unicast_buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unicast_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unicast_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only unicast packets on
the interface - if specified, the multicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to multicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unicast_buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__unicast_buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unicast_buffer_allocation_profile(self):
    self.__unicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  buffer_allocation_profile = __builtin__.property(_get_buffer_allocation_profile, _set_buffer_allocation_profile)
  multicast_buffer_allocation_profile = __builtin__.property(_get_multicast_buffer_allocation_profile, _set_multicast_buffer_allocation_profile)
  unicast_buffer_allocation_profile = __builtin__.property(_get_unicast_buffer_allocation_profile, _set_unicast_buffer_allocation_profile)


  _pyangbind_elements = OrderedDict([('buffer_allocation_profile', buffer_allocation_profile), ('multicast_buffer_allocation_profile', multicast_buffer_allocation_profile), ('unicast_buffer_allocation_profile', unicast_buffer_allocation_profile), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/interfaces/interface/output/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for QoS on the egress interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__buffer_allocation_profile','__multicast_buffer_allocation_profile','__unicast_buffer_allocation_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__multicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__unicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'output', 'config']

  def _get_buffer_allocation_profile(self):
    """
    Getter method for buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This leaf is used in deployment cases where the operator or system
requires common allocation profiles covering unicast and multicast
packets.
    """
    return self.__buffer_allocation_profile
      
  def _set_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This leaf is used in deployment cases where the operator or system
requires common allocation profiles covering unicast and multicast
packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_buffer_allocation_profile(self):
    self.__buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_multicast_buffer_allocation_profile(self):
    """
    Getter method for multicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/multicast_buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only multicast packets on
the interface - if specified, the unicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to unicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    return self.__multicast_buffer_allocation_profile
      
  def _set_multicast_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for multicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/multicast_buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multicast_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multicast_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only multicast packets on
the interface - if specified, the unicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to unicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multicast_buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__multicast_buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multicast_buffer_allocation_profile(self):
    self.__multicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_unicast_buffer_allocation_profile(self):
    """
    Getter method for unicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/unicast_buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only unicast packets on
the interface - if specified, the multicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to multicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    return self.__unicast_buffer_allocation_profile
      
  def _set_unicast_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for unicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/unicast_buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unicast_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unicast_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only unicast packets on
the interface - if specified, the multicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to multicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unicast_buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__unicast_buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unicast_buffer_allocation_profile(self):
    self.__unicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  buffer_allocation_profile = __builtin__.property(_get_buffer_allocation_profile, _set_buffer_allocation_profile)
  multicast_buffer_allocation_profile = __builtin__.property(_get_multicast_buffer_allocation_profile, _set_multicast_buffer_allocation_profile)
  unicast_buffer_allocation_profile = __builtin__.property(_get_unicast_buffer_allocation_profile, _set_unicast_buffer_allocation_profile)


  _pyangbind_elements = OrderedDict([('buffer_allocation_profile', buffer_allocation_profile), ('multicast_buffer_allocation_profile', multicast_buffer_allocation_profile), ('unicast_buffer_allocation_profile', unicast_buffer_allocation_profile), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/output/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for QoS on the egress interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__buffer_allocation_profile','__multicast_buffer_allocation_profile','__unicast_buffer_allocation_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__multicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__unicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'output', 'config']

  def _get_buffer_allocation_profile(self):
    """
    Getter method for buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This leaf is used in deployment cases where the operator or system
requires common allocation profiles covering unicast and multicast
packets.
    """
    return self.__buffer_allocation_profile
      
  def _set_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This leaf is used in deployment cases where the operator or system
requires common allocation profiles covering unicast and multicast
packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_buffer_allocation_profile(self):
    self.__buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_multicast_buffer_allocation_profile(self):
    """
    Getter method for multicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/multicast_buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only multicast packets on
the interface - if specified, the unicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to unicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    return self.__multicast_buffer_allocation_profile
      
  def _set_multicast_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for multicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/multicast_buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multicast_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multicast_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only multicast packets on
the interface - if specified, the unicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to unicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multicast_buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__multicast_buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multicast_buffer_allocation_profile(self):
    self.__multicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_unicast_buffer_allocation_profile(self):
    """
    Getter method for unicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/unicast_buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only unicast packets on
the interface - if specified, the multicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to multicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    return self.__unicast_buffer_allocation_profile
      
  def _set_unicast_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for unicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/unicast_buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unicast_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unicast_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only unicast packets on
the interface - if specified, the multicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to multicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unicast_buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__unicast_buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unicast_buffer_allocation_profile(self):
    self.__unicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  buffer_allocation_profile = __builtin__.property(_get_buffer_allocation_profile, _set_buffer_allocation_profile)
  multicast_buffer_allocation_profile = __builtin__.property(_get_multicast_buffer_allocation_profile, _set_multicast_buffer_allocation_profile)
  unicast_buffer_allocation_profile = __builtin__.property(_get_unicast_buffer_allocation_profile, _set_unicast_buffer_allocation_profile)


  _pyangbind_elements = OrderedDict([('buffer_allocation_profile', buffer_allocation_profile), ('multicast_buffer_allocation_profile', multicast_buffer_allocation_profile), ('unicast_buffer_allocation_profile', unicast_buffer_allocation_profile), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/output/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for QoS on the egress interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__buffer_allocation_profile','__multicast_buffer_allocation_profile','__unicast_buffer_allocation_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__multicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__unicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'output', 'config']

  def _get_buffer_allocation_profile(self):
    """
    Getter method for buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This leaf is used in deployment cases where the operator or system
requires common allocation profiles covering unicast and multicast
packets.
    """
    return self.__buffer_allocation_profile
      
  def _set_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This leaf is used in deployment cases where the operator or system
requires common allocation profiles covering unicast and multicast
packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_buffer_allocation_profile(self):
    self.__buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_multicast_buffer_allocation_profile(self):
    """
    Getter method for multicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/multicast_buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only multicast packets on
the interface - if specified, the unicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to unicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    return self.__multicast_buffer_allocation_profile
      
  def _set_multicast_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for multicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/multicast_buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multicast_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multicast_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only multicast packets on
the interface - if specified, the unicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to unicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multicast_buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__multicast_buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multicast_buffer_allocation_profile(self):
    self.__multicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_unicast_buffer_allocation_profile(self):
    """
    Getter method for unicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/unicast_buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only unicast packets on
the interface - if specified, the multicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to multicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    return self.__unicast_buffer_allocation_profile
      
  def _set_unicast_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for unicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/unicast_buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unicast_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unicast_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only unicast packets on
the interface - if specified, the multicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to multicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unicast_buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__unicast_buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unicast_buffer_allocation_profile(self):
    self.__unicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  buffer_allocation_profile = __builtin__.property(_get_buffer_allocation_profile, _set_buffer_allocation_profile)
  multicast_buffer_allocation_profile = __builtin__.property(_get_multicast_buffer_allocation_profile, _set_multicast_buffer_allocation_profile)
  unicast_buffer_allocation_profile = __builtin__.property(_get_unicast_buffer_allocation_profile, _set_unicast_buffer_allocation_profile)


  _pyangbind_elements = OrderedDict([('buffer_allocation_profile', buffer_allocation_profile), ('multicast_buffer_allocation_profile', multicast_buffer_allocation_profile), ('unicast_buffer_allocation_profile', unicast_buffer_allocation_profile), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/output/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for QoS on the egress interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__buffer_allocation_profile','__multicast_buffer_allocation_profile','__unicast_buffer_allocation_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__multicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__unicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'output', 'config']

  def _get_buffer_allocation_profile(self):
    """
    Getter method for buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This leaf is used in deployment cases where the operator or system
requires common allocation profiles covering unicast and multicast
packets.
    """
    return self.__buffer_allocation_profile
      
  def _set_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This leaf is used in deployment cases where the operator or system
requires common allocation profiles covering unicast and multicast
packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_buffer_allocation_profile(self):
    self.__buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_multicast_buffer_allocation_profile(self):
    """
    Getter method for multicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/multicast_buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only multicast packets on
the interface - if specified, the unicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to unicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    return self.__multicast_buffer_allocation_profile
      
  def _set_multicast_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for multicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/multicast_buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multicast_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multicast_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only multicast packets on
the interface - if specified, the unicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to unicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multicast_buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__multicast_buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multicast_buffer_allocation_profile(self):
    self.__multicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_unicast_buffer_allocation_profile(self):
    """
    Getter method for unicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/unicast_buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only unicast packets on
the interface - if specified, the multicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to multicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    return self.__unicast_buffer_allocation_profile
      
  def _set_unicast_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for unicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/unicast_buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unicast_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unicast_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only unicast packets on
the interface - if specified, the multicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to multicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unicast_buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__unicast_buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unicast_buffer_allocation_profile(self):
    self.__unicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  buffer_allocation_profile = __builtin__.property(_get_buffer_allocation_profile, _set_buffer_allocation_profile)
  multicast_buffer_allocation_profile = __builtin__.property(_get_multicast_buffer_allocation_profile, _set_multicast_buffer_allocation_profile)
  unicast_buffer_allocation_profile = __builtin__.property(_get_unicast_buffer_allocation_profile, _set_unicast_buffer_allocation_profile)


  _pyangbind_elements = OrderedDict([('buffer_allocation_profile', buffer_allocation_profile), ('multicast_buffer_allocation_profile', multicast_buffer_allocation_profile), ('unicast_buffer_allocation_profile', unicast_buffer_allocation_profile), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/interfaces/interface/output/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for QoS on the egress interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__buffer_allocation_profile','__multicast_buffer_allocation_profile','__unicast_buffer_allocation_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__multicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__unicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'output', 'config']

  def _get_buffer_allocation_profile(self):
    """
    Getter method for buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This leaf is used in deployment cases where the operator or system
requires common allocation profiles covering unicast and multicast
packets.
    """
    return self.__buffer_allocation_profile
      
  def _set_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This leaf is used in deployment cases where the operator or system
requires common allocation profiles covering unicast and multicast
packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_buffer_allocation_profile(self):
    self.__buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_multicast_buffer_allocation_profile(self):
    """
    Getter method for multicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/multicast_buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only multicast packets on
the interface - if specified, the unicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to unicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    return self.__multicast_buffer_allocation_profile
      
  def _set_multicast_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for multicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/multicast_buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multicast_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multicast_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only multicast packets on
the interface - if specified, the unicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to unicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multicast_buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__multicast_buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multicast_buffer_allocation_profile(self):
    self.__multicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="multicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_unicast_buffer_allocation_profile(self):
    """
    Getter method for unicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/unicast_buffer_allocation_profile (leafref)

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only unicast packets on
the interface - if specified, the multicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to multicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    return self.__unicast_buffer_allocation_profile
      
  def _set_unicast_buffer_allocation_profile(self, v, load=False):
    """
    Setter method for unicast_buffer_allocation_profile, mapped from YANG variable /qos/interfaces/interface/output/config/unicast_buffer_allocation_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unicast_buffer_allocation_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unicast_buffer_allocation_profile() directly.

    YANG Description: The buffer allocation profile that is to be used for the interface.
This profile specifies how memory that is available to the interface
should be allocated amongst the queues that are instantiated on the
interface.

This reference specifies the policy that should be used for memory
allocated to the output (tx) queueing.

This buffer allocation profile applies to only unicast packets on
the interface - if specified, the multicast-buffer-allocation-profile
governs the allocation profile used for memory dedicated to multicast.
If a system does not support, or an operator does not require separate
buffer-allocation-profiles, this is specified by use of the
buffer-allocation-profile leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unicast_buffer_allocation_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__unicast_buffer_allocation_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unicast_buffer_allocation_profile(self):
    self.__unicast_buffer_allocation_profile = YANGDynClass(base=str, is_leaf=True, yang_name="unicast-buffer-allocation-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  buffer_allocation_profile = __builtin__.property(_get_buffer_allocation_profile, _set_buffer_allocation_profile)
  multicast_buffer_allocation_profile = __builtin__.property(_get_multicast_buffer_allocation_profile, _set_multicast_buffer_allocation_profile)
  unicast_buffer_allocation_profile = __builtin__.property(_get_unicast_buffer_allocation_profile, _set_unicast_buffer_allocation_profile)


  _pyangbind_elements = OrderedDict([('buffer_allocation_profile', buffer_allocation_profile), ('multicast_buffer_allocation_profile', multicast_buffer_allocation_profile), ('unicast_buffer_allocation_profile', unicast_buffer_allocation_profile), ])


