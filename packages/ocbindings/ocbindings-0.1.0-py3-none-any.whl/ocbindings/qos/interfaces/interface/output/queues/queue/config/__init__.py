# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/output/queues/queue/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for the queue associated with the
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__queue_management_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    self.__queue_management_profile = YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'output', 'queues', 'queue', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)


  def _get_queue_management_profile(self):
    """
    Getter method for queue_management_profile, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/queue_management_profile (leafref)

    YANG Description: The queue management profile that is to be used for the queue
on the interface.

For example, the system may use a profile which specifies that
WRED curves are used for setting an ECN mark in the IP header
instead of dropping a packet in order to signal impending
congestion and for determining when there is sufficient
congestion to tail drop packets.

A single profile is available per queue - which applies to all packets
that are enqueued to the specified queue, whether they are unicast or
multicast.
    """
    return self.__queue_management_profile
      
  def _set_queue_management_profile(self, v, load=False):
    """
    Setter method for queue_management_profile, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/queue_management_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_management_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_management_profile() directly.

    YANG Description: The queue management profile that is to be used for the queue
on the interface.

For example, the system may use a profile which specifies that
WRED curves are used for setting an ECN mark in the IP header
instead of dropping a packet in order to signal impending
congestion and for determining when there is sufficient
congestion to tail drop packets.

A single profile is available per queue - which applies to all packets
that are enqueued to the specified queue, whether they are unicast or
multicast.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_management_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__queue_management_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_management_profile(self):
    self.__queue_management_profile = YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  queue_management_profile = __builtin__.property(_get_queue_management_profile, _set_queue_management_profile)


  _pyangbind_elements = OrderedDict([('name', name), ('queue_management_profile', queue_management_profile), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/output/queues/queue/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for the queue associated with the
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__queue_management_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    self.__queue_management_profile = YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'output', 'queues', 'queue', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)


  def _get_queue_management_profile(self):
    """
    Getter method for queue_management_profile, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/queue_management_profile (leafref)

    YANG Description: The queue management profile that is to be used for the queue
on the interface.

For example, the system may use a profile which specifies that
WRED curves are used for setting an ECN mark in the IP header
instead of dropping a packet in order to signal impending
congestion and for determining when there is sufficient
congestion to tail drop packets.

A single profile is available per queue - which applies to all packets
that are enqueued to the specified queue, whether they are unicast or
multicast.
    """
    return self.__queue_management_profile
      
  def _set_queue_management_profile(self, v, load=False):
    """
    Setter method for queue_management_profile, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/queue_management_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_management_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_management_profile() directly.

    YANG Description: The queue management profile that is to be used for the queue
on the interface.

For example, the system may use a profile which specifies that
WRED curves are used for setting an ECN mark in the IP header
instead of dropping a packet in order to signal impending
congestion and for determining when there is sufficient
congestion to tail drop packets.

A single profile is available per queue - which applies to all packets
that are enqueued to the specified queue, whether they are unicast or
multicast.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_management_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__queue_management_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_management_profile(self):
    self.__queue_management_profile = YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  queue_management_profile = __builtin__.property(_get_queue_management_profile, _set_queue_management_profile)


  _pyangbind_elements = OrderedDict([('name', name), ('queue_management_profile', queue_management_profile), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/output/queues/queue/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for the queue associated with the
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__queue_management_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    self.__queue_management_profile = YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'output', 'queues', 'queue', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)


  def _get_queue_management_profile(self):
    """
    Getter method for queue_management_profile, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/queue_management_profile (leafref)

    YANG Description: The queue management profile that is to be used for the queue
on the interface.

For example, the system may use a profile which specifies that
WRED curves are used for setting an ECN mark in the IP header
instead of dropping a packet in order to signal impending
congestion and for determining when there is sufficient
congestion to tail drop packets.

A single profile is available per queue - which applies to all packets
that are enqueued to the specified queue, whether they are unicast or
multicast.
    """
    return self.__queue_management_profile
      
  def _set_queue_management_profile(self, v, load=False):
    """
    Setter method for queue_management_profile, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/queue_management_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_management_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_management_profile() directly.

    YANG Description: The queue management profile that is to be used for the queue
on the interface.

For example, the system may use a profile which specifies that
WRED curves are used for setting an ECN mark in the IP header
instead of dropping a packet in order to signal impending
congestion and for determining when there is sufficient
congestion to tail drop packets.

A single profile is available per queue - which applies to all packets
that are enqueued to the specified queue, whether they are unicast or
multicast.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_management_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__queue_management_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_management_profile(self):
    self.__queue_management_profile = YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  queue_management_profile = __builtin__.property(_get_queue_management_profile, _set_queue_management_profile)


  _pyangbind_elements = OrderedDict([('name', name), ('queue_management_profile', queue_management_profile), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/interfaces/interface/output/queues/queue/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for the queue associated with the
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__queue_management_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    self.__queue_management_profile = YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'output', 'queues', 'queue', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)


  def _get_queue_management_profile(self):
    """
    Getter method for queue_management_profile, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/queue_management_profile (leafref)

    YANG Description: The queue management profile that is to be used for the queue
on the interface.

For example, the system may use a profile which specifies that
WRED curves are used for setting an ECN mark in the IP header
instead of dropping a packet in order to signal impending
congestion and for determining when there is sufficient
congestion to tail drop packets.

A single profile is available per queue - which applies to all packets
that are enqueued to the specified queue, whether they are unicast or
multicast.
    """
    return self.__queue_management_profile
      
  def _set_queue_management_profile(self, v, load=False):
    """
    Setter method for queue_management_profile, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/queue_management_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_management_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_management_profile() directly.

    YANG Description: The queue management profile that is to be used for the queue
on the interface.

For example, the system may use a profile which specifies that
WRED curves are used for setting an ECN mark in the IP header
instead of dropping a packet in order to signal impending
congestion and for determining when there is sufficient
congestion to tail drop packets.

A single profile is available per queue - which applies to all packets
that are enqueued to the specified queue, whether they are unicast or
multicast.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_management_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__queue_management_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_management_profile(self):
    self.__queue_management_profile = YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  queue_management_profile = __builtin__.property(_get_queue_management_profile, _set_queue_management_profile)


  _pyangbind_elements = OrderedDict([('name', name), ('queue_management_profile', queue_management_profile), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/output/queues/queue/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for the queue associated with the
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__queue_management_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    self.__queue_management_profile = YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'output', 'queues', 'queue', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)


  def _get_queue_management_profile(self):
    """
    Getter method for queue_management_profile, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/queue_management_profile (leafref)

    YANG Description: The queue management profile that is to be used for the queue
on the interface.

For example, the system may use a profile which specifies that
WRED curves are used for setting an ECN mark in the IP header
instead of dropping a packet in order to signal impending
congestion and for determining when there is sufficient
congestion to tail drop packets.

A single profile is available per queue - which applies to all packets
that are enqueued to the specified queue, whether they are unicast or
multicast.
    """
    return self.__queue_management_profile
      
  def _set_queue_management_profile(self, v, load=False):
    """
    Setter method for queue_management_profile, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/queue_management_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_management_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_management_profile() directly.

    YANG Description: The queue management profile that is to be used for the queue
on the interface.

For example, the system may use a profile which specifies that
WRED curves are used for setting an ECN mark in the IP header
instead of dropping a packet in order to signal impending
congestion and for determining when there is sufficient
congestion to tail drop packets.

A single profile is available per queue - which applies to all packets
that are enqueued to the specified queue, whether they are unicast or
multicast.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_management_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__queue_management_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_management_profile(self):
    self.__queue_management_profile = YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  queue_management_profile = __builtin__.property(_get_queue_management_profile, _set_queue_management_profile)


  _pyangbind_elements = OrderedDict([('name', name), ('queue_management_profile', queue_management_profile), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/output/queues/queue/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for the queue associated with the
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__queue_management_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    self.__queue_management_profile = YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'output', 'queues', 'queue', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)


  def _get_queue_management_profile(self):
    """
    Getter method for queue_management_profile, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/queue_management_profile (leafref)

    YANG Description: The queue management profile that is to be used for the queue
on the interface.

For example, the system may use a profile which specifies that
WRED curves are used for setting an ECN mark in the IP header
instead of dropping a packet in order to signal impending
congestion and for determining when there is sufficient
congestion to tail drop packets.

A single profile is available per queue - which applies to all packets
that are enqueued to the specified queue, whether they are unicast or
multicast.
    """
    return self.__queue_management_profile
      
  def _set_queue_management_profile(self, v, load=False):
    """
    Setter method for queue_management_profile, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/queue_management_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_management_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_management_profile() directly.

    YANG Description: The queue management profile that is to be used for the queue
on the interface.

For example, the system may use a profile which specifies that
WRED curves are used for setting an ECN mark in the IP header
instead of dropping a packet in order to signal impending
congestion and for determining when there is sufficient
congestion to tail drop packets.

A single profile is available per queue - which applies to all packets
that are enqueued to the specified queue, whether they are unicast or
multicast.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_management_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__queue_management_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_management_profile(self):
    self.__queue_management_profile = YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  queue_management_profile = __builtin__.property(_get_queue_management_profile, _set_queue_management_profile)


  _pyangbind_elements = OrderedDict([('name', name), ('queue_management_profile', queue_management_profile), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/output/queues/queue/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for the queue associated with the
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__queue_management_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    self.__queue_management_profile = YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'output', 'queues', 'queue', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)


  def _get_queue_management_profile(self):
    """
    Getter method for queue_management_profile, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/queue_management_profile (leafref)

    YANG Description: The queue management profile that is to be used for the queue
on the interface.

For example, the system may use a profile which specifies that
WRED curves are used for setting an ECN mark in the IP header
instead of dropping a packet in order to signal impending
congestion and for determining when there is sufficient
congestion to tail drop packets.

A single profile is available per queue - which applies to all packets
that are enqueued to the specified queue, whether they are unicast or
multicast.
    """
    return self.__queue_management_profile
      
  def _set_queue_management_profile(self, v, load=False):
    """
    Setter method for queue_management_profile, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/queue_management_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_management_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_management_profile() directly.

    YANG Description: The queue management profile that is to be used for the queue
on the interface.

For example, the system may use a profile which specifies that
WRED curves are used for setting an ECN mark in the IP header
instead of dropping a packet in order to signal impending
congestion and for determining when there is sufficient
congestion to tail drop packets.

A single profile is available per queue - which applies to all packets
that are enqueued to the specified queue, whether they are unicast or
multicast.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_management_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__queue_management_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_management_profile(self):
    self.__queue_management_profile = YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  queue_management_profile = __builtin__.property(_get_queue_management_profile, _set_queue_management_profile)


  _pyangbind_elements = OrderedDict([('name', name), ('queue_management_profile', queue_management_profile), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/interfaces/interface/output/queues/queue/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for the queue associated with the
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__queue_management_profile',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    self.__queue_management_profile = YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'interfaces', 'interface', 'output', 'queues', 'queue', 'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)


  def _get_queue_management_profile(self):
    """
    Getter method for queue_management_profile, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/queue_management_profile (leafref)

    YANG Description: The queue management profile that is to be used for the queue
on the interface.

For example, the system may use a profile which specifies that
WRED curves are used for setting an ECN mark in the IP header
instead of dropping a packet in order to signal impending
congestion and for determining when there is sufficient
congestion to tail drop packets.

A single profile is available per queue - which applies to all packets
that are enqueued to the specified queue, whether they are unicast or
multicast.
    """
    return self.__queue_management_profile
      
  def _set_queue_management_profile(self, v, load=False):
    """
    Setter method for queue_management_profile, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/queue_management_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_management_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_management_profile() directly.

    YANG Description: The queue management profile that is to be used for the queue
on the interface.

For example, the system may use a profile which specifies that
WRED curves are used for setting an ECN mark in the IP header
instead of dropping a packet in order to signal impending
congestion and for determining when there is sufficient
congestion to tail drop packets.

A single profile is available per queue - which applies to all packets
that are enqueued to the specified queue, whether they are unicast or
multicast.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_management_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__queue_management_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_management_profile(self):
    self.__queue_management_profile = YANGDynClass(base=str, is_leaf=True, yang_name="queue-management-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  queue_management_profile = __builtin__.property(_get_queue_management_profile, _set_queue_management_profile)


  _pyangbind_elements = OrderedDict([('name', name), ('queue_management_profile', queue_management_profile), ])


