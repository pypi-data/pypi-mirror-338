# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 1 rate, 2 color shapers
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__bc','__queuing_behavior','__max_queue_depth_bytes','__max_queue_depth_packets','__max_queue_depth_percent',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'one-rate-two-color', 'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_queuing_behavior(self):
    """
    Getter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)

    YANG Description: The type of scheduler that is being configured.
    """
    return self.__queuing_behavior
      
  def _set_queuing_behavior(self, v, load=False):
    """
    Setter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queuing_behavior is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queuing_behavior() directly.

    YANG Description: The type of scheduler that is being configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queuing_behavior must be of a type compatible with oc-qos-types:queue-behavior""",
          'defined-type': "oc-qos-types:queue-behavior",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)""",
        })

    self.__queuing_behavior = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queuing_behavior(self):
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)


  def _get_max_queue_depth_bytes(self):
    """
    Getter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    return self.__max_queue_depth_bytes
      
  def _set_max_queue_depth_bytes(self, v, load=False):
    """
    Setter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_bytes() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_bytes must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_bytes(self):
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_packets(self):
    """
    Getter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    return self.__max_queue_depth_packets
      
  def _set_max_queue_depth_packets(self, v, load=False):
    """
    Setter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_packets() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_packets must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_packets(self):
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_percent(self):
    """
    Getter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    return self.__max_queue_depth_percent
      
  def _set_max_queue_depth_percent(self, v, load=False):
    """
    Setter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_percent() directly.

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__max_queue_depth_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_percent(self):
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  queuing_behavior = __builtin__.property(_get_queuing_behavior, _set_queuing_behavior)
  max_queue_depth_bytes = __builtin__.property(_get_max_queue_depth_bytes, _set_max_queue_depth_bytes)
  max_queue_depth_packets = __builtin__.property(_get_max_queue_depth_packets, _set_max_queue_depth_packets)
  max_queue_depth_percent = __builtin__.property(_get_max_queue_depth_percent, _set_max_queue_depth_percent)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('bc', bc), ('queuing_behavior', queuing_behavior), ('max_queue_depth_bytes', max_queue_depth_bytes), ('max_queue_depth_packets', max_queue_depth_packets), ('max_queue_depth_percent', max_queue_depth_percent), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 1 rate, 2 color shapers
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__bc','__queuing_behavior','__max_queue_depth_bytes','__max_queue_depth_packets','__max_queue_depth_percent',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'one-rate-two-color', 'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_queuing_behavior(self):
    """
    Getter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)

    YANG Description: The type of scheduler that is being configured.
    """
    return self.__queuing_behavior
      
  def _set_queuing_behavior(self, v, load=False):
    """
    Setter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queuing_behavior is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queuing_behavior() directly.

    YANG Description: The type of scheduler that is being configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queuing_behavior must be of a type compatible with oc-qos-types:queue-behavior""",
          'defined-type': "oc-qos-types:queue-behavior",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)""",
        })

    self.__queuing_behavior = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queuing_behavior(self):
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)


  def _get_max_queue_depth_bytes(self):
    """
    Getter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    return self.__max_queue_depth_bytes
      
  def _set_max_queue_depth_bytes(self, v, load=False):
    """
    Setter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_bytes() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_bytes must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_bytes(self):
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_packets(self):
    """
    Getter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    return self.__max_queue_depth_packets
      
  def _set_max_queue_depth_packets(self, v, load=False):
    """
    Setter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_packets() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_packets must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_packets(self):
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_percent(self):
    """
    Getter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    return self.__max_queue_depth_percent
      
  def _set_max_queue_depth_percent(self, v, load=False):
    """
    Setter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_percent() directly.

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__max_queue_depth_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_percent(self):
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  queuing_behavior = __builtin__.property(_get_queuing_behavior, _set_queuing_behavior)
  max_queue_depth_bytes = __builtin__.property(_get_max_queue_depth_bytes, _set_max_queue_depth_bytes)
  max_queue_depth_packets = __builtin__.property(_get_max_queue_depth_packets, _set_max_queue_depth_packets)
  max_queue_depth_percent = __builtin__.property(_get_max_queue_depth_percent, _set_max_queue_depth_percent)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('bc', bc), ('queuing_behavior', queuing_behavior), ('max_queue_depth_bytes', max_queue_depth_bytes), ('max_queue_depth_packets', max_queue_depth_packets), ('max_queue_depth_percent', max_queue_depth_percent), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 1 rate, 2 color shapers
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__bc','__queuing_behavior','__max_queue_depth_bytes','__max_queue_depth_packets','__max_queue_depth_percent',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'one-rate-two-color', 'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_queuing_behavior(self):
    """
    Getter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)

    YANG Description: The type of scheduler that is being configured.
    """
    return self.__queuing_behavior
      
  def _set_queuing_behavior(self, v, load=False):
    """
    Setter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queuing_behavior is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queuing_behavior() directly.

    YANG Description: The type of scheduler that is being configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queuing_behavior must be of a type compatible with oc-qos-types:queue-behavior""",
          'defined-type': "oc-qos-types:queue-behavior",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)""",
        })

    self.__queuing_behavior = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queuing_behavior(self):
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)


  def _get_max_queue_depth_bytes(self):
    """
    Getter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    return self.__max_queue_depth_bytes
      
  def _set_max_queue_depth_bytes(self, v, load=False):
    """
    Setter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_bytes() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_bytes must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_bytes(self):
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_packets(self):
    """
    Getter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    return self.__max_queue_depth_packets
      
  def _set_max_queue_depth_packets(self, v, load=False):
    """
    Setter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_packets() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_packets must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_packets(self):
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_percent(self):
    """
    Getter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    return self.__max_queue_depth_percent
      
  def _set_max_queue_depth_percent(self, v, load=False):
    """
    Setter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_percent() directly.

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__max_queue_depth_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_percent(self):
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  queuing_behavior = __builtin__.property(_get_queuing_behavior, _set_queuing_behavior)
  max_queue_depth_bytes = __builtin__.property(_get_max_queue_depth_bytes, _set_max_queue_depth_bytes)
  max_queue_depth_packets = __builtin__.property(_get_max_queue_depth_packets, _set_max_queue_depth_packets)
  max_queue_depth_percent = __builtin__.property(_get_max_queue_depth_percent, _set_max_queue_depth_percent)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('bc', bc), ('queuing_behavior', queuing_behavior), ('max_queue_depth_bytes', max_queue_depth_bytes), ('max_queue_depth_packets', max_queue_depth_packets), ('max_queue_depth_percent', max_queue_depth_percent), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 1 rate, 2 color shapers
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__bc','__queuing_behavior','__max_queue_depth_bytes','__max_queue_depth_packets','__max_queue_depth_percent',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'one-rate-two-color', 'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_queuing_behavior(self):
    """
    Getter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)

    YANG Description: The type of scheduler that is being configured.
    """
    return self.__queuing_behavior
      
  def _set_queuing_behavior(self, v, load=False):
    """
    Setter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queuing_behavior is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queuing_behavior() directly.

    YANG Description: The type of scheduler that is being configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queuing_behavior must be of a type compatible with oc-qos-types:queue-behavior""",
          'defined-type': "oc-qos-types:queue-behavior",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)""",
        })

    self.__queuing_behavior = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queuing_behavior(self):
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)


  def _get_max_queue_depth_bytes(self):
    """
    Getter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    return self.__max_queue_depth_bytes
      
  def _set_max_queue_depth_bytes(self, v, load=False):
    """
    Setter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_bytes() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_bytes must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_bytes(self):
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_packets(self):
    """
    Getter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    return self.__max_queue_depth_packets
      
  def _set_max_queue_depth_packets(self, v, load=False):
    """
    Setter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_packets() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_packets must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_packets(self):
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_percent(self):
    """
    Getter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    return self.__max_queue_depth_percent
      
  def _set_max_queue_depth_percent(self, v, load=False):
    """
    Setter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_percent() directly.

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__max_queue_depth_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_percent(self):
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  queuing_behavior = __builtin__.property(_get_queuing_behavior, _set_queuing_behavior)
  max_queue_depth_bytes = __builtin__.property(_get_max_queue_depth_bytes, _set_max_queue_depth_bytes)
  max_queue_depth_packets = __builtin__.property(_get_max_queue_depth_packets, _set_max_queue_depth_packets)
  max_queue_depth_percent = __builtin__.property(_get_max_queue_depth_percent, _set_max_queue_depth_percent)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('bc', bc), ('queuing_behavior', queuing_behavior), ('max_queue_depth_bytes', max_queue_depth_bytes), ('max_queue_depth_packets', max_queue_depth_packets), ('max_queue_depth_percent', max_queue_depth_percent), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 1 rate, 2 color shapers
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__bc','__queuing_behavior','__max_queue_depth_bytes','__max_queue_depth_packets','__max_queue_depth_percent',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'one-rate-two-color', 'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_queuing_behavior(self):
    """
    Getter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)

    YANG Description: The type of scheduler that is being configured.
    """
    return self.__queuing_behavior
      
  def _set_queuing_behavior(self, v, load=False):
    """
    Setter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queuing_behavior is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queuing_behavior() directly.

    YANG Description: The type of scheduler that is being configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queuing_behavior must be of a type compatible with oc-qos-types:queue-behavior""",
          'defined-type': "oc-qos-types:queue-behavior",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)""",
        })

    self.__queuing_behavior = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queuing_behavior(self):
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)


  def _get_max_queue_depth_bytes(self):
    """
    Getter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    return self.__max_queue_depth_bytes
      
  def _set_max_queue_depth_bytes(self, v, load=False):
    """
    Setter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_bytes() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_bytes must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_bytes(self):
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_packets(self):
    """
    Getter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    return self.__max_queue_depth_packets
      
  def _set_max_queue_depth_packets(self, v, load=False):
    """
    Setter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_packets() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_packets must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_packets(self):
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_percent(self):
    """
    Getter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    return self.__max_queue_depth_percent
      
  def _set_max_queue_depth_percent(self, v, load=False):
    """
    Setter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_percent() directly.

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__max_queue_depth_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_percent(self):
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  queuing_behavior = __builtin__.property(_get_queuing_behavior, _set_queuing_behavior)
  max_queue_depth_bytes = __builtin__.property(_get_max_queue_depth_bytes, _set_max_queue_depth_bytes)
  max_queue_depth_packets = __builtin__.property(_get_max_queue_depth_packets, _set_max_queue_depth_packets)
  max_queue_depth_percent = __builtin__.property(_get_max_queue_depth_percent, _set_max_queue_depth_percent)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('bc', bc), ('queuing_behavior', queuing_behavior), ('max_queue_depth_bytes', max_queue_depth_bytes), ('max_queue_depth_packets', max_queue_depth_packets), ('max_queue_depth_percent', max_queue_depth_percent), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 1 rate, 2 color shapers
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__bc','__queuing_behavior','__max_queue_depth_bytes','__max_queue_depth_packets','__max_queue_depth_percent',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'one-rate-two-color', 'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_queuing_behavior(self):
    """
    Getter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)

    YANG Description: The type of scheduler that is being configured.
    """
    return self.__queuing_behavior
      
  def _set_queuing_behavior(self, v, load=False):
    """
    Setter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queuing_behavior is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queuing_behavior() directly.

    YANG Description: The type of scheduler that is being configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queuing_behavior must be of a type compatible with oc-qos-types:queue-behavior""",
          'defined-type': "oc-qos-types:queue-behavior",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)""",
        })

    self.__queuing_behavior = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queuing_behavior(self):
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)


  def _get_max_queue_depth_bytes(self):
    """
    Getter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    return self.__max_queue_depth_bytes
      
  def _set_max_queue_depth_bytes(self, v, load=False):
    """
    Setter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_bytes() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_bytes must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_bytes(self):
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_packets(self):
    """
    Getter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    return self.__max_queue_depth_packets
      
  def _set_max_queue_depth_packets(self, v, load=False):
    """
    Setter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_packets() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_packets must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_packets(self):
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_percent(self):
    """
    Getter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    return self.__max_queue_depth_percent
      
  def _set_max_queue_depth_percent(self, v, load=False):
    """
    Setter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_percent() directly.

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__max_queue_depth_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_percent(self):
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  queuing_behavior = __builtin__.property(_get_queuing_behavior, _set_queuing_behavior)
  max_queue_depth_bytes = __builtin__.property(_get_max_queue_depth_bytes, _set_max_queue_depth_bytes)
  max_queue_depth_packets = __builtin__.property(_get_max_queue_depth_packets, _set_max_queue_depth_packets)
  max_queue_depth_percent = __builtin__.property(_get_max_queue_depth_percent, _set_max_queue_depth_percent)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('bc', bc), ('queuing_behavior', queuing_behavior), ('max_queue_depth_bytes', max_queue_depth_bytes), ('max_queue_depth_packets', max_queue_depth_packets), ('max_queue_depth_percent', max_queue_depth_percent), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 1 rate, 2 color shapers
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__bc','__queuing_behavior','__max_queue_depth_bytes','__max_queue_depth_packets','__max_queue_depth_percent',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'one-rate-two-color', 'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_queuing_behavior(self):
    """
    Getter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)

    YANG Description: The type of scheduler that is being configured.
    """
    return self.__queuing_behavior
      
  def _set_queuing_behavior(self, v, load=False):
    """
    Setter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queuing_behavior is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queuing_behavior() directly.

    YANG Description: The type of scheduler that is being configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queuing_behavior must be of a type compatible with oc-qos-types:queue-behavior""",
          'defined-type': "oc-qos-types:queue-behavior",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)""",
        })

    self.__queuing_behavior = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queuing_behavior(self):
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)


  def _get_max_queue_depth_bytes(self):
    """
    Getter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    return self.__max_queue_depth_bytes
      
  def _set_max_queue_depth_bytes(self, v, load=False):
    """
    Setter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_bytes() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_bytes must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_bytes(self):
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_packets(self):
    """
    Getter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    return self.__max_queue_depth_packets
      
  def _set_max_queue_depth_packets(self, v, load=False):
    """
    Setter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_packets() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_packets must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_packets(self):
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_percent(self):
    """
    Getter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    return self.__max_queue_depth_percent
      
  def _set_max_queue_depth_percent(self, v, load=False):
    """
    Setter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_percent() directly.

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__max_queue_depth_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_percent(self):
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  queuing_behavior = __builtin__.property(_get_queuing_behavior, _set_queuing_behavior)
  max_queue_depth_bytes = __builtin__.property(_get_max_queue_depth_bytes, _set_max_queue_depth_bytes)
  max_queue_depth_packets = __builtin__.property(_get_max_queue_depth_packets, _set_max_queue_depth_packets)
  max_queue_depth_percent = __builtin__.property(_get_max_queue_depth_percent, _set_max_queue_depth_percent)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('bc', bc), ('queuing_behavior', queuing_behavior), ('max_queue_depth_bytes', max_queue_depth_bytes), ('max_queue_depth_packets', max_queue_depth_packets), ('max_queue_depth_percent', max_queue_depth_percent), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 1 rate, 2 color shapers
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__bc','__queuing_behavior','__max_queue_depth_bytes','__max_queue_depth_packets','__max_queue_depth_percent',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'one-rate-two-color', 'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_queuing_behavior(self):
    """
    Getter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)

    YANG Description: The type of scheduler that is being configured.
    """
    return self.__queuing_behavior
      
  def _set_queuing_behavior(self, v, load=False):
    """
    Setter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queuing_behavior is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queuing_behavior() directly.

    YANG Description: The type of scheduler that is being configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queuing_behavior must be of a type compatible with oc-qos-types:queue-behavior""",
          'defined-type': "oc-qos-types:queue-behavior",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)""",
        })

    self.__queuing_behavior = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queuing_behavior(self):
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'SHAPE': {}, 'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)


  def _get_max_queue_depth_bytes(self):
    """
    Getter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    return self.__max_queue_depth_bytes
      
  def _set_max_queue_depth_bytes(self, v, load=False):
    """
    Setter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_bytes() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_bytes must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_bytes(self):
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_packets(self):
    """
    Getter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    return self.__max_queue_depth_packets
      
  def _set_max_queue_depth_packets(self, v, load=False):
    """
    Setter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_packets() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_packets must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_packets(self):
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_percent(self):
    """
    Getter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    return self.__max_queue_depth_percent
      
  def _set_max_queue_depth_percent(self, v, load=False):
    """
    Setter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_percent() directly.

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__max_queue_depth_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_percent(self):
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  queuing_behavior = __builtin__.property(_get_queuing_behavior, _set_queuing_behavior)
  max_queue_depth_bytes = __builtin__.property(_get_max_queue_depth_bytes, _set_max_queue_depth_bytes)
  max_queue_depth_packets = __builtin__.property(_get_max_queue_depth_packets, _set_max_queue_depth_packets)
  max_queue_depth_percent = __builtin__.property(_get_max_queue_depth_percent, _set_max_queue_depth_percent)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('bc', bc), ('queuing_behavior', queuing_behavior), ('max_queue_depth_bytes', max_queue_depth_bytes), ('max_queue_depth_packets', max_queue_depth_packets), ('max_queue_depth_percent', max_queue_depth_percent), ])


