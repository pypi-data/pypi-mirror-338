# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import config
from . import state
from . import conform_action
from . import exceed_action
from . import violate_action
class two_rate_three_color(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data for a 2 rate, 3 color policer.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__conform_action','__exceed_action','__violate_action',)

  _yang_name = 'two-rate-three-color'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    self.__conform_action = YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__exceed_action = YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__violate_action = YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'two-rate-three-color']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)


  def _get_conform_action(self):
    """
    Getter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    return self.__conform_action
      
  def _set_conform_action(self, v, load=False):
    """
    Setter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conform_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conform_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conform_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__conform_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conform_action(self):
    self.__conform_action = YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_exceed_action(self):
    """
    Getter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    return self.__exceed_action
      
  def _set_exceed_action(self, v, load=False):
    """
    Setter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceed_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceed_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceed_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__exceed_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceed_action(self):
    self.__exceed_action = YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_violate_action(self):
    """
    Getter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    return self.__violate_action
      
  def _set_violate_action(self, v, load=False):
    """
    Setter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violate_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violate_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violate_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__violate_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violate_action(self):
    self.__violate_action = YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  conform_action = __builtin__.property(_get_conform_action, _set_conform_action)
  exceed_action = __builtin__.property(_get_exceed_action, _set_exceed_action)
  violate_action = __builtin__.property(_get_violate_action, _set_violate_action)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('conform_action', conform_action), ('exceed_action', exceed_action), ('violate_action', violate_action), ])


from . import config
from . import state
from . import conform_action
from . import exceed_action
from . import violate_action
class two_rate_three_color(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data for a 2 rate, 3 color policer.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__conform_action','__exceed_action','__violate_action',)

  _yang_name = 'two-rate-three-color'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    self.__conform_action = YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__exceed_action = YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__violate_action = YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'two-rate-three-color']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)


  def _get_conform_action(self):
    """
    Getter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    return self.__conform_action
      
  def _set_conform_action(self, v, load=False):
    """
    Setter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conform_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conform_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conform_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__conform_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conform_action(self):
    self.__conform_action = YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_exceed_action(self):
    """
    Getter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    return self.__exceed_action
      
  def _set_exceed_action(self, v, load=False):
    """
    Setter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceed_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceed_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceed_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__exceed_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceed_action(self):
    self.__exceed_action = YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_violate_action(self):
    """
    Getter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    return self.__violate_action
      
  def _set_violate_action(self, v, load=False):
    """
    Setter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violate_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violate_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violate_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__violate_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violate_action(self):
    self.__violate_action = YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  conform_action = __builtin__.property(_get_conform_action, _set_conform_action)
  exceed_action = __builtin__.property(_get_exceed_action, _set_exceed_action)
  violate_action = __builtin__.property(_get_violate_action, _set_violate_action)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('conform_action', conform_action), ('exceed_action', exceed_action), ('violate_action', violate_action), ])


from . import config
from . import state
from . import conform_action
from . import exceed_action
from . import violate_action
class two_rate_three_color(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data for a 2 rate, 3 color policer.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__conform_action','__exceed_action','__violate_action',)

  _yang_name = 'two-rate-three-color'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    self.__conform_action = YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__exceed_action = YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__violate_action = YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'two-rate-three-color']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)


  def _get_conform_action(self):
    """
    Getter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    return self.__conform_action
      
  def _set_conform_action(self, v, load=False):
    """
    Setter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conform_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conform_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conform_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__conform_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conform_action(self):
    self.__conform_action = YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_exceed_action(self):
    """
    Getter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    return self.__exceed_action
      
  def _set_exceed_action(self, v, load=False):
    """
    Setter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceed_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceed_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceed_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__exceed_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceed_action(self):
    self.__exceed_action = YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_violate_action(self):
    """
    Getter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    return self.__violate_action
      
  def _set_violate_action(self, v, load=False):
    """
    Setter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violate_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violate_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violate_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__violate_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violate_action(self):
    self.__violate_action = YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  conform_action = __builtin__.property(_get_conform_action, _set_conform_action)
  exceed_action = __builtin__.property(_get_exceed_action, _set_exceed_action)
  violate_action = __builtin__.property(_get_violate_action, _set_violate_action)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('conform_action', conform_action), ('exceed_action', exceed_action), ('violate_action', violate_action), ])


from . import config
from . import state
from . import conform_action
from . import exceed_action
from . import violate_action
class two_rate_three_color(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data for a 2 rate, 3 color policer.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__conform_action','__exceed_action','__violate_action',)

  _yang_name = 'two-rate-three-color'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    self.__conform_action = YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__exceed_action = YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__violate_action = YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'two-rate-three-color']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)


  def _get_conform_action(self):
    """
    Getter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    return self.__conform_action
      
  def _set_conform_action(self, v, load=False):
    """
    Setter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conform_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conform_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conform_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__conform_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conform_action(self):
    self.__conform_action = YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_exceed_action(self):
    """
    Getter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    return self.__exceed_action
      
  def _set_exceed_action(self, v, load=False):
    """
    Setter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceed_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceed_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceed_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__exceed_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceed_action(self):
    self.__exceed_action = YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_violate_action(self):
    """
    Getter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    return self.__violate_action
      
  def _set_violate_action(self, v, load=False):
    """
    Setter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violate_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violate_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violate_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__violate_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violate_action(self):
    self.__violate_action = YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  conform_action = __builtin__.property(_get_conform_action, _set_conform_action)
  exceed_action = __builtin__.property(_get_exceed_action, _set_exceed_action)
  violate_action = __builtin__.property(_get_violate_action, _set_violate_action)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('conform_action', conform_action), ('exceed_action', exceed_action), ('violate_action', violate_action), ])


from . import config
from . import state
from . import conform_action
from . import exceed_action
from . import violate_action
class two_rate_three_color(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data for a 2 rate, 3 color policer.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__conform_action','__exceed_action','__violate_action',)

  _yang_name = 'two-rate-three-color'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    self.__conform_action = YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__exceed_action = YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__violate_action = YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'two-rate-three-color']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)


  def _get_conform_action(self):
    """
    Getter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    return self.__conform_action
      
  def _set_conform_action(self, v, load=False):
    """
    Setter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conform_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conform_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conform_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__conform_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conform_action(self):
    self.__conform_action = YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_exceed_action(self):
    """
    Getter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    return self.__exceed_action
      
  def _set_exceed_action(self, v, load=False):
    """
    Setter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceed_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceed_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceed_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__exceed_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceed_action(self):
    self.__exceed_action = YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_violate_action(self):
    """
    Getter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    return self.__violate_action
      
  def _set_violate_action(self, v, load=False):
    """
    Setter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violate_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violate_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violate_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__violate_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violate_action(self):
    self.__violate_action = YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  conform_action = __builtin__.property(_get_conform_action, _set_conform_action)
  exceed_action = __builtin__.property(_get_exceed_action, _set_exceed_action)
  violate_action = __builtin__.property(_get_violate_action, _set_violate_action)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('conform_action', conform_action), ('exceed_action', exceed_action), ('violate_action', violate_action), ])


from . import config
from . import state
from . import conform_action
from . import exceed_action
from . import violate_action
class two_rate_three_color(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data for a 2 rate, 3 color policer.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__conform_action','__exceed_action','__violate_action',)

  _yang_name = 'two-rate-three-color'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    self.__conform_action = YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__exceed_action = YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__violate_action = YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'two-rate-three-color']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)


  def _get_conform_action(self):
    """
    Getter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    return self.__conform_action
      
  def _set_conform_action(self, v, load=False):
    """
    Setter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conform_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conform_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conform_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__conform_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conform_action(self):
    self.__conform_action = YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_exceed_action(self):
    """
    Getter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    return self.__exceed_action
      
  def _set_exceed_action(self, v, load=False):
    """
    Setter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceed_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceed_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceed_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__exceed_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceed_action(self):
    self.__exceed_action = YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_violate_action(self):
    """
    Getter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    return self.__violate_action
      
  def _set_violate_action(self, v, load=False):
    """
    Setter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violate_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violate_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violate_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__violate_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violate_action(self):
    self.__violate_action = YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  conform_action = __builtin__.property(_get_conform_action, _set_conform_action)
  exceed_action = __builtin__.property(_get_exceed_action, _set_exceed_action)
  violate_action = __builtin__.property(_get_violate_action, _set_violate_action)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('conform_action', conform_action), ('exceed_action', exceed_action), ('violate_action', violate_action), ])


from . import config
from . import state
from . import conform_action
from . import exceed_action
from . import violate_action
class two_rate_three_color(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data for a 2 rate, 3 color policer.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__conform_action','__exceed_action','__violate_action',)

  _yang_name = 'two-rate-three-color'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    self.__conform_action = YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__exceed_action = YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__violate_action = YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'two-rate-three-color']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)


  def _get_conform_action(self):
    """
    Getter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    return self.__conform_action
      
  def _set_conform_action(self, v, load=False):
    """
    Setter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conform_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conform_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conform_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__conform_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conform_action(self):
    self.__conform_action = YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_exceed_action(self):
    """
    Getter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    return self.__exceed_action
      
  def _set_exceed_action(self, v, load=False):
    """
    Setter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceed_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceed_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceed_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__exceed_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceed_action(self):
    self.__exceed_action = YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_violate_action(self):
    """
    Getter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    return self.__violate_action
      
  def _set_violate_action(self, v, load=False):
    """
    Setter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violate_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violate_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violate_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__violate_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violate_action(self):
    self.__violate_action = YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  conform_action = __builtin__.property(_get_conform_action, _set_conform_action)
  exceed_action = __builtin__.property(_get_exceed_action, _set_exceed_action)
  violate_action = __builtin__.property(_get_violate_action, _set_violate_action)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('conform_action', conform_action), ('exceed_action', exceed_action), ('violate_action', violate_action), ])


from . import config
from . import state
from . import conform_action
from . import exceed_action
from . import violate_action
class two_rate_three_color(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data for a 2 rate, 3 color policer.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__conform_action','__exceed_action','__violate_action',)

  _yang_name = 'two-rate-three-color'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    self.__conform_action = YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__exceed_action = YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__violate_action = YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'two-rate-three-color']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)


  def _get_conform_action(self):
    """
    Getter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    return self.__conform_action
      
  def _set_conform_action(self, v, load=False):
    """
    Setter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conform_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conform_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conform_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__conform_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conform_action(self):
    self.__conform_action = YANGDynClass(base=conform_action.conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_exceed_action(self):
    """
    Getter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    return self.__exceed_action
      
  def _set_exceed_action(self, v, load=False):
    """
    Setter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceed_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceed_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceed_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__exceed_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceed_action(self):
    self.__exceed_action = YANGDynClass(base=exceed_action.exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_violate_action(self):
    """
    Getter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    return self.__violate_action
      
  def _set_violate_action(self, v, load=False):
    """
    Setter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violate_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violate_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violate_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__violate_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violate_action(self):
    self.__violate_action = YANGDynClass(base=violate_action.violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  conform_action = __builtin__.property(_get_conform_action, _set_conform_action)
  exceed_action = __builtin__.property(_get_exceed_action, _set_exceed_action)
  violate_action = __builtin__.property(_get_violate_action, _set_violate_action)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('conform_action', conform_action), ('exceed_action', exceed_action), ('violate_action', violate_action), ])


