# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for QoS schedulers
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__type','__priority',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  type = __builtin__.property(_get_type)
  priority = __builtin__.property(_get_priority)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('type', type), ('priority', priority), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for QoS schedulers
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__type','__priority',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  type = __builtin__.property(_get_type)
  priority = __builtin__.property(_get_priority)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('type', type), ('priority', priority), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for QoS schedulers
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__type','__priority',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  type = __builtin__.property(_get_type)
  priority = __builtin__.property(_get_priority)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('type', type), ('priority', priority), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for QoS schedulers
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__type','__priority',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  type = __builtin__.property(_get_type)
  priority = __builtin__.property(_get_priority)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('type', type), ('priority', priority), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for QoS schedulers
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__type','__priority',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  type = __builtin__.property(_get_type)
  priority = __builtin__.property(_get_priority)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('type', type), ('priority', priority), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for QoS schedulers
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__type','__priority',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  type = __builtin__.property(_get_type)
  priority = __builtin__.property(_get_priority)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('type', type), ('priority', priority), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for QoS schedulers
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__type','__priority',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  type = __builtin__.property(_get_type)
  priority = __builtin__.property(_get_priority)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('type', type), ('priority', priority), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for QoS schedulers
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__type','__priority',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:ONE_RATE_TWO_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'openconfig-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}, 'oc-qos-types:TWO_RATE_THREE_COLOR': {'@module': 'openconfig-qos-types', '@namespace': 'http://openconfig.net/yang/qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  type = __builtin__.property(_get_type)
  priority = __builtin__.property(_get_priority)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('type', type), ('priority', priority), ])


