# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 2 rate, 3 color policers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__pir','__pir_pct','__pir_pct_remaining','__bc','__be',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'two-rate-three-color', 'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir(self):
    """
    Getter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    return self.__pir
      
  def _set_pir(self, v, load=False):
    """
    Setter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__pir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir(self):
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_pir_pct(self):
    """
    Getter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    return self.__pir_pct
      
  def _set_pir_pct(self, v, load=False):
    """
    Setter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct(self):
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir_pct_remaining(self):
    """
    Getter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__pir_pct_remaining
      
  def _set_pir_pct_remaining(self, v, load=False):
    """
    Setter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct_remaining() directly.

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct_remaining(self):
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_be(self):
    """
    Getter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    return self.__be
      
  def _set_be(self, v, load=False):
    """
    Setter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_be is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_be() directly.

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """be must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__be = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_be(self):
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  pir = __builtin__.property(_get_pir, _set_pir)
  pir_pct = __builtin__.property(_get_pir_pct, _set_pir_pct)
  pir_pct_remaining = __builtin__.property(_get_pir_pct_remaining, _set_pir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  be = __builtin__.property(_get_be, _set_be)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('pir', pir), ('pir_pct', pir_pct), ('pir_pct_remaining', pir_pct_remaining), ('bc', bc), ('be', be), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 2 rate, 3 color policers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__pir','__pir_pct','__pir_pct_remaining','__bc','__be',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'two-rate-three-color', 'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir(self):
    """
    Getter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    return self.__pir
      
  def _set_pir(self, v, load=False):
    """
    Setter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__pir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir(self):
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_pir_pct(self):
    """
    Getter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    return self.__pir_pct
      
  def _set_pir_pct(self, v, load=False):
    """
    Setter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct(self):
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir_pct_remaining(self):
    """
    Getter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__pir_pct_remaining
      
  def _set_pir_pct_remaining(self, v, load=False):
    """
    Setter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct_remaining() directly.

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct_remaining(self):
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_be(self):
    """
    Getter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    return self.__be
      
  def _set_be(self, v, load=False):
    """
    Setter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_be is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_be() directly.

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """be must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__be = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_be(self):
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  pir = __builtin__.property(_get_pir, _set_pir)
  pir_pct = __builtin__.property(_get_pir_pct, _set_pir_pct)
  pir_pct_remaining = __builtin__.property(_get_pir_pct_remaining, _set_pir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  be = __builtin__.property(_get_be, _set_be)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('pir', pir), ('pir_pct', pir_pct), ('pir_pct_remaining', pir_pct_remaining), ('bc', bc), ('be', be), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 2 rate, 3 color policers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__pir','__pir_pct','__pir_pct_remaining','__bc','__be',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'two-rate-three-color', 'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir(self):
    """
    Getter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    return self.__pir
      
  def _set_pir(self, v, load=False):
    """
    Setter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__pir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir(self):
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_pir_pct(self):
    """
    Getter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    return self.__pir_pct
      
  def _set_pir_pct(self, v, load=False):
    """
    Setter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct(self):
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir_pct_remaining(self):
    """
    Getter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__pir_pct_remaining
      
  def _set_pir_pct_remaining(self, v, load=False):
    """
    Setter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct_remaining() directly.

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct_remaining(self):
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_be(self):
    """
    Getter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    return self.__be
      
  def _set_be(self, v, load=False):
    """
    Setter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_be is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_be() directly.

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """be must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__be = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_be(self):
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  pir = __builtin__.property(_get_pir, _set_pir)
  pir_pct = __builtin__.property(_get_pir_pct, _set_pir_pct)
  pir_pct_remaining = __builtin__.property(_get_pir_pct_remaining, _set_pir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  be = __builtin__.property(_get_be, _set_be)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('pir', pir), ('pir_pct', pir_pct), ('pir_pct_remaining', pir_pct_remaining), ('bc', bc), ('be', be), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 2 rate, 3 color policers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__pir','__pir_pct','__pir_pct_remaining','__bc','__be',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'two-rate-three-color', 'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir(self):
    """
    Getter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    return self.__pir
      
  def _set_pir(self, v, load=False):
    """
    Setter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__pir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir(self):
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_pir_pct(self):
    """
    Getter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    return self.__pir_pct
      
  def _set_pir_pct(self, v, load=False):
    """
    Setter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct(self):
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir_pct_remaining(self):
    """
    Getter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__pir_pct_remaining
      
  def _set_pir_pct_remaining(self, v, load=False):
    """
    Setter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct_remaining() directly.

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct_remaining(self):
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_be(self):
    """
    Getter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    return self.__be
      
  def _set_be(self, v, load=False):
    """
    Setter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_be is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_be() directly.

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """be must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__be = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_be(self):
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  pir = __builtin__.property(_get_pir, _set_pir)
  pir_pct = __builtin__.property(_get_pir_pct, _set_pir_pct)
  pir_pct_remaining = __builtin__.property(_get_pir_pct_remaining, _set_pir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  be = __builtin__.property(_get_be, _set_be)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('pir', pir), ('pir_pct', pir_pct), ('pir_pct_remaining', pir_pct_remaining), ('bc', bc), ('be', be), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 2 rate, 3 color policers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__pir','__pir_pct','__pir_pct_remaining','__bc','__be',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'two-rate-three-color', 'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir(self):
    """
    Getter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    return self.__pir
      
  def _set_pir(self, v, load=False):
    """
    Setter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__pir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir(self):
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_pir_pct(self):
    """
    Getter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    return self.__pir_pct
      
  def _set_pir_pct(self, v, load=False):
    """
    Setter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct(self):
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir_pct_remaining(self):
    """
    Getter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__pir_pct_remaining
      
  def _set_pir_pct_remaining(self, v, load=False):
    """
    Setter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct_remaining() directly.

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct_remaining(self):
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_be(self):
    """
    Getter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    return self.__be
      
  def _set_be(self, v, load=False):
    """
    Setter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_be is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_be() directly.

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """be must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__be = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_be(self):
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  pir = __builtin__.property(_get_pir, _set_pir)
  pir_pct = __builtin__.property(_get_pir_pct, _set_pir_pct)
  pir_pct_remaining = __builtin__.property(_get_pir_pct_remaining, _set_pir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  be = __builtin__.property(_get_be, _set_be)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('pir', pir), ('pir_pct', pir_pct), ('pir_pct_remaining', pir_pct_remaining), ('bc', bc), ('be', be), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 2 rate, 3 color policers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__pir','__pir_pct','__pir_pct_remaining','__bc','__be',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'two-rate-three-color', 'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir(self):
    """
    Getter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    return self.__pir
      
  def _set_pir(self, v, load=False):
    """
    Setter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__pir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir(self):
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_pir_pct(self):
    """
    Getter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    return self.__pir_pct
      
  def _set_pir_pct(self, v, load=False):
    """
    Setter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct(self):
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir_pct_remaining(self):
    """
    Getter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__pir_pct_remaining
      
  def _set_pir_pct_remaining(self, v, load=False):
    """
    Setter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct_remaining() directly.

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct_remaining(self):
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_be(self):
    """
    Getter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    return self.__be
      
  def _set_be(self, v, load=False):
    """
    Setter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_be is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_be() directly.

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """be must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__be = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_be(self):
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  pir = __builtin__.property(_get_pir, _set_pir)
  pir_pct = __builtin__.property(_get_pir_pct, _set_pir_pct)
  pir_pct_remaining = __builtin__.property(_get_pir_pct_remaining, _set_pir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  be = __builtin__.property(_get_be, _set_be)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('pir', pir), ('pir_pct', pir_pct), ('pir_pct_remaining', pir_pct_remaining), ('bc', bc), ('be', be), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 2 rate, 3 color policers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__pir','__pir_pct','__pir_pct_remaining','__bc','__be',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'two-rate-three-color', 'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir(self):
    """
    Getter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    return self.__pir
      
  def _set_pir(self, v, load=False):
    """
    Setter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__pir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir(self):
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_pir_pct(self):
    """
    Getter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    return self.__pir_pct
      
  def _set_pir_pct(self, v, load=False):
    """
    Setter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct(self):
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir_pct_remaining(self):
    """
    Getter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__pir_pct_remaining
      
  def _set_pir_pct_remaining(self, v, load=False):
    """
    Setter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct_remaining() directly.

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct_remaining(self):
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_be(self):
    """
    Getter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    return self.__be
      
  def _set_be(self, v, load=False):
    """
    Setter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_be is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_be() directly.

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """be must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__be = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_be(self):
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  pir = __builtin__.property(_get_pir, _set_pir)
  pir_pct = __builtin__.property(_get_pir_pct, _set_pir_pct)
  pir_pct_remaining = __builtin__.property(_get_pir_pct_remaining, _set_pir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  be = __builtin__.property(_get_be, _set_be)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('pir', pir), ('pir_pct', pir_pct), ('pir_pct_remaining', pir_pct_remaining), ('bc', bc), ('be', be), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 2 rate, 3 color policers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__pir','__pir_pct','__pir_pct_remaining','__bc','__be',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos', 'scheduler-policies', 'scheduler-policy', 'schedulers', 'scheduler', 'two-rate-three-color', 'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir(self):
    """
    Getter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    return self.__pir
      
  def _set_pir(self, v, load=False):
    """
    Setter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__pir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir(self):
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_pir_pct(self):
    """
    Getter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    return self.__pir_pct
      
  def _set_pir_pct(self, v, load=False):
    """
    Setter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct(self):
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir_pct_remaining(self):
    """
    Getter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__pir_pct_remaining
      
  def _set_pir_pct_remaining(self, v, load=False):
    """
    Setter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct_remaining() directly.

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct_remaining(self):
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_be(self):
    """
    Getter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    return self.__be
      
  def _set_be(self, v, load=False):
    """
    Setter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_be is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_be() directly.

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """be must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__be = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_be(self):
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  pir = __builtin__.property(_get_pir, _set_pir)
  pir_pct = __builtin__.property(_get_pir_pct, _set_pir_pct)
  pir_pct_remaining = __builtin__.property(_get_pir_pct_remaining, _set_pir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  be = __builtin__.property(_get_be, _set_be)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('pir', pir), ('pir_pct', pir_pct), ('pir_pct_remaining', pir_pct_remaining), ('bc', bc), ('be', be), ])


