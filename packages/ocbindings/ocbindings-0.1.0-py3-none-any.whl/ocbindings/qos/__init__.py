# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import interfaces
from . import classifiers
from . import forwarding_groups
from . import queues
from . import scheduler_policies
from . import buffer_allocation_profiles
from . import queue_management_profiles
class qos(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for QoS data
  """
  __slots__ = ('_path_helper', '_extmethods', '__interfaces','__classifiers','__forwarding_groups','__queues','__scheduler_policies','__buffer_allocation_profiles','__queue_management_profiles',)

  _yang_name = 'qos'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interfaces = YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__classifiers = YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__forwarding_groups = YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queues = YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__scheduler_policies = YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__buffer_allocation_profiles = YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queue_management_profiles = YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos']

  def _get_interfaces(self):
    """
    Getter method for interfaces, mapped from YANG variable /qos/interfaces (container)

    YANG Description: Enclosing container for the list of interface references
    """
    return self.__interfaces
      
  def _set_interfaces(self, v, load=False):
    """
    Setter method for interfaces, mapped from YANG variable /qos/interfaces (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interfaces() directly.

    YANG Description: Enclosing container for the list of interface references
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interfaces must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interfaces(self):
    self.__interfaces = YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_classifiers(self):
    """
    Getter method for classifiers, mapped from YANG variable /qos/classifiers (container)

    YANG Description: Enclosing container for QoS classifiers
    """
    return self.__classifiers
      
  def _set_classifiers(self, v, load=False):
    """
    Setter method for classifiers, mapped from YANG variable /qos/classifiers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_classifiers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_classifiers() directly.

    YANG Description: Enclosing container for QoS classifiers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """classifiers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__classifiers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_classifiers(self):
    self.__classifiers = YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_forwarding_groups(self):
    """
    Getter method for forwarding_groups, mapped from YANG variable /qos/forwarding_groups (container)

    YANG Description: Enclosing container for list of forwarding groups
    """
    return self.__forwarding_groups
      
  def _set_forwarding_groups(self, v, load=False):
    """
    Setter method for forwarding_groups, mapped from YANG variable /qos/forwarding_groups (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_forwarding_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_forwarding_groups() directly.

    YANG Description: Enclosing container for list of forwarding groups
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """forwarding_groups must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__forwarding_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_forwarding_groups(self):
    self.__forwarding_groups = YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queues(self):
    """
    Getter method for queues, mapped from YANG variable /qos/queues (container)

    YANG Description: Enclosing container for the list of queues
    """
    return self.__queues
      
  def _set_queues(self, v, load=False):
    """
    Setter method for queues, mapped from YANG variable /qos/queues (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queues is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queues() directly.

    YANG Description: Enclosing container for the list of queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queues must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queues = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queues(self):
    self.__queues = YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_scheduler_policies(self):
    """
    Getter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    return self.__scheduler_policies
      
  def _set_scheduler_policies(self, v, load=False):
    """
    Setter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler_policies is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler_policies() directly.

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler_policies must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__scheduler_policies = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler_policies(self):
    self.__scheduler_policies = YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_buffer_allocation_profiles(self):
    """
    Getter method for buffer_allocation_profiles, mapped from YANG variable /qos/buffer_allocation_profiles (container)

    YANG Description: Surrounding container for buffer allocation profiles.
    """
    return self.__buffer_allocation_profiles
      
  def _set_buffer_allocation_profiles(self, v, load=False):
    """
    Setter method for buffer_allocation_profiles, mapped from YANG variable /qos/buffer_allocation_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_buffer_allocation_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_buffer_allocation_profiles() directly.

    YANG Description: Surrounding container for buffer allocation profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """buffer_allocation_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__buffer_allocation_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_buffer_allocation_profiles(self):
    self.__buffer_allocation_profiles = YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queue_management_profiles(self):
    """
    Getter method for queue_management_profiles, mapped from YANG variable /qos/queue_management_profiles (container)

    YANG Description: Surrounding container for the list of configured
queue management profiles.
    """
    return self.__queue_management_profiles
      
  def _set_queue_management_profiles(self, v, load=False):
    """
    Setter method for queue_management_profiles, mapped from YANG variable /qos/queue_management_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_management_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_management_profiles() directly.

    YANG Description: Surrounding container for the list of configured
queue management profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_management_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queue_management_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_management_profiles(self):
    self.__queue_management_profiles = YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  interfaces = __builtin__.property(_get_interfaces, _set_interfaces)
  classifiers = __builtin__.property(_get_classifiers, _set_classifiers)
  forwarding_groups = __builtin__.property(_get_forwarding_groups, _set_forwarding_groups)
  queues = __builtin__.property(_get_queues, _set_queues)
  scheduler_policies = __builtin__.property(_get_scheduler_policies, _set_scheduler_policies)
  buffer_allocation_profiles = __builtin__.property(_get_buffer_allocation_profiles, _set_buffer_allocation_profiles)
  queue_management_profiles = __builtin__.property(_get_queue_management_profiles, _set_queue_management_profiles)


  _pyangbind_elements = OrderedDict([('interfaces', interfaces), ('classifiers', classifiers), ('forwarding_groups', forwarding_groups), ('queues', queues), ('scheduler_policies', scheduler_policies), ('buffer_allocation_profiles', buffer_allocation_profiles), ('queue_management_profiles', queue_management_profiles), ])


from . import interfaces
from . import classifiers
from . import forwarding_groups
from . import queues
from . import scheduler_policies
from . import buffer_allocation_profiles
from . import queue_management_profiles
class qos(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for QoS data
  """
  __slots__ = ('_path_helper', '_extmethods', '__interfaces','__classifiers','__forwarding_groups','__queues','__scheduler_policies','__buffer_allocation_profiles','__queue_management_profiles',)

  _yang_name = 'qos'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interfaces = YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__classifiers = YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__forwarding_groups = YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queues = YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__scheduler_policies = YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__buffer_allocation_profiles = YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queue_management_profiles = YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos']

  def _get_interfaces(self):
    """
    Getter method for interfaces, mapped from YANG variable /qos/interfaces (container)

    YANG Description: Enclosing container for the list of interface references
    """
    return self.__interfaces
      
  def _set_interfaces(self, v, load=False):
    """
    Setter method for interfaces, mapped from YANG variable /qos/interfaces (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interfaces() directly.

    YANG Description: Enclosing container for the list of interface references
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interfaces must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interfaces(self):
    self.__interfaces = YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_classifiers(self):
    """
    Getter method for classifiers, mapped from YANG variable /qos/classifiers (container)

    YANG Description: Enclosing container for QoS classifiers
    """
    return self.__classifiers
      
  def _set_classifiers(self, v, load=False):
    """
    Setter method for classifiers, mapped from YANG variable /qos/classifiers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_classifiers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_classifiers() directly.

    YANG Description: Enclosing container for QoS classifiers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """classifiers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__classifiers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_classifiers(self):
    self.__classifiers = YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_forwarding_groups(self):
    """
    Getter method for forwarding_groups, mapped from YANG variable /qos/forwarding_groups (container)

    YANG Description: Enclosing container for list of forwarding groups
    """
    return self.__forwarding_groups
      
  def _set_forwarding_groups(self, v, load=False):
    """
    Setter method for forwarding_groups, mapped from YANG variable /qos/forwarding_groups (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_forwarding_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_forwarding_groups() directly.

    YANG Description: Enclosing container for list of forwarding groups
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """forwarding_groups must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__forwarding_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_forwarding_groups(self):
    self.__forwarding_groups = YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queues(self):
    """
    Getter method for queues, mapped from YANG variable /qos/queues (container)

    YANG Description: Enclosing container for the list of queues
    """
    return self.__queues
      
  def _set_queues(self, v, load=False):
    """
    Setter method for queues, mapped from YANG variable /qos/queues (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queues is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queues() directly.

    YANG Description: Enclosing container for the list of queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queues must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queues = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queues(self):
    self.__queues = YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_scheduler_policies(self):
    """
    Getter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    return self.__scheduler_policies
      
  def _set_scheduler_policies(self, v, load=False):
    """
    Setter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler_policies is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler_policies() directly.

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler_policies must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__scheduler_policies = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler_policies(self):
    self.__scheduler_policies = YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_buffer_allocation_profiles(self):
    """
    Getter method for buffer_allocation_profiles, mapped from YANG variable /qos/buffer_allocation_profiles (container)

    YANG Description: Surrounding container for buffer allocation profiles.
    """
    return self.__buffer_allocation_profiles
      
  def _set_buffer_allocation_profiles(self, v, load=False):
    """
    Setter method for buffer_allocation_profiles, mapped from YANG variable /qos/buffer_allocation_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_buffer_allocation_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_buffer_allocation_profiles() directly.

    YANG Description: Surrounding container for buffer allocation profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """buffer_allocation_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__buffer_allocation_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_buffer_allocation_profiles(self):
    self.__buffer_allocation_profiles = YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queue_management_profiles(self):
    """
    Getter method for queue_management_profiles, mapped from YANG variable /qos/queue_management_profiles (container)

    YANG Description: Surrounding container for the list of configured
queue management profiles.
    """
    return self.__queue_management_profiles
      
  def _set_queue_management_profiles(self, v, load=False):
    """
    Setter method for queue_management_profiles, mapped from YANG variable /qos/queue_management_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_management_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_management_profiles() directly.

    YANG Description: Surrounding container for the list of configured
queue management profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_management_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queue_management_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_management_profiles(self):
    self.__queue_management_profiles = YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  interfaces = __builtin__.property(_get_interfaces, _set_interfaces)
  classifiers = __builtin__.property(_get_classifiers, _set_classifiers)
  forwarding_groups = __builtin__.property(_get_forwarding_groups, _set_forwarding_groups)
  queues = __builtin__.property(_get_queues, _set_queues)
  scheduler_policies = __builtin__.property(_get_scheduler_policies, _set_scheduler_policies)
  buffer_allocation_profiles = __builtin__.property(_get_buffer_allocation_profiles, _set_buffer_allocation_profiles)
  queue_management_profiles = __builtin__.property(_get_queue_management_profiles, _set_queue_management_profiles)


  _pyangbind_elements = OrderedDict([('interfaces', interfaces), ('classifiers', classifiers), ('forwarding_groups', forwarding_groups), ('queues', queues), ('scheduler_policies', scheduler_policies), ('buffer_allocation_profiles', buffer_allocation_profiles), ('queue_management_profiles', queue_management_profiles), ])


from . import interfaces
from . import classifiers
from . import forwarding_groups
from . import queues
from . import scheduler_policies
from . import buffer_allocation_profiles
from . import queue_management_profiles
class qos(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for QoS data
  """
  __slots__ = ('_path_helper', '_extmethods', '__interfaces','__classifiers','__forwarding_groups','__queues','__scheduler_policies','__buffer_allocation_profiles','__queue_management_profiles',)

  _yang_name = 'qos'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interfaces = YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__classifiers = YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__forwarding_groups = YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queues = YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__scheduler_policies = YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__buffer_allocation_profiles = YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queue_management_profiles = YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos']

  def _get_interfaces(self):
    """
    Getter method for interfaces, mapped from YANG variable /qos/interfaces (container)

    YANG Description: Enclosing container for the list of interface references
    """
    return self.__interfaces
      
  def _set_interfaces(self, v, load=False):
    """
    Setter method for interfaces, mapped from YANG variable /qos/interfaces (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interfaces() directly.

    YANG Description: Enclosing container for the list of interface references
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interfaces must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interfaces(self):
    self.__interfaces = YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_classifiers(self):
    """
    Getter method for classifiers, mapped from YANG variable /qos/classifiers (container)

    YANG Description: Enclosing container for QoS classifiers
    """
    return self.__classifiers
      
  def _set_classifiers(self, v, load=False):
    """
    Setter method for classifiers, mapped from YANG variable /qos/classifiers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_classifiers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_classifiers() directly.

    YANG Description: Enclosing container for QoS classifiers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """classifiers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__classifiers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_classifiers(self):
    self.__classifiers = YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_forwarding_groups(self):
    """
    Getter method for forwarding_groups, mapped from YANG variable /qos/forwarding_groups (container)

    YANG Description: Enclosing container for list of forwarding groups
    """
    return self.__forwarding_groups
      
  def _set_forwarding_groups(self, v, load=False):
    """
    Setter method for forwarding_groups, mapped from YANG variable /qos/forwarding_groups (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_forwarding_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_forwarding_groups() directly.

    YANG Description: Enclosing container for list of forwarding groups
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """forwarding_groups must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__forwarding_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_forwarding_groups(self):
    self.__forwarding_groups = YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queues(self):
    """
    Getter method for queues, mapped from YANG variable /qos/queues (container)

    YANG Description: Enclosing container for the list of queues
    """
    return self.__queues
      
  def _set_queues(self, v, load=False):
    """
    Setter method for queues, mapped from YANG variable /qos/queues (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queues is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queues() directly.

    YANG Description: Enclosing container for the list of queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queues must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queues = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queues(self):
    self.__queues = YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_scheduler_policies(self):
    """
    Getter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    return self.__scheduler_policies
      
  def _set_scheduler_policies(self, v, load=False):
    """
    Setter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler_policies is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler_policies() directly.

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler_policies must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__scheduler_policies = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler_policies(self):
    self.__scheduler_policies = YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_buffer_allocation_profiles(self):
    """
    Getter method for buffer_allocation_profiles, mapped from YANG variable /qos/buffer_allocation_profiles (container)

    YANG Description: Surrounding container for buffer allocation profiles.
    """
    return self.__buffer_allocation_profiles
      
  def _set_buffer_allocation_profiles(self, v, load=False):
    """
    Setter method for buffer_allocation_profiles, mapped from YANG variable /qos/buffer_allocation_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_buffer_allocation_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_buffer_allocation_profiles() directly.

    YANG Description: Surrounding container for buffer allocation profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """buffer_allocation_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__buffer_allocation_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_buffer_allocation_profiles(self):
    self.__buffer_allocation_profiles = YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queue_management_profiles(self):
    """
    Getter method for queue_management_profiles, mapped from YANG variable /qos/queue_management_profiles (container)

    YANG Description: Surrounding container for the list of configured
queue management profiles.
    """
    return self.__queue_management_profiles
      
  def _set_queue_management_profiles(self, v, load=False):
    """
    Setter method for queue_management_profiles, mapped from YANG variable /qos/queue_management_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_management_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_management_profiles() directly.

    YANG Description: Surrounding container for the list of configured
queue management profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_management_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queue_management_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_management_profiles(self):
    self.__queue_management_profiles = YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  interfaces = __builtin__.property(_get_interfaces, _set_interfaces)
  classifiers = __builtin__.property(_get_classifiers, _set_classifiers)
  forwarding_groups = __builtin__.property(_get_forwarding_groups, _set_forwarding_groups)
  queues = __builtin__.property(_get_queues, _set_queues)
  scheduler_policies = __builtin__.property(_get_scheduler_policies, _set_scheduler_policies)
  buffer_allocation_profiles = __builtin__.property(_get_buffer_allocation_profiles, _set_buffer_allocation_profiles)
  queue_management_profiles = __builtin__.property(_get_queue_management_profiles, _set_queue_management_profiles)


  _pyangbind_elements = OrderedDict([('interfaces', interfaces), ('classifiers', classifiers), ('forwarding_groups', forwarding_groups), ('queues', queues), ('scheduler_policies', scheduler_policies), ('buffer_allocation_profiles', buffer_allocation_profiles), ('queue_management_profiles', queue_management_profiles), ])


from . import interfaces
from . import classifiers
from . import forwarding_groups
from . import queues
from . import scheduler_policies
from . import buffer_allocation_profiles
from . import queue_management_profiles
class qos(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for QoS data
  """
  __slots__ = ('_path_helper', '_extmethods', '__interfaces','__classifiers','__forwarding_groups','__queues','__scheduler_policies','__buffer_allocation_profiles','__queue_management_profiles',)

  _yang_name = 'qos'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interfaces = YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__classifiers = YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__forwarding_groups = YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queues = YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__scheduler_policies = YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__buffer_allocation_profiles = YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queue_management_profiles = YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos']

  def _get_interfaces(self):
    """
    Getter method for interfaces, mapped from YANG variable /qos/interfaces (container)

    YANG Description: Enclosing container for the list of interface references
    """
    return self.__interfaces
      
  def _set_interfaces(self, v, load=False):
    """
    Setter method for interfaces, mapped from YANG variable /qos/interfaces (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interfaces() directly.

    YANG Description: Enclosing container for the list of interface references
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interfaces must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interfaces(self):
    self.__interfaces = YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_classifiers(self):
    """
    Getter method for classifiers, mapped from YANG variable /qos/classifiers (container)

    YANG Description: Enclosing container for QoS classifiers
    """
    return self.__classifiers
      
  def _set_classifiers(self, v, load=False):
    """
    Setter method for classifiers, mapped from YANG variable /qos/classifiers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_classifiers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_classifiers() directly.

    YANG Description: Enclosing container for QoS classifiers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """classifiers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__classifiers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_classifiers(self):
    self.__classifiers = YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_forwarding_groups(self):
    """
    Getter method for forwarding_groups, mapped from YANG variable /qos/forwarding_groups (container)

    YANG Description: Enclosing container for list of forwarding groups
    """
    return self.__forwarding_groups
      
  def _set_forwarding_groups(self, v, load=False):
    """
    Setter method for forwarding_groups, mapped from YANG variable /qos/forwarding_groups (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_forwarding_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_forwarding_groups() directly.

    YANG Description: Enclosing container for list of forwarding groups
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """forwarding_groups must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__forwarding_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_forwarding_groups(self):
    self.__forwarding_groups = YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queues(self):
    """
    Getter method for queues, mapped from YANG variable /qos/queues (container)

    YANG Description: Enclosing container for the list of queues
    """
    return self.__queues
      
  def _set_queues(self, v, load=False):
    """
    Setter method for queues, mapped from YANG variable /qos/queues (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queues is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queues() directly.

    YANG Description: Enclosing container for the list of queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queues must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queues = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queues(self):
    self.__queues = YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_scheduler_policies(self):
    """
    Getter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    return self.__scheduler_policies
      
  def _set_scheduler_policies(self, v, load=False):
    """
    Setter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler_policies is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler_policies() directly.

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler_policies must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__scheduler_policies = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler_policies(self):
    self.__scheduler_policies = YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_buffer_allocation_profiles(self):
    """
    Getter method for buffer_allocation_profiles, mapped from YANG variable /qos/buffer_allocation_profiles (container)

    YANG Description: Surrounding container for buffer allocation profiles.
    """
    return self.__buffer_allocation_profiles
      
  def _set_buffer_allocation_profiles(self, v, load=False):
    """
    Setter method for buffer_allocation_profiles, mapped from YANG variable /qos/buffer_allocation_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_buffer_allocation_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_buffer_allocation_profiles() directly.

    YANG Description: Surrounding container for buffer allocation profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """buffer_allocation_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__buffer_allocation_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_buffer_allocation_profiles(self):
    self.__buffer_allocation_profiles = YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queue_management_profiles(self):
    """
    Getter method for queue_management_profiles, mapped from YANG variable /qos/queue_management_profiles (container)

    YANG Description: Surrounding container for the list of configured
queue management profiles.
    """
    return self.__queue_management_profiles
      
  def _set_queue_management_profiles(self, v, load=False):
    """
    Setter method for queue_management_profiles, mapped from YANG variable /qos/queue_management_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_management_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_management_profiles() directly.

    YANG Description: Surrounding container for the list of configured
queue management profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_management_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queue_management_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_management_profiles(self):
    self.__queue_management_profiles = YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  interfaces = __builtin__.property(_get_interfaces, _set_interfaces)
  classifiers = __builtin__.property(_get_classifiers, _set_classifiers)
  forwarding_groups = __builtin__.property(_get_forwarding_groups, _set_forwarding_groups)
  queues = __builtin__.property(_get_queues, _set_queues)
  scheduler_policies = __builtin__.property(_get_scheduler_policies, _set_scheduler_policies)
  buffer_allocation_profiles = __builtin__.property(_get_buffer_allocation_profiles, _set_buffer_allocation_profiles)
  queue_management_profiles = __builtin__.property(_get_queue_management_profiles, _set_queue_management_profiles)


  _pyangbind_elements = OrderedDict([('interfaces', interfaces), ('classifiers', classifiers), ('forwarding_groups', forwarding_groups), ('queues', queues), ('scheduler_policies', scheduler_policies), ('buffer_allocation_profiles', buffer_allocation_profiles), ('queue_management_profiles', queue_management_profiles), ])


from . import interfaces
from . import classifiers
from . import forwarding_groups
from . import queues
from . import scheduler_policies
from . import buffer_allocation_profiles
from . import queue_management_profiles
class qos(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for QoS data
  """
  __slots__ = ('_path_helper', '_extmethods', '__interfaces','__classifiers','__forwarding_groups','__queues','__scheduler_policies','__buffer_allocation_profiles','__queue_management_profiles',)

  _yang_name = 'qos'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interfaces = YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__classifiers = YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__forwarding_groups = YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queues = YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__scheduler_policies = YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__buffer_allocation_profiles = YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queue_management_profiles = YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos']

  def _get_interfaces(self):
    """
    Getter method for interfaces, mapped from YANG variable /qos/interfaces (container)

    YANG Description: Enclosing container for the list of interface references
    """
    return self.__interfaces
      
  def _set_interfaces(self, v, load=False):
    """
    Setter method for interfaces, mapped from YANG variable /qos/interfaces (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interfaces() directly.

    YANG Description: Enclosing container for the list of interface references
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interfaces must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interfaces(self):
    self.__interfaces = YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_classifiers(self):
    """
    Getter method for classifiers, mapped from YANG variable /qos/classifiers (container)

    YANG Description: Enclosing container for QoS classifiers
    """
    return self.__classifiers
      
  def _set_classifiers(self, v, load=False):
    """
    Setter method for classifiers, mapped from YANG variable /qos/classifiers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_classifiers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_classifiers() directly.

    YANG Description: Enclosing container for QoS classifiers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """classifiers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__classifiers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_classifiers(self):
    self.__classifiers = YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_forwarding_groups(self):
    """
    Getter method for forwarding_groups, mapped from YANG variable /qos/forwarding_groups (container)

    YANG Description: Enclosing container for list of forwarding groups
    """
    return self.__forwarding_groups
      
  def _set_forwarding_groups(self, v, load=False):
    """
    Setter method for forwarding_groups, mapped from YANG variable /qos/forwarding_groups (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_forwarding_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_forwarding_groups() directly.

    YANG Description: Enclosing container for list of forwarding groups
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """forwarding_groups must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__forwarding_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_forwarding_groups(self):
    self.__forwarding_groups = YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queues(self):
    """
    Getter method for queues, mapped from YANG variable /qos/queues (container)

    YANG Description: Enclosing container for the list of queues
    """
    return self.__queues
      
  def _set_queues(self, v, load=False):
    """
    Setter method for queues, mapped from YANG variable /qos/queues (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queues is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queues() directly.

    YANG Description: Enclosing container for the list of queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queues must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queues = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queues(self):
    self.__queues = YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_scheduler_policies(self):
    """
    Getter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    return self.__scheduler_policies
      
  def _set_scheduler_policies(self, v, load=False):
    """
    Setter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler_policies is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler_policies() directly.

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler_policies must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__scheduler_policies = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler_policies(self):
    self.__scheduler_policies = YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_buffer_allocation_profiles(self):
    """
    Getter method for buffer_allocation_profiles, mapped from YANG variable /qos/buffer_allocation_profiles (container)

    YANG Description: Surrounding container for buffer allocation profiles.
    """
    return self.__buffer_allocation_profiles
      
  def _set_buffer_allocation_profiles(self, v, load=False):
    """
    Setter method for buffer_allocation_profiles, mapped from YANG variable /qos/buffer_allocation_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_buffer_allocation_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_buffer_allocation_profiles() directly.

    YANG Description: Surrounding container for buffer allocation profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """buffer_allocation_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__buffer_allocation_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_buffer_allocation_profiles(self):
    self.__buffer_allocation_profiles = YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queue_management_profiles(self):
    """
    Getter method for queue_management_profiles, mapped from YANG variable /qos/queue_management_profiles (container)

    YANG Description: Surrounding container for the list of configured
queue management profiles.
    """
    return self.__queue_management_profiles
      
  def _set_queue_management_profiles(self, v, load=False):
    """
    Setter method for queue_management_profiles, mapped from YANG variable /qos/queue_management_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_management_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_management_profiles() directly.

    YANG Description: Surrounding container for the list of configured
queue management profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_management_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queue_management_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_management_profiles(self):
    self.__queue_management_profiles = YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  interfaces = __builtin__.property(_get_interfaces, _set_interfaces)
  classifiers = __builtin__.property(_get_classifiers, _set_classifiers)
  forwarding_groups = __builtin__.property(_get_forwarding_groups, _set_forwarding_groups)
  queues = __builtin__.property(_get_queues, _set_queues)
  scheduler_policies = __builtin__.property(_get_scheduler_policies, _set_scheduler_policies)
  buffer_allocation_profiles = __builtin__.property(_get_buffer_allocation_profiles, _set_buffer_allocation_profiles)
  queue_management_profiles = __builtin__.property(_get_queue_management_profiles, _set_queue_management_profiles)


  _pyangbind_elements = OrderedDict([('interfaces', interfaces), ('classifiers', classifiers), ('forwarding_groups', forwarding_groups), ('queues', queues), ('scheduler_policies', scheduler_policies), ('buffer_allocation_profiles', buffer_allocation_profiles), ('queue_management_profiles', queue_management_profiles), ])


from . import interfaces
from . import classifiers
from . import forwarding_groups
from . import queues
from . import scheduler_policies
from . import buffer_allocation_profiles
from . import queue_management_profiles
class qos(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for QoS data
  """
  __slots__ = ('_path_helper', '_extmethods', '__interfaces','__classifiers','__forwarding_groups','__queues','__scheduler_policies','__buffer_allocation_profiles','__queue_management_profiles',)

  _yang_name = 'qos'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interfaces = YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__classifiers = YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__forwarding_groups = YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queues = YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__scheduler_policies = YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__buffer_allocation_profiles = YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queue_management_profiles = YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos']

  def _get_interfaces(self):
    """
    Getter method for interfaces, mapped from YANG variable /qos/interfaces (container)

    YANG Description: Enclosing container for the list of interface references
    """
    return self.__interfaces
      
  def _set_interfaces(self, v, load=False):
    """
    Setter method for interfaces, mapped from YANG variable /qos/interfaces (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interfaces() directly.

    YANG Description: Enclosing container for the list of interface references
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interfaces must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interfaces(self):
    self.__interfaces = YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_classifiers(self):
    """
    Getter method for classifiers, mapped from YANG variable /qos/classifiers (container)

    YANG Description: Enclosing container for QoS classifiers
    """
    return self.__classifiers
      
  def _set_classifiers(self, v, load=False):
    """
    Setter method for classifiers, mapped from YANG variable /qos/classifiers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_classifiers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_classifiers() directly.

    YANG Description: Enclosing container for QoS classifiers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """classifiers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__classifiers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_classifiers(self):
    self.__classifiers = YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_forwarding_groups(self):
    """
    Getter method for forwarding_groups, mapped from YANG variable /qos/forwarding_groups (container)

    YANG Description: Enclosing container for list of forwarding groups
    """
    return self.__forwarding_groups
      
  def _set_forwarding_groups(self, v, load=False):
    """
    Setter method for forwarding_groups, mapped from YANG variable /qos/forwarding_groups (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_forwarding_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_forwarding_groups() directly.

    YANG Description: Enclosing container for list of forwarding groups
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """forwarding_groups must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__forwarding_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_forwarding_groups(self):
    self.__forwarding_groups = YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queues(self):
    """
    Getter method for queues, mapped from YANG variable /qos/queues (container)

    YANG Description: Enclosing container for the list of queues
    """
    return self.__queues
      
  def _set_queues(self, v, load=False):
    """
    Setter method for queues, mapped from YANG variable /qos/queues (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queues is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queues() directly.

    YANG Description: Enclosing container for the list of queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queues must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queues = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queues(self):
    self.__queues = YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_scheduler_policies(self):
    """
    Getter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    return self.__scheduler_policies
      
  def _set_scheduler_policies(self, v, load=False):
    """
    Setter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler_policies is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler_policies() directly.

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler_policies must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__scheduler_policies = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler_policies(self):
    self.__scheduler_policies = YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_buffer_allocation_profiles(self):
    """
    Getter method for buffer_allocation_profiles, mapped from YANG variable /qos/buffer_allocation_profiles (container)

    YANG Description: Surrounding container for buffer allocation profiles.
    """
    return self.__buffer_allocation_profiles
      
  def _set_buffer_allocation_profiles(self, v, load=False):
    """
    Setter method for buffer_allocation_profiles, mapped from YANG variable /qos/buffer_allocation_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_buffer_allocation_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_buffer_allocation_profiles() directly.

    YANG Description: Surrounding container for buffer allocation profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """buffer_allocation_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__buffer_allocation_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_buffer_allocation_profiles(self):
    self.__buffer_allocation_profiles = YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queue_management_profiles(self):
    """
    Getter method for queue_management_profiles, mapped from YANG variable /qos/queue_management_profiles (container)

    YANG Description: Surrounding container for the list of configured
queue management profiles.
    """
    return self.__queue_management_profiles
      
  def _set_queue_management_profiles(self, v, load=False):
    """
    Setter method for queue_management_profiles, mapped from YANG variable /qos/queue_management_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_management_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_management_profiles() directly.

    YANG Description: Surrounding container for the list of configured
queue management profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_management_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queue_management_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_management_profiles(self):
    self.__queue_management_profiles = YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  interfaces = __builtin__.property(_get_interfaces, _set_interfaces)
  classifiers = __builtin__.property(_get_classifiers, _set_classifiers)
  forwarding_groups = __builtin__.property(_get_forwarding_groups, _set_forwarding_groups)
  queues = __builtin__.property(_get_queues, _set_queues)
  scheduler_policies = __builtin__.property(_get_scheduler_policies, _set_scheduler_policies)
  buffer_allocation_profiles = __builtin__.property(_get_buffer_allocation_profiles, _set_buffer_allocation_profiles)
  queue_management_profiles = __builtin__.property(_get_queue_management_profiles, _set_queue_management_profiles)


  _pyangbind_elements = OrderedDict([('interfaces', interfaces), ('classifiers', classifiers), ('forwarding_groups', forwarding_groups), ('queues', queues), ('scheduler_policies', scheduler_policies), ('buffer_allocation_profiles', buffer_allocation_profiles), ('queue_management_profiles', queue_management_profiles), ])


from . import interfaces
from . import classifiers
from . import forwarding_groups
from . import queues
from . import scheduler_policies
from . import buffer_allocation_profiles
from . import queue_management_profiles
class qos(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for QoS data
  """
  __slots__ = ('_path_helper', '_extmethods', '__interfaces','__classifiers','__forwarding_groups','__queues','__scheduler_policies','__buffer_allocation_profiles','__queue_management_profiles',)

  _yang_name = 'qos'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interfaces = YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__classifiers = YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__forwarding_groups = YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queues = YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__scheduler_policies = YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__buffer_allocation_profiles = YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queue_management_profiles = YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos']

  def _get_interfaces(self):
    """
    Getter method for interfaces, mapped from YANG variable /qos/interfaces (container)

    YANG Description: Enclosing container for the list of interface references
    """
    return self.__interfaces
      
  def _set_interfaces(self, v, load=False):
    """
    Setter method for interfaces, mapped from YANG variable /qos/interfaces (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interfaces() directly.

    YANG Description: Enclosing container for the list of interface references
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interfaces must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interfaces(self):
    self.__interfaces = YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_classifiers(self):
    """
    Getter method for classifiers, mapped from YANG variable /qos/classifiers (container)

    YANG Description: Enclosing container for QoS classifiers
    """
    return self.__classifiers
      
  def _set_classifiers(self, v, load=False):
    """
    Setter method for classifiers, mapped from YANG variable /qos/classifiers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_classifiers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_classifiers() directly.

    YANG Description: Enclosing container for QoS classifiers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """classifiers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__classifiers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_classifiers(self):
    self.__classifiers = YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_forwarding_groups(self):
    """
    Getter method for forwarding_groups, mapped from YANG variable /qos/forwarding_groups (container)

    YANG Description: Enclosing container for list of forwarding groups
    """
    return self.__forwarding_groups
      
  def _set_forwarding_groups(self, v, load=False):
    """
    Setter method for forwarding_groups, mapped from YANG variable /qos/forwarding_groups (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_forwarding_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_forwarding_groups() directly.

    YANG Description: Enclosing container for list of forwarding groups
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """forwarding_groups must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__forwarding_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_forwarding_groups(self):
    self.__forwarding_groups = YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queues(self):
    """
    Getter method for queues, mapped from YANG variable /qos/queues (container)

    YANG Description: Enclosing container for the list of queues
    """
    return self.__queues
      
  def _set_queues(self, v, load=False):
    """
    Setter method for queues, mapped from YANG variable /qos/queues (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queues is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queues() directly.

    YANG Description: Enclosing container for the list of queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queues must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queues = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queues(self):
    self.__queues = YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_scheduler_policies(self):
    """
    Getter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    return self.__scheduler_policies
      
  def _set_scheduler_policies(self, v, load=False):
    """
    Setter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler_policies is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler_policies() directly.

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler_policies must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__scheduler_policies = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler_policies(self):
    self.__scheduler_policies = YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_buffer_allocation_profiles(self):
    """
    Getter method for buffer_allocation_profiles, mapped from YANG variable /qos/buffer_allocation_profiles (container)

    YANG Description: Surrounding container for buffer allocation profiles.
    """
    return self.__buffer_allocation_profiles
      
  def _set_buffer_allocation_profiles(self, v, load=False):
    """
    Setter method for buffer_allocation_profiles, mapped from YANG variable /qos/buffer_allocation_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_buffer_allocation_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_buffer_allocation_profiles() directly.

    YANG Description: Surrounding container for buffer allocation profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """buffer_allocation_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__buffer_allocation_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_buffer_allocation_profiles(self):
    self.__buffer_allocation_profiles = YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queue_management_profiles(self):
    """
    Getter method for queue_management_profiles, mapped from YANG variable /qos/queue_management_profiles (container)

    YANG Description: Surrounding container for the list of configured
queue management profiles.
    """
    return self.__queue_management_profiles
      
  def _set_queue_management_profiles(self, v, load=False):
    """
    Setter method for queue_management_profiles, mapped from YANG variable /qos/queue_management_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_management_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_management_profiles() directly.

    YANG Description: Surrounding container for the list of configured
queue management profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_management_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queue_management_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_management_profiles(self):
    self.__queue_management_profiles = YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  interfaces = __builtin__.property(_get_interfaces, _set_interfaces)
  classifiers = __builtin__.property(_get_classifiers, _set_classifiers)
  forwarding_groups = __builtin__.property(_get_forwarding_groups, _set_forwarding_groups)
  queues = __builtin__.property(_get_queues, _set_queues)
  scheduler_policies = __builtin__.property(_get_scheduler_policies, _set_scheduler_policies)
  buffer_allocation_profiles = __builtin__.property(_get_buffer_allocation_profiles, _set_buffer_allocation_profiles)
  queue_management_profiles = __builtin__.property(_get_queue_management_profiles, _set_queue_management_profiles)


  _pyangbind_elements = OrderedDict([('interfaces', interfaces), ('classifiers', classifiers), ('forwarding_groups', forwarding_groups), ('queues', queues), ('scheduler_policies', scheduler_policies), ('buffer_allocation_profiles', buffer_allocation_profiles), ('queue_management_profiles', queue_management_profiles), ])


from . import interfaces
from . import classifiers
from . import forwarding_groups
from . import queues
from . import scheduler_policies
from . import buffer_allocation_profiles
from . import queue_management_profiles
class qos(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-mem-mgmt - based on the path /qos. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for QoS data
  """
  __slots__ = ('_path_helper', '_extmethods', '__interfaces','__classifiers','__forwarding_groups','__queues','__scheduler_policies','__buffer_allocation_profiles','__queue_management_profiles',)

  _yang_name = 'qos'
  _yang_namespace = 'http://openconfig.net/yang/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interfaces = YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__classifiers = YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__forwarding_groups = YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queues = YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__scheduler_policies = YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__buffer_allocation_profiles = YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queue_management_profiles = YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['qos']

  def _get_interfaces(self):
    """
    Getter method for interfaces, mapped from YANG variable /qos/interfaces (container)

    YANG Description: Enclosing container for the list of interface references
    """
    return self.__interfaces
      
  def _set_interfaces(self, v, load=False):
    """
    Setter method for interfaces, mapped from YANG variable /qos/interfaces (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interfaces() directly.

    YANG Description: Enclosing container for the list of interface references
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interfaces must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interfaces(self):
    self.__interfaces = YANGDynClass(base=interfaces.interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_classifiers(self):
    """
    Getter method for classifiers, mapped from YANG variable /qos/classifiers (container)

    YANG Description: Enclosing container for QoS classifiers
    """
    return self.__classifiers
      
  def _set_classifiers(self, v, load=False):
    """
    Setter method for classifiers, mapped from YANG variable /qos/classifiers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_classifiers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_classifiers() directly.

    YANG Description: Enclosing container for QoS classifiers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """classifiers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__classifiers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_classifiers(self):
    self.__classifiers = YANGDynClass(base=classifiers.classifiers, is_container='container', yang_name="classifiers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_forwarding_groups(self):
    """
    Getter method for forwarding_groups, mapped from YANG variable /qos/forwarding_groups (container)

    YANG Description: Enclosing container for list of forwarding groups
    """
    return self.__forwarding_groups
      
  def _set_forwarding_groups(self, v, load=False):
    """
    Setter method for forwarding_groups, mapped from YANG variable /qos/forwarding_groups (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_forwarding_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_forwarding_groups() directly.

    YANG Description: Enclosing container for list of forwarding groups
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """forwarding_groups must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__forwarding_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_forwarding_groups(self):
    self.__forwarding_groups = YANGDynClass(base=forwarding_groups.forwarding_groups, is_container='container', yang_name="forwarding-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queues(self):
    """
    Getter method for queues, mapped from YANG variable /qos/queues (container)

    YANG Description: Enclosing container for the list of queues
    """
    return self.__queues
      
  def _set_queues(self, v, load=False):
    """
    Setter method for queues, mapped from YANG variable /qos/queues (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queues is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queues() directly.

    YANG Description: Enclosing container for the list of queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queues must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queues = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queues(self):
    self.__queues = YANGDynClass(base=queues.queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_scheduler_policies(self):
    """
    Getter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    return self.__scheduler_policies
      
  def _set_scheduler_policies(self, v, load=False):
    """
    Setter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler_policies is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler_policies() directly.

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler_policies must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__scheduler_policies = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler_policies(self):
    self.__scheduler_policies = YANGDynClass(base=scheduler_policies.scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_buffer_allocation_profiles(self):
    """
    Getter method for buffer_allocation_profiles, mapped from YANG variable /qos/buffer_allocation_profiles (container)

    YANG Description: Surrounding container for buffer allocation profiles.
    """
    return self.__buffer_allocation_profiles
      
  def _set_buffer_allocation_profiles(self, v, load=False):
    """
    Setter method for buffer_allocation_profiles, mapped from YANG variable /qos/buffer_allocation_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_buffer_allocation_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_buffer_allocation_profiles() directly.

    YANG Description: Surrounding container for buffer allocation profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """buffer_allocation_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__buffer_allocation_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_buffer_allocation_profiles(self):
    self.__buffer_allocation_profiles = YANGDynClass(base=buffer_allocation_profiles.buffer_allocation_profiles, is_container='container', yang_name="buffer-allocation-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queue_management_profiles(self):
    """
    Getter method for queue_management_profiles, mapped from YANG variable /qos/queue_management_profiles (container)

    YANG Description: Surrounding container for the list of configured
queue management profiles.
    """
    return self.__queue_management_profiles
      
  def _set_queue_management_profiles(self, v, load=False):
    """
    Setter method for queue_management_profiles, mapped from YANG variable /qos/queue_management_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_management_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_management_profiles() directly.

    YANG Description: Surrounding container for the list of configured
queue management profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_management_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queue_management_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_management_profiles(self):
    self.__queue_management_profiles = YANGDynClass(base=queue_management_profiles.queue_management_profiles, is_container='container', yang_name="queue-management-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  interfaces = __builtin__.property(_get_interfaces, _set_interfaces)
  classifiers = __builtin__.property(_get_classifiers, _set_classifiers)
  forwarding_groups = __builtin__.property(_get_forwarding_groups, _set_forwarding_groups)
  queues = __builtin__.property(_get_queues, _set_queues)
  scheduler_policies = __builtin__.property(_get_scheduler_policies, _set_scheduler_policies)
  buffer_allocation_profiles = __builtin__.property(_get_buffer_allocation_profiles, _set_buffer_allocation_profiles)
  queue_management_profiles = __builtin__.property(_get_queue_management_profiles, _set_queue_management_profiles)


  _pyangbind_elements = OrderedDict([('interfaces', interfaces), ('classifiers', classifiers), ('forwarding_groups', forwarding_groups), ('queues', queues), ('scheduler_policies', scheduler_policies), ('buffer_allocation_profiles', buffer_allocation_profiles), ('queue_management_profiles', queue_management_profiles), ])


