# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import state
from . import ingress_tracking
from . import egress_tracking
class flow(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ate-flow - based on the path /flows/flow. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A flow of packets between one or more internal and external sources
and one or more internal and external destinations that the target
is able to track and report statistics on. Each flow is identified by
an arbitrary string identifier.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__state','__ingress_tracking','__egress_tracking',)

  _yang_name = 'flow'
  _yang_namespace = 'http://openconfig.net/yang/ate-flow'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)
    self.__ingress_tracking = YANGDynClass(base=ingress_tracking.ingress_tracking, is_container='container', yang_name="ingress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)
    self.__egress_tracking = YANGDynClass(base=egress_tracking.egress_tracking, is_container='container', yang_name="egress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['flows', 'flow']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /flows/flow/name (leafref)

    YANG Description: Reference to the flow's name, acting as a key of the flow list.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /flows/flow/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the flow's name, acting as a key of the flow list.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /flows/flow/state (container)

    YANG Description: Operational state of the individual flow.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /flows/flow/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state of the individual flow.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)


  def _get_ingress_tracking(self):
    """
    Getter method for ingress_tracking, mapped from YANG variable /flows/flow/ingress_tracking (container)

    YANG Description: Flow statistics grouped by ingress tracking filter.
    """
    return self.__ingress_tracking
      
  def _set_ingress_tracking(self, v, load=False):
    """
    Setter method for ingress_tracking, mapped from YANG variable /flows/flow/ingress_tracking (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ingress_tracking is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ingress_tracking() directly.

    YANG Description: Flow statistics grouped by ingress tracking filter.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ingress_tracking.ingress_tracking, is_container='container', yang_name="ingress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ingress_tracking must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ingress_tracking.ingress_tracking, is_container='container', yang_name="ingress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)""",
        })

    self.__ingress_tracking = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ingress_tracking(self):
    self.__ingress_tracking = YANGDynClass(base=ingress_tracking.ingress_tracking, is_container='container', yang_name="ingress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)


  def _get_egress_tracking(self):
    """
    Getter method for egress_tracking, mapped from YANG variable /flows/flow/egress_tracking (container)

    YANG Description: Flow statistics grouped by egress tracking filter.
    """
    return self.__egress_tracking
      
  def _set_egress_tracking(self, v, load=False):
    """
    Setter method for egress_tracking, mapped from YANG variable /flows/flow/egress_tracking (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_egress_tracking is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_egress_tracking() directly.

    YANG Description: Flow statistics grouped by egress tracking filter.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=egress_tracking.egress_tracking, is_container='container', yang_name="egress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """egress_tracking must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=egress_tracking.egress_tracking, is_container='container', yang_name="egress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)""",
        })

    self.__egress_tracking = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_egress_tracking(self):
    self.__egress_tracking = YANGDynClass(base=egress_tracking.egress_tracking, is_container='container', yang_name="egress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)

  name = __builtin__.property(_get_name)
  state = __builtin__.property(_get_state)
  ingress_tracking = __builtin__.property(_get_ingress_tracking)
  egress_tracking = __builtin__.property(_get_egress_tracking)


  _pyangbind_elements = OrderedDict([('name', name), ('state', state), ('ingress_tracking', ingress_tracking), ('egress_tracking', egress_tracking), ])


from . import state
from . import ingress_tracking
from . import egress_tracking
class flow(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ate-flow - based on the path /flows/flow. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A flow of packets between one or more internal and external sources
and one or more internal and external destinations that the target
is able to track and report statistics on. Each flow is identified by
an arbitrary string identifier.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__state','__ingress_tracking','__egress_tracking',)

  _yang_name = 'flow'
  _yang_namespace = 'http://openconfig.net/yang/ate-flow'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)
    self.__ingress_tracking = YANGDynClass(base=ingress_tracking.ingress_tracking, is_container='container', yang_name="ingress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)
    self.__egress_tracking = YANGDynClass(base=egress_tracking.egress_tracking, is_container='container', yang_name="egress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['flows', 'flow']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /flows/flow/name (leafref)

    YANG Description: Reference to the flow's name, acting as a key of the flow list.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /flows/flow/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the flow's name, acting as a key of the flow list.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /flows/flow/state (container)

    YANG Description: Operational state of the individual flow.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /flows/flow/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state of the individual flow.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)


  def _get_ingress_tracking(self):
    """
    Getter method for ingress_tracking, mapped from YANG variable /flows/flow/ingress_tracking (container)

    YANG Description: Flow statistics grouped by ingress tracking filter.
    """
    return self.__ingress_tracking
      
  def _set_ingress_tracking(self, v, load=False):
    """
    Setter method for ingress_tracking, mapped from YANG variable /flows/flow/ingress_tracking (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ingress_tracking is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ingress_tracking() directly.

    YANG Description: Flow statistics grouped by ingress tracking filter.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ingress_tracking.ingress_tracking, is_container='container', yang_name="ingress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ingress_tracking must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ingress_tracking.ingress_tracking, is_container='container', yang_name="ingress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)""",
        })

    self.__ingress_tracking = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ingress_tracking(self):
    self.__ingress_tracking = YANGDynClass(base=ingress_tracking.ingress_tracking, is_container='container', yang_name="ingress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)


  def _get_egress_tracking(self):
    """
    Getter method for egress_tracking, mapped from YANG variable /flows/flow/egress_tracking (container)

    YANG Description: Flow statistics grouped by egress tracking filter.
    """
    return self.__egress_tracking
      
  def _set_egress_tracking(self, v, load=False):
    """
    Setter method for egress_tracking, mapped from YANG variable /flows/flow/egress_tracking (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_egress_tracking is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_egress_tracking() directly.

    YANG Description: Flow statistics grouped by egress tracking filter.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=egress_tracking.egress_tracking, is_container='container', yang_name="egress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """egress_tracking must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=egress_tracking.egress_tracking, is_container='container', yang_name="egress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)""",
        })

    self.__egress_tracking = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_egress_tracking(self):
    self.__egress_tracking = YANGDynClass(base=egress_tracking.egress_tracking, is_container='container', yang_name="egress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)

  name = __builtin__.property(_get_name)
  state = __builtin__.property(_get_state)
  ingress_tracking = __builtin__.property(_get_ingress_tracking)
  egress_tracking = __builtin__.property(_get_egress_tracking)


  _pyangbind_elements = OrderedDict([('name', name), ('state', state), ('ingress_tracking', ingress_tracking), ('egress_tracking', egress_tracking), ])


