# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import state
from . import egress_tracking
class ingress_tracking(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ate-flow - based on the path /flows/flow/ingress-tracking/ingress-tracking. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: If the ATE is configured to track incoming frames by their header
fields, this list will map combinations of values of those header
fields to the flow statistics specific to frames that match that
combination.
  """
  __slots__ = ('_path_helper', '_extmethods', '__src_port','__dst_port','__mpls_label','__src_ipv4','__dst_ipv4','__src_ipv6','__dst_ipv6','__vlan_id','__state','__egress_tracking',)

  _yang_name = 'ingress-tracking'
  _yang_namespace = 'http://openconfig.net/yang/ate-flow'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__src_port = YANGDynClass(base=str, is_leaf=True, yang_name="src-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    self.__dst_port = YANGDynClass(base=str, is_leaf=True, yang_name="dst-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    self.__mpls_label = YANGDynClass(base=str, is_leaf=True, yang_name="mpls-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    self.__src_ipv4 = YANGDynClass(base=str, is_leaf=True, yang_name="src-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    self.__dst_ipv4 = YANGDynClass(base=str, is_leaf=True, yang_name="dst-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    self.__src_ipv6 = YANGDynClass(base=str, is_leaf=True, yang_name="src-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    self.__dst_ipv6 = YANGDynClass(base=str, is_leaf=True, yang_name="dst-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    self.__vlan_id = YANGDynClass(base=str, is_leaf=True, yang_name="vlan-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)
    self.__egress_tracking = YANGDynClass(base=egress_tracking.egress_tracking, is_container='container', yang_name="egress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['flows', 'flow', 'ingress-tracking', 'ingress-tracking']

  def _get_src_port(self):
    """
    Getter method for src_port, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/src_port (leafref)

    YANG Description: Value of the source port for ingress tracking.
    """
    return self.__src_port
      
  def _set_src_port(self, v, load=False):
    """
    Setter method for src_port, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/src_port (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_port() directly.

    YANG Description: Value of the source port for ingress tracking.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="src-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_port must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="src-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)""",
        })

    self.__src_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_port(self):
    self.__src_port = YANGDynClass(base=str, is_leaf=True, yang_name="src-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)


  def _get_dst_port(self):
    """
    Getter method for dst_port, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/dst_port (leafref)

    YANG Description: Value of the destination port for ingress tracking.
    """
    return self.__dst_port
      
  def _set_dst_port(self, v, load=False):
    """
    Setter method for dst_port, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/dst_port (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dst_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dst_port() directly.

    YANG Description: Value of the destination port for ingress tracking.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="dst-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dst_port must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="dst-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)""",
        })

    self.__dst_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dst_port(self):
    self.__dst_port = YANGDynClass(base=str, is_leaf=True, yang_name="dst-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)


  def _get_mpls_label(self):
    """
    Getter method for mpls_label, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/mpls_label (leafref)

    YANG Description: The MPLS label value of the traffic header.
    """
    return self.__mpls_label
      
  def _set_mpls_label(self, v, load=False):
    """
    Setter method for mpls_label, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/mpls_label (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_label() directly.

    YANG Description: The MPLS label value of the traffic header.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="mpls-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_label must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="mpls-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)""",
        })

    self.__mpls_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_label(self):
    self.__mpls_label = YANGDynClass(base=str, is_leaf=True, yang_name="mpls-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)


  def _get_src_ipv4(self):
    """
    Getter method for src_ipv4, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/src_ipv4 (leafref)

    YANG Description: The src IPv4 value of the traffic header.
    """
    return self.__src_ipv4
      
  def _set_src_ipv4(self, v, load=False):
    """
    Setter method for src_ipv4, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/src_ipv4 (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_ipv4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_ipv4() directly.

    YANG Description: The src IPv4 value of the traffic header.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="src-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_ipv4 must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="src-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)""",
        })

    self.__src_ipv4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_ipv4(self):
    self.__src_ipv4 = YANGDynClass(base=str, is_leaf=True, yang_name="src-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)


  def _get_dst_ipv4(self):
    """
    Getter method for dst_ipv4, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/dst_ipv4 (leafref)

    YANG Description: The dst IPv4 value of the traffic header.
    """
    return self.__dst_ipv4
      
  def _set_dst_ipv4(self, v, load=False):
    """
    Setter method for dst_ipv4, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/dst_ipv4 (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dst_ipv4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dst_ipv4() directly.

    YANG Description: The dst IPv4 value of the traffic header.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="dst-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dst_ipv4 must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="dst-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)""",
        })

    self.__dst_ipv4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dst_ipv4(self):
    self.__dst_ipv4 = YANGDynClass(base=str, is_leaf=True, yang_name="dst-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)


  def _get_src_ipv6(self):
    """
    Getter method for src_ipv6, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/src_ipv6 (leafref)

    YANG Description: The src IPv6 value of the traffic header.
    """
    return self.__src_ipv6
      
  def _set_src_ipv6(self, v, load=False):
    """
    Setter method for src_ipv6, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/src_ipv6 (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_ipv6 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_ipv6() directly.

    YANG Description: The src IPv6 value of the traffic header.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="src-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_ipv6 must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="src-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)""",
        })

    self.__src_ipv6 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_ipv6(self):
    self.__src_ipv6 = YANGDynClass(base=str, is_leaf=True, yang_name="src-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)


  def _get_dst_ipv6(self):
    """
    Getter method for dst_ipv6, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/dst_ipv6 (leafref)

    YANG Description: The dst IPv6 value of the traffic header.
    """
    return self.__dst_ipv6
      
  def _set_dst_ipv6(self, v, load=False):
    """
    Setter method for dst_ipv6, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/dst_ipv6 (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dst_ipv6 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dst_ipv6() directly.

    YANG Description: The dst IPv6 value of the traffic header.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="dst-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dst_ipv6 must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="dst-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)""",
        })

    self.__dst_ipv6 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dst_ipv6(self):
    self.__dst_ipv6 = YANGDynClass(base=str, is_leaf=True, yang_name="dst-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)


  def _get_vlan_id(self):
    """
    Getter method for vlan_id, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/vlan_id (leafref)

    YANG Description: The VLAN ID value of the traffic header.
    """
    return self.__vlan_id
      
  def _set_vlan_id(self, v, load=False):
    """
    Setter method for vlan_id, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/vlan_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vlan_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vlan_id() directly.

    YANG Description: The VLAN ID value of the traffic header.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="vlan-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vlan_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="vlan-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)""",
        })

    self.__vlan_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vlan_id(self):
    self.__vlan_id = YANGDynClass(base=str, is_leaf=True, yang_name="vlan-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/state (container)

    YANG Description: Operational state of the flow by ingress tracking filter.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state of the flow by ingress tracking filter.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)


  def _get_egress_tracking(self):
    """
    Getter method for egress_tracking, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/egress_tracking (container)

    YANG Description: Flow statistics grouped by egress tracking filter.
    """
    return self.__egress_tracking
      
  def _set_egress_tracking(self, v, load=False):
    """
    Setter method for egress_tracking, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/egress_tracking (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_egress_tracking is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_egress_tracking() directly.

    YANG Description: Flow statistics grouped by egress tracking filter.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=egress_tracking.egress_tracking, is_container='container', yang_name="egress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """egress_tracking must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=egress_tracking.egress_tracking, is_container='container', yang_name="egress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)""",
        })

    self.__egress_tracking = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_egress_tracking(self):
    self.__egress_tracking = YANGDynClass(base=egress_tracking.egress_tracking, is_container='container', yang_name="egress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)

  src_port = __builtin__.property(_get_src_port)
  dst_port = __builtin__.property(_get_dst_port)
  mpls_label = __builtin__.property(_get_mpls_label)
  src_ipv4 = __builtin__.property(_get_src_ipv4)
  dst_ipv4 = __builtin__.property(_get_dst_ipv4)
  src_ipv6 = __builtin__.property(_get_src_ipv6)
  dst_ipv6 = __builtin__.property(_get_dst_ipv6)
  vlan_id = __builtin__.property(_get_vlan_id)
  state = __builtin__.property(_get_state)
  egress_tracking = __builtin__.property(_get_egress_tracking)


  _pyangbind_elements = OrderedDict([('src_port', src_port), ('dst_port', dst_port), ('mpls_label', mpls_label), ('src_ipv4', src_ipv4), ('dst_ipv4', dst_ipv4), ('src_ipv6', src_ipv6), ('dst_ipv6', dst_ipv6), ('vlan_id', vlan_id), ('state', state), ('egress_tracking', egress_tracking), ])


from . import state
from . import egress_tracking
class ingress_tracking(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ate-flow - based on the path /flows/flow/ingress-tracking/ingress-tracking. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: If the ATE is configured to track incoming frames by their header
fields, this list will map combinations of values of those header
fields to the flow statistics specific to frames that match that
combination.
  """
  __slots__ = ('_path_helper', '_extmethods', '__src_port','__dst_port','__mpls_label','__src_ipv4','__dst_ipv4','__src_ipv6','__dst_ipv6','__vlan_id','__state','__egress_tracking',)

  _yang_name = 'ingress-tracking'
  _yang_namespace = 'http://openconfig.net/yang/ate-flow'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__src_port = YANGDynClass(base=str, is_leaf=True, yang_name="src-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    self.__dst_port = YANGDynClass(base=str, is_leaf=True, yang_name="dst-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    self.__mpls_label = YANGDynClass(base=str, is_leaf=True, yang_name="mpls-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    self.__src_ipv4 = YANGDynClass(base=str, is_leaf=True, yang_name="src-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    self.__dst_ipv4 = YANGDynClass(base=str, is_leaf=True, yang_name="dst-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    self.__src_ipv6 = YANGDynClass(base=str, is_leaf=True, yang_name="src-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    self.__dst_ipv6 = YANGDynClass(base=str, is_leaf=True, yang_name="dst-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    self.__vlan_id = YANGDynClass(base=str, is_leaf=True, yang_name="vlan-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)
    self.__egress_tracking = YANGDynClass(base=egress_tracking.egress_tracking, is_container='container', yang_name="egress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['flows', 'flow', 'ingress-tracking', 'ingress-tracking']

  def _get_src_port(self):
    """
    Getter method for src_port, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/src_port (leafref)

    YANG Description: Value of the source port for ingress tracking.
    """
    return self.__src_port
      
  def _set_src_port(self, v, load=False):
    """
    Setter method for src_port, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/src_port (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_port() directly.

    YANG Description: Value of the source port for ingress tracking.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="src-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_port must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="src-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)""",
        })

    self.__src_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_port(self):
    self.__src_port = YANGDynClass(base=str, is_leaf=True, yang_name="src-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)


  def _get_dst_port(self):
    """
    Getter method for dst_port, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/dst_port (leafref)

    YANG Description: Value of the destination port for ingress tracking.
    """
    return self.__dst_port
      
  def _set_dst_port(self, v, load=False):
    """
    Setter method for dst_port, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/dst_port (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dst_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dst_port() directly.

    YANG Description: Value of the destination port for ingress tracking.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="dst-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dst_port must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="dst-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)""",
        })

    self.__dst_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dst_port(self):
    self.__dst_port = YANGDynClass(base=str, is_leaf=True, yang_name="dst-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)


  def _get_mpls_label(self):
    """
    Getter method for mpls_label, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/mpls_label (leafref)

    YANG Description: The MPLS label value of the traffic header.
    """
    return self.__mpls_label
      
  def _set_mpls_label(self, v, load=False):
    """
    Setter method for mpls_label, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/mpls_label (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_label() directly.

    YANG Description: The MPLS label value of the traffic header.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="mpls-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_label must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="mpls-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)""",
        })

    self.__mpls_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_label(self):
    self.__mpls_label = YANGDynClass(base=str, is_leaf=True, yang_name="mpls-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)


  def _get_src_ipv4(self):
    """
    Getter method for src_ipv4, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/src_ipv4 (leafref)

    YANG Description: The src IPv4 value of the traffic header.
    """
    return self.__src_ipv4
      
  def _set_src_ipv4(self, v, load=False):
    """
    Setter method for src_ipv4, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/src_ipv4 (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_ipv4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_ipv4() directly.

    YANG Description: The src IPv4 value of the traffic header.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="src-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_ipv4 must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="src-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)""",
        })

    self.__src_ipv4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_ipv4(self):
    self.__src_ipv4 = YANGDynClass(base=str, is_leaf=True, yang_name="src-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)


  def _get_dst_ipv4(self):
    """
    Getter method for dst_ipv4, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/dst_ipv4 (leafref)

    YANG Description: The dst IPv4 value of the traffic header.
    """
    return self.__dst_ipv4
      
  def _set_dst_ipv4(self, v, load=False):
    """
    Setter method for dst_ipv4, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/dst_ipv4 (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dst_ipv4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dst_ipv4() directly.

    YANG Description: The dst IPv4 value of the traffic header.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="dst-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dst_ipv4 must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="dst-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)""",
        })

    self.__dst_ipv4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dst_ipv4(self):
    self.__dst_ipv4 = YANGDynClass(base=str, is_leaf=True, yang_name="dst-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)


  def _get_src_ipv6(self):
    """
    Getter method for src_ipv6, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/src_ipv6 (leafref)

    YANG Description: The src IPv6 value of the traffic header.
    """
    return self.__src_ipv6
      
  def _set_src_ipv6(self, v, load=False):
    """
    Setter method for src_ipv6, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/src_ipv6 (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_ipv6 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_ipv6() directly.

    YANG Description: The src IPv6 value of the traffic header.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="src-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_ipv6 must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="src-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)""",
        })

    self.__src_ipv6 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_ipv6(self):
    self.__src_ipv6 = YANGDynClass(base=str, is_leaf=True, yang_name="src-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)


  def _get_dst_ipv6(self):
    """
    Getter method for dst_ipv6, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/dst_ipv6 (leafref)

    YANG Description: The dst IPv6 value of the traffic header.
    """
    return self.__dst_ipv6
      
  def _set_dst_ipv6(self, v, load=False):
    """
    Setter method for dst_ipv6, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/dst_ipv6 (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dst_ipv6 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dst_ipv6() directly.

    YANG Description: The dst IPv6 value of the traffic header.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="dst-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dst_ipv6 must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="dst-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)""",
        })

    self.__dst_ipv6 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dst_ipv6(self):
    self.__dst_ipv6 = YANGDynClass(base=str, is_leaf=True, yang_name="dst-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)


  def _get_vlan_id(self):
    """
    Getter method for vlan_id, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/vlan_id (leafref)

    YANG Description: The VLAN ID value of the traffic header.
    """
    return self.__vlan_id
      
  def _set_vlan_id(self, v, load=False):
    """
    Setter method for vlan_id, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/vlan_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vlan_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vlan_id() directly.

    YANG Description: The VLAN ID value of the traffic header.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="vlan-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vlan_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="vlan-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)""",
        })

    self.__vlan_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vlan_id(self):
    self.__vlan_id = YANGDynClass(base=str, is_leaf=True, yang_name="vlan-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/state (container)

    YANG Description: Operational state of the flow by ingress tracking filter.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state of the flow by ingress tracking filter.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)


  def _get_egress_tracking(self):
    """
    Getter method for egress_tracking, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/egress_tracking (container)

    YANG Description: Flow statistics grouped by egress tracking filter.
    """
    return self.__egress_tracking
      
  def _set_egress_tracking(self, v, load=False):
    """
    Setter method for egress_tracking, mapped from YANG variable /flows/flow/ingress_tracking/ingress_tracking/egress_tracking (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_egress_tracking is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_egress_tracking() directly.

    YANG Description: Flow statistics grouped by egress tracking filter.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=egress_tracking.egress_tracking, is_container='container', yang_name="egress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """egress_tracking must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=egress_tracking.egress_tracking, is_container='container', yang_name="egress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)""",
        })

    self.__egress_tracking = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_egress_tracking(self):
    self.__egress_tracking = YANGDynClass(base=egress_tracking.egress_tracking, is_container='container', yang_name="egress-tracking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)

  src_port = __builtin__.property(_get_src_port)
  dst_port = __builtin__.property(_get_dst_port)
  mpls_label = __builtin__.property(_get_mpls_label)
  src_ipv4 = __builtin__.property(_get_src_ipv4)
  dst_ipv4 = __builtin__.property(_get_dst_ipv4)
  src_ipv6 = __builtin__.property(_get_src_ipv6)
  dst_ipv6 = __builtin__.property(_get_dst_ipv6)
  vlan_id = __builtin__.property(_get_vlan_id)
  state = __builtin__.property(_get_state)
  egress_tracking = __builtin__.property(_get_egress_tracking)


  _pyangbind_elements = OrderedDict([('src_port', src_port), ('dst_port', dst_port), ('mpls_label', mpls_label), ('src_ipv4', src_ipv4), ('dst_ipv4', dst_ipv4), ('src_ipv6', src_ipv6), ('dst_ipv6', dst_ipv6), ('vlan_id', vlan_id), ('state', state), ('egress_tracking', egress_tracking), ])


