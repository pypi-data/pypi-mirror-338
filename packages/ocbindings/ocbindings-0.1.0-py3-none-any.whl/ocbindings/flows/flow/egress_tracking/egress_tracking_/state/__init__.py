# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import counters
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ate-flow - based on the path /flows/flow/egress-tracking/egress-tracking/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state of the flow by egress tracking filter.
  """
  __slots__ = ('_path_helper', '_extmethods', '__filter','__loss_pct','__out_frame_rate','__in_frame_rate','__out_rate','__in_rate','__first_packet_latency','__convergence_time','__counters',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/ate-flow'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__filter = YANGDynClass(base=str, is_leaf=True, yang_name="filter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='string', is_config=False)
    self.__loss_pct = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="loss-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    self.__out_frame_rate = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="out-frame-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    self.__in_frame_rate = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="in-frame-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    self.__out_rate = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="out-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    self.__in_rate = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="in-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    self.__first_packet_latency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="first-packet-latency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:timeticks64', is_config=False)
    self.__convergence_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="convergence-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:timeticks64', is_config=False)
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['flows', 'flow', 'egress-tracking', 'egress-tracking', 'state']

  def _get_filter(self):
    """
    Getter method for filter, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/filter (string)

    YANG Description: Value of the filter on which the egress stats are tracked
    """
    return self.__filter
      
  def _set_filter(self, v, load=False):
    """
    Setter method for filter, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/filter (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_filter is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_filter() directly.

    YANG Description: Value of the filter on which the egress stats are tracked
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="filter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """filter must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="filter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='string', is_config=False)""",
        })

    self.__filter = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_filter(self):
    self.__filter = YANGDynClass(base=str, is_leaf=True, yang_name="filter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='string', is_config=False)


  def _get_loss_pct(self):
    """
    Getter method for loss_pct, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/loss_pct (oc-types:ieeefloat32)

    YANG Description: The percentage of transmitted packets that were not received by the
destinations of the flow.
    """
    return self.__loss_pct
      
  def _set_loss_pct(self, v, load=False):
    """
    Setter method for loss_pct, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/loss_pct (oc-types:ieeefloat32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_loss_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_loss_pct() directly.

    YANG Description: The percentage of transmitted packets that were not received by the
destinations of the flow.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="loss-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """loss_pct must be of a type compatible with oc-types:ieeefloat32""",
          'defined-type': "oc-types:ieeefloat32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="loss-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)""",
        })

    self.__loss_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_loss_pct(self):
    self.__loss_pct = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="loss-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)


  def _get_out_frame_rate(self):
    """
    Getter method for out_frame_rate, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/out_frame_rate (oc-types:ieeefloat32)

    YANG Description: The rate, measured in frames per second, at which frames are being
transmitted for the flow.
    """
    return self.__out_frame_rate
      
  def _set_out_frame_rate(self, v, load=False):
    """
    Setter method for out_frame_rate, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/out_frame_rate (oc-types:ieeefloat32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_frame_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_frame_rate() directly.

    YANG Description: The rate, measured in frames per second, at which frames are being
transmitted for the flow.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="out-frame-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_frame_rate must be of a type compatible with oc-types:ieeefloat32""",
          'defined-type': "oc-types:ieeefloat32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="out-frame-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)""",
        })

    self.__out_frame_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_frame_rate(self):
    self.__out_frame_rate = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="out-frame-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)


  def _get_in_frame_rate(self):
    """
    Getter method for in_frame_rate, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/in_frame_rate (oc-types:ieeefloat32)

    YANG Description: The rate, measured in frames per second, at which frames are being
received for the flow.
    """
    return self.__in_frame_rate
      
  def _set_in_frame_rate(self, v, load=False):
    """
    Setter method for in_frame_rate, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/in_frame_rate (oc-types:ieeefloat32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_frame_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_frame_rate() directly.

    YANG Description: The rate, measured in frames per second, at which frames are being
received for the flow.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="in-frame-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_frame_rate must be of a type compatible with oc-types:ieeefloat32""",
          'defined-type': "oc-types:ieeefloat32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="in-frame-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)""",
        })

    self.__in_frame_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_frame_rate(self):
    self.__in_frame_rate = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="in-frame-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)


  def _get_out_rate(self):
    """
    Getter method for out_rate, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/out_rate (oc-types:ieeefloat32)

    YANG Description: The rate, measured in bits per second, at which the flow is being
transmitted.
    """
    return self.__out_rate
      
  def _set_out_rate(self, v, load=False):
    """
    Setter method for out_rate, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/out_rate (oc-types:ieeefloat32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_rate() directly.

    YANG Description: The rate, measured in bits per second, at which the flow is being
transmitted.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="out-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_rate must be of a type compatible with oc-types:ieeefloat32""",
          'defined-type': "oc-types:ieeefloat32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="out-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)""",
        })

    self.__out_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_rate(self):
    self.__out_rate = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="out-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)


  def _get_in_rate(self):
    """
    Getter method for in_rate, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/in_rate (oc-types:ieeefloat32)

    YANG Description: The rate, measured in bits per second, at which the flow is being
received.
    """
    return self.__in_rate
      
  def _set_in_rate(self, v, load=False):
    """
    Setter method for in_rate, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/in_rate (oc-types:ieeefloat32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_rate() directly.

    YANG Description: The rate, measured in bits per second, at which the flow is being
received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="in-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_rate must be of a type compatible with oc-types:ieeefloat32""",
          'defined-type': "oc-types:ieeefloat32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="in-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)""",
        })

    self.__in_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_rate(self):
    self.__in_rate = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="in-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)


  def _get_first_packet_latency(self):
    """
    Getter method for first_packet_latency, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/first_packet_latency (oc-types:timeticks64)

    YANG Description: The time from when the flow was started to when the first packet was
received.
    """
    return self.__first_packet_latency
      
  def _set_first_packet_latency(self, v, load=False):
    """
    Setter method for first_packet_latency, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/first_packet_latency (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_first_packet_latency is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_first_packet_latency() directly.

    YANG Description: The time from when the flow was started to when the first packet was
received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="first-packet-latency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """first_packet_latency must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="first-packet-latency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__first_packet_latency = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_first_packet_latency(self):
    self.__first_packet_latency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="first-packet-latency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:timeticks64', is_config=False)


  def _get_convergence_time(self):
    """
    Getter method for convergence_time, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/convergence_time (oc-types:timeticks64)

    YANG Description: The time from when the first packet was received to when traffic
loss dropped below a minimal threshold value.
    """
    return self.__convergence_time
      
  def _set_convergence_time(self, v, load=False):
    """
    Setter method for convergence_time, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/convergence_time (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_convergence_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_convergence_time() directly.

    YANG Description: The time from when the first packet was received to when traffic
loss dropped below a minimal threshold value.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="convergence-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """convergence_time must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="convergence-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__convergence_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_convergence_time(self):
    self.__convergence_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="convergence-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:timeticks64', is_config=False)


  def _get_counters(self):
    """
    Getter method for counters, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/counters (container)

    YANG Description: Counters that correspond to the flow by egress tracking filter.
    """
    return self.__counters
      
  def _set_counters(self, v, load=False):
    """
    Setter method for counters, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/counters (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_counters is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_counters() directly.

    YANG Description: Counters that correspond to the flow by egress tracking filter.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """counters must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)""",
        })

    self.__counters = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_counters(self):
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)

  filter = __builtin__.property(_get_filter)
  loss_pct = __builtin__.property(_get_loss_pct)
  out_frame_rate = __builtin__.property(_get_out_frame_rate)
  in_frame_rate = __builtin__.property(_get_in_frame_rate)
  out_rate = __builtin__.property(_get_out_rate)
  in_rate = __builtin__.property(_get_in_rate)
  first_packet_latency = __builtin__.property(_get_first_packet_latency)
  convergence_time = __builtin__.property(_get_convergence_time)
  counters = __builtin__.property(_get_counters)


  _pyangbind_elements = OrderedDict([('filter', filter), ('loss_pct', loss_pct), ('out_frame_rate', out_frame_rate), ('in_frame_rate', in_frame_rate), ('out_rate', out_rate), ('in_rate', in_rate), ('first_packet_latency', first_packet_latency), ('convergence_time', convergence_time), ('counters', counters), ])


from . import counters
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ate-flow - based on the path /flows/flow/egress-tracking/egress-tracking/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state of the flow by egress tracking filter.
  """
  __slots__ = ('_path_helper', '_extmethods', '__filter','__loss_pct','__out_frame_rate','__in_frame_rate','__out_rate','__in_rate','__first_packet_latency','__convergence_time','__counters',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/ate-flow'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__filter = YANGDynClass(base=str, is_leaf=True, yang_name="filter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='string', is_config=False)
    self.__loss_pct = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="loss-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    self.__out_frame_rate = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="out-frame-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    self.__in_frame_rate = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="in-frame-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    self.__out_rate = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="out-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    self.__in_rate = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="in-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    self.__first_packet_latency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="first-packet-latency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:timeticks64', is_config=False)
    self.__convergence_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="convergence-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:timeticks64', is_config=False)
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['flows', 'flow', 'egress-tracking', 'egress-tracking', 'state']

  def _get_filter(self):
    """
    Getter method for filter, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/filter (string)

    YANG Description: Value of the filter on which the egress stats are tracked
    """
    return self.__filter
      
  def _set_filter(self, v, load=False):
    """
    Setter method for filter, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/filter (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_filter is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_filter() directly.

    YANG Description: Value of the filter on which the egress stats are tracked
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="filter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """filter must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="filter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='string', is_config=False)""",
        })

    self.__filter = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_filter(self):
    self.__filter = YANGDynClass(base=str, is_leaf=True, yang_name="filter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='string', is_config=False)


  def _get_loss_pct(self):
    """
    Getter method for loss_pct, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/loss_pct (oc-types:ieeefloat32)

    YANG Description: The percentage of transmitted packets that were not received by the
destinations of the flow.
    """
    return self.__loss_pct
      
  def _set_loss_pct(self, v, load=False):
    """
    Setter method for loss_pct, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/loss_pct (oc-types:ieeefloat32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_loss_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_loss_pct() directly.

    YANG Description: The percentage of transmitted packets that were not received by the
destinations of the flow.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="loss-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """loss_pct must be of a type compatible with oc-types:ieeefloat32""",
          'defined-type': "oc-types:ieeefloat32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="loss-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)""",
        })

    self.__loss_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_loss_pct(self):
    self.__loss_pct = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="loss-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)


  def _get_out_frame_rate(self):
    """
    Getter method for out_frame_rate, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/out_frame_rate (oc-types:ieeefloat32)

    YANG Description: The rate, measured in frames per second, at which frames are being
transmitted for the flow.
    """
    return self.__out_frame_rate
      
  def _set_out_frame_rate(self, v, load=False):
    """
    Setter method for out_frame_rate, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/out_frame_rate (oc-types:ieeefloat32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_frame_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_frame_rate() directly.

    YANG Description: The rate, measured in frames per second, at which frames are being
transmitted for the flow.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="out-frame-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_frame_rate must be of a type compatible with oc-types:ieeefloat32""",
          'defined-type': "oc-types:ieeefloat32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="out-frame-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)""",
        })

    self.__out_frame_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_frame_rate(self):
    self.__out_frame_rate = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="out-frame-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)


  def _get_in_frame_rate(self):
    """
    Getter method for in_frame_rate, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/in_frame_rate (oc-types:ieeefloat32)

    YANG Description: The rate, measured in frames per second, at which frames are being
received for the flow.
    """
    return self.__in_frame_rate
      
  def _set_in_frame_rate(self, v, load=False):
    """
    Setter method for in_frame_rate, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/in_frame_rate (oc-types:ieeefloat32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_frame_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_frame_rate() directly.

    YANG Description: The rate, measured in frames per second, at which frames are being
received for the flow.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="in-frame-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_frame_rate must be of a type compatible with oc-types:ieeefloat32""",
          'defined-type': "oc-types:ieeefloat32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="in-frame-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)""",
        })

    self.__in_frame_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_frame_rate(self):
    self.__in_frame_rate = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="in-frame-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)


  def _get_out_rate(self):
    """
    Getter method for out_rate, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/out_rate (oc-types:ieeefloat32)

    YANG Description: The rate, measured in bits per second, at which the flow is being
transmitted.
    """
    return self.__out_rate
      
  def _set_out_rate(self, v, load=False):
    """
    Setter method for out_rate, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/out_rate (oc-types:ieeefloat32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_rate() directly.

    YANG Description: The rate, measured in bits per second, at which the flow is being
transmitted.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="out-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_rate must be of a type compatible with oc-types:ieeefloat32""",
          'defined-type': "oc-types:ieeefloat32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="out-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)""",
        })

    self.__out_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_rate(self):
    self.__out_rate = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="out-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)


  def _get_in_rate(self):
    """
    Getter method for in_rate, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/in_rate (oc-types:ieeefloat32)

    YANG Description: The rate, measured in bits per second, at which the flow is being
received.
    """
    return self.__in_rate
      
  def _set_in_rate(self, v, load=False):
    """
    Setter method for in_rate, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/in_rate (oc-types:ieeefloat32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_rate() directly.

    YANG Description: The rate, measured in bits per second, at which the flow is being
received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="in-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_rate must be of a type compatible with oc-types:ieeefloat32""",
          'defined-type': "oc-types:ieeefloat32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="in-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)""",
        })

    self.__in_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_rate(self):
    self.__in_rate = YANGDynClass(base=RestrictedClassType(base_type=YANGBinary, restriction_dict={'length': ['4']}), is_leaf=True, yang_name="in-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:ieeefloat32', is_config=False)


  def _get_first_packet_latency(self):
    """
    Getter method for first_packet_latency, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/first_packet_latency (oc-types:timeticks64)

    YANG Description: The time from when the flow was started to when the first packet was
received.
    """
    return self.__first_packet_latency
      
  def _set_first_packet_latency(self, v, load=False):
    """
    Setter method for first_packet_latency, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/first_packet_latency (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_first_packet_latency is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_first_packet_latency() directly.

    YANG Description: The time from when the flow was started to when the first packet was
received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="first-packet-latency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """first_packet_latency must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="first-packet-latency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__first_packet_latency = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_first_packet_latency(self):
    self.__first_packet_latency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="first-packet-latency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:timeticks64', is_config=False)


  def _get_convergence_time(self):
    """
    Getter method for convergence_time, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/convergence_time (oc-types:timeticks64)

    YANG Description: The time from when the first packet was received to when traffic
loss dropped below a minimal threshold value.
    """
    return self.__convergence_time
      
  def _set_convergence_time(self, v, load=False):
    """
    Setter method for convergence_time, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/convergence_time (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_convergence_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_convergence_time() directly.

    YANG Description: The time from when the first packet was received to when traffic
loss dropped below a minimal threshold value.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="convergence-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """convergence_time must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="convergence-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__convergence_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_convergence_time(self):
    self.__convergence_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="convergence-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='oc-types:timeticks64', is_config=False)


  def _get_counters(self):
    """
    Getter method for counters, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/counters (container)

    YANG Description: Counters that correspond to the flow by egress tracking filter.
    """
    return self.__counters
      
  def _set_counters(self, v, load=False):
    """
    Setter method for counters, mapped from YANG variable /flows/flow/egress_tracking/egress_tracking/state/counters (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_counters is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_counters() directly.

    YANG Description: Counters that correspond to the flow by egress tracking filter.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """counters must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)""",
        })

    self.__counters = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_counters(self):
    self.__counters = YANGDynClass(base=counters.counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ate-flow', defining_module='openconfig-ate-flow', yang_type='container', is_config=False)

  filter = __builtin__.property(_get_filter)
  loss_pct = __builtin__.property(_get_loss_pct)
  out_frame_rate = __builtin__.property(_get_out_frame_rate)
  in_frame_rate = __builtin__.property(_get_in_frame_rate)
  out_rate = __builtin__.property(_get_out_rate)
  in_rate = __builtin__.property(_get_in_rate)
  first_packet_latency = __builtin__.property(_get_first_packet_latency)
  convergence_time = __builtin__.property(_get_convergence_time)
  counters = __builtin__.property(_get_counters)


  _pyangbind_elements = OrderedDict([('filter', filter), ('loss_pct', loss_pct), ('out_frame_rate', out_frame_rate), ('in_frame_rate', in_frame_rate), ('out_rate', out_rate), ('in_rate', in_rate), ('first_packet_latency', first_packet_latency), ('convergence_time', convergence_time), ('counters', counters), ])


