# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import config
from . import state
from . import community_count
from . import ext_community_count
from . import as_path_length
from . import match_as_path_set
from . import match_community_set
from . import match_ext_community_set
class bgp_conditions(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-routing-policy - based on the path /routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container 
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__community_count','__ext_community_count','__as_path_length','__match_as_path_set','__match_community_set','__match_ext_community_set',)

  _yang_name = 'bgp-conditions'
  _yang_namespace = 'http://openconfig.net/yang/routing-policy'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=False)
    self.__community_count = YANGDynClass(base=community_count.community_count, is_container='container', yang_name="community-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    self.__ext_community_count = YANGDynClass(base=ext_community_count.ext_community_count, is_container='container', yang_name="ext-community-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    self.__as_path_length = YANGDynClass(base=as_path_length.as_path_length, is_container='container', yang_name="as-path-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    self.__match_as_path_set = YANGDynClass(base=match_as_path_set.match_as_path_set, is_container='container', yang_name="match-as-path-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    self.__match_community_set = YANGDynClass(base=match_community_set.match_community_set, is_container='container', yang_name="match-community-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    self.__match_ext_community_set = YANGDynClass(base=match_ext_community_set.match_ext_community_set, is_container='container', yang_name="match-ext-community-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['routing-policy', 'policy-definitions', 'policy-definition', 'statements', 'statement', 'conditions', 'bgp-conditions']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/config (container)

    YANG Description: Configuration data for BGP-specific policy conditions
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for BGP-specific policy conditions
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/state (container)

    YANG Description: Operational state data for BGP-specific policy
conditions
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for BGP-specific policy
conditions
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=False)


  def _get_community_count(self):
    """
    Getter method for community_count, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/community_count (container)

    YANG Description: Value and comparison operations for conditions based on the
number of regular communities in the route update.
    """
    return self.__community_count
      
  def _set_community_count(self, v, load=False):
    """
    Setter method for community_count, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/community_count (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community_count() directly.

    YANG Description: Value and comparison operations for conditions based on the
number of regular communities in the route update.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=community_count.community_count, is_container='container', yang_name="community-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community_count must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=community_count.community_count, is_container='container', yang_name="community-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)""",
        })

    self.__community_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community_count(self):
    self.__community_count = YANGDynClass(base=community_count.community_count, is_container='container', yang_name="community-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)


  def _get_ext_community_count(self):
    """
    Getter method for ext_community_count, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/ext_community_count (container)

    YANG Description: Value and comparison operations for conditions based on the
number of extended communities in the route update.
    """
    return self.__ext_community_count
      
  def _set_ext_community_count(self, v, load=False):
    """
    Setter method for ext_community_count, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/ext_community_count (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_community_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_community_count() directly.

    YANG Description: Value and comparison operations for conditions based on the
number of extended communities in the route update.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ext_community_count.ext_community_count, is_container='container', yang_name="ext-community-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_community_count must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ext_community_count.ext_community_count, is_container='container', yang_name="ext-community-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)""",
        })

    self.__ext_community_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_community_count(self):
    self.__ext_community_count = YANGDynClass(base=ext_community_count.ext_community_count, is_container='container', yang_name="ext-community-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)


  def _get_as_path_length(self):
    """
    Getter method for as_path_length, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/as_path_length (container)

    YANG Description: Value and comparison operations for conditions based on the
length of the AS path in the route update
    """
    return self.__as_path_length
      
  def _set_as_path_length(self, v, load=False):
    """
    Setter method for as_path_length, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/as_path_length (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_as_path_length is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_as_path_length() directly.

    YANG Description: Value and comparison operations for conditions based on the
length of the AS path in the route update
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=as_path_length.as_path_length, is_container='container', yang_name="as-path-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """as_path_length must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=as_path_length.as_path_length, is_container='container', yang_name="as-path-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)""",
        })

    self.__as_path_length = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_as_path_length(self):
    self.__as_path_length = YANGDynClass(base=as_path_length.as_path_length, is_container='container', yang_name="as-path-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)


  def _get_match_as_path_set(self):
    """
    Getter method for match_as_path_set, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/match_as_path_set (container)

    YANG Description: Match a referenced as-path set according to the logic
defined in the match-set-options leaf
    """
    return self.__match_as_path_set
      
  def _set_match_as_path_set(self, v, load=False):
    """
    Setter method for match_as_path_set, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/match_as_path_set (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_match_as_path_set is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_match_as_path_set() directly.

    YANG Description: Match a referenced as-path set according to the logic
defined in the match-set-options leaf
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=match_as_path_set.match_as_path_set, is_container='container', yang_name="match-as-path-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """match_as_path_set must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=match_as_path_set.match_as_path_set, is_container='container', yang_name="match-as-path-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)""",
        })

    self.__match_as_path_set = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_match_as_path_set(self):
    self.__match_as_path_set = YANGDynClass(base=match_as_path_set.match_as_path_set, is_container='container', yang_name="match-as-path-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)


  def _get_match_community_set(self):
    """
    Getter method for match_community_set, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/match_community_set (container)

    YANG Description: Match a referenced community set according to the logic
defined in the match-set-options leaf
    """
    return self.__match_community_set
      
  def _set_match_community_set(self, v, load=False):
    """
    Setter method for match_community_set, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/match_community_set (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_match_community_set is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_match_community_set() directly.

    YANG Description: Match a referenced community set according to the logic
defined in the match-set-options leaf
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=match_community_set.match_community_set, is_container='container', yang_name="match-community-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """match_community_set must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=match_community_set.match_community_set, is_container='container', yang_name="match-community-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)""",
        })

    self.__match_community_set = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_match_community_set(self):
    self.__match_community_set = YANGDynClass(base=match_community_set.match_community_set, is_container='container', yang_name="match-community-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)


  def _get_match_ext_community_set(self):
    """
    Getter method for match_ext_community_set, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/match_ext_community_set (container)

    YANG Description: Match a referenced extended community set according to the logic
defined in the match-set-options leaf
    """
    return self.__match_ext_community_set
      
  def _set_match_ext_community_set(self, v, load=False):
    """
    Setter method for match_ext_community_set, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/match_ext_community_set (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_match_ext_community_set is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_match_ext_community_set() directly.

    YANG Description: Match a referenced extended community set according to the logic
defined in the match-set-options leaf
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=match_ext_community_set.match_ext_community_set, is_container='container', yang_name="match-ext-community-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """match_ext_community_set must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=match_ext_community_set.match_ext_community_set, is_container='container', yang_name="match-ext-community-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)""",
        })

    self.__match_ext_community_set = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_match_ext_community_set(self):
    self.__match_ext_community_set = YANGDynClass(base=match_ext_community_set.match_ext_community_set, is_container='container', yang_name="match-ext-community-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  community_count = __builtin__.property(_get_community_count, _set_community_count)
  ext_community_count = __builtin__.property(_get_ext_community_count, _set_ext_community_count)
  as_path_length = __builtin__.property(_get_as_path_length, _set_as_path_length)
  match_as_path_set = __builtin__.property(_get_match_as_path_set, _set_match_as_path_set)
  match_community_set = __builtin__.property(_get_match_community_set, _set_match_community_set)
  match_ext_community_set = __builtin__.property(_get_match_ext_community_set, _set_match_ext_community_set)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('community_count', community_count), ('ext_community_count', ext_community_count), ('as_path_length', as_path_length), ('match_as_path_set', match_as_path_set), ('match_community_set', match_community_set), ('match_ext_community_set', match_ext_community_set), ])


from . import config
from . import state
from . import community_count
from . import ext_community_count
from . import as_path_length
from . import match_as_path_set
from . import match_community_set
from . import match_ext_community_set
class bgp_conditions(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-routing-policy - based on the path /routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container 
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__community_count','__ext_community_count','__as_path_length','__match_as_path_set','__match_community_set','__match_ext_community_set',)

  _yang_name = 'bgp-conditions'
  _yang_namespace = 'http://openconfig.net/yang/routing-policy'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=False)
    self.__community_count = YANGDynClass(base=community_count.community_count, is_container='container', yang_name="community-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    self.__ext_community_count = YANGDynClass(base=ext_community_count.ext_community_count, is_container='container', yang_name="ext-community-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    self.__as_path_length = YANGDynClass(base=as_path_length.as_path_length, is_container='container', yang_name="as-path-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    self.__match_as_path_set = YANGDynClass(base=match_as_path_set.match_as_path_set, is_container='container', yang_name="match-as-path-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    self.__match_community_set = YANGDynClass(base=match_community_set.match_community_set, is_container='container', yang_name="match-community-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    self.__match_ext_community_set = YANGDynClass(base=match_ext_community_set.match_ext_community_set, is_container='container', yang_name="match-ext-community-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['routing-policy', 'policy-definitions', 'policy-definition', 'statements', 'statement', 'conditions', 'bgp-conditions']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/config (container)

    YANG Description: Configuration data for BGP-specific policy conditions
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for BGP-specific policy conditions
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/state (container)

    YANG Description: Operational state data for BGP-specific policy
conditions
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for BGP-specific policy
conditions
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=False)


  def _get_community_count(self):
    """
    Getter method for community_count, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/community_count (container)

    YANG Description: Value and comparison operations for conditions based on the
number of regular communities in the route update.
    """
    return self.__community_count
      
  def _set_community_count(self, v, load=False):
    """
    Setter method for community_count, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/community_count (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community_count() directly.

    YANG Description: Value and comparison operations for conditions based on the
number of regular communities in the route update.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=community_count.community_count, is_container='container', yang_name="community-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community_count must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=community_count.community_count, is_container='container', yang_name="community-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)""",
        })

    self.__community_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community_count(self):
    self.__community_count = YANGDynClass(base=community_count.community_count, is_container='container', yang_name="community-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)


  def _get_ext_community_count(self):
    """
    Getter method for ext_community_count, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/ext_community_count (container)

    YANG Description: Value and comparison operations for conditions based on the
number of extended communities in the route update.
    """
    return self.__ext_community_count
      
  def _set_ext_community_count(self, v, load=False):
    """
    Setter method for ext_community_count, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/ext_community_count (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_community_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_community_count() directly.

    YANG Description: Value and comparison operations for conditions based on the
number of extended communities in the route update.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ext_community_count.ext_community_count, is_container='container', yang_name="ext-community-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_community_count must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ext_community_count.ext_community_count, is_container='container', yang_name="ext-community-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)""",
        })

    self.__ext_community_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_community_count(self):
    self.__ext_community_count = YANGDynClass(base=ext_community_count.ext_community_count, is_container='container', yang_name="ext-community-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)


  def _get_as_path_length(self):
    """
    Getter method for as_path_length, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/as_path_length (container)

    YANG Description: Value and comparison operations for conditions based on the
length of the AS path in the route update
    """
    return self.__as_path_length
      
  def _set_as_path_length(self, v, load=False):
    """
    Setter method for as_path_length, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/as_path_length (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_as_path_length is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_as_path_length() directly.

    YANG Description: Value and comparison operations for conditions based on the
length of the AS path in the route update
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=as_path_length.as_path_length, is_container='container', yang_name="as-path-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """as_path_length must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=as_path_length.as_path_length, is_container='container', yang_name="as-path-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)""",
        })

    self.__as_path_length = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_as_path_length(self):
    self.__as_path_length = YANGDynClass(base=as_path_length.as_path_length, is_container='container', yang_name="as-path-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)


  def _get_match_as_path_set(self):
    """
    Getter method for match_as_path_set, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/match_as_path_set (container)

    YANG Description: Match a referenced as-path set according to the logic
defined in the match-set-options leaf
    """
    return self.__match_as_path_set
      
  def _set_match_as_path_set(self, v, load=False):
    """
    Setter method for match_as_path_set, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/match_as_path_set (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_match_as_path_set is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_match_as_path_set() directly.

    YANG Description: Match a referenced as-path set according to the logic
defined in the match-set-options leaf
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=match_as_path_set.match_as_path_set, is_container='container', yang_name="match-as-path-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """match_as_path_set must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=match_as_path_set.match_as_path_set, is_container='container', yang_name="match-as-path-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)""",
        })

    self.__match_as_path_set = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_match_as_path_set(self):
    self.__match_as_path_set = YANGDynClass(base=match_as_path_set.match_as_path_set, is_container='container', yang_name="match-as-path-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)


  def _get_match_community_set(self):
    """
    Getter method for match_community_set, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/match_community_set (container)

    YANG Description: Match a referenced community set according to the logic
defined in the match-set-options leaf
    """
    return self.__match_community_set
      
  def _set_match_community_set(self, v, load=False):
    """
    Setter method for match_community_set, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/match_community_set (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_match_community_set is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_match_community_set() directly.

    YANG Description: Match a referenced community set according to the logic
defined in the match-set-options leaf
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=match_community_set.match_community_set, is_container='container', yang_name="match-community-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """match_community_set must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=match_community_set.match_community_set, is_container='container', yang_name="match-community-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)""",
        })

    self.__match_community_set = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_match_community_set(self):
    self.__match_community_set = YANGDynClass(base=match_community_set.match_community_set, is_container='container', yang_name="match-community-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)


  def _get_match_ext_community_set(self):
    """
    Getter method for match_ext_community_set, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/match_ext_community_set (container)

    YANG Description: Match a referenced extended community set according to the logic
defined in the match-set-options leaf
    """
    return self.__match_ext_community_set
      
  def _set_match_ext_community_set(self, v, load=False):
    """
    Setter method for match_ext_community_set, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/bgp_conditions/match_ext_community_set (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_match_ext_community_set is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_match_ext_community_set() directly.

    YANG Description: Match a referenced extended community set according to the logic
defined in the match-set-options leaf
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=match_ext_community_set.match_ext_community_set, is_container='container', yang_name="match-ext-community-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """match_ext_community_set must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=match_ext_community_set.match_ext_community_set, is_container='container', yang_name="match-ext-community-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)""",
        })

    self.__match_ext_community_set = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_match_ext_community_set(self):
    self.__match_ext_community_set = YANGDynClass(base=match_ext_community_set.match_ext_community_set, is_container='container', yang_name="match-ext-community-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  community_count = __builtin__.property(_get_community_count, _set_community_count)
  ext_community_count = __builtin__.property(_get_ext_community_count, _set_ext_community_count)
  as_path_length = __builtin__.property(_get_as_path_length, _set_as_path_length)
  match_as_path_set = __builtin__.property(_get_match_as_path_set, _set_match_as_path_set)
  match_community_set = __builtin__.property(_get_match_community_set, _set_match_community_set)
  match_ext_community_set = __builtin__.property(_get_match_ext_community_set, _set_match_ext_community_set)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('community_count', community_count), ('ext_community_count', ext_community_count), ('as_path_length', as_path_length), ('match_as_path_set', match_as_path_set), ('match_community_set', match_community_set), ('match_ext_community_set', match_ext_community_set), ])


