# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-routing-policy - based on the path /routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to OSPF match conditions
  """
  __slots__ = ('_path_helper', '_extmethods', '__area_eq',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/routing-policy'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__area_eq = YANGDynClass(base=[RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'}),], is_leaf=True, yang_name="area-eq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ospf-policy', defining_module='openconfig-ospf-policy', yang_type='oc-ospf-types:ospf-area-identifier', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['routing-policy', 'policy-definitions', 'policy-definition', 'statements', 'statement', 'conditions', 'ospf-conditions', 'state']

  def _get_area_eq(self):
    """
    Getter method for area_eq, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/ospf_conditions/state/area_eq (oc-ospf-types:ospf-area-identifier)

    YANG Description: Match prefixes which are within a particular OSPF area
    """
    return self.__area_eq
      
  def _set_area_eq(self, v, load=False):
    """
    Setter method for area_eq, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/ospf_conditions/state/area_eq (oc-ospf-types:ospf-area-identifier)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_area_eq is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_area_eq() directly.

    YANG Description: Match prefixes which are within a particular OSPF area
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'}),], is_leaf=True, yang_name="area-eq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ospf-policy', defining_module='openconfig-ospf-policy', yang_type='oc-ospf-types:ospf-area-identifier', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """area_eq must be of a type compatible with oc-ospf-types:ospf-area-identifier""",
          'defined-type': "oc-ospf-types:ospf-area-identifier",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'}),], is_leaf=True, yang_name="area-eq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ospf-policy', defining_module='openconfig-ospf-policy', yang_type='oc-ospf-types:ospf-area-identifier', is_config=False)""",
        })

    self.__area_eq = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_area_eq(self):
    self.__area_eq = YANGDynClass(base=[RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'}),], is_leaf=True, yang_name="area-eq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ospf-policy', defining_module='openconfig-ospf-policy', yang_type='oc-ospf-types:ospf-area-identifier', is_config=False)

  area_eq = __builtin__.property(_get_area_eq)


  _pyangbind_elements = OrderedDict([('area_eq', area_eq), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-routing-policy - based on the path /routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to OSPF match conditions
  """
  __slots__ = ('_path_helper', '_extmethods', '__area_eq',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/routing-policy'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__area_eq = YANGDynClass(base=[RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'}),], is_leaf=True, yang_name="area-eq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ospf-policy', defining_module='openconfig-ospf-policy', yang_type='oc-ospf-types:ospf-area-identifier', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['routing-policy', 'policy-definitions', 'policy-definition', 'statements', 'statement', 'conditions', 'ospf-conditions', 'state']

  def _get_area_eq(self):
    """
    Getter method for area_eq, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/ospf_conditions/state/area_eq (oc-ospf-types:ospf-area-identifier)

    YANG Description: Match prefixes which are within a particular OSPF area
    """
    return self.__area_eq
      
  def _set_area_eq(self, v, load=False):
    """
    Setter method for area_eq, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/conditions/ospf_conditions/state/area_eq (oc-ospf-types:ospf-area-identifier)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_area_eq is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_area_eq() directly.

    YANG Description: Match prefixes which are within a particular OSPF area
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'}),], is_leaf=True, yang_name="area-eq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ospf-policy', defining_module='openconfig-ospf-policy', yang_type='oc-ospf-types:ospf-area-identifier', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """area_eq must be of a type compatible with oc-ospf-types:ospf-area-identifier""",
          'defined-type': "oc-ospf-types:ospf-area-identifier",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'}),], is_leaf=True, yang_name="area-eq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ospf-policy', defining_module='openconfig-ospf-policy', yang_type='oc-ospf-types:ospf-area-identifier', is_config=False)""",
        })

    self.__area_eq = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_area_eq(self):
    self.__area_eq = YANGDynClass(base=[RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'}),], is_leaf=True, yang_name="area-eq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ospf-policy', defining_module='openconfig-ospf-policy', yang_type='oc-ospf-types:ospf-area-identifier', is_config=False)

  area_eq = __builtin__.property(_get_area_eq)


  _pyangbind_elements = OrderedDict([('area_eq', area_eq), ])


