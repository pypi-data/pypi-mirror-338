# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-routing-policy - based on the path /routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for the AS path prepend action
  """
  __slots__ = ('_path_helper', '_extmethods', '__repeat_n','__asn','__use_last_as',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/routing-policy'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__repeat_n = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="repeat-n", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='uint8', is_config=True)
    self.__asn = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='oc-inet:as-number', is_config=True)
    self.__use_last_as = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="use-last-as", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='boolean', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['routing-policy', 'policy-definitions', 'policy-definition', 'statements', 'statement', 'actions', 'bgp-actions', 'set-as-path-prepend', 'config']

  def _get_repeat_n(self):
    """
    Getter method for repeat_n, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/actions/bgp_actions/set_as_path_prepend/config/repeat_n (uint8)

    YANG Description: Number of times to prepend the value specified in the asn
leaf to the AS path. If no value is specified by the asn
leaf, the local AS number of the system is used. The value
should be between 1 and the maximum supported by the
implementation.
    """
    return self.__repeat_n
      
  def _set_repeat_n(self, v, load=False):
    """
    Setter method for repeat_n, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/actions/bgp_actions/set_as_path_prepend/config/repeat_n (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_repeat_n is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_repeat_n() directly.

    YANG Description: Number of times to prepend the value specified in the asn
leaf to the AS path. If no value is specified by the asn
leaf, the local AS number of the system is used. The value
should be between 1 and the maximum supported by the
implementation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="repeat-n", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """repeat_n must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="repeat-n", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='uint8', is_config=True)""",
        })

    self.__repeat_n = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_repeat_n(self):
    self.__repeat_n = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="repeat-n", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='uint8', is_config=True)


  def _get_asn(self):
    """
    Getter method for asn, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/actions/bgp_actions/set_as_path_prepend/config/asn (oc-inet:as-number)

    YANG Description: The AS number to prepend to the AS path. If neither this
leaf nor use-last-as leaf is specified but repeat-n is set, then
the local AS number will be used for prepending.
    """
    return self.__asn
      
  def _set_asn(self, v, load=False):
    """
    Setter method for asn, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/actions/bgp_actions/set_as_path_prepend/config/asn (oc-inet:as-number)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_asn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_asn() directly.

    YANG Description: The AS number to prepend to the AS path. If neither this
leaf nor use-last-as leaf is specified but repeat-n is set, then
the local AS number will be used for prepending.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='oc-inet:as-number', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """asn must be of a type compatible with oc-inet:as-number""",
          'defined-type': "oc-inet:as-number",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='oc-inet:as-number', is_config=True)""",
        })

    self.__asn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_asn(self):
    self.__asn = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='oc-inet:as-number', is_config=True)


  def _get_use_last_as(self):
    """
    Getter method for use_last_as, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/actions/bgp_actions/set_as_path_prepend/config/use_last_as (boolean)

    YANG Description: Indicates whether to use the last AS number, which is also the
most recent AS number, to prepend to the AS path.
If neither this leaf nor asn leaf is specified
but repeat-n is set, then the local AS number will be
used for prepending.
    """
    return self.__use_last_as
      
  def _set_use_last_as(self, v, load=False):
    """
    Setter method for use_last_as, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/actions/bgp_actions/set_as_path_prepend/config/use_last_as (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_use_last_as is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_use_last_as() directly.

    YANG Description: Indicates whether to use the last AS number, which is also the
most recent AS number, to prepend to the AS path.
If neither this leaf nor asn leaf is specified
but repeat-n is set, then the local AS number will be
used for prepending.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="use-last-as", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """use_last_as must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="use-last-as", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='boolean', is_config=True)""",
        })

    self.__use_last_as = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_use_last_as(self):
    self.__use_last_as = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="use-last-as", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='boolean', is_config=True)

  repeat_n = __builtin__.property(_get_repeat_n, _set_repeat_n)
  asn = __builtin__.property(_get_asn, _set_asn)
  use_last_as = __builtin__.property(_get_use_last_as, _set_use_last_as)


  _pyangbind_elements = OrderedDict([('repeat_n', repeat_n), ('asn', asn), ('use_last_as', use_last_as), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-routing-policy - based on the path /routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for the AS path prepend action
  """
  __slots__ = ('_path_helper', '_extmethods', '__repeat_n','__asn','__use_last_as',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/routing-policy'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__repeat_n = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="repeat-n", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='uint8', is_config=True)
    self.__asn = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='oc-inet:as-number', is_config=True)
    self.__use_last_as = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="use-last-as", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='boolean', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['routing-policy', 'policy-definitions', 'policy-definition', 'statements', 'statement', 'actions', 'bgp-actions', 'set-as-path-prepend', 'config']

  def _get_repeat_n(self):
    """
    Getter method for repeat_n, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/actions/bgp_actions/set_as_path_prepend/config/repeat_n (uint8)

    YANG Description: Number of times to prepend the value specified in the asn
leaf to the AS path. If no value is specified by the asn
leaf, the local AS number of the system is used. The value
should be between 1 and the maximum supported by the
implementation.
    """
    return self.__repeat_n
      
  def _set_repeat_n(self, v, load=False):
    """
    Setter method for repeat_n, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/actions/bgp_actions/set_as_path_prepend/config/repeat_n (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_repeat_n is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_repeat_n() directly.

    YANG Description: Number of times to prepend the value specified in the asn
leaf to the AS path. If no value is specified by the asn
leaf, the local AS number of the system is used. The value
should be between 1 and the maximum supported by the
implementation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="repeat-n", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """repeat_n must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="repeat-n", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='uint8', is_config=True)""",
        })

    self.__repeat_n = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_repeat_n(self):
    self.__repeat_n = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['1..max']}), is_leaf=True, yang_name="repeat-n", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='uint8', is_config=True)


  def _get_asn(self):
    """
    Getter method for asn, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/actions/bgp_actions/set_as_path_prepend/config/asn (oc-inet:as-number)

    YANG Description: The AS number to prepend to the AS path. If neither this
leaf nor use-last-as leaf is specified but repeat-n is set, then
the local AS number will be used for prepending.
    """
    return self.__asn
      
  def _set_asn(self, v, load=False):
    """
    Setter method for asn, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/actions/bgp_actions/set_as_path_prepend/config/asn (oc-inet:as-number)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_asn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_asn() directly.

    YANG Description: The AS number to prepend to the AS path. If neither this
leaf nor use-last-as leaf is specified but repeat-n is set, then
the local AS number will be used for prepending.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='oc-inet:as-number', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """asn must be of a type compatible with oc-inet:as-number""",
          'defined-type': "oc-inet:as-number",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='oc-inet:as-number', is_config=True)""",
        })

    self.__asn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_asn(self):
    self.__asn = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='oc-inet:as-number', is_config=True)


  def _get_use_last_as(self):
    """
    Getter method for use_last_as, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/actions/bgp_actions/set_as_path_prepend/config/use_last_as (boolean)

    YANG Description: Indicates whether to use the last AS number, which is also the
most recent AS number, to prepend to the AS path.
If neither this leaf nor asn leaf is specified
but repeat-n is set, then the local AS number will be
used for prepending.
    """
    return self.__use_last_as
      
  def _set_use_last_as(self, v, load=False):
    """
    Setter method for use_last_as, mapped from YANG variable /routing_policy/policy_definitions/policy_definition/statements/statement/actions/bgp_actions/set_as_path_prepend/config/use_last_as (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_use_last_as is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_use_last_as() directly.

    YANG Description: Indicates whether to use the last AS number, which is also the
most recent AS number, to prepend to the AS path.
If neither this leaf nor asn leaf is specified
but repeat-n is set, then the local AS number will be
used for prepending.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="use-last-as", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """use_last_as must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="use-last-as", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='boolean', is_config=True)""",
        })

    self.__use_last_as = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_use_last_as(self):
    self.__use_last_as = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="use-last-as", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='boolean', is_config=True)

  repeat_n = __builtin__.property(_get_repeat_n, _set_repeat_n)
  asn = __builtin__.property(_get_asn, _set_asn)
  use_last_as = __builtin__.property(_get_use_last_as, _set_use_last_as)


  _pyangbind_elements = OrderedDict([('repeat_n', repeat_n), ('asn', asn), ('use_last_as', use_last_as), ])


