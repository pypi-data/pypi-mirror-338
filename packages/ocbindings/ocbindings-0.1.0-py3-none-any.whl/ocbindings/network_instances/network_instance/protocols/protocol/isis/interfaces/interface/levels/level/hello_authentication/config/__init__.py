# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines ISIS authentication configuration.
  """
  __slots__ = ('_path_helper', '_extmethods', '__enabled','__keychain','__auth_type','__auth_mode','__auth_password',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__enabled = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    self.__keychain = YANGDynClass(base=str, is_leaf=True, yang_name="keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-keychain:keychain-ref', is_config=True)
    self.__auth_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="auth-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    self.__auth_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}},), is_leaf=True, yang_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    self.__auth_password = YANGDynClass(base=str, is_leaf=True, yang_name="auth-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:routing-password', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'isis', 'interfaces', 'interface', 'levels', 'level', 'hello-authentication', 'config']

  def _get_enabled(self):
    """
    Getter method for enabled, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/enabled (boolean)

    YANG Description: Enabled or disable ISIS Hello authentication. Hello authentication
is used on a per-interface basis to authenticate adjacencies on the
interface.
    """
    return self.__enabled
      
  def _set_enabled(self, v, load=False):
    """
    Setter method for enabled, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enabled() directly.

    YANG Description: Enabled or disable ISIS Hello authentication. Hello authentication
is used on a per-interface basis to authenticate adjacencies on the
interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)""",
        })

    self.__enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enabled(self):
    self.__enabled = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)


  def _get_keychain(self):
    """
    Getter method for keychain, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/keychain (oc-keychain:keychain-ref)

    YANG Description: Reference to a keychain that should be used for hello authentication.
    """
    return self.__keychain
      
  def _set_keychain(self, v, load=False):
    """
    Setter method for keychain, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/keychain (oc-keychain:keychain-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_keychain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_keychain() directly.

    YANG Description: Reference to a keychain that should be used for hello authentication.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-keychain:keychain-ref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """keychain must be of a type compatible with oc-keychain:keychain-ref""",
          'defined-type': "oc-keychain:keychain-ref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-keychain:keychain-ref', is_config=True)""",
        })

    self.__keychain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_keychain(self):
    self.__keychain = YANGDynClass(base=str, is_leaf=True, yang_name="keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-keychain:keychain-ref', is_config=True)


  def _get_auth_type(self):
    """
    Getter method for auth_type, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_type (identityref)

    YANG Description: The type of authentication used in the applicable IS-IS PDUs
(simple_key, keychain).
    """
    return self.__auth_type
      
  def _set_auth_type(self, v, load=False):
    """
    Setter method for auth_type, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_type() directly.

    YANG Description: The type of authentication used in the applicable IS-IS PDUs
(simple_key, keychain).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="auth-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="auth-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__auth_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_type(self):
    self.__auth_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="auth-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)


  def _get_auth_mode(self):
    """
    Getter method for auth_mode, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_mode (identityref)

    YANG Description: The type of authentication used in the applicable IS-IS PDUs.

This leaf along with the sibling leaf 'auth-password' can be used
to configure the simple key authentication.
    """
    return self.__auth_mode
      
  def _set_auth_mode(self, v, load=False):
    """
    Setter method for auth_mode, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_mode (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_mode() directly.

    YANG Description: The type of authentication used in the applicable IS-IS PDUs.

This leaf along with the sibling leaf 'auth-password' can be used
to configure the simple key authentication.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}},), is_leaf=True, yang_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_mode must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}},), is_leaf=True, yang_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__auth_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_mode(self):
    self.__auth_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}},), is_leaf=True, yang_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)


  def _get_auth_password(self):
    """
    Getter method for auth_password, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_password (oc-types:routing-password)

    YANG Description: The authentication key used in the applicable IS-IS PDUs. The key in the
packet may be encrypted according to the configured authentication type.
    """
    return self.__auth_password
      
  def _set_auth_password(self, v, load=False):
    """
    Setter method for auth_password, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_password (oc-types:routing-password)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_password() directly.

    YANG Description: The authentication key used in the applicable IS-IS PDUs. The key in the
packet may be encrypted according to the configured authentication type.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="auth-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:routing-password', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_password must be of a type compatible with oc-types:routing-password""",
          'defined-type': "oc-types:routing-password",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="auth-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:routing-password', is_config=True)""",
        })

    self.__auth_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_password(self):
    self.__auth_password = YANGDynClass(base=str, is_leaf=True, yang_name="auth-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:routing-password', is_config=True)

  enabled = __builtin__.property(_get_enabled, _set_enabled)
  keychain = __builtin__.property(_get_keychain, _set_keychain)
  auth_type = __builtin__.property(_get_auth_type, _set_auth_type)
  auth_mode = __builtin__.property(_get_auth_mode, _set_auth_mode)
  auth_password = __builtin__.property(_get_auth_password, _set_auth_password)


  _pyangbind_elements = OrderedDict([('enabled', enabled), ('keychain', keychain), ('auth_type', auth_type), ('auth_mode', auth_mode), ('auth_password', auth_password), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines ISIS authentication configuration.
  """
  __slots__ = ('_path_helper', '_extmethods', '__enabled','__keychain','__auth_type','__auth_mode','__auth_password',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__enabled = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    self.__keychain = YANGDynClass(base=str, is_leaf=True, yang_name="keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-keychain:keychain-ref', is_config=True)
    self.__auth_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="auth-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    self.__auth_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}},), is_leaf=True, yang_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    self.__auth_password = YANGDynClass(base=str, is_leaf=True, yang_name="auth-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:routing-password', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'isis', 'interfaces', 'interface', 'levels', 'level', 'hello-authentication', 'config']

  def _get_enabled(self):
    """
    Getter method for enabled, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/enabled (boolean)

    YANG Description: Enabled or disable ISIS Hello authentication. Hello authentication
is used on a per-interface basis to authenticate adjacencies on the
interface.
    """
    return self.__enabled
      
  def _set_enabled(self, v, load=False):
    """
    Setter method for enabled, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enabled() directly.

    YANG Description: Enabled or disable ISIS Hello authentication. Hello authentication
is used on a per-interface basis to authenticate adjacencies on the
interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)""",
        })

    self.__enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enabled(self):
    self.__enabled = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)


  def _get_keychain(self):
    """
    Getter method for keychain, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/keychain (oc-keychain:keychain-ref)

    YANG Description: Reference to a keychain that should be used for hello authentication.
    """
    return self.__keychain
      
  def _set_keychain(self, v, load=False):
    """
    Setter method for keychain, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/keychain (oc-keychain:keychain-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_keychain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_keychain() directly.

    YANG Description: Reference to a keychain that should be used for hello authentication.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-keychain:keychain-ref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """keychain must be of a type compatible with oc-keychain:keychain-ref""",
          'defined-type': "oc-keychain:keychain-ref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-keychain:keychain-ref', is_config=True)""",
        })

    self.__keychain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_keychain(self):
    self.__keychain = YANGDynClass(base=str, is_leaf=True, yang_name="keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-keychain:keychain-ref', is_config=True)


  def _get_auth_type(self):
    """
    Getter method for auth_type, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_type (identityref)

    YANG Description: The type of authentication used in the applicable IS-IS PDUs
(simple_key, keychain).
    """
    return self.__auth_type
      
  def _set_auth_type(self, v, load=False):
    """
    Setter method for auth_type, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_type() directly.

    YANG Description: The type of authentication used in the applicable IS-IS PDUs
(simple_key, keychain).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="auth-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="auth-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__auth_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_type(self):
    self.__auth_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="auth-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)


  def _get_auth_mode(self):
    """
    Getter method for auth_mode, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_mode (identityref)

    YANG Description: The type of authentication used in the applicable IS-IS PDUs.

This leaf along with the sibling leaf 'auth-password' can be used
to configure the simple key authentication.
    """
    return self.__auth_mode
      
  def _set_auth_mode(self, v, load=False):
    """
    Setter method for auth_mode, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_mode (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_mode() directly.

    YANG Description: The type of authentication used in the applicable IS-IS PDUs.

This leaf along with the sibling leaf 'auth-password' can be used
to configure the simple key authentication.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}},), is_leaf=True, yang_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_mode must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}},), is_leaf=True, yang_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__auth_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_mode(self):
    self.__auth_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}},), is_leaf=True, yang_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)


  def _get_auth_password(self):
    """
    Getter method for auth_password, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_password (oc-types:routing-password)

    YANG Description: The authentication key used in the applicable IS-IS PDUs. The key in the
packet may be encrypted according to the configured authentication type.
    """
    return self.__auth_password
      
  def _set_auth_password(self, v, load=False):
    """
    Setter method for auth_password, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_password (oc-types:routing-password)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_password() directly.

    YANG Description: The authentication key used in the applicable IS-IS PDUs. The key in the
packet may be encrypted according to the configured authentication type.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="auth-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:routing-password', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_password must be of a type compatible with oc-types:routing-password""",
          'defined-type': "oc-types:routing-password",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="auth-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:routing-password', is_config=True)""",
        })

    self.__auth_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_password(self):
    self.__auth_password = YANGDynClass(base=str, is_leaf=True, yang_name="auth-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:routing-password', is_config=True)

  enabled = __builtin__.property(_get_enabled, _set_enabled)
  keychain = __builtin__.property(_get_keychain, _set_keychain)
  auth_type = __builtin__.property(_get_auth_type, _set_auth_type)
  auth_mode = __builtin__.property(_get_auth_mode, _set_auth_mode)
  auth_password = __builtin__.property(_get_auth_password, _set_auth_password)


  _pyangbind_elements = OrderedDict([('enabled', enabled), ('keychain', keychain), ('auth_type', auth_type), ('auth_mode', auth_mode), ('auth_password', auth_password), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines ISIS authentication configuration.
  """
  __slots__ = ('_path_helper', '_extmethods', '__enabled','__keychain','__auth_type','__auth_mode','__auth_password',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__enabled = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    self.__keychain = YANGDynClass(base=str, is_leaf=True, yang_name="keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-keychain:keychain-ref', is_config=True)
    self.__auth_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="auth-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    self.__auth_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}},), is_leaf=True, yang_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    self.__auth_password = YANGDynClass(base=str, is_leaf=True, yang_name="auth-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:routing-password', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'isis', 'interfaces', 'interface', 'levels', 'level', 'hello-authentication', 'config']

  def _get_enabled(self):
    """
    Getter method for enabled, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/enabled (boolean)

    YANG Description: Enabled or disable ISIS Hello authentication. Hello authentication
is used on a per-interface basis to authenticate adjacencies on the
interface.
    """
    return self.__enabled
      
  def _set_enabled(self, v, load=False):
    """
    Setter method for enabled, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enabled() directly.

    YANG Description: Enabled or disable ISIS Hello authentication. Hello authentication
is used on a per-interface basis to authenticate adjacencies on the
interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)""",
        })

    self.__enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enabled(self):
    self.__enabled = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)


  def _get_keychain(self):
    """
    Getter method for keychain, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/keychain (oc-keychain:keychain-ref)

    YANG Description: Reference to a keychain that should be used for hello authentication.
    """
    return self.__keychain
      
  def _set_keychain(self, v, load=False):
    """
    Setter method for keychain, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/keychain (oc-keychain:keychain-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_keychain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_keychain() directly.

    YANG Description: Reference to a keychain that should be used for hello authentication.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-keychain:keychain-ref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """keychain must be of a type compatible with oc-keychain:keychain-ref""",
          'defined-type': "oc-keychain:keychain-ref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-keychain:keychain-ref', is_config=True)""",
        })

    self.__keychain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_keychain(self):
    self.__keychain = YANGDynClass(base=str, is_leaf=True, yang_name="keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-keychain:keychain-ref', is_config=True)


  def _get_auth_type(self):
    """
    Getter method for auth_type, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_type (identityref)

    YANG Description: The type of authentication used in the applicable IS-IS PDUs
(simple_key, keychain).
    """
    return self.__auth_type
      
  def _set_auth_type(self, v, load=False):
    """
    Setter method for auth_type, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_type() directly.

    YANG Description: The type of authentication used in the applicable IS-IS PDUs
(simple_key, keychain).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="auth-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="auth-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__auth_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_type(self):
    self.__auth_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="auth-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)


  def _get_auth_mode(self):
    """
    Getter method for auth_mode, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_mode (identityref)

    YANG Description: The type of authentication used in the applicable IS-IS PDUs.

This leaf along with the sibling leaf 'auth-password' can be used
to configure the simple key authentication.
    """
    return self.__auth_mode
      
  def _set_auth_mode(self, v, load=False):
    """
    Setter method for auth_mode, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_mode (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_mode() directly.

    YANG Description: The type of authentication used in the applicable IS-IS PDUs.

This leaf along with the sibling leaf 'auth-password' can be used
to configure the simple key authentication.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}},), is_leaf=True, yang_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_mode must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}},), is_leaf=True, yang_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__auth_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_mode(self):
    self.__auth_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}},), is_leaf=True, yang_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)


  def _get_auth_password(self):
    """
    Getter method for auth_password, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_password (oc-types:routing-password)

    YANG Description: The authentication key used in the applicable IS-IS PDUs. The key in the
packet may be encrypted according to the configured authentication type.
    """
    return self.__auth_password
      
  def _set_auth_password(self, v, load=False):
    """
    Setter method for auth_password, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_password (oc-types:routing-password)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_password() directly.

    YANG Description: The authentication key used in the applicable IS-IS PDUs. The key in the
packet may be encrypted according to the configured authentication type.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="auth-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:routing-password', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_password must be of a type compatible with oc-types:routing-password""",
          'defined-type': "oc-types:routing-password",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="auth-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:routing-password', is_config=True)""",
        })

    self.__auth_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_password(self):
    self.__auth_password = YANGDynClass(base=str, is_leaf=True, yang_name="auth-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:routing-password', is_config=True)

  enabled = __builtin__.property(_get_enabled, _set_enabled)
  keychain = __builtin__.property(_get_keychain, _set_keychain)
  auth_type = __builtin__.property(_get_auth_type, _set_auth_type)
  auth_mode = __builtin__.property(_get_auth_mode, _set_auth_mode)
  auth_password = __builtin__.property(_get_auth_password, _set_auth_password)


  _pyangbind_elements = OrderedDict([('enabled', enabled), ('keychain', keychain), ('auth_type', auth_type), ('auth_mode', auth_mode), ('auth_password', auth_password), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines ISIS authentication configuration.
  """
  __slots__ = ('_path_helper', '_extmethods', '__enabled','__keychain','__auth_type','__auth_mode','__auth_password',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__enabled = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    self.__keychain = YANGDynClass(base=str, is_leaf=True, yang_name="keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-keychain:keychain-ref', is_config=True)
    self.__auth_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="auth-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    self.__auth_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}},), is_leaf=True, yang_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    self.__auth_password = YANGDynClass(base=str, is_leaf=True, yang_name="auth-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:routing-password', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'isis', 'interfaces', 'interface', 'levels', 'level', 'hello-authentication', 'config']

  def _get_enabled(self):
    """
    Getter method for enabled, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/enabled (boolean)

    YANG Description: Enabled or disable ISIS Hello authentication. Hello authentication
is used on a per-interface basis to authenticate adjacencies on the
interface.
    """
    return self.__enabled
      
  def _set_enabled(self, v, load=False):
    """
    Setter method for enabled, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enabled() directly.

    YANG Description: Enabled or disable ISIS Hello authentication. Hello authentication
is used on a per-interface basis to authenticate adjacencies on the
interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)""",
        })

    self.__enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enabled(self):
    self.__enabled = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)


  def _get_keychain(self):
    """
    Getter method for keychain, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/keychain (oc-keychain:keychain-ref)

    YANG Description: Reference to a keychain that should be used for hello authentication.
    """
    return self.__keychain
      
  def _set_keychain(self, v, load=False):
    """
    Setter method for keychain, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/keychain (oc-keychain:keychain-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_keychain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_keychain() directly.

    YANG Description: Reference to a keychain that should be used for hello authentication.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-keychain:keychain-ref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """keychain must be of a type compatible with oc-keychain:keychain-ref""",
          'defined-type': "oc-keychain:keychain-ref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-keychain:keychain-ref', is_config=True)""",
        })

    self.__keychain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_keychain(self):
    self.__keychain = YANGDynClass(base=str, is_leaf=True, yang_name="keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-keychain:keychain-ref', is_config=True)


  def _get_auth_type(self):
    """
    Getter method for auth_type, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_type (identityref)

    YANG Description: The type of authentication used in the applicable IS-IS PDUs
(simple_key, keychain).
    """
    return self.__auth_type
      
  def _set_auth_type(self, v, load=False):
    """
    Setter method for auth_type, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_type() directly.

    YANG Description: The type of authentication used in the applicable IS-IS PDUs
(simple_key, keychain).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="auth-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="auth-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__auth_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_type(self):
    self.__auth_type = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:SIMPLE_KEY': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'openconfig-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}, 'oc-keychain-types:KEYCHAIN': {'@module': 'openconfig-keychain-types', '@namespace': 'http://openconfig.net/yang/oc-keychain-types'}},), is_leaf=True, yang_name="auth-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)


  def _get_auth_mode(self):
    """
    Getter method for auth_mode, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_mode (identityref)

    YANG Description: The type of authentication used in the applicable IS-IS PDUs.

This leaf along with the sibling leaf 'auth-password' can be used
to configure the simple key authentication.
    """
    return self.__auth_mode
      
  def _set_auth_mode(self, v, load=False):
    """
    Setter method for auth_mode, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_mode (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_mode() directly.

    YANG Description: The type of authentication used in the applicable IS-IS PDUs.

This leaf along with the sibling leaf 'auth-password' can be used
to configure the simple key authentication.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}},), is_leaf=True, yang_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_mode must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}},), is_leaf=True, yang_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__auth_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_mode(self):
    self.__auth_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:TEXT': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'openconfig-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'oc-isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}, 'isis-types:MD5': {'@module': 'openconfig-isis-types', '@namespace': 'http://openconfig.net/yang/isis-types'}},), is_leaf=True, yang_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)


  def _get_auth_password(self):
    """
    Getter method for auth_password, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_password (oc-types:routing-password)

    YANG Description: The authentication key used in the applicable IS-IS PDUs. The key in the
packet may be encrypted according to the configured authentication type.
    """
    return self.__auth_password
      
  def _set_auth_password(self, v, load=False):
    """
    Setter method for auth_password, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/hello_authentication/config/auth_password (oc-types:routing-password)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_password() directly.

    YANG Description: The authentication key used in the applicable IS-IS PDUs. The key in the
packet may be encrypted according to the configured authentication type.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="auth-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:routing-password', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_password must be of a type compatible with oc-types:routing-password""",
          'defined-type': "oc-types:routing-password",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="auth-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:routing-password', is_config=True)""",
        })

    self.__auth_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_password(self):
    self.__auth_password = YANGDynClass(base=str, is_leaf=True, yang_name="auth-password", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:routing-password', is_config=True)

  enabled = __builtin__.property(_get_enabled, _set_enabled)
  keychain = __builtin__.property(_get_keychain, _set_keychain)
  auth_type = __builtin__.property(_get_auth_type, _set_auth_type)
  auth_mode = __builtin__.property(_get_auth_mode, _set_auth_mode)
  auth_password = __builtin__.property(_get_auth_password, _set_auth_password)


  _pyangbind_elements = OrderedDict([('enabled', enabled), ('keychain', keychain), ('auth_type', auth_type), ('auth_mode', auth_mode), ('auth_password', auth_password), ])


