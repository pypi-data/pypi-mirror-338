# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib/routes/route/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for route entries in the
BGP LOC-RIB
  """
  __slots__ = ('_path_helper', '_extmethods', '__prefix','__origin','__path_id','__attr_index','__community_index','__ext_community_index','__last_modified','__valid_route','__invalid_reason','__reject_reason',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}/([0-9]|[12][0-9]|3[0-2])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ipv4-prefix', is_config=False)
    self.__origin = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},),], is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__attr_index = YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__community_index = YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__ext_community_index = YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__reject_reason = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),], is_leaf=True, yang_name="reject-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rib/bgp-ext', defining_module='openconfig-rib-bgp-ext', yang_type='union', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv4-unicast', 'loc-rib', 'routes', 'route', 'state']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/prefix (oc-inet:ipv4-prefix)

    YANG Description: The IPv4 prefix corresponding to the route
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/prefix (oc-inet:ipv4-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: The IPv4 prefix corresponding to the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}/([0-9]|[12][0-9]|3[0-2])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ipv4-prefix', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with oc-inet:ipv4-prefix""",
          'defined-type': "oc-inet:ipv4-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}/([0-9]|[12][0-9]|3[0-2])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ipv4-prefix', is_config=False)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}/([0-9]|[12][0-9]|3[0-2])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ipv4-prefix', is_config=False)


  def _get_origin(self):
    """
    Getter method for origin, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/origin (union)

    YANG Description: Indicates the origin of the route.  If the route is learned
from a neighbor, this value is the neighbor address.  If
the route was injected or redistributed from another
protocol, the origin indicates the source protocol for the
route.
    """
    return self.__origin
      
  def _set_origin(self, v, load=False):
    """
    Setter method for origin, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/origin (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_origin is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_origin() directly.

    YANG Description: Indicates the origin of the route.  If the route is learned
from a neighbor, this value is the neighbor address.  If
the route was injected or redistributed from another
protocol, the origin indicates the source protocol for the
route.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},),], is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """origin must be of a type compatible with union""",
          'defined-type': "openconfig-network-instance:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},),], is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)""",
        })

    self.__origin = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_origin(self):
    self.__origin = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},),], is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)


  def _get_path_id(self):
    """
    Getter method for path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/path_id (uint32)

    YANG Description: If the route is learned from a neighbor, the path-id
corresponds to the path-id for the route in the
corresponding adj-rib-in-post table.  If the route is
injected from another protocol, or the neighbor does not
support BGP add-paths, the path-id should be set
to zero, also the default value.
    """
    return self.__path_id
      
  def _set_path_id(self, v, load=False):
    """
    Setter method for path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/path_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_id() directly.

    YANG Description: If the route is learned from a neighbor, the path-id
corresponds to the path-id for the route in the
corresponding adj-rib-in-post table.  If the route is
injected from another protocol, or the neighbor does not
support BGP add-paths, the path-id should be set
to zero, also the default value.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_id(self):
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_attr_index(self):
    """
    Getter method for attr_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/attr_index (leafref)

    YANG Description: Reference to the common attribute group for the
route
    """
    return self.__attr_index
      
  def _set_attr_index(self, v, load=False):
    """
    Setter method for attr_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/attr_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_index() directly.

    YANG Description: Reference to the common attribute group for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__attr_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_index(self):
    self.__attr_index = YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_community_index(self):
    """
    Getter method for community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/community_index (leafref)

    YANG Description: Reference to the community attribute for the route
    """
    return self.__community_index
      
  def _set_community_index(self, v, load=False):
    """
    Setter method for community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community_index() directly.

    YANG Description: Reference to the community attribute for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community_index(self):
    self.__community_index = YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_ext_community_index(self):
    """
    Getter method for ext_community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/ext_community_index (leafref)

    YANG Description: Reference to the extended community attribute for the
route
    """
    return self.__ext_community_index
      
  def _set_ext_community_index(self, v, load=False):
    """
    Setter method for ext_community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/ext_community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_community_index() directly.

    YANG Description: Reference to the extended community attribute for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__ext_community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_community_index(self):
    self.__ext_community_index = YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_last_modified(self):
    """
    Getter method for last_modified, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/last_modified (oc-types:timeticks64)

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_modified
      
  def _set_last_modified(self, v, load=False):
    """
    Setter method for last_modified, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/last_modified (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_modified is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_modified() directly.

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_modified must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_modified = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_modified(self):
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)


  def _get_valid_route(self):
    """
    Getter method for valid_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/valid_route (boolean)

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    return self.__valid_route
      
  def _set_valid_route(self, v, load=False):
    """
    Setter method for valid_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/valid_route (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_valid_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_valid_route() directly.

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """valid_route must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__valid_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_valid_route(self):
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_invalid_reason(self):
    """
    Getter method for invalid_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/invalid_reason (identityref)

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    return self.__invalid_reason
      
  def _set_invalid_reason(self, v, load=False):
    """
    Setter method for invalid_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/invalid_reason (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_reason() directly.

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_reason must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__invalid_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_reason(self):
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_reject_reason(self):
    """
    Getter method for reject_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/reject_reason (union)

    YANG Description: Indicates the reason the route is not used, either due to
policy filtering or bestpath selection
    """
    return self.__reject_reason
      
  def _set_reject_reason(self, v, load=False):
    """
    Setter method for reject_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/reject_reason (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_reject_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_reject_reason() directly.

    YANG Description: Indicates the reason the route is not used, either due to
policy filtering or bestpath selection
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),], is_leaf=True, yang_name="reject-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rib/bgp-ext', defining_module='openconfig-rib-bgp-ext', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """reject_reason must be of a type compatible with union""",
          'defined-type': "openconfig-rib-bgp-ext:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),], is_leaf=True, yang_name="reject-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rib/bgp-ext', defining_module='openconfig-rib-bgp-ext', yang_type='union', is_config=False)""",
        })

    self.__reject_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_reject_reason(self):
    self.__reject_reason = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),], is_leaf=True, yang_name="reject-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rib/bgp-ext', defining_module='openconfig-rib-bgp-ext', yang_type='union', is_config=False)

  prefix = __builtin__.property(_get_prefix)
  origin = __builtin__.property(_get_origin)
  path_id = __builtin__.property(_get_path_id)
  attr_index = __builtin__.property(_get_attr_index)
  community_index = __builtin__.property(_get_community_index)
  ext_community_index = __builtin__.property(_get_ext_community_index)
  last_modified = __builtin__.property(_get_last_modified)
  valid_route = __builtin__.property(_get_valid_route)
  invalid_reason = __builtin__.property(_get_invalid_reason)
  reject_reason = __builtin__.property(_get_reject_reason)


  _pyangbind_elements = OrderedDict([('prefix', prefix), ('origin', origin), ('path_id', path_id), ('attr_index', attr_index), ('community_index', community_index), ('ext_community_index', ext_community_index), ('last_modified', last_modified), ('valid_route', valid_route), ('invalid_reason', invalid_reason), ('reject_reason', reject_reason), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib/routes/route/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for route entries in the
BGP LOC-RIB
  """
  __slots__ = ('_path_helper', '_extmethods', '__prefix','__origin','__path_id','__attr_index','__community_index','__ext_community_index','__last_modified','__valid_route','__invalid_reason','__reject_reason',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}/([0-9]|[12][0-9]|3[0-2])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ipv4-prefix', is_config=False)
    self.__origin = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},),], is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__attr_index = YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__community_index = YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__ext_community_index = YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__reject_reason = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),], is_leaf=True, yang_name="reject-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rib/bgp-ext', defining_module='openconfig-rib-bgp-ext', yang_type='union', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv4-unicast', 'loc-rib', 'routes', 'route', 'state']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/prefix (oc-inet:ipv4-prefix)

    YANG Description: The IPv4 prefix corresponding to the route
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/prefix (oc-inet:ipv4-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: The IPv4 prefix corresponding to the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}/([0-9]|[12][0-9]|3[0-2])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ipv4-prefix', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with oc-inet:ipv4-prefix""",
          'defined-type': "oc-inet:ipv4-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}/([0-9]|[12][0-9]|3[0-2])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ipv4-prefix', is_config=False)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}/([0-9]|[12][0-9]|3[0-2])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ipv4-prefix', is_config=False)


  def _get_origin(self):
    """
    Getter method for origin, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/origin (union)

    YANG Description: Indicates the origin of the route.  If the route is learned
from a neighbor, this value is the neighbor address.  If
the route was injected or redistributed from another
protocol, the origin indicates the source protocol for the
route.
    """
    return self.__origin
      
  def _set_origin(self, v, load=False):
    """
    Setter method for origin, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/origin (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_origin is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_origin() directly.

    YANG Description: Indicates the origin of the route.  If the route is learned
from a neighbor, this value is the neighbor address.  If
the route was injected or redistributed from another
protocol, the origin indicates the source protocol for the
route.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},),], is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """origin must be of a type compatible with union""",
          'defined-type': "openconfig-network-instance:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},),], is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)""",
        })

    self.__origin = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_origin(self):
    self.__origin = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},),], is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)


  def _get_path_id(self):
    """
    Getter method for path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/path_id (uint32)

    YANG Description: If the route is learned from a neighbor, the path-id
corresponds to the path-id for the route in the
corresponding adj-rib-in-post table.  If the route is
injected from another protocol, or the neighbor does not
support BGP add-paths, the path-id should be set
to zero, also the default value.
    """
    return self.__path_id
      
  def _set_path_id(self, v, load=False):
    """
    Setter method for path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/path_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_id() directly.

    YANG Description: If the route is learned from a neighbor, the path-id
corresponds to the path-id for the route in the
corresponding adj-rib-in-post table.  If the route is
injected from another protocol, or the neighbor does not
support BGP add-paths, the path-id should be set
to zero, also the default value.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_id(self):
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_attr_index(self):
    """
    Getter method for attr_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/attr_index (leafref)

    YANG Description: Reference to the common attribute group for the
route
    """
    return self.__attr_index
      
  def _set_attr_index(self, v, load=False):
    """
    Setter method for attr_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/attr_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_index() directly.

    YANG Description: Reference to the common attribute group for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__attr_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_index(self):
    self.__attr_index = YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_community_index(self):
    """
    Getter method for community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/community_index (leafref)

    YANG Description: Reference to the community attribute for the route
    """
    return self.__community_index
      
  def _set_community_index(self, v, load=False):
    """
    Setter method for community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community_index() directly.

    YANG Description: Reference to the community attribute for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community_index(self):
    self.__community_index = YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_ext_community_index(self):
    """
    Getter method for ext_community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/ext_community_index (leafref)

    YANG Description: Reference to the extended community attribute for the
route
    """
    return self.__ext_community_index
      
  def _set_ext_community_index(self, v, load=False):
    """
    Setter method for ext_community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/ext_community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_community_index() directly.

    YANG Description: Reference to the extended community attribute for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__ext_community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_community_index(self):
    self.__ext_community_index = YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_last_modified(self):
    """
    Getter method for last_modified, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/last_modified (oc-types:timeticks64)

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_modified
      
  def _set_last_modified(self, v, load=False):
    """
    Setter method for last_modified, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/last_modified (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_modified is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_modified() directly.

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_modified must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_modified = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_modified(self):
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)


  def _get_valid_route(self):
    """
    Getter method for valid_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/valid_route (boolean)

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    return self.__valid_route
      
  def _set_valid_route(self, v, load=False):
    """
    Setter method for valid_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/valid_route (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_valid_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_valid_route() directly.

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """valid_route must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__valid_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_valid_route(self):
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_invalid_reason(self):
    """
    Getter method for invalid_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/invalid_reason (identityref)

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    return self.__invalid_reason
      
  def _set_invalid_reason(self, v, load=False):
    """
    Setter method for invalid_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/invalid_reason (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_reason() directly.

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_reason must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__invalid_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_reason(self):
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_reject_reason(self):
    """
    Getter method for reject_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/reject_reason (union)

    YANG Description: Indicates the reason the route is not used, either due to
policy filtering or bestpath selection
    """
    return self.__reject_reason
      
  def _set_reject_reason(self, v, load=False):
    """
    Setter method for reject_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/reject_reason (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_reject_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_reject_reason() directly.

    YANG Description: Indicates the reason the route is not used, either due to
policy filtering or bestpath selection
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),], is_leaf=True, yang_name="reject-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rib/bgp-ext', defining_module='openconfig-rib-bgp-ext', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """reject_reason must be of a type compatible with union""",
          'defined-type': "openconfig-rib-bgp-ext:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),], is_leaf=True, yang_name="reject-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rib/bgp-ext', defining_module='openconfig-rib-bgp-ext', yang_type='union', is_config=False)""",
        })

    self.__reject_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_reject_reason(self):
    self.__reject_reason = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),], is_leaf=True, yang_name="reject-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rib/bgp-ext', defining_module='openconfig-rib-bgp-ext', yang_type='union', is_config=False)

  prefix = __builtin__.property(_get_prefix)
  origin = __builtin__.property(_get_origin)
  path_id = __builtin__.property(_get_path_id)
  attr_index = __builtin__.property(_get_attr_index)
  community_index = __builtin__.property(_get_community_index)
  ext_community_index = __builtin__.property(_get_ext_community_index)
  last_modified = __builtin__.property(_get_last_modified)
  valid_route = __builtin__.property(_get_valid_route)
  invalid_reason = __builtin__.property(_get_invalid_reason)
  reject_reason = __builtin__.property(_get_reject_reason)


  _pyangbind_elements = OrderedDict([('prefix', prefix), ('origin', origin), ('path_id', path_id), ('attr_index', attr_index), ('community_index', community_index), ('ext_community_index', ext_community_index), ('last_modified', last_modified), ('valid_route', valid_route), ('invalid_reason', invalid_reason), ('reject_reason', reject_reason), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib/routes/route/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for route entries in the
BGP LOC-RIB
  """
  __slots__ = ('_path_helper', '_extmethods', '__prefix','__origin','__path_id','__attr_index','__community_index','__ext_community_index','__last_modified','__valid_route','__invalid_reason','__reject_reason',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}/([0-9]|[12][0-9]|3[0-2])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ipv4-prefix', is_config=False)
    self.__origin = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},),], is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__attr_index = YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__community_index = YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__ext_community_index = YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__reject_reason = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),], is_leaf=True, yang_name="reject-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rib/bgp-ext', defining_module='openconfig-rib-bgp-ext', yang_type='union', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv4-unicast', 'loc-rib', 'routes', 'route', 'state']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/prefix (oc-inet:ipv4-prefix)

    YANG Description: The IPv4 prefix corresponding to the route
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/prefix (oc-inet:ipv4-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: The IPv4 prefix corresponding to the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}/([0-9]|[12][0-9]|3[0-2])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ipv4-prefix', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with oc-inet:ipv4-prefix""",
          'defined-type': "oc-inet:ipv4-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}/([0-9]|[12][0-9]|3[0-2])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ipv4-prefix', is_config=False)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}/([0-9]|[12][0-9]|3[0-2])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ipv4-prefix', is_config=False)


  def _get_origin(self):
    """
    Getter method for origin, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/origin (union)

    YANG Description: Indicates the origin of the route.  If the route is learned
from a neighbor, this value is the neighbor address.  If
the route was injected or redistributed from another
protocol, the origin indicates the source protocol for the
route.
    """
    return self.__origin
      
  def _set_origin(self, v, load=False):
    """
    Setter method for origin, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/origin (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_origin is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_origin() directly.

    YANG Description: Indicates the origin of the route.  If the route is learned
from a neighbor, this value is the neighbor address.  If
the route was injected or redistributed from another
protocol, the origin indicates the source protocol for the
route.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},),], is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """origin must be of a type compatible with union""",
          'defined-type': "openconfig-network-instance:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},),], is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)""",
        })

    self.__origin = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_origin(self):
    self.__origin = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},),], is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)


  def _get_path_id(self):
    """
    Getter method for path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/path_id (uint32)

    YANG Description: If the route is learned from a neighbor, the path-id
corresponds to the path-id for the route in the
corresponding adj-rib-in-post table.  If the route is
injected from another protocol, or the neighbor does not
support BGP add-paths, the path-id should be set
to zero, also the default value.
    """
    return self.__path_id
      
  def _set_path_id(self, v, load=False):
    """
    Setter method for path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/path_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_id() directly.

    YANG Description: If the route is learned from a neighbor, the path-id
corresponds to the path-id for the route in the
corresponding adj-rib-in-post table.  If the route is
injected from another protocol, or the neighbor does not
support BGP add-paths, the path-id should be set
to zero, also the default value.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_id(self):
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_attr_index(self):
    """
    Getter method for attr_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/attr_index (leafref)

    YANG Description: Reference to the common attribute group for the
route
    """
    return self.__attr_index
      
  def _set_attr_index(self, v, load=False):
    """
    Setter method for attr_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/attr_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_index() directly.

    YANG Description: Reference to the common attribute group for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__attr_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_index(self):
    self.__attr_index = YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_community_index(self):
    """
    Getter method for community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/community_index (leafref)

    YANG Description: Reference to the community attribute for the route
    """
    return self.__community_index
      
  def _set_community_index(self, v, load=False):
    """
    Setter method for community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community_index() directly.

    YANG Description: Reference to the community attribute for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community_index(self):
    self.__community_index = YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_ext_community_index(self):
    """
    Getter method for ext_community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/ext_community_index (leafref)

    YANG Description: Reference to the extended community attribute for the
route
    """
    return self.__ext_community_index
      
  def _set_ext_community_index(self, v, load=False):
    """
    Setter method for ext_community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/ext_community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_community_index() directly.

    YANG Description: Reference to the extended community attribute for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__ext_community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_community_index(self):
    self.__ext_community_index = YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_last_modified(self):
    """
    Getter method for last_modified, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/last_modified (oc-types:timeticks64)

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_modified
      
  def _set_last_modified(self, v, load=False):
    """
    Setter method for last_modified, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/last_modified (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_modified is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_modified() directly.

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_modified must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_modified = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_modified(self):
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)


  def _get_valid_route(self):
    """
    Getter method for valid_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/valid_route (boolean)

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    return self.__valid_route
      
  def _set_valid_route(self, v, load=False):
    """
    Setter method for valid_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/valid_route (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_valid_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_valid_route() directly.

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """valid_route must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__valid_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_valid_route(self):
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_invalid_reason(self):
    """
    Getter method for invalid_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/invalid_reason (identityref)

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    return self.__invalid_reason
      
  def _set_invalid_reason(self, v, load=False):
    """
    Setter method for invalid_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/invalid_reason (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_reason() directly.

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_reason must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__invalid_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_reason(self):
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_reject_reason(self):
    """
    Getter method for reject_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/reject_reason (union)

    YANG Description: Indicates the reason the route is not used, either due to
policy filtering or bestpath selection
    """
    return self.__reject_reason
      
  def _set_reject_reason(self, v, load=False):
    """
    Setter method for reject_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/reject_reason (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_reject_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_reject_reason() directly.

    YANG Description: Indicates the reason the route is not used, either due to
policy filtering or bestpath selection
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),], is_leaf=True, yang_name="reject-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rib/bgp-ext', defining_module='openconfig-rib-bgp-ext', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """reject_reason must be of a type compatible with union""",
          'defined-type': "openconfig-rib-bgp-ext:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),], is_leaf=True, yang_name="reject-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rib/bgp-ext', defining_module='openconfig-rib-bgp-ext', yang_type='union', is_config=False)""",
        })

    self.__reject_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_reject_reason(self):
    self.__reject_reason = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),], is_leaf=True, yang_name="reject-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rib/bgp-ext', defining_module='openconfig-rib-bgp-ext', yang_type='union', is_config=False)

  prefix = __builtin__.property(_get_prefix)
  origin = __builtin__.property(_get_origin)
  path_id = __builtin__.property(_get_path_id)
  attr_index = __builtin__.property(_get_attr_index)
  community_index = __builtin__.property(_get_community_index)
  ext_community_index = __builtin__.property(_get_ext_community_index)
  last_modified = __builtin__.property(_get_last_modified)
  valid_route = __builtin__.property(_get_valid_route)
  invalid_reason = __builtin__.property(_get_invalid_reason)
  reject_reason = __builtin__.property(_get_reject_reason)


  _pyangbind_elements = OrderedDict([('prefix', prefix), ('origin', origin), ('path_id', path_id), ('attr_index', attr_index), ('community_index', community_index), ('ext_community_index', ext_community_index), ('last_modified', last_modified), ('valid_route', valid_route), ('invalid_reason', invalid_reason), ('reject_reason', reject_reason), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib/routes/route/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for route entries in the
BGP LOC-RIB
  """
  __slots__ = ('_path_helper', '_extmethods', '__prefix','__origin','__path_id','__attr_index','__community_index','__ext_community_index','__last_modified','__valid_route','__invalid_reason','__reject_reason',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}/([0-9]|[12][0-9]|3[0-2])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ipv4-prefix', is_config=False)
    self.__origin = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},),], is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__attr_index = YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__community_index = YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__ext_community_index = YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    self.__reject_reason = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),], is_leaf=True, yang_name="reject-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rib/bgp-ext', defining_module='openconfig-rib-bgp-ext', yang_type='union', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'bgp', 'rib', 'afi-safis', 'afi-safi', 'ipv4-unicast', 'loc-rib', 'routes', 'route', 'state']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/prefix (oc-inet:ipv4-prefix)

    YANG Description: The IPv4 prefix corresponding to the route
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/prefix (oc-inet:ipv4-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: The IPv4 prefix corresponding to the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}/([0-9]|[12][0-9]|3[0-2])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ipv4-prefix', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with oc-inet:ipv4-prefix""",
          'defined-type': "oc-inet:ipv4-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}/([0-9]|[12][0-9]|3[0-2])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ipv4-prefix', is_config=False)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}/([0-9]|[12][0-9]|3[0-2])'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-inet:ipv4-prefix', is_config=False)


  def _get_origin(self):
    """
    Getter method for origin, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/origin (union)

    YANG Description: Indicates the origin of the route.  If the route is learned
from a neighbor, this value is the neighbor address.  If
the route was injected or redistributed from another
protocol, the origin indicates the source protocol for the
route.
    """
    return self.__origin
      
  def _set_origin(self, v, load=False):
    """
    Setter method for origin, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/origin (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_origin is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_origin() directly.

    YANG Description: Indicates the origin of the route.  If the route is learned
from a neighbor, this value is the neighbor address.  If
the route was injected or redistributed from another
protocol, the origin indicates the source protocol for the
route.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},),], is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """origin must be of a type compatible with union""",
          'defined-type': "openconfig-network-instance:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},),], is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)""",
        })

    self.__origin = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_origin(self):
    self.__origin = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:BGP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:ISIS': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:OSPF3': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:STATIC': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:DIRECTLY_CONNECTED': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL_AGGREGATE': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PIM': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:IGMP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:GRIBI': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:PCEP': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'openconfig-policy-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pol-types:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}, 'oc-pt:LOCAL': {'@module': 'openconfig-policy-types', '@namespace': 'http://openconfig.net/yang/policy-types'}},),], is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='union', is_config=False)


  def _get_path_id(self):
    """
    Getter method for path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/path_id (uint32)

    YANG Description: If the route is learned from a neighbor, the path-id
corresponds to the path-id for the route in the
corresponding adj-rib-in-post table.  If the route is
injected from another protocol, or the neighbor does not
support BGP add-paths, the path-id should be set
to zero, also the default value.
    """
    return self.__path_id
      
  def _set_path_id(self, v, load=False):
    """
    Setter method for path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/path_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_id() directly.

    YANG Description: If the route is learned from a neighbor, the path-id
corresponds to the path-id for the route in the
corresponding adj-rib-in-post table.  If the route is
injected from another protocol, or the neighbor does not
support BGP add-paths, the path-id should be set
to zero, also the default value.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_id(self):
    self.__path_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_attr_index(self):
    """
    Getter method for attr_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/attr_index (leafref)

    YANG Description: Reference to the common attribute group for the
route
    """
    return self.__attr_index
      
  def _set_attr_index(self, v, load=False):
    """
    Setter method for attr_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/attr_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr_index() directly.

    YANG Description: Reference to the common attribute group for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__attr_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr_index(self):
    self.__attr_index = YANGDynClass(base=str, is_leaf=True, yang_name="attr-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_community_index(self):
    """
    Getter method for community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/community_index (leafref)

    YANG Description: Reference to the community attribute for the route
    """
    return self.__community_index
      
  def _set_community_index(self, v, load=False):
    """
    Setter method for community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community_index() directly.

    YANG Description: Reference to the community attribute for the route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community_index(self):
    self.__community_index = YANGDynClass(base=str, is_leaf=True, yang_name="community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_ext_community_index(self):
    """
    Getter method for ext_community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/ext_community_index (leafref)

    YANG Description: Reference to the extended community attribute for the
route
    """
    return self.__ext_community_index
      
  def _set_ext_community_index(self, v, load=False):
    """
    Setter method for ext_community_index, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/ext_community_index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_community_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_community_index() directly.

    YANG Description: Reference to the extended community attribute for the
route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_community_index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__ext_community_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_community_index(self):
    self.__ext_community_index = YANGDynClass(base=str, is_leaf=True, yang_name="ext-community-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_last_modified(self):
    """
    Getter method for last_modified, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/last_modified (oc-types:timeticks64)

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_modified
      
  def _set_last_modified(self, v, load=False):
    """
    Setter method for last_modified, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/last_modified (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_modified is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_modified() directly.

    YANG Description: Timestamp when this path was last modified.

The value is the timestamp relative to
the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_modified must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_modified = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_modified(self):
    self.__last_modified = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-modified", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)


  def _get_valid_route(self):
    """
    Getter method for valid_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/valid_route (boolean)

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    return self.__valid_route
      
  def _set_valid_route(self, v, load=False):
    """
    Setter method for valid_route, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/valid_route (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_valid_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_valid_route() directly.

    YANG Description: Indicates that the route is considered valid by the
local router
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """valid_route must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__valid_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_valid_route(self):
    self.__valid_route = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="valid-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_invalid_reason(self):
    """
    Getter method for invalid_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/invalid_reason (identityref)

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    return self.__invalid_reason
      
  def _set_invalid_reason(self, v, load=False):
    """
    Setter method for invalid_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/invalid_reason (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_reason() directly.

    YANG Description: If the route is rejected as invalid, this indicates the
reason.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_reason must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__invalid_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_reason(self):
    self.__invalid_reason = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CLUSTER_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_AS_LOOP': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_ORIGINATOR': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:INVALID_CONFED': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},), is_leaf=True, yang_name="invalid-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)


  def _get_reject_reason(self):
    """
    Getter method for reject_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/reject_reason (union)

    YANG Description: Indicates the reason the route is not used, either due to
policy filtering or bestpath selection
    """
    return self.__reject_reason
      
  def _set_reject_reason(self, v, load=False):
    """
    Setter method for reject_reason, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/ipv4_unicast/loc_rib/routes/route/state/reject_reason (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_reject_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_reject_reason() directly.

    YANG Description: Indicates the reason the route is not used, either due to
policy filtering or bestpath selection
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),], is_leaf=True, yang_name="reject-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rib/bgp-ext', defining_module='openconfig-rib-bgp-ext', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """reject_reason must be of a type compatible with union""",
          'defined-type': "openconfig-rib-bgp-ext:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),], is_leaf=True, yang_name="reject-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rib/bgp-ext', defining_module='openconfig-rib-bgp-ext', yang_type='union', is_config=False)""",
        })

    self.__reject_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_reject_reason(self):
    self.__reject_reason = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:LOCAL_PREF_LOWER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:AS_PATH_LONGER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:ORIGIN_TYPE_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:MED_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:PREFER_EXTERNAL': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:NEXTHOP_COST_HIGHER': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_ROUTER_ID': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:HIGHER_PEER_ADDRESS': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'openconfig-rib-bgp-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprib-types:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgpribt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}, 'oc-bgprt:REJECTED_IMPORT_POLICY': {'@module': 'openconfig-rib-bgp-types', '@namespace': 'http://openconfig.net/yang/rib/bgp-types'}},),], is_leaf=True, yang_name="reject-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rib/bgp-ext', defining_module='openconfig-rib-bgp-ext', yang_type='union', is_config=False)

  prefix = __builtin__.property(_get_prefix)
  origin = __builtin__.property(_get_origin)
  path_id = __builtin__.property(_get_path_id)
  attr_index = __builtin__.property(_get_attr_index)
  community_index = __builtin__.property(_get_community_index)
  ext_community_index = __builtin__.property(_get_ext_community_index)
  last_modified = __builtin__.property(_get_last_modified)
  valid_route = __builtin__.property(_get_valid_route)
  invalid_reason = __builtin__.property(_get_invalid_reason)
  reject_reason = __builtin__.property(_get_reject_reason)


  _pyangbind_elements = OrderedDict([('prefix', prefix), ('origin', origin), ('path_id', path_id), ('attr_index', attr_index), ('community_index', community_index), ('ext_community_index', ext_community_index), ('last_modified', last_modified), ('valid_route', valid_route), ('invalid_reason', invalid_reason), ('reject_reason', reject_reason), ])


