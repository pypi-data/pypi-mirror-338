# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Attributes of a FAD binding
  """
  __slots__ = ('_path_helper', '_extmethods', '__flex_algo_id','__isis_level','__advertised','__participate',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__flex_algo_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['128..255']}), is_leaf=True, yang_name="flex-algo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=False)
    self.__isis_level = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LEVEL_1': {}, 'LEVEL_2': {}, 'LEVEL_1_2': {}},), default=str("LEVEL_1_2"), is_leaf=True, yang_name="isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-isis-types:level-type', is_config=False)
    self.__advertised = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="advertised", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__participate = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="participate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'isis', 'global', 'segment-routing', 'flex-algorithm-bindings', 'flex-algorithm-binding', 'state']

  def _get_flex_algo_id(self):
    """
    Getter method for flex_algo_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/flex_algo_id (uint8)

    YANG Description: Flexible Algorithm identifier
    """
    return self.__flex_algo_id
      
  def _set_flex_algo_id(self, v, load=False):
    """
    Setter method for flex_algo_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/flex_algo_id (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algo_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algo_id() directly.

    YANG Description: Flexible Algorithm identifier
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['128..255']}), is_leaf=True, yang_name="flex-algo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algo_id must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['128..255']}), is_leaf=True, yang_name="flex-algo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=False)""",
        })

    self.__flex_algo_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algo_id(self):
    self.__flex_algo_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['128..255']}), is_leaf=True, yang_name="flex-algo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=False)


  def _get_isis_level(self):
    """
    Getter method for isis_level, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/isis_level (oc-isis-types:level-type)

    YANG Description: IS-IS Level associated with this Flex Algorithm
    """
    return self.__isis_level
      
  def _set_isis_level(self, v, load=False):
    """
    Setter method for isis_level, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/isis_level (oc-isis-types:level-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isis_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isis_level() directly.

    YANG Description: IS-IS Level associated with this Flex Algorithm
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LEVEL_1': {}, 'LEVEL_2': {}, 'LEVEL_1_2': {}},), default=str("LEVEL_1_2"), is_leaf=True, yang_name="isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-isis-types:level-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isis_level must be of a type compatible with oc-isis-types:level-type""",
          'defined-type': "oc-isis-types:level-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LEVEL_1': {}, 'LEVEL_2': {}, 'LEVEL_1_2': {}},), default=str("LEVEL_1_2"), is_leaf=True, yang_name="isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-isis-types:level-type', is_config=False)""",
        })

    self.__isis_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isis_level(self):
    self.__isis_level = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LEVEL_1': {}, 'LEVEL_2': {}, 'LEVEL_1_2': {}},), default=str("LEVEL_1_2"), is_leaf=True, yang_name="isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-isis-types:level-type', is_config=False)


  def _get_advertised(self):
    """
    Getter method for advertised, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/advertised (boolean)

    YANG Description: Indicates if the Flex Algorithm definition is advertised by this node
    """
    return self.__advertised
      
  def _set_advertised(self, v, load=False):
    """
    Setter method for advertised, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/advertised (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_advertised is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_advertised() directly.

    YANG Description: Indicates if the Flex Algorithm definition is advertised by this node
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="advertised", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """advertised must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="advertised", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__advertised = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_advertised(self):
    self.__advertised = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="advertised", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_participate(self):
    """
    Getter method for participate, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/participate (boolean)

    YANG Description: Indicates if the node participates in this Flex Algorithm
    """
    return self.__participate
      
  def _set_participate(self, v, load=False):
    """
    Setter method for participate, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/participate (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_participate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_participate() directly.

    YANG Description: Indicates if the node participates in this Flex Algorithm
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="participate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """participate must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="participate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__participate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_participate(self):
    self.__participate = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="participate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

  flex_algo_id = __builtin__.property(_get_flex_algo_id)
  isis_level = __builtin__.property(_get_isis_level)
  advertised = __builtin__.property(_get_advertised)
  participate = __builtin__.property(_get_participate)


  _pyangbind_elements = OrderedDict([('flex_algo_id', flex_algo_id), ('isis_level', isis_level), ('advertised', advertised), ('participate', participate), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Attributes of a FAD binding
  """
  __slots__ = ('_path_helper', '_extmethods', '__flex_algo_id','__isis_level','__advertised','__participate',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__flex_algo_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['128..255']}), is_leaf=True, yang_name="flex-algo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=False)
    self.__isis_level = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LEVEL_1': {}, 'LEVEL_2': {}, 'LEVEL_1_2': {}},), default=str("LEVEL_1_2"), is_leaf=True, yang_name="isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-isis-types:level-type', is_config=False)
    self.__advertised = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="advertised", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__participate = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="participate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'isis', 'global', 'segment-routing', 'flex-algorithm-bindings', 'flex-algorithm-binding', 'state']

  def _get_flex_algo_id(self):
    """
    Getter method for flex_algo_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/flex_algo_id (uint8)

    YANG Description: Flexible Algorithm identifier
    """
    return self.__flex_algo_id
      
  def _set_flex_algo_id(self, v, load=False):
    """
    Setter method for flex_algo_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/flex_algo_id (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algo_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algo_id() directly.

    YANG Description: Flexible Algorithm identifier
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['128..255']}), is_leaf=True, yang_name="flex-algo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algo_id must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['128..255']}), is_leaf=True, yang_name="flex-algo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=False)""",
        })

    self.__flex_algo_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algo_id(self):
    self.__flex_algo_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['128..255']}), is_leaf=True, yang_name="flex-algo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=False)


  def _get_isis_level(self):
    """
    Getter method for isis_level, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/isis_level (oc-isis-types:level-type)

    YANG Description: IS-IS Level associated with this Flex Algorithm
    """
    return self.__isis_level
      
  def _set_isis_level(self, v, load=False):
    """
    Setter method for isis_level, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/isis_level (oc-isis-types:level-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isis_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isis_level() directly.

    YANG Description: IS-IS Level associated with this Flex Algorithm
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LEVEL_1': {}, 'LEVEL_2': {}, 'LEVEL_1_2': {}},), default=str("LEVEL_1_2"), is_leaf=True, yang_name="isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-isis-types:level-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isis_level must be of a type compatible with oc-isis-types:level-type""",
          'defined-type': "oc-isis-types:level-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LEVEL_1': {}, 'LEVEL_2': {}, 'LEVEL_1_2': {}},), default=str("LEVEL_1_2"), is_leaf=True, yang_name="isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-isis-types:level-type', is_config=False)""",
        })

    self.__isis_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isis_level(self):
    self.__isis_level = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LEVEL_1': {}, 'LEVEL_2': {}, 'LEVEL_1_2': {}},), default=str("LEVEL_1_2"), is_leaf=True, yang_name="isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-isis-types:level-type', is_config=False)


  def _get_advertised(self):
    """
    Getter method for advertised, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/advertised (boolean)

    YANG Description: Indicates if the Flex Algorithm definition is advertised by this node
    """
    return self.__advertised
      
  def _set_advertised(self, v, load=False):
    """
    Setter method for advertised, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/advertised (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_advertised is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_advertised() directly.

    YANG Description: Indicates if the Flex Algorithm definition is advertised by this node
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="advertised", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """advertised must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="advertised", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__advertised = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_advertised(self):
    self.__advertised = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="advertised", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_participate(self):
    """
    Getter method for participate, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/participate (boolean)

    YANG Description: Indicates if the node participates in this Flex Algorithm
    """
    return self.__participate
      
  def _set_participate(self, v, load=False):
    """
    Setter method for participate, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/participate (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_participate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_participate() directly.

    YANG Description: Indicates if the node participates in this Flex Algorithm
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="participate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """participate must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="participate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__participate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_participate(self):
    self.__participate = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="participate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

  flex_algo_id = __builtin__.property(_get_flex_algo_id)
  isis_level = __builtin__.property(_get_isis_level)
  advertised = __builtin__.property(_get_advertised)
  participate = __builtin__.property(_get_participate)


  _pyangbind_elements = OrderedDict([('flex_algo_id', flex_algo_id), ('isis_level', isis_level), ('advertised', advertised), ('participate', participate), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Attributes of a FAD binding
  """
  __slots__ = ('_path_helper', '_extmethods', '__flex_algo_id','__isis_level','__advertised','__participate',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__flex_algo_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['128..255']}), is_leaf=True, yang_name="flex-algo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=False)
    self.__isis_level = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LEVEL_1': {}, 'LEVEL_2': {}, 'LEVEL_1_2': {}},), default=str("LEVEL_1_2"), is_leaf=True, yang_name="isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-isis-types:level-type', is_config=False)
    self.__advertised = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="advertised", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__participate = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="participate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'isis', 'global', 'segment-routing', 'flex-algorithm-bindings', 'flex-algorithm-binding', 'state']

  def _get_flex_algo_id(self):
    """
    Getter method for flex_algo_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/flex_algo_id (uint8)

    YANG Description: Flexible Algorithm identifier
    """
    return self.__flex_algo_id
      
  def _set_flex_algo_id(self, v, load=False):
    """
    Setter method for flex_algo_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/flex_algo_id (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algo_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algo_id() directly.

    YANG Description: Flexible Algorithm identifier
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['128..255']}), is_leaf=True, yang_name="flex-algo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algo_id must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['128..255']}), is_leaf=True, yang_name="flex-algo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=False)""",
        })

    self.__flex_algo_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algo_id(self):
    self.__flex_algo_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['128..255']}), is_leaf=True, yang_name="flex-algo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=False)


  def _get_isis_level(self):
    """
    Getter method for isis_level, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/isis_level (oc-isis-types:level-type)

    YANG Description: IS-IS Level associated with this Flex Algorithm
    """
    return self.__isis_level
      
  def _set_isis_level(self, v, load=False):
    """
    Setter method for isis_level, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/isis_level (oc-isis-types:level-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isis_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isis_level() directly.

    YANG Description: IS-IS Level associated with this Flex Algorithm
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LEVEL_1': {}, 'LEVEL_2': {}, 'LEVEL_1_2': {}},), default=str("LEVEL_1_2"), is_leaf=True, yang_name="isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-isis-types:level-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isis_level must be of a type compatible with oc-isis-types:level-type""",
          'defined-type': "oc-isis-types:level-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LEVEL_1': {}, 'LEVEL_2': {}, 'LEVEL_1_2': {}},), default=str("LEVEL_1_2"), is_leaf=True, yang_name="isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-isis-types:level-type', is_config=False)""",
        })

    self.__isis_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isis_level(self):
    self.__isis_level = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LEVEL_1': {}, 'LEVEL_2': {}, 'LEVEL_1_2': {}},), default=str("LEVEL_1_2"), is_leaf=True, yang_name="isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-isis-types:level-type', is_config=False)


  def _get_advertised(self):
    """
    Getter method for advertised, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/advertised (boolean)

    YANG Description: Indicates if the Flex Algorithm definition is advertised by this node
    """
    return self.__advertised
      
  def _set_advertised(self, v, load=False):
    """
    Setter method for advertised, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/advertised (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_advertised is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_advertised() directly.

    YANG Description: Indicates if the Flex Algorithm definition is advertised by this node
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="advertised", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """advertised must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="advertised", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__advertised = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_advertised(self):
    self.__advertised = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="advertised", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_participate(self):
    """
    Getter method for participate, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/participate (boolean)

    YANG Description: Indicates if the node participates in this Flex Algorithm
    """
    return self.__participate
      
  def _set_participate(self, v, load=False):
    """
    Setter method for participate, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/participate (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_participate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_participate() directly.

    YANG Description: Indicates if the node participates in this Flex Algorithm
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="participate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """participate must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="participate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__participate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_participate(self):
    self.__participate = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="participate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

  flex_algo_id = __builtin__.property(_get_flex_algo_id)
  isis_level = __builtin__.property(_get_isis_level)
  advertised = __builtin__.property(_get_advertised)
  participate = __builtin__.property(_get_participate)


  _pyangbind_elements = OrderedDict([('flex_algo_id', flex_algo_id), ('isis_level', isis_level), ('advertised', advertised), ('participate', participate), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Attributes of a FAD binding
  """
  __slots__ = ('_path_helper', '_extmethods', '__flex_algo_id','__isis_level','__advertised','__participate',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__flex_algo_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['128..255']}), is_leaf=True, yang_name="flex-algo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=False)
    self.__isis_level = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LEVEL_1': {}, 'LEVEL_2': {}, 'LEVEL_1_2': {}},), default=str("LEVEL_1_2"), is_leaf=True, yang_name="isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-isis-types:level-type', is_config=False)
    self.__advertised = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="advertised", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__participate = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="participate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'isis', 'global', 'segment-routing', 'flex-algorithm-bindings', 'flex-algorithm-binding', 'state']

  def _get_flex_algo_id(self):
    """
    Getter method for flex_algo_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/flex_algo_id (uint8)

    YANG Description: Flexible Algorithm identifier
    """
    return self.__flex_algo_id
      
  def _set_flex_algo_id(self, v, load=False):
    """
    Setter method for flex_algo_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/flex_algo_id (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algo_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algo_id() directly.

    YANG Description: Flexible Algorithm identifier
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['128..255']}), is_leaf=True, yang_name="flex-algo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algo_id must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['128..255']}), is_leaf=True, yang_name="flex-algo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=False)""",
        })

    self.__flex_algo_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algo_id(self):
    self.__flex_algo_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['128..255']}), is_leaf=True, yang_name="flex-algo-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=False)


  def _get_isis_level(self):
    """
    Getter method for isis_level, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/isis_level (oc-isis-types:level-type)

    YANG Description: IS-IS Level associated with this Flex Algorithm
    """
    return self.__isis_level
      
  def _set_isis_level(self, v, load=False):
    """
    Setter method for isis_level, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/isis_level (oc-isis-types:level-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isis_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isis_level() directly.

    YANG Description: IS-IS Level associated with this Flex Algorithm
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LEVEL_1': {}, 'LEVEL_2': {}, 'LEVEL_1_2': {}},), default=str("LEVEL_1_2"), is_leaf=True, yang_name="isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-isis-types:level-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isis_level must be of a type compatible with oc-isis-types:level-type""",
          'defined-type': "oc-isis-types:level-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LEVEL_1': {}, 'LEVEL_2': {}, 'LEVEL_1_2': {}},), default=str("LEVEL_1_2"), is_leaf=True, yang_name="isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-isis-types:level-type', is_config=False)""",
        })

    self.__isis_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isis_level(self):
    self.__isis_level = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'LEVEL_1': {}, 'LEVEL_2': {}, 'LEVEL_1_2': {}},), default=str("LEVEL_1_2"), is_leaf=True, yang_name="isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-isis-types:level-type', is_config=False)


  def _get_advertised(self):
    """
    Getter method for advertised, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/advertised (boolean)

    YANG Description: Indicates if the Flex Algorithm definition is advertised by this node
    """
    return self.__advertised
      
  def _set_advertised(self, v, load=False):
    """
    Setter method for advertised, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/advertised (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_advertised is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_advertised() directly.

    YANG Description: Indicates if the Flex Algorithm definition is advertised by this node
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="advertised", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """advertised must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="advertised", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__advertised = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_advertised(self):
    self.__advertised = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="advertised", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_participate(self):
    """
    Getter method for participate, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/participate (boolean)

    YANG Description: Indicates if the node participates in this Flex Algorithm
    """
    return self.__participate
      
  def _set_participate(self, v, load=False):
    """
    Setter method for participate, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/global/segment_routing/flex_algorithm_bindings/flex_algorithm_binding/state/participate (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_participate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_participate() directly.

    YANG Description: Indicates if the node participates in this Flex Algorithm
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="participate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """participate must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="participate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__participate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_participate(self):
    self.__participate = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="participate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

  flex_algo_id = __builtin__.property(_get_flex_algo_id)
  isis_level = __builtin__.property(_get_isis_level)
  advertised = __builtin__.property(_get_advertised)
  participate = __builtin__.property(_get_participate)


  _pyangbind_elements = OrderedDict([('flex_algo_id', flex_algo_id), ('isis_level', isis_level), ('advertised', advertised), ('participate', participate), ])


