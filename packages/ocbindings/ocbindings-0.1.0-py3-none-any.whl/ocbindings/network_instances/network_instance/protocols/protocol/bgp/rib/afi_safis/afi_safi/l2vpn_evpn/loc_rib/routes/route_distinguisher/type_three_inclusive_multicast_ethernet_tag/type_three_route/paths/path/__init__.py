# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import state
from . import unknown_attributes
class path(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-three-inclusive-multicast-ethernet-tag/type-three-route/paths/path. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of paths
  """
  __slots__ = ('_path_helper', '_extmethods', '__peer_ip','__peer_path_id','__source_route_distinguisher','__source_address_family','__state','__unknown_attributes',)

  _yang_name = 'path'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__peer_ip = YANGDynClass(base=str, is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__peer_path_id = YANGDynClass(base=str, is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__source_route_distinguisher = YANGDynClass(base=str, is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__source_address_family = YANGDynClass(base=str, is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'bgp', 'rib', 'afi-safis', 'afi-safi', 'l2vpn-evpn', 'loc-rib', 'routes', 'route-distinguisher', 'type-three-inclusive-multicast-ethernet-tag', 'type-three-route', 'paths', 'path']

  def _get_peer_ip(self):
    """
    Getter method for peer_ip, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/peer_ip (leafref)

    YANG Description: The source peer ip address of the imported route
    """
    return self.__peer_ip
      
  def _set_peer_ip(self, v, load=False):
    """
    Setter method for peer_ip, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/peer_ip (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_ip() directly.

    YANG Description: The source peer ip address of the imported route
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_ip must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__peer_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_ip(self):
    self.__peer_ip = YANGDynClass(base=str, is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_peer_path_id(self):
    """
    Getter method for peer_path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/peer_path_id (leafref)

    YANG Description: The source peer path id of the imported route
    """
    return self.__peer_path_id
      
  def _set_peer_path_id(self, v, load=False):
    """
    Setter method for peer_path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/peer_path_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_path_id() directly.

    YANG Description: The source peer path id of the imported route
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_path_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__peer_path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_path_id(self):
    self.__peer_path_id = YANGDynClass(base=str, is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_source_route_distinguisher(self):
    """
    Getter method for source_route_distinguisher, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/source_route_distinguisher (leafref)

    YANG Description: The source route distinguisher is the remote RD source of the
imported route
    """
    return self.__source_route_distinguisher
      
  def _set_source_route_distinguisher(self, v, load=False):
    """
    Setter method for source_route_distinguisher, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/source_route_distinguisher (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_route_distinguisher is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_route_distinguisher() directly.

    YANG Description: The source route distinguisher is the remote RD source of the
imported route
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_route_distinguisher must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__source_route_distinguisher = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_route_distinguisher(self):
    self.__source_route_distinguisher = YANGDynClass(base=str, is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_source_address_family(self):
    """
    Getter method for source_address_family, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/source_address_family (leafref)

    YANG Description: The source address-family of the imported route
    """
    return self.__source_address_family
      
  def _set_source_address_family(self, v, load=False):
    """
    Setter method for source_address_family, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/source_address_family (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_address_family is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_address_family() directly.

    YANG Description: The source address-family of the imported route
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_address_family must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__source_address_family = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_address_family(self):
    self.__source_address_family = YANGDynClass(base=str, is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state (container)

    YANG Description: BGP path attributes for this route
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: BGP path attributes for this route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_unknown_attributes(self):
    """
    Getter method for unknown_attributes, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/unknown_attributes (container)

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    return self.__unknown_attributes
      
  def _set_unknown_attributes(self, v, load=False):
    """
    Setter method for unknown_attributes, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/unknown_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_attributes() directly.

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__unknown_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_attributes(self):
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  peer_ip = __builtin__.property(_get_peer_ip)
  peer_path_id = __builtin__.property(_get_peer_path_id)
  source_route_distinguisher = __builtin__.property(_get_source_route_distinguisher)
  source_address_family = __builtin__.property(_get_source_address_family)
  state = __builtin__.property(_get_state)
  unknown_attributes = __builtin__.property(_get_unknown_attributes)


  _pyangbind_elements = OrderedDict([('peer_ip', peer_ip), ('peer_path_id', peer_path_id), ('source_route_distinguisher', source_route_distinguisher), ('source_address_family', source_address_family), ('state', state), ('unknown_attributes', unknown_attributes), ])


from . import state
from . import unknown_attributes
class path(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-three-inclusive-multicast-ethernet-tag/type-three-route/paths/path. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of paths
  """
  __slots__ = ('_path_helper', '_extmethods', '__peer_ip','__peer_path_id','__source_route_distinguisher','__source_address_family','__state','__unknown_attributes',)

  _yang_name = 'path'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__peer_ip = YANGDynClass(base=str, is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__peer_path_id = YANGDynClass(base=str, is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__source_route_distinguisher = YANGDynClass(base=str, is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__source_address_family = YANGDynClass(base=str, is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'bgp', 'rib', 'afi-safis', 'afi-safi', 'l2vpn-evpn', 'loc-rib', 'routes', 'route-distinguisher', 'type-three-inclusive-multicast-ethernet-tag', 'type-three-route', 'paths', 'path']

  def _get_peer_ip(self):
    """
    Getter method for peer_ip, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/peer_ip (leafref)

    YANG Description: The source peer ip address of the imported route
    """
    return self.__peer_ip
      
  def _set_peer_ip(self, v, load=False):
    """
    Setter method for peer_ip, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/peer_ip (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_ip() directly.

    YANG Description: The source peer ip address of the imported route
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_ip must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__peer_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_ip(self):
    self.__peer_ip = YANGDynClass(base=str, is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_peer_path_id(self):
    """
    Getter method for peer_path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/peer_path_id (leafref)

    YANG Description: The source peer path id of the imported route
    """
    return self.__peer_path_id
      
  def _set_peer_path_id(self, v, load=False):
    """
    Setter method for peer_path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/peer_path_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_path_id() directly.

    YANG Description: The source peer path id of the imported route
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_path_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__peer_path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_path_id(self):
    self.__peer_path_id = YANGDynClass(base=str, is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_source_route_distinguisher(self):
    """
    Getter method for source_route_distinguisher, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/source_route_distinguisher (leafref)

    YANG Description: The source route distinguisher is the remote RD source of the
imported route
    """
    return self.__source_route_distinguisher
      
  def _set_source_route_distinguisher(self, v, load=False):
    """
    Setter method for source_route_distinguisher, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/source_route_distinguisher (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_route_distinguisher is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_route_distinguisher() directly.

    YANG Description: The source route distinguisher is the remote RD source of the
imported route
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_route_distinguisher must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__source_route_distinguisher = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_route_distinguisher(self):
    self.__source_route_distinguisher = YANGDynClass(base=str, is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_source_address_family(self):
    """
    Getter method for source_address_family, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/source_address_family (leafref)

    YANG Description: The source address-family of the imported route
    """
    return self.__source_address_family
      
  def _set_source_address_family(self, v, load=False):
    """
    Setter method for source_address_family, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/source_address_family (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_address_family is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_address_family() directly.

    YANG Description: The source address-family of the imported route
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_address_family must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__source_address_family = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_address_family(self):
    self.__source_address_family = YANGDynClass(base=str, is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state (container)

    YANG Description: BGP path attributes for this route
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: BGP path attributes for this route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_unknown_attributes(self):
    """
    Getter method for unknown_attributes, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/unknown_attributes (container)

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    return self.__unknown_attributes
      
  def _set_unknown_attributes(self, v, load=False):
    """
    Setter method for unknown_attributes, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/unknown_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_attributes() directly.

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__unknown_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_attributes(self):
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  peer_ip = __builtin__.property(_get_peer_ip)
  peer_path_id = __builtin__.property(_get_peer_path_id)
  source_route_distinguisher = __builtin__.property(_get_source_route_distinguisher)
  source_address_family = __builtin__.property(_get_source_address_family)
  state = __builtin__.property(_get_state)
  unknown_attributes = __builtin__.property(_get_unknown_attributes)


  _pyangbind_elements = OrderedDict([('peer_ip', peer_ip), ('peer_path_id', peer_path_id), ('source_route_distinguisher', source_route_distinguisher), ('source_address_family', source_address_family), ('state', state), ('unknown_attributes', unknown_attributes), ])


from . import state
from . import unknown_attributes
class path(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-three-inclusive-multicast-ethernet-tag/type-three-route/paths/path. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of paths
  """
  __slots__ = ('_path_helper', '_extmethods', '__peer_ip','__peer_path_id','__source_route_distinguisher','__source_address_family','__state','__unknown_attributes',)

  _yang_name = 'path'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__peer_ip = YANGDynClass(base=str, is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__peer_path_id = YANGDynClass(base=str, is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__source_route_distinguisher = YANGDynClass(base=str, is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__source_address_family = YANGDynClass(base=str, is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'bgp', 'rib', 'afi-safis', 'afi-safi', 'l2vpn-evpn', 'loc-rib', 'routes', 'route-distinguisher', 'type-three-inclusive-multicast-ethernet-tag', 'type-three-route', 'paths', 'path']

  def _get_peer_ip(self):
    """
    Getter method for peer_ip, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/peer_ip (leafref)

    YANG Description: The source peer ip address of the imported route
    """
    return self.__peer_ip
      
  def _set_peer_ip(self, v, load=False):
    """
    Setter method for peer_ip, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/peer_ip (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_ip() directly.

    YANG Description: The source peer ip address of the imported route
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_ip must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__peer_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_ip(self):
    self.__peer_ip = YANGDynClass(base=str, is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_peer_path_id(self):
    """
    Getter method for peer_path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/peer_path_id (leafref)

    YANG Description: The source peer path id of the imported route
    """
    return self.__peer_path_id
      
  def _set_peer_path_id(self, v, load=False):
    """
    Setter method for peer_path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/peer_path_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_path_id() directly.

    YANG Description: The source peer path id of the imported route
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_path_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__peer_path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_path_id(self):
    self.__peer_path_id = YANGDynClass(base=str, is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_source_route_distinguisher(self):
    """
    Getter method for source_route_distinguisher, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/source_route_distinguisher (leafref)

    YANG Description: The source route distinguisher is the remote RD source of the
imported route
    """
    return self.__source_route_distinguisher
      
  def _set_source_route_distinguisher(self, v, load=False):
    """
    Setter method for source_route_distinguisher, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/source_route_distinguisher (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_route_distinguisher is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_route_distinguisher() directly.

    YANG Description: The source route distinguisher is the remote RD source of the
imported route
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_route_distinguisher must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__source_route_distinguisher = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_route_distinguisher(self):
    self.__source_route_distinguisher = YANGDynClass(base=str, is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_source_address_family(self):
    """
    Getter method for source_address_family, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/source_address_family (leafref)

    YANG Description: The source address-family of the imported route
    """
    return self.__source_address_family
      
  def _set_source_address_family(self, v, load=False):
    """
    Setter method for source_address_family, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/source_address_family (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_address_family is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_address_family() directly.

    YANG Description: The source address-family of the imported route
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_address_family must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__source_address_family = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_address_family(self):
    self.__source_address_family = YANGDynClass(base=str, is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state (container)

    YANG Description: BGP path attributes for this route
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: BGP path attributes for this route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_unknown_attributes(self):
    """
    Getter method for unknown_attributes, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/unknown_attributes (container)

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    return self.__unknown_attributes
      
  def _set_unknown_attributes(self, v, load=False):
    """
    Setter method for unknown_attributes, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/unknown_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_attributes() directly.

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__unknown_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_attributes(self):
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  peer_ip = __builtin__.property(_get_peer_ip)
  peer_path_id = __builtin__.property(_get_peer_path_id)
  source_route_distinguisher = __builtin__.property(_get_source_route_distinguisher)
  source_address_family = __builtin__.property(_get_source_address_family)
  state = __builtin__.property(_get_state)
  unknown_attributes = __builtin__.property(_get_unknown_attributes)


  _pyangbind_elements = OrderedDict([('peer_ip', peer_ip), ('peer_path_id', peer_path_id), ('source_route_distinguisher', source_route_distinguisher), ('source_address_family', source_address_family), ('state', state), ('unknown_attributes', unknown_attributes), ])


from . import state
from . import unknown_attributes
class path(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-three-inclusive-multicast-ethernet-tag/type-three-route/paths/path. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of paths
  """
  __slots__ = ('_path_helper', '_extmethods', '__peer_ip','__peer_path_id','__source_route_distinguisher','__source_address_family','__state','__unknown_attributes',)

  _yang_name = 'path'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__peer_ip = YANGDynClass(base=str, is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__peer_path_id = YANGDynClass(base=str, is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__source_route_distinguisher = YANGDynClass(base=str, is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__source_address_family = YANGDynClass(base=str, is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'bgp', 'rib', 'afi-safis', 'afi-safi', 'l2vpn-evpn', 'loc-rib', 'routes', 'route-distinguisher', 'type-three-inclusive-multicast-ethernet-tag', 'type-three-route', 'paths', 'path']

  def _get_peer_ip(self):
    """
    Getter method for peer_ip, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/peer_ip (leafref)

    YANG Description: The source peer ip address of the imported route
    """
    return self.__peer_ip
      
  def _set_peer_ip(self, v, load=False):
    """
    Setter method for peer_ip, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/peer_ip (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_ip() directly.

    YANG Description: The source peer ip address of the imported route
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_ip must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__peer_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_ip(self):
    self.__peer_ip = YANGDynClass(base=str, is_leaf=True, yang_name="peer-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_peer_path_id(self):
    """
    Getter method for peer_path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/peer_path_id (leafref)

    YANG Description: The source peer path id of the imported route
    """
    return self.__peer_path_id
      
  def _set_peer_path_id(self, v, load=False):
    """
    Setter method for peer_path_id, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/peer_path_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_path_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_path_id() directly.

    YANG Description: The source peer path id of the imported route
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_path_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__peer_path_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_path_id(self):
    self.__peer_path_id = YANGDynClass(base=str, is_leaf=True, yang_name="peer-path-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_source_route_distinguisher(self):
    """
    Getter method for source_route_distinguisher, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/source_route_distinguisher (leafref)

    YANG Description: The source route distinguisher is the remote RD source of the
imported route
    """
    return self.__source_route_distinguisher
      
  def _set_source_route_distinguisher(self, v, load=False):
    """
    Setter method for source_route_distinguisher, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/source_route_distinguisher (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_route_distinguisher is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_route_distinguisher() directly.

    YANG Description: The source route distinguisher is the remote RD source of the
imported route
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_route_distinguisher must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__source_route_distinguisher = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_route_distinguisher(self):
    self.__source_route_distinguisher = YANGDynClass(base=str, is_leaf=True, yang_name="source-route-distinguisher", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_source_address_family(self):
    """
    Getter method for source_address_family, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/source_address_family (leafref)

    YANG Description: The source address-family of the imported route
    """
    return self.__source_address_family
      
  def _set_source_address_family(self, v, load=False):
    """
    Setter method for source_address_family, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/source_address_family (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_address_family is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_address_family() directly.

    YANG Description: The source address-family of the imported route
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_address_family must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__source_address_family = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_address_family(self):
    self.__source_address_family = YANGDynClass(base=str, is_leaf=True, yang_name="source-address-family", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state (container)

    YANG Description: BGP path attributes for this route
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: BGP path attributes for this route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_unknown_attributes(self):
    """
    Getter method for unknown_attributes, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/unknown_attributes (container)

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    return self.__unknown_attributes
      
  def _set_unknown_attributes(self, v, load=False):
    """
    Setter method for unknown_attributes, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/rib/afi_safis/afi_safi/l2vpn_evpn/loc_rib/routes/route_distinguisher/type_three_inclusive_multicast_ethernet_tag/type_three_route/paths/path/unknown_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_attributes() directly.

    YANG Description: Unknown path attributes that were received in the UPDATE
message which contained the prefix.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__unknown_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_attributes(self):
    self.__unknown_attributes = YANGDynClass(base=unknown_attributes.unknown_attributes, is_container='container', yang_name="unknown-attributes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  peer_ip = __builtin__.property(_get_peer_ip)
  peer_path_id = __builtin__.property(_get_peer_path_id)
  source_route_distinguisher = __builtin__.property(_get_source_route_distinguisher)
  source_address_family = __builtin__.property(_get_source_address_family)
  state = __builtin__.property(_get_state)
  unknown_attributes = __builtin__.property(_get_unknown_attributes)


  _pyangbind_elements = OrderedDict([('peer_ip', peer_ip), ('peer_path_id', peer_path_id), ('source_route_distinguisher', source_route_distinguisher), ('source_address_family', source_address_family), ('state', state), ('unknown_attributes', unknown_attributes), ])


