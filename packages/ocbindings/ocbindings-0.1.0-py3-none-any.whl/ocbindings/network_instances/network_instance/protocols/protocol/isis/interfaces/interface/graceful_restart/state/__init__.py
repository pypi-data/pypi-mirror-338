# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines information for ISIS graceful-restart.
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_timer','__interface_time_expirations',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface_timer = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interface-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    self.__interface_time_expirations = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="interface-time-expirations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='int64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'isis', 'interfaces', 'interface', 'graceful-restart', 'state']

  def _get_interface_timer(self):
    """
    Getter method for interface_timer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/graceful_restart/state/interface_timer (uint16)

    YANG Description: Value of RFC5306/RFC8706 T1 timer
    """
    return self.__interface_timer
      
  def _set_interface_timer(self, v, load=False):
    """
    Setter method for interface_timer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/graceful_restart/state/interface_timer (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_timer() directly.

    YANG Description: Value of RFC5306/RFC8706 T1 timer
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interface-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_timer must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interface-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__interface_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_timer(self):
    self.__interface_timer = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interface-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)


  def _get_interface_time_expirations(self):
    """
    Getter method for interface_time_expirations, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/graceful_restart/state/interface_time_expirations (int64)

    YANG Description: Number of times T1 expires before IIH without Restart TLV's RR flag
set is sent. That is GR helper is not supported by adjacents
Inermediate System
    """
    return self.__interface_time_expirations
      
  def _set_interface_time_expirations(self, v, load=False):
    """
    Setter method for interface_time_expirations, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/graceful_restart/state/interface_time_expirations (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_time_expirations is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_time_expirations() directly.

    YANG Description: Number of times T1 expires before IIH without Restart TLV's RR flag
set is sent. That is GR helper is not supported by adjacents
Inermediate System
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="interface-time-expirations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_time_expirations must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="interface-time-expirations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='int64', is_config=False)""",
        })

    self.__interface_time_expirations = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_time_expirations(self):
    self.__interface_time_expirations = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="interface-time-expirations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='int64', is_config=False)

  interface_timer = __builtin__.property(_get_interface_timer)
  interface_time_expirations = __builtin__.property(_get_interface_time_expirations)


  _pyangbind_elements = OrderedDict([('interface_timer', interface_timer), ('interface_time_expirations', interface_time_expirations), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines information for ISIS graceful-restart.
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_timer','__interface_time_expirations',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface_timer = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interface-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    self.__interface_time_expirations = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="interface-time-expirations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='int64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'isis', 'interfaces', 'interface', 'graceful-restart', 'state']

  def _get_interface_timer(self):
    """
    Getter method for interface_timer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/graceful_restart/state/interface_timer (uint16)

    YANG Description: Value of RFC5306/RFC8706 T1 timer
    """
    return self.__interface_timer
      
  def _set_interface_timer(self, v, load=False):
    """
    Setter method for interface_timer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/graceful_restart/state/interface_timer (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_timer() directly.

    YANG Description: Value of RFC5306/RFC8706 T1 timer
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interface-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_timer must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interface-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__interface_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_timer(self):
    self.__interface_timer = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interface-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)


  def _get_interface_time_expirations(self):
    """
    Getter method for interface_time_expirations, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/graceful_restart/state/interface_time_expirations (int64)

    YANG Description: Number of times T1 expires before IIH without Restart TLV's RR flag
set is sent. That is GR helper is not supported by adjacents
Inermediate System
    """
    return self.__interface_time_expirations
      
  def _set_interface_time_expirations(self, v, load=False):
    """
    Setter method for interface_time_expirations, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/graceful_restart/state/interface_time_expirations (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_time_expirations is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_time_expirations() directly.

    YANG Description: Number of times T1 expires before IIH without Restart TLV's RR flag
set is sent. That is GR helper is not supported by adjacents
Inermediate System
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="interface-time-expirations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_time_expirations must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="interface-time-expirations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='int64', is_config=False)""",
        })

    self.__interface_time_expirations = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_time_expirations(self):
    self.__interface_time_expirations = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="interface-time-expirations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='int64', is_config=False)

  interface_timer = __builtin__.property(_get_interface_timer)
  interface_time_expirations = __builtin__.property(_get_interface_time_expirations)


  _pyangbind_elements = OrderedDict([('interface_timer', interface_timer), ('interface_time_expirations', interface_time_expirations), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines information for ISIS graceful-restart.
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_timer','__interface_time_expirations',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface_timer = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interface-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    self.__interface_time_expirations = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="interface-time-expirations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='int64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'isis', 'interfaces', 'interface', 'graceful-restart', 'state']

  def _get_interface_timer(self):
    """
    Getter method for interface_timer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/graceful_restart/state/interface_timer (uint16)

    YANG Description: Value of RFC5306/RFC8706 T1 timer
    """
    return self.__interface_timer
      
  def _set_interface_timer(self, v, load=False):
    """
    Setter method for interface_timer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/graceful_restart/state/interface_timer (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_timer() directly.

    YANG Description: Value of RFC5306/RFC8706 T1 timer
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interface-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_timer must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interface-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__interface_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_timer(self):
    self.__interface_timer = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interface-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)


  def _get_interface_time_expirations(self):
    """
    Getter method for interface_time_expirations, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/graceful_restart/state/interface_time_expirations (int64)

    YANG Description: Number of times T1 expires before IIH without Restart TLV's RR flag
set is sent. That is GR helper is not supported by adjacents
Inermediate System
    """
    return self.__interface_time_expirations
      
  def _set_interface_time_expirations(self, v, load=False):
    """
    Setter method for interface_time_expirations, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/graceful_restart/state/interface_time_expirations (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_time_expirations is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_time_expirations() directly.

    YANG Description: Number of times T1 expires before IIH without Restart TLV's RR flag
set is sent. That is GR helper is not supported by adjacents
Inermediate System
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="interface-time-expirations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_time_expirations must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="interface-time-expirations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='int64', is_config=False)""",
        })

    self.__interface_time_expirations = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_time_expirations(self):
    self.__interface_time_expirations = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="interface-time-expirations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='int64', is_config=False)

  interface_timer = __builtin__.property(_get_interface_timer)
  interface_time_expirations = __builtin__.property(_get_interface_time_expirations)


  _pyangbind_elements = OrderedDict([('interface_timer', interface_timer), ('interface_time_expirations', interface_time_expirations), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines information for ISIS graceful-restart.
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_timer','__interface_time_expirations',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface_timer = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interface-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    self.__interface_time_expirations = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="interface-time-expirations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='int64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'isis', 'interfaces', 'interface', 'graceful-restart', 'state']

  def _get_interface_timer(self):
    """
    Getter method for interface_timer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/graceful_restart/state/interface_timer (uint16)

    YANG Description: Value of RFC5306/RFC8706 T1 timer
    """
    return self.__interface_timer
      
  def _set_interface_timer(self, v, load=False):
    """
    Setter method for interface_timer, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/graceful_restart/state/interface_timer (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_timer() directly.

    YANG Description: Value of RFC5306/RFC8706 T1 timer
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interface-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_timer must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interface-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__interface_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_timer(self):
    self.__interface_timer = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interface-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)


  def _get_interface_time_expirations(self):
    """
    Getter method for interface_time_expirations, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/graceful_restart/state/interface_time_expirations (int64)

    YANG Description: Number of times T1 expires before IIH without Restart TLV's RR flag
set is sent. That is GR helper is not supported by adjacents
Inermediate System
    """
    return self.__interface_time_expirations
      
  def _set_interface_time_expirations(self, v, load=False):
    """
    Setter method for interface_time_expirations, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/graceful_restart/state/interface_time_expirations (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_time_expirations is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_time_expirations() directly.

    YANG Description: Number of times T1 expires before IIH without Restart TLV's RR flag
set is sent. That is GR helper is not supported by adjacents
Inermediate System
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="interface-time-expirations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_time_expirations must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="interface-time-expirations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='int64', is_config=False)""",
        })

    self.__interface_time_expirations = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_time_expirations(self):
    self.__interface_time_expirations = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="interface-time-expirations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='int64', is_config=False)

  interface_timer = __builtin__.property(_get_interface_timer)
  interface_time_expirations = __builtin__.property(_get_interface_time_expirations)


  _pyangbind_elements = OrderedDict([('interface_timer', interface_timer), ('interface_time_expirations', interface_time_expirations), ])


