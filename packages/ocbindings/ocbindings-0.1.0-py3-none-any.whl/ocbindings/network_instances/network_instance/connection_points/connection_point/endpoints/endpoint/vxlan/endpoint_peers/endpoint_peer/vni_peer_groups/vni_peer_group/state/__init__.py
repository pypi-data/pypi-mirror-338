# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State container for the VNI peer group
  """
  __slots__ = ('_path_helper', '_extmethods', '__cp_vni','__egress_vni','__router_mac',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cp_vni = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="cp-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)
    self.__egress_vni = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="egress-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)
    self.__router_mac = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="router-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'connection-points', 'connection-point', 'endpoints', 'endpoint', 'vxlan', 'endpoint-peers', 'endpoint-peer', 'vni-peer-groups', 'vni-peer-group', 'state']

  def _get_cp_vni(self):
    """
    Getter method for cp_vni, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/cp_vni (oc-evpn-types:vni-id)

    YANG Description: The control-plane VNI discovered behind this peer VTEP
    """
    return self.__cp_vni
      
  def _set_cp_vni(self, v, load=False):
    """
    Setter method for cp_vni, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/cp_vni (oc-evpn-types:vni-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cp_vni is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cp_vni() directly.

    YANG Description: The control-plane VNI discovered behind this peer VTEP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="cp-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cp_vni must be of a type compatible with oc-evpn-types:vni-id""",
          'defined-type': "oc-evpn-types:vni-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="cp-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)""",
        })

    self.__cp_vni = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cp_vni(self):
    self.__cp_vni = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="cp-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)


  def _get_egress_vni(self):
    """
    Getter method for egress_vni, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/egress_vni (oc-evpn-types:vni-id)

    YANG Description: Egress VNI associated with the remote VTEP
    """
    return self.__egress_vni
      
  def _set_egress_vni(self, v, load=False):
    """
    Setter method for egress_vni, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/egress_vni (oc-evpn-types:vni-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_egress_vni is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_egress_vni() directly.

    YANG Description: Egress VNI associated with the remote VTEP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="egress-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """egress_vni must be of a type compatible with oc-evpn-types:vni-id""",
          'defined-type': "oc-evpn-types:vni-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="egress-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)""",
        })

    self.__egress_vni = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_egress_vni(self):
    self.__egress_vni = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="egress-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)


  def _get_router_mac(self):
    """
    Getter method for router_mac, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/router_mac (oc-yang:mac-address)

    YANG Description: MAC address of the remote VTEP
    """
    return self.__router_mac
      
  def _set_router_mac(self, v, load=False):
    """
    Setter method for router_mac, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/router_mac (oc-yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_router_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_router_mac() directly.

    YANG Description: MAC address of the remote VTEP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="router-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """router_mac must be of a type compatible with oc-yang:mac-address""",
          'defined-type': "oc-yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="router-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)""",
        })

    self.__router_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_router_mac(self):
    self.__router_mac = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="router-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)

  cp_vni = __builtin__.property(_get_cp_vni)
  egress_vni = __builtin__.property(_get_egress_vni)
  router_mac = __builtin__.property(_get_router_mac)


  _pyangbind_elements = OrderedDict([('cp_vni', cp_vni), ('egress_vni', egress_vni), ('router_mac', router_mac), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State container for the VNI peer group
  """
  __slots__ = ('_path_helper', '_extmethods', '__cp_vni','__egress_vni','__router_mac',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cp_vni = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="cp-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)
    self.__egress_vni = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="egress-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)
    self.__router_mac = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="router-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'connection-points', 'connection-point', 'endpoints', 'endpoint', 'vxlan', 'endpoint-peers', 'endpoint-peer', 'vni-peer-groups', 'vni-peer-group', 'state']

  def _get_cp_vni(self):
    """
    Getter method for cp_vni, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/cp_vni (oc-evpn-types:vni-id)

    YANG Description: The control-plane VNI discovered behind this peer VTEP
    """
    return self.__cp_vni
      
  def _set_cp_vni(self, v, load=False):
    """
    Setter method for cp_vni, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/cp_vni (oc-evpn-types:vni-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cp_vni is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cp_vni() directly.

    YANG Description: The control-plane VNI discovered behind this peer VTEP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="cp-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cp_vni must be of a type compatible with oc-evpn-types:vni-id""",
          'defined-type': "oc-evpn-types:vni-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="cp-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)""",
        })

    self.__cp_vni = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cp_vni(self):
    self.__cp_vni = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="cp-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)


  def _get_egress_vni(self):
    """
    Getter method for egress_vni, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/egress_vni (oc-evpn-types:vni-id)

    YANG Description: Egress VNI associated with the remote VTEP
    """
    return self.__egress_vni
      
  def _set_egress_vni(self, v, load=False):
    """
    Setter method for egress_vni, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/egress_vni (oc-evpn-types:vni-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_egress_vni is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_egress_vni() directly.

    YANG Description: Egress VNI associated with the remote VTEP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="egress-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """egress_vni must be of a type compatible with oc-evpn-types:vni-id""",
          'defined-type': "oc-evpn-types:vni-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="egress-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)""",
        })

    self.__egress_vni = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_egress_vni(self):
    self.__egress_vni = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="egress-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)


  def _get_router_mac(self):
    """
    Getter method for router_mac, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/router_mac (oc-yang:mac-address)

    YANG Description: MAC address of the remote VTEP
    """
    return self.__router_mac
      
  def _set_router_mac(self, v, load=False):
    """
    Setter method for router_mac, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/router_mac (oc-yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_router_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_router_mac() directly.

    YANG Description: MAC address of the remote VTEP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="router-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """router_mac must be of a type compatible with oc-yang:mac-address""",
          'defined-type': "oc-yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="router-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)""",
        })

    self.__router_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_router_mac(self):
    self.__router_mac = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="router-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)

  cp_vni = __builtin__.property(_get_cp_vni)
  egress_vni = __builtin__.property(_get_egress_vni)
  router_mac = __builtin__.property(_get_router_mac)


  _pyangbind_elements = OrderedDict([('cp_vni', cp_vni), ('egress_vni', egress_vni), ('router_mac', router_mac), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State container for the VNI peer group
  """
  __slots__ = ('_path_helper', '_extmethods', '__cp_vni','__egress_vni','__router_mac',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cp_vni = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="cp-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)
    self.__egress_vni = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="egress-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)
    self.__router_mac = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="router-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'connection-points', 'connection-point', 'endpoints', 'endpoint', 'vxlan', 'endpoint-peers', 'endpoint-peer', 'vni-peer-groups', 'vni-peer-group', 'state']

  def _get_cp_vni(self):
    """
    Getter method for cp_vni, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/cp_vni (oc-evpn-types:vni-id)

    YANG Description: The control-plane VNI discovered behind this peer VTEP
    """
    return self.__cp_vni
      
  def _set_cp_vni(self, v, load=False):
    """
    Setter method for cp_vni, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/cp_vni (oc-evpn-types:vni-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cp_vni is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cp_vni() directly.

    YANG Description: The control-plane VNI discovered behind this peer VTEP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="cp-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cp_vni must be of a type compatible with oc-evpn-types:vni-id""",
          'defined-type': "oc-evpn-types:vni-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="cp-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)""",
        })

    self.__cp_vni = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cp_vni(self):
    self.__cp_vni = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="cp-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)


  def _get_egress_vni(self):
    """
    Getter method for egress_vni, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/egress_vni (oc-evpn-types:vni-id)

    YANG Description: Egress VNI associated with the remote VTEP
    """
    return self.__egress_vni
      
  def _set_egress_vni(self, v, load=False):
    """
    Setter method for egress_vni, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/egress_vni (oc-evpn-types:vni-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_egress_vni is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_egress_vni() directly.

    YANG Description: Egress VNI associated with the remote VTEP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="egress-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """egress_vni must be of a type compatible with oc-evpn-types:vni-id""",
          'defined-type': "oc-evpn-types:vni-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="egress-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)""",
        })

    self.__egress_vni = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_egress_vni(self):
    self.__egress_vni = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="egress-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)


  def _get_router_mac(self):
    """
    Getter method for router_mac, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/router_mac (oc-yang:mac-address)

    YANG Description: MAC address of the remote VTEP
    """
    return self.__router_mac
      
  def _set_router_mac(self, v, load=False):
    """
    Setter method for router_mac, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/router_mac (oc-yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_router_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_router_mac() directly.

    YANG Description: MAC address of the remote VTEP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="router-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """router_mac must be of a type compatible with oc-yang:mac-address""",
          'defined-type': "oc-yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="router-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)""",
        })

    self.__router_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_router_mac(self):
    self.__router_mac = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="router-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)

  cp_vni = __builtin__.property(_get_cp_vni)
  egress_vni = __builtin__.property(_get_egress_vni)
  router_mac = __builtin__.property(_get_router_mac)


  _pyangbind_elements = OrderedDict([('cp_vni', cp_vni), ('egress_vni', egress_vni), ('router_mac', router_mac), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State container for the VNI peer group
  """
  __slots__ = ('_path_helper', '_extmethods', '__cp_vni','__egress_vni','__router_mac',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cp_vni = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="cp-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)
    self.__egress_vni = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="egress-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)
    self.__router_mac = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="router-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'connection-points', 'connection-point', 'endpoints', 'endpoint', 'vxlan', 'endpoint-peers', 'endpoint-peer', 'vni-peer-groups', 'vni-peer-group', 'state']

  def _get_cp_vni(self):
    """
    Getter method for cp_vni, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/cp_vni (oc-evpn-types:vni-id)

    YANG Description: The control-plane VNI discovered behind this peer VTEP
    """
    return self.__cp_vni
      
  def _set_cp_vni(self, v, load=False):
    """
    Setter method for cp_vni, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/cp_vni (oc-evpn-types:vni-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cp_vni is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cp_vni() directly.

    YANG Description: The control-plane VNI discovered behind this peer VTEP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="cp-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cp_vni must be of a type compatible with oc-evpn-types:vni-id""",
          'defined-type': "oc-evpn-types:vni-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="cp-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)""",
        })

    self.__cp_vni = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cp_vni(self):
    self.__cp_vni = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="cp-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)


  def _get_egress_vni(self):
    """
    Getter method for egress_vni, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/egress_vni (oc-evpn-types:vni-id)

    YANG Description: Egress VNI associated with the remote VTEP
    """
    return self.__egress_vni
      
  def _set_egress_vni(self, v, load=False):
    """
    Setter method for egress_vni, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/egress_vni (oc-evpn-types:vni-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_egress_vni is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_egress_vni() directly.

    YANG Description: Egress VNI associated with the remote VTEP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="egress-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """egress_vni must be of a type compatible with oc-evpn-types:vni-id""",
          'defined-type': "oc-evpn-types:vni-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="egress-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)""",
        })

    self.__egress_vni = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_egress_vni(self):
    self.__egress_vni = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['1..16777215']}), is_leaf=True, yang_name="egress-vni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-evpn-types:vni-id', is_config=False)


  def _get_router_mac(self):
    """
    Getter method for router_mac, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/router_mac (oc-yang:mac-address)

    YANG Description: MAC address of the remote VTEP
    """
    return self.__router_mac
      
  def _set_router_mac(self, v, load=False):
    """
    Setter method for router_mac, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/vni_peer_groups/vni_peer_group/state/router_mac (oc-yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_router_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_router_mac() directly.

    YANG Description: MAC address of the remote VTEP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="router-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """router_mac must be of a type compatible with oc-yang:mac-address""",
          'defined-type': "oc-yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="router-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)""",
        })

    self.__router_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_router_mac(self):
    self.__router_mac = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="router-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)

  cp_vni = __builtin__.property(_get_cp_vni)
  egress_vni = __builtin__.property(_get_egress_vni)
  router_mac = __builtin__.property(_get_router_mac)


  _pyangbind_elements = OrderedDict([('cp_vni', cp_vni), ('egress_vni', egress_vni), ('router_mac', router_mac), ])


