# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state regarding encapsulated traffic.
  """
  __slots__ = ('_path_helper', '_extmethods', '__total_encap_pkts','__total_encap_bytes','__bum_encap_pkts','__total_decap_pkts','__total_decap_bytes','__unicast_decap_pkts','__bum_decap_pkts','__bum_decap_multicast_pkts','__bum_decap_ir_pkts','__drop_decap_pkts','__except_decap_pkts',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__total_encap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__total_encap_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__bum_encap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__total_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__total_decap_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__unicast_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unicast-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__bum_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__bum_decap_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__bum_decap_ir_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-ir-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__drop_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="drop-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__except_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="except-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'connection-points', 'connection-point', 'endpoints', 'endpoint', 'vxlan', 'endpoint-peers', 'endpoint-peer', 'state', 'counters']

  def _get_total_encap_pkts(self):
    """
    Getter method for total_encap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_encap_pkts (oc-yang:counter64)

    YANG Description: The total number of encapsulated packets.
    """
    return self.__total_encap_pkts
      
  def _set_total_encap_pkts(self, v, load=False):
    """
    Setter method for total_encap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_encap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_encap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_encap_pkts() directly.

    YANG Description: The total number of encapsulated packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_encap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__total_encap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_encap_pkts(self):
    self.__total_encap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_total_encap_bytes(self):
    """
    Getter method for total_encap_bytes, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_encap_bytes (oc-yang:counter64)

    YANG Description: The total number of encapsulated bytes.
    """
    return self.__total_encap_bytes
      
  def _set_total_encap_bytes(self, v, load=False):
    """
    Setter method for total_encap_bytes, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_encap_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_encap_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_encap_bytes() directly.

    YANG Description: The total number of encapsulated bytes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_encap_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__total_encap_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_encap_bytes(self):
    self.__total_encap_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_bum_encap_pkts(self):
    """
    Getter method for bum_encap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_encap_pkts (oc-yang:counter64)

    YANG Description: The total number of encapsulated BUM packets.
    """
    return self.__bum_encap_pkts
      
  def _set_bum_encap_pkts(self, v, load=False):
    """
    Setter method for bum_encap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_encap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bum_encap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bum_encap_pkts() directly.

    YANG Description: The total number of encapsulated BUM packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bum_encap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__bum_encap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bum_encap_pkts(self):
    self.__bum_encap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_total_decap_pkts(self):
    """
    Getter method for total_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated packets.
    """
    return self.__total_decap_pkts
      
  def _set_total_decap_pkts(self, v, load=False):
    """
    Setter method for total_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_decap_pkts() directly.

    YANG Description: The total number of decapsulated packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__total_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_decap_pkts(self):
    self.__total_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_total_decap_bytes(self):
    """
    Getter method for total_decap_bytes, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_decap_bytes (oc-yang:counter64)

    YANG Description: The total number of decapsulated bytes.
    """
    return self.__total_decap_bytes
      
  def _set_total_decap_bytes(self, v, load=False):
    """
    Setter method for total_decap_bytes, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_decap_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_decap_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_decap_bytes() directly.

    YANG Description: The total number of decapsulated bytes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_decap_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__total_decap_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_decap_bytes(self):
    self.__total_decap_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_unicast_decap_pkts(self):
    """
    Getter method for unicast_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/unicast_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated unicast packets.
    """
    return self.__unicast_decap_pkts
      
  def _set_unicast_decap_pkts(self, v, load=False):
    """
    Setter method for unicast_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/unicast_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unicast_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unicast_decap_pkts() directly.

    YANG Description: The total number of decapsulated unicast packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unicast-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unicast_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unicast-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__unicast_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unicast_decap_pkts(self):
    self.__unicast_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unicast-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_bum_decap_pkts(self):
    """
    Getter method for bum_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated BUM packets.
    """
    return self.__bum_decap_pkts
      
  def _set_bum_decap_pkts(self, v, load=False):
    """
    Setter method for bum_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bum_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bum_decap_pkts() directly.

    YANG Description: The total number of decapsulated BUM packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bum_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__bum_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bum_decap_pkts(self):
    self.__bum_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_bum_decap_multicast_pkts(self):
    """
    Getter method for bum_decap_multicast_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_multicast_pkts (oc-yang:counter64)

    YANG Description: The number of decapsulated BUM packets received via underlay multicast.
    """
    return self.__bum_decap_multicast_pkts
      
  def _set_bum_decap_multicast_pkts(self, v, load=False):
    """
    Setter method for bum_decap_multicast_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_multicast_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bum_decap_multicast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bum_decap_multicast_pkts() directly.

    YANG Description: The number of decapsulated BUM packets received via underlay multicast.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bum_decap_multicast_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__bum_decap_multicast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bum_decap_multicast_pkts(self):
    self.__bum_decap_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_bum_decap_ir_pkts(self):
    """
    Getter method for bum_decap_ir_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_ir_pkts (oc-yang:counter64)

    YANG Description: The number of decapsulated BUM packets received via underlay ingress replication.
    """
    return self.__bum_decap_ir_pkts
      
  def _set_bum_decap_ir_pkts(self, v, load=False):
    """
    Setter method for bum_decap_ir_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_ir_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bum_decap_ir_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bum_decap_ir_pkts() directly.

    YANG Description: The number of decapsulated BUM packets received via underlay ingress replication.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-ir-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bum_decap_ir_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-ir-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__bum_decap_ir_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bum_decap_ir_pkts(self):
    self.__bum_decap_ir_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-ir-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_drop_decap_pkts(self):
    """
    Getter method for drop_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/drop_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated packets that have been dropped locally.
    """
    return self.__drop_decap_pkts
      
  def _set_drop_decap_pkts(self, v, load=False):
    """
    Setter method for drop_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/drop_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop_decap_pkts() directly.

    YANG Description: The total number of decapsulated packets that have been dropped locally.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="drop-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="drop-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__drop_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop_decap_pkts(self):
    self.__drop_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="drop-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_except_decap_pkts(self):
    """
    Getter method for except_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/except_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated packets that hit an exceptional condition.
    """
    return self.__except_decap_pkts
      
  def _set_except_decap_pkts(self, v, load=False):
    """
    Setter method for except_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/except_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_except_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_except_decap_pkts() directly.

    YANG Description: The total number of decapsulated packets that hit an exceptional condition.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="except-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """except_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="except-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__except_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_except_decap_pkts(self):
    self.__except_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="except-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)

  total_encap_pkts = __builtin__.property(_get_total_encap_pkts)
  total_encap_bytes = __builtin__.property(_get_total_encap_bytes)
  bum_encap_pkts = __builtin__.property(_get_bum_encap_pkts)
  total_decap_pkts = __builtin__.property(_get_total_decap_pkts)
  total_decap_bytes = __builtin__.property(_get_total_decap_bytes)
  unicast_decap_pkts = __builtin__.property(_get_unicast_decap_pkts)
  bum_decap_pkts = __builtin__.property(_get_bum_decap_pkts)
  bum_decap_multicast_pkts = __builtin__.property(_get_bum_decap_multicast_pkts)
  bum_decap_ir_pkts = __builtin__.property(_get_bum_decap_ir_pkts)
  drop_decap_pkts = __builtin__.property(_get_drop_decap_pkts)
  except_decap_pkts = __builtin__.property(_get_except_decap_pkts)


  _pyangbind_elements = OrderedDict([('total_encap_pkts', total_encap_pkts), ('total_encap_bytes', total_encap_bytes), ('bum_encap_pkts', bum_encap_pkts), ('total_decap_pkts', total_decap_pkts), ('total_decap_bytes', total_decap_bytes), ('unicast_decap_pkts', unicast_decap_pkts), ('bum_decap_pkts', bum_decap_pkts), ('bum_decap_multicast_pkts', bum_decap_multicast_pkts), ('bum_decap_ir_pkts', bum_decap_ir_pkts), ('drop_decap_pkts', drop_decap_pkts), ('except_decap_pkts', except_decap_pkts), ])


class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state regarding encapsulated traffic.
  """
  __slots__ = ('_path_helper', '_extmethods', '__total_encap_pkts','__total_encap_bytes','__bum_encap_pkts','__total_decap_pkts','__total_decap_bytes','__unicast_decap_pkts','__bum_decap_pkts','__bum_decap_multicast_pkts','__bum_decap_ir_pkts','__drop_decap_pkts','__except_decap_pkts',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__total_encap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__total_encap_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__bum_encap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__total_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__total_decap_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__unicast_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unicast-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__bum_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__bum_decap_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__bum_decap_ir_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-ir-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__drop_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="drop-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__except_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="except-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'connection-points', 'connection-point', 'endpoints', 'endpoint', 'vxlan', 'endpoint-peers', 'endpoint-peer', 'state', 'counters']

  def _get_total_encap_pkts(self):
    """
    Getter method for total_encap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_encap_pkts (oc-yang:counter64)

    YANG Description: The total number of encapsulated packets.
    """
    return self.__total_encap_pkts
      
  def _set_total_encap_pkts(self, v, load=False):
    """
    Setter method for total_encap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_encap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_encap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_encap_pkts() directly.

    YANG Description: The total number of encapsulated packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_encap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__total_encap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_encap_pkts(self):
    self.__total_encap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_total_encap_bytes(self):
    """
    Getter method for total_encap_bytes, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_encap_bytes (oc-yang:counter64)

    YANG Description: The total number of encapsulated bytes.
    """
    return self.__total_encap_bytes
      
  def _set_total_encap_bytes(self, v, load=False):
    """
    Setter method for total_encap_bytes, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_encap_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_encap_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_encap_bytes() directly.

    YANG Description: The total number of encapsulated bytes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_encap_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__total_encap_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_encap_bytes(self):
    self.__total_encap_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_bum_encap_pkts(self):
    """
    Getter method for bum_encap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_encap_pkts (oc-yang:counter64)

    YANG Description: The total number of encapsulated BUM packets.
    """
    return self.__bum_encap_pkts
      
  def _set_bum_encap_pkts(self, v, load=False):
    """
    Setter method for bum_encap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_encap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bum_encap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bum_encap_pkts() directly.

    YANG Description: The total number of encapsulated BUM packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bum_encap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__bum_encap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bum_encap_pkts(self):
    self.__bum_encap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_total_decap_pkts(self):
    """
    Getter method for total_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated packets.
    """
    return self.__total_decap_pkts
      
  def _set_total_decap_pkts(self, v, load=False):
    """
    Setter method for total_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_decap_pkts() directly.

    YANG Description: The total number of decapsulated packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__total_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_decap_pkts(self):
    self.__total_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_total_decap_bytes(self):
    """
    Getter method for total_decap_bytes, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_decap_bytes (oc-yang:counter64)

    YANG Description: The total number of decapsulated bytes.
    """
    return self.__total_decap_bytes
      
  def _set_total_decap_bytes(self, v, load=False):
    """
    Setter method for total_decap_bytes, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_decap_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_decap_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_decap_bytes() directly.

    YANG Description: The total number of decapsulated bytes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_decap_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__total_decap_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_decap_bytes(self):
    self.__total_decap_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_unicast_decap_pkts(self):
    """
    Getter method for unicast_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/unicast_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated unicast packets.
    """
    return self.__unicast_decap_pkts
      
  def _set_unicast_decap_pkts(self, v, load=False):
    """
    Setter method for unicast_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/unicast_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unicast_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unicast_decap_pkts() directly.

    YANG Description: The total number of decapsulated unicast packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unicast-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unicast_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unicast-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__unicast_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unicast_decap_pkts(self):
    self.__unicast_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unicast-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_bum_decap_pkts(self):
    """
    Getter method for bum_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated BUM packets.
    """
    return self.__bum_decap_pkts
      
  def _set_bum_decap_pkts(self, v, load=False):
    """
    Setter method for bum_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bum_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bum_decap_pkts() directly.

    YANG Description: The total number of decapsulated BUM packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bum_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__bum_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bum_decap_pkts(self):
    self.__bum_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_bum_decap_multicast_pkts(self):
    """
    Getter method for bum_decap_multicast_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_multicast_pkts (oc-yang:counter64)

    YANG Description: The number of decapsulated BUM packets received via underlay multicast.
    """
    return self.__bum_decap_multicast_pkts
      
  def _set_bum_decap_multicast_pkts(self, v, load=False):
    """
    Setter method for bum_decap_multicast_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_multicast_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bum_decap_multicast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bum_decap_multicast_pkts() directly.

    YANG Description: The number of decapsulated BUM packets received via underlay multicast.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bum_decap_multicast_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__bum_decap_multicast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bum_decap_multicast_pkts(self):
    self.__bum_decap_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_bum_decap_ir_pkts(self):
    """
    Getter method for bum_decap_ir_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_ir_pkts (oc-yang:counter64)

    YANG Description: The number of decapsulated BUM packets received via underlay ingress replication.
    """
    return self.__bum_decap_ir_pkts
      
  def _set_bum_decap_ir_pkts(self, v, load=False):
    """
    Setter method for bum_decap_ir_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_ir_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bum_decap_ir_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bum_decap_ir_pkts() directly.

    YANG Description: The number of decapsulated BUM packets received via underlay ingress replication.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-ir-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bum_decap_ir_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-ir-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__bum_decap_ir_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bum_decap_ir_pkts(self):
    self.__bum_decap_ir_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-ir-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_drop_decap_pkts(self):
    """
    Getter method for drop_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/drop_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated packets that have been dropped locally.
    """
    return self.__drop_decap_pkts
      
  def _set_drop_decap_pkts(self, v, load=False):
    """
    Setter method for drop_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/drop_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop_decap_pkts() directly.

    YANG Description: The total number of decapsulated packets that have been dropped locally.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="drop-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="drop-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__drop_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop_decap_pkts(self):
    self.__drop_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="drop-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_except_decap_pkts(self):
    """
    Getter method for except_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/except_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated packets that hit an exceptional condition.
    """
    return self.__except_decap_pkts
      
  def _set_except_decap_pkts(self, v, load=False):
    """
    Setter method for except_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/except_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_except_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_except_decap_pkts() directly.

    YANG Description: The total number of decapsulated packets that hit an exceptional condition.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="except-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """except_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="except-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__except_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_except_decap_pkts(self):
    self.__except_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="except-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)

  total_encap_pkts = __builtin__.property(_get_total_encap_pkts)
  total_encap_bytes = __builtin__.property(_get_total_encap_bytes)
  bum_encap_pkts = __builtin__.property(_get_bum_encap_pkts)
  total_decap_pkts = __builtin__.property(_get_total_decap_pkts)
  total_decap_bytes = __builtin__.property(_get_total_decap_bytes)
  unicast_decap_pkts = __builtin__.property(_get_unicast_decap_pkts)
  bum_decap_pkts = __builtin__.property(_get_bum_decap_pkts)
  bum_decap_multicast_pkts = __builtin__.property(_get_bum_decap_multicast_pkts)
  bum_decap_ir_pkts = __builtin__.property(_get_bum_decap_ir_pkts)
  drop_decap_pkts = __builtin__.property(_get_drop_decap_pkts)
  except_decap_pkts = __builtin__.property(_get_except_decap_pkts)


  _pyangbind_elements = OrderedDict([('total_encap_pkts', total_encap_pkts), ('total_encap_bytes', total_encap_bytes), ('bum_encap_pkts', bum_encap_pkts), ('total_decap_pkts', total_decap_pkts), ('total_decap_bytes', total_decap_bytes), ('unicast_decap_pkts', unicast_decap_pkts), ('bum_decap_pkts', bum_decap_pkts), ('bum_decap_multicast_pkts', bum_decap_multicast_pkts), ('bum_decap_ir_pkts', bum_decap_ir_pkts), ('drop_decap_pkts', drop_decap_pkts), ('except_decap_pkts', except_decap_pkts), ])


class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state regarding encapsulated traffic.
  """
  __slots__ = ('_path_helper', '_extmethods', '__total_encap_pkts','__total_encap_bytes','__bum_encap_pkts','__total_decap_pkts','__total_decap_bytes','__unicast_decap_pkts','__bum_decap_pkts','__bum_decap_multicast_pkts','__bum_decap_ir_pkts','__drop_decap_pkts','__except_decap_pkts',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__total_encap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__total_encap_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__bum_encap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__total_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__total_decap_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__unicast_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unicast-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__bum_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__bum_decap_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__bum_decap_ir_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-ir-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__drop_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="drop-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__except_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="except-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'connection-points', 'connection-point', 'endpoints', 'endpoint', 'vxlan', 'endpoint-peers', 'endpoint-peer', 'state', 'counters']

  def _get_total_encap_pkts(self):
    """
    Getter method for total_encap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_encap_pkts (oc-yang:counter64)

    YANG Description: The total number of encapsulated packets.
    """
    return self.__total_encap_pkts
      
  def _set_total_encap_pkts(self, v, load=False):
    """
    Setter method for total_encap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_encap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_encap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_encap_pkts() directly.

    YANG Description: The total number of encapsulated packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_encap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__total_encap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_encap_pkts(self):
    self.__total_encap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_total_encap_bytes(self):
    """
    Getter method for total_encap_bytes, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_encap_bytes (oc-yang:counter64)

    YANG Description: The total number of encapsulated bytes.
    """
    return self.__total_encap_bytes
      
  def _set_total_encap_bytes(self, v, load=False):
    """
    Setter method for total_encap_bytes, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_encap_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_encap_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_encap_bytes() directly.

    YANG Description: The total number of encapsulated bytes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_encap_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__total_encap_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_encap_bytes(self):
    self.__total_encap_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_bum_encap_pkts(self):
    """
    Getter method for bum_encap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_encap_pkts (oc-yang:counter64)

    YANG Description: The total number of encapsulated BUM packets.
    """
    return self.__bum_encap_pkts
      
  def _set_bum_encap_pkts(self, v, load=False):
    """
    Setter method for bum_encap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_encap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bum_encap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bum_encap_pkts() directly.

    YANG Description: The total number of encapsulated BUM packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bum_encap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__bum_encap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bum_encap_pkts(self):
    self.__bum_encap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_total_decap_pkts(self):
    """
    Getter method for total_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated packets.
    """
    return self.__total_decap_pkts
      
  def _set_total_decap_pkts(self, v, load=False):
    """
    Setter method for total_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_decap_pkts() directly.

    YANG Description: The total number of decapsulated packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__total_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_decap_pkts(self):
    self.__total_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_total_decap_bytes(self):
    """
    Getter method for total_decap_bytes, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_decap_bytes (oc-yang:counter64)

    YANG Description: The total number of decapsulated bytes.
    """
    return self.__total_decap_bytes
      
  def _set_total_decap_bytes(self, v, load=False):
    """
    Setter method for total_decap_bytes, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_decap_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_decap_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_decap_bytes() directly.

    YANG Description: The total number of decapsulated bytes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_decap_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__total_decap_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_decap_bytes(self):
    self.__total_decap_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_unicast_decap_pkts(self):
    """
    Getter method for unicast_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/unicast_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated unicast packets.
    """
    return self.__unicast_decap_pkts
      
  def _set_unicast_decap_pkts(self, v, load=False):
    """
    Setter method for unicast_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/unicast_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unicast_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unicast_decap_pkts() directly.

    YANG Description: The total number of decapsulated unicast packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unicast-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unicast_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unicast-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__unicast_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unicast_decap_pkts(self):
    self.__unicast_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unicast-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_bum_decap_pkts(self):
    """
    Getter method for bum_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated BUM packets.
    """
    return self.__bum_decap_pkts
      
  def _set_bum_decap_pkts(self, v, load=False):
    """
    Setter method for bum_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bum_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bum_decap_pkts() directly.

    YANG Description: The total number of decapsulated BUM packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bum_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__bum_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bum_decap_pkts(self):
    self.__bum_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_bum_decap_multicast_pkts(self):
    """
    Getter method for bum_decap_multicast_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_multicast_pkts (oc-yang:counter64)

    YANG Description: The number of decapsulated BUM packets received via underlay multicast.
    """
    return self.__bum_decap_multicast_pkts
      
  def _set_bum_decap_multicast_pkts(self, v, load=False):
    """
    Setter method for bum_decap_multicast_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_multicast_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bum_decap_multicast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bum_decap_multicast_pkts() directly.

    YANG Description: The number of decapsulated BUM packets received via underlay multicast.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bum_decap_multicast_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__bum_decap_multicast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bum_decap_multicast_pkts(self):
    self.__bum_decap_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_bum_decap_ir_pkts(self):
    """
    Getter method for bum_decap_ir_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_ir_pkts (oc-yang:counter64)

    YANG Description: The number of decapsulated BUM packets received via underlay ingress replication.
    """
    return self.__bum_decap_ir_pkts
      
  def _set_bum_decap_ir_pkts(self, v, load=False):
    """
    Setter method for bum_decap_ir_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_ir_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bum_decap_ir_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bum_decap_ir_pkts() directly.

    YANG Description: The number of decapsulated BUM packets received via underlay ingress replication.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-ir-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bum_decap_ir_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-ir-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__bum_decap_ir_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bum_decap_ir_pkts(self):
    self.__bum_decap_ir_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-ir-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_drop_decap_pkts(self):
    """
    Getter method for drop_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/drop_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated packets that have been dropped locally.
    """
    return self.__drop_decap_pkts
      
  def _set_drop_decap_pkts(self, v, load=False):
    """
    Setter method for drop_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/drop_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop_decap_pkts() directly.

    YANG Description: The total number of decapsulated packets that have been dropped locally.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="drop-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="drop-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__drop_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop_decap_pkts(self):
    self.__drop_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="drop-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_except_decap_pkts(self):
    """
    Getter method for except_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/except_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated packets that hit an exceptional condition.
    """
    return self.__except_decap_pkts
      
  def _set_except_decap_pkts(self, v, load=False):
    """
    Setter method for except_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/except_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_except_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_except_decap_pkts() directly.

    YANG Description: The total number of decapsulated packets that hit an exceptional condition.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="except-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """except_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="except-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__except_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_except_decap_pkts(self):
    self.__except_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="except-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)

  total_encap_pkts = __builtin__.property(_get_total_encap_pkts)
  total_encap_bytes = __builtin__.property(_get_total_encap_bytes)
  bum_encap_pkts = __builtin__.property(_get_bum_encap_pkts)
  total_decap_pkts = __builtin__.property(_get_total_decap_pkts)
  total_decap_bytes = __builtin__.property(_get_total_decap_bytes)
  unicast_decap_pkts = __builtin__.property(_get_unicast_decap_pkts)
  bum_decap_pkts = __builtin__.property(_get_bum_decap_pkts)
  bum_decap_multicast_pkts = __builtin__.property(_get_bum_decap_multicast_pkts)
  bum_decap_ir_pkts = __builtin__.property(_get_bum_decap_ir_pkts)
  drop_decap_pkts = __builtin__.property(_get_drop_decap_pkts)
  except_decap_pkts = __builtin__.property(_get_except_decap_pkts)


  _pyangbind_elements = OrderedDict([('total_encap_pkts', total_encap_pkts), ('total_encap_bytes', total_encap_bytes), ('bum_encap_pkts', bum_encap_pkts), ('total_decap_pkts', total_decap_pkts), ('total_decap_bytes', total_decap_bytes), ('unicast_decap_pkts', unicast_decap_pkts), ('bum_decap_pkts', bum_decap_pkts), ('bum_decap_multicast_pkts', bum_decap_multicast_pkts), ('bum_decap_ir_pkts', bum_decap_ir_pkts), ('drop_decap_pkts', drop_decap_pkts), ('except_decap_pkts', except_decap_pkts), ])


class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state regarding encapsulated traffic.
  """
  __slots__ = ('_path_helper', '_extmethods', '__total_encap_pkts','__total_encap_bytes','__bum_encap_pkts','__total_decap_pkts','__total_decap_bytes','__unicast_decap_pkts','__bum_decap_pkts','__bum_decap_multicast_pkts','__bum_decap_ir_pkts','__drop_decap_pkts','__except_decap_pkts',)

  _yang_name = 'counters'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__total_encap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__total_encap_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__bum_encap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__total_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__total_decap_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__unicast_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unicast-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__bum_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__bum_decap_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__bum_decap_ir_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-ir-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__drop_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="drop-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    self.__except_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="except-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'connection-points', 'connection-point', 'endpoints', 'endpoint', 'vxlan', 'endpoint-peers', 'endpoint-peer', 'state', 'counters']

  def _get_total_encap_pkts(self):
    """
    Getter method for total_encap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_encap_pkts (oc-yang:counter64)

    YANG Description: The total number of encapsulated packets.
    """
    return self.__total_encap_pkts
      
  def _set_total_encap_pkts(self, v, load=False):
    """
    Setter method for total_encap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_encap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_encap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_encap_pkts() directly.

    YANG Description: The total number of encapsulated packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_encap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__total_encap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_encap_pkts(self):
    self.__total_encap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_total_encap_bytes(self):
    """
    Getter method for total_encap_bytes, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_encap_bytes (oc-yang:counter64)

    YANG Description: The total number of encapsulated bytes.
    """
    return self.__total_encap_bytes
      
  def _set_total_encap_bytes(self, v, load=False):
    """
    Setter method for total_encap_bytes, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_encap_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_encap_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_encap_bytes() directly.

    YANG Description: The total number of encapsulated bytes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_encap_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__total_encap_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_encap_bytes(self):
    self.__total_encap_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-encap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_bum_encap_pkts(self):
    """
    Getter method for bum_encap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_encap_pkts (oc-yang:counter64)

    YANG Description: The total number of encapsulated BUM packets.
    """
    return self.__bum_encap_pkts
      
  def _set_bum_encap_pkts(self, v, load=False):
    """
    Setter method for bum_encap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_encap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bum_encap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bum_encap_pkts() directly.

    YANG Description: The total number of encapsulated BUM packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bum_encap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__bum_encap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bum_encap_pkts(self):
    self.__bum_encap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-encap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_total_decap_pkts(self):
    """
    Getter method for total_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated packets.
    """
    return self.__total_decap_pkts
      
  def _set_total_decap_pkts(self, v, load=False):
    """
    Setter method for total_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_decap_pkts() directly.

    YANG Description: The total number of decapsulated packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__total_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_decap_pkts(self):
    self.__total_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_total_decap_bytes(self):
    """
    Getter method for total_decap_bytes, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_decap_bytes (oc-yang:counter64)

    YANG Description: The total number of decapsulated bytes.
    """
    return self.__total_decap_bytes
      
  def _set_total_decap_bytes(self, v, load=False):
    """
    Setter method for total_decap_bytes, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/total_decap_bytes (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_decap_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_decap_bytes() directly.

    YANG Description: The total number of decapsulated bytes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_decap_bytes must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__total_decap_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_decap_bytes(self):
    self.__total_decap_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-decap-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_unicast_decap_pkts(self):
    """
    Getter method for unicast_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/unicast_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated unicast packets.
    """
    return self.__unicast_decap_pkts
      
  def _set_unicast_decap_pkts(self, v, load=False):
    """
    Setter method for unicast_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/unicast_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unicast_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unicast_decap_pkts() directly.

    YANG Description: The total number of decapsulated unicast packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unicast-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unicast_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unicast-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__unicast_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unicast_decap_pkts(self):
    self.__unicast_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unicast-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_bum_decap_pkts(self):
    """
    Getter method for bum_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated BUM packets.
    """
    return self.__bum_decap_pkts
      
  def _set_bum_decap_pkts(self, v, load=False):
    """
    Setter method for bum_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bum_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bum_decap_pkts() directly.

    YANG Description: The total number of decapsulated BUM packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bum_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__bum_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bum_decap_pkts(self):
    self.__bum_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_bum_decap_multicast_pkts(self):
    """
    Getter method for bum_decap_multicast_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_multicast_pkts (oc-yang:counter64)

    YANG Description: The number of decapsulated BUM packets received via underlay multicast.
    """
    return self.__bum_decap_multicast_pkts
      
  def _set_bum_decap_multicast_pkts(self, v, load=False):
    """
    Setter method for bum_decap_multicast_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_multicast_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bum_decap_multicast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bum_decap_multicast_pkts() directly.

    YANG Description: The number of decapsulated BUM packets received via underlay multicast.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bum_decap_multicast_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__bum_decap_multicast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bum_decap_multicast_pkts(self):
    self.__bum_decap_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_bum_decap_ir_pkts(self):
    """
    Getter method for bum_decap_ir_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_ir_pkts (oc-yang:counter64)

    YANG Description: The number of decapsulated BUM packets received via underlay ingress replication.
    """
    return self.__bum_decap_ir_pkts
      
  def _set_bum_decap_ir_pkts(self, v, load=False):
    """
    Setter method for bum_decap_ir_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/bum_decap_ir_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bum_decap_ir_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bum_decap_ir_pkts() directly.

    YANG Description: The number of decapsulated BUM packets received via underlay ingress replication.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-ir-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bum_decap_ir_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-ir-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__bum_decap_ir_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bum_decap_ir_pkts(self):
    self.__bum_decap_ir_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bum-decap-ir-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_drop_decap_pkts(self):
    """
    Getter method for drop_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/drop_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated packets that have been dropped locally.
    """
    return self.__drop_decap_pkts
      
  def _set_drop_decap_pkts(self, v, load=False):
    """
    Setter method for drop_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/drop_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop_decap_pkts() directly.

    YANG Description: The total number of decapsulated packets that have been dropped locally.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="drop-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="drop-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__drop_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop_decap_pkts(self):
    self.__drop_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="drop-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)


  def _get_except_decap_pkts(self):
    """
    Getter method for except_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/except_decap_pkts (oc-yang:counter64)

    YANG Description: The total number of decapsulated packets that hit an exceptional condition.
    """
    return self.__except_decap_pkts
      
  def _set_except_decap_pkts(self, v, load=False):
    """
    Setter method for except_decap_pkts, mapped from YANG variable /network_instances/network_instance/connection_points/connection_point/endpoints/endpoint/vxlan/endpoint_peers/endpoint_peer/state/counters/except_decap_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_except_decap_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_except_decap_pkts() directly.

    YANG Description: The total number of decapsulated packets that hit an exceptional condition.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="except-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """except_decap_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="except-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__except_decap_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_except_decap_pkts(self):
    self.__except_decap_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="except-decap-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:counter64', is_config=False)

  total_encap_pkts = __builtin__.property(_get_total_encap_pkts)
  total_encap_bytes = __builtin__.property(_get_total_encap_bytes)
  bum_encap_pkts = __builtin__.property(_get_bum_encap_pkts)
  total_decap_pkts = __builtin__.property(_get_total_decap_pkts)
  total_decap_bytes = __builtin__.property(_get_total_decap_bytes)
  unicast_decap_pkts = __builtin__.property(_get_unicast_decap_pkts)
  bum_decap_pkts = __builtin__.property(_get_bum_decap_pkts)
  bum_decap_multicast_pkts = __builtin__.property(_get_bum_decap_multicast_pkts)
  bum_decap_ir_pkts = __builtin__.property(_get_bum_decap_ir_pkts)
  drop_decap_pkts = __builtin__.property(_get_drop_decap_pkts)
  except_decap_pkts = __builtin__.property(_get_except_decap_pkts)


  _pyangbind_elements = OrderedDict([('total_encap_pkts', total_encap_pkts), ('total_encap_bytes', total_encap_bytes), ('bum_encap_pkts', bum_encap_pkts), ('total_decap_pkts', total_decap_pkts), ('total_decap_bytes', total_decap_bytes), ('unicast_decap_pkts', unicast_decap_pkts), ('bum_decap_pkts', bum_decap_pkts), ('bum_decap_multicast_pkts', bum_decap_multicast_pkts), ('bum_decap_ir_pkts', bum_decap_ir_pkts), ('drop_decap_pkts', drop_decap_pkts), ('except_decap_pkts', except_decap_pkts), ])


