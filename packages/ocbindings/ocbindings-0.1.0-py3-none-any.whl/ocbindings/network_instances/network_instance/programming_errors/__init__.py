# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import ip_routes
class programming_errors(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/programming-errors. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Detailed information about the AFT hardware programming state of various types of
routes within a particular network instance. It can be used to track where there
are AFT hardware programming errors on a device.
  """
  __slots__ = ('_path_helper', '_extmethods', '__ip_routes',)

  _yang_name = 'programming-errors'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ip_routes = YANGDynClass(base=ip_routes.ip_routes, is_container='container', yang_name="ip-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'programming-errors']

  def _get_ip_routes(self):
    """
    Getter method for ip_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes (container)

    YANG Description: The IP AFT/routes hardware programming status within the network-instance.
IP Route programming reports are divided into a set of sub-categories:
- failed programming -- A prefix which is not present in the AFT state is
  attempted to be added into the hardware but failed.  Traffic destined for
  this prefix will not be matched.
- stale programming -- A prefix is already in the AFT is requested to
  be updated but failed.  Traffic destined for this prefix will be
  forwarded to the old next-hop.  AFT telemetry should continue to
  reflect the old next-hop for the prefix.
- drop programming - these routes are explicitly programmed into hardware
  to point to a destination that discards packets.

Lifecycle of entries/prefixes in the above 3 containers is tied to AFT
telemetry data. When the route gets removed from AFT telemetry data
corresponding entry/prefix will be deleted from above containers as well
    """
    return self.__ip_routes
      
  def _set_ip_routes(self, v, load=False):
    """
    Setter method for ip_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_routes() directly.

    YANG Description: The IP AFT/routes hardware programming status within the network-instance.
IP Route programming reports are divided into a set of sub-categories:
- failed programming -- A prefix which is not present in the AFT state is
  attempted to be added into the hardware but failed.  Traffic destined for
  this prefix will not be matched.
- stale programming -- A prefix is already in the AFT is requested to
  be updated but failed.  Traffic destined for this prefix will be
  forwarded to the old next-hop.  AFT telemetry should continue to
  reflect the old next-hop for the prefix.
- drop programming - these routes are explicitly programmed into hardware
  to point to a destination that discards packets.

Lifecycle of entries/prefixes in the above 3 containers is tied to AFT
telemetry data. When the route gets removed from AFT telemetry data
corresponding entry/prefix will be deleted from above containers as well
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ip_routes.ip_routes, is_container='container', yang_name="ip-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ip_routes.ip_routes, is_container='container', yang_name="ip-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)""",
        })

    self.__ip_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_routes(self):
    self.__ip_routes = YANGDynClass(base=ip_routes.ip_routes, is_container='container', yang_name="ip-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)

  ip_routes = __builtin__.property(_get_ip_routes, _set_ip_routes)


  _pyangbind_elements = OrderedDict([('ip_routes', ip_routes), ])


from . import ip_routes
class programming_errors(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/programming-errors. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Detailed information about the AFT hardware programming state of various types of
routes within a particular network instance. It can be used to track where there
are AFT hardware programming errors on a device.
  """
  __slots__ = ('_path_helper', '_extmethods', '__ip_routes',)

  _yang_name = 'programming-errors'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ip_routes = YANGDynClass(base=ip_routes.ip_routes, is_container='container', yang_name="ip-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'programming-errors']

  def _get_ip_routes(self):
    """
    Getter method for ip_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes (container)

    YANG Description: The IP AFT/routes hardware programming status within the network-instance.
IP Route programming reports are divided into a set of sub-categories:
- failed programming -- A prefix which is not present in the AFT state is
  attempted to be added into the hardware but failed.  Traffic destined for
  this prefix will not be matched.
- stale programming -- A prefix is already in the AFT is requested to
  be updated but failed.  Traffic destined for this prefix will be
  forwarded to the old next-hop.  AFT telemetry should continue to
  reflect the old next-hop for the prefix.
- drop programming - these routes are explicitly programmed into hardware
  to point to a destination that discards packets.

Lifecycle of entries/prefixes in the above 3 containers is tied to AFT
telemetry data. When the route gets removed from AFT telemetry data
corresponding entry/prefix will be deleted from above containers as well
    """
    return self.__ip_routes
      
  def _set_ip_routes(self, v, load=False):
    """
    Setter method for ip_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_routes() directly.

    YANG Description: The IP AFT/routes hardware programming status within the network-instance.
IP Route programming reports are divided into a set of sub-categories:
- failed programming -- A prefix which is not present in the AFT state is
  attempted to be added into the hardware but failed.  Traffic destined for
  this prefix will not be matched.
- stale programming -- A prefix is already in the AFT is requested to
  be updated but failed.  Traffic destined for this prefix will be
  forwarded to the old next-hop.  AFT telemetry should continue to
  reflect the old next-hop for the prefix.
- drop programming - these routes are explicitly programmed into hardware
  to point to a destination that discards packets.

Lifecycle of entries/prefixes in the above 3 containers is tied to AFT
telemetry data. When the route gets removed from AFT telemetry data
corresponding entry/prefix will be deleted from above containers as well
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ip_routes.ip_routes, is_container='container', yang_name="ip-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ip_routes.ip_routes, is_container='container', yang_name="ip-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)""",
        })

    self.__ip_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_routes(self):
    self.__ip_routes = YANGDynClass(base=ip_routes.ip_routes, is_container='container', yang_name="ip-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)

  ip_routes = __builtin__.property(_get_ip_routes, _set_ip_routes)


  _pyangbind_elements = OrderedDict([('ip_routes', ip_routes), ])


from . import ip_routes
class programming_errors(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/programming-errors. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Detailed information about the AFT hardware programming state of various types of
routes within a particular network instance. It can be used to track where there
are AFT hardware programming errors on a device.
  """
  __slots__ = ('_path_helper', '_extmethods', '__ip_routes',)

  _yang_name = 'programming-errors'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ip_routes = YANGDynClass(base=ip_routes.ip_routes, is_container='container', yang_name="ip-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'programming-errors']

  def _get_ip_routes(self):
    """
    Getter method for ip_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes (container)

    YANG Description: The IP AFT/routes hardware programming status within the network-instance.
IP Route programming reports are divided into a set of sub-categories:
- failed programming -- A prefix which is not present in the AFT state is
  attempted to be added into the hardware but failed.  Traffic destined for
  this prefix will not be matched.
- stale programming -- A prefix is already in the AFT is requested to
  be updated but failed.  Traffic destined for this prefix will be
  forwarded to the old next-hop.  AFT telemetry should continue to
  reflect the old next-hop for the prefix.
- drop programming - these routes are explicitly programmed into hardware
  to point to a destination that discards packets.

Lifecycle of entries/prefixes in the above 3 containers is tied to AFT
telemetry data. When the route gets removed from AFT telemetry data
corresponding entry/prefix will be deleted from above containers as well
    """
    return self.__ip_routes
      
  def _set_ip_routes(self, v, load=False):
    """
    Setter method for ip_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_routes() directly.

    YANG Description: The IP AFT/routes hardware programming status within the network-instance.
IP Route programming reports are divided into a set of sub-categories:
- failed programming -- A prefix which is not present in the AFT state is
  attempted to be added into the hardware but failed.  Traffic destined for
  this prefix will not be matched.
- stale programming -- A prefix is already in the AFT is requested to
  be updated but failed.  Traffic destined for this prefix will be
  forwarded to the old next-hop.  AFT telemetry should continue to
  reflect the old next-hop for the prefix.
- drop programming - these routes are explicitly programmed into hardware
  to point to a destination that discards packets.

Lifecycle of entries/prefixes in the above 3 containers is tied to AFT
telemetry data. When the route gets removed from AFT telemetry data
corresponding entry/prefix will be deleted from above containers as well
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ip_routes.ip_routes, is_container='container', yang_name="ip-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ip_routes.ip_routes, is_container='container', yang_name="ip-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)""",
        })

    self.__ip_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_routes(self):
    self.__ip_routes = YANGDynClass(base=ip_routes.ip_routes, is_container='container', yang_name="ip-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)

  ip_routes = __builtin__.property(_get_ip_routes, _set_ip_routes)


  _pyangbind_elements = OrderedDict([('ip_routes', ip_routes), ])


from . import ip_routes
class programming_errors(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/programming-errors. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Detailed information about the AFT hardware programming state of various types of
routes within a particular network instance. It can be used to track where there
are AFT hardware programming errors on a device.
  """
  __slots__ = ('_path_helper', '_extmethods', '__ip_routes',)

  _yang_name = 'programming-errors'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ip_routes = YANGDynClass(base=ip_routes.ip_routes, is_container='container', yang_name="ip-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'programming-errors']

  def _get_ip_routes(self):
    """
    Getter method for ip_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes (container)

    YANG Description: The IP AFT/routes hardware programming status within the network-instance.
IP Route programming reports are divided into a set of sub-categories:
- failed programming -- A prefix which is not present in the AFT state is
  attempted to be added into the hardware but failed.  Traffic destined for
  this prefix will not be matched.
- stale programming -- A prefix is already in the AFT is requested to
  be updated but failed.  Traffic destined for this prefix will be
  forwarded to the old next-hop.  AFT telemetry should continue to
  reflect the old next-hop for the prefix.
- drop programming - these routes are explicitly programmed into hardware
  to point to a destination that discards packets.

Lifecycle of entries/prefixes in the above 3 containers is tied to AFT
telemetry data. When the route gets removed from AFT telemetry data
corresponding entry/prefix will be deleted from above containers as well
    """
    return self.__ip_routes
      
  def _set_ip_routes(self, v, load=False):
    """
    Setter method for ip_routes, mapped from YANG variable /network_instances/network_instance/programming_errors/ip_routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_routes() directly.

    YANG Description: The IP AFT/routes hardware programming status within the network-instance.
IP Route programming reports are divided into a set of sub-categories:
- failed programming -- A prefix which is not present in the AFT state is
  attempted to be added into the hardware but failed.  Traffic destined for
  this prefix will not be matched.
- stale programming -- A prefix is already in the AFT is requested to
  be updated but failed.  Traffic destined for this prefix will be
  forwarded to the old next-hop.  AFT telemetry should continue to
  reflect the old next-hop for the prefix.
- drop programming - these routes are explicitly programmed into hardware
  to point to a destination that discards packets.

Lifecycle of entries/prefixes in the above 3 containers is tied to AFT
telemetry data. When the route gets removed from AFT telemetry data
corresponding entry/prefix will be deleted from above containers as well
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ip_routes.ip_routes, is_container='container', yang_name="ip-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ip_routes.ip_routes, is_container='container', yang_name="ip-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)""",
        })

    self.__ip_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_routes(self):
    self.__ip_routes = YANGDynClass(base=ip_routes.ip_routes, is_container='container', yang_name="ip-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/programming-errors', defining_module='openconfig-programming-errors', yang_type='container', is_config=True)

  ip_routes = __builtin__.property(_get_ip_routes, _set_ip_routes)


  _pyangbind_elements = OrderedDict([('ip_routes', ip_routes), ])


