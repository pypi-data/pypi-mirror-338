# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/mpls/te-interface-attributes/interface/bandwidth-measurement/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the containing
interface's bandwidth measurement.
  """
  __slots__ = ('_path_helper', '_extmethods', '__last_sample_time','__last_sample_measured_rsvp_util','__last_sample_measured_sr_util','__last_calculated_time','__last_calculated_sr_utilisation','__last_flooded_time',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__last_sample_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    self.__last_sample_measured_rsvp_util = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-rsvp-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    self.__last_sample_measured_sr_util = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-sr-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    self.__last_calculated_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    self.__last_calculated_sr_utilisation = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-sr-utilisation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    self.__last_flooded_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-flooded-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'te-interface-attributes', 'interface', 'bandwidth-measurement', 'state']

  def _get_last_sample_time(self):
    """
    Getter method for last_sample_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_time (oc-types:timeticks64)

    YANG Description: The time at which the last sample of bandwidth utilisation
for both RSVP-TE and non-RSVP-TE traffic was taken. This value
is relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_sample_time
      
  def _set_last_sample_time(self, v, load=False):
    """
    Setter method for last_sample_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_time (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_sample_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_sample_time() directly.

    YANG Description: The time at which the last sample of bandwidth utilisation
for both RSVP-TE and non-RSVP-TE traffic was taken. This value
is relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_sample_time must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_sample_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_sample_time(self):
    self.__last_sample_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)


  def _get_last_sample_measured_rsvp_util(self):
    """
    Getter method for last_sample_measured_rsvp_util, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_measured_rsvp_util (uint64)

    YANG Description: The measured RSVP-TE bandwidth utilisation at the last sample
(whose time is indicated in last-sample-time). This value is
expressed as a 64-bit unsigned integer representing the number
of kilobits per second that RSVP-TE traffic is consuming on
the interface.
    """
    return self.__last_sample_measured_rsvp_util
      
  def _set_last_sample_measured_rsvp_util(self, v, load=False):
    """
    Setter method for last_sample_measured_rsvp_util, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_measured_rsvp_util (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_sample_measured_rsvp_util is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_sample_measured_rsvp_util() directly.

    YANG Description: The measured RSVP-TE bandwidth utilisation at the last sample
(whose time is indicated in last-sample-time). This value is
expressed as a 64-bit unsigned integer representing the number
of kilobits per second that RSVP-TE traffic is consuming on
the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-rsvp-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_sample_measured_rsvp_util must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-rsvp-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)""",
        })

    self.__last_sample_measured_rsvp_util = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_sample_measured_rsvp_util(self):
    self.__last_sample_measured_rsvp_util = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-rsvp-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)


  def _get_last_sample_measured_sr_util(self):
    """
    Getter method for last_sample_measured_sr_util, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_measured_sr_util (uint64)

    YANG Description: The measured Segment Routing bandwidth utilisation at the
last sample (whose time is indicated in last-sample-time).
This value is expressed as a 64-bit unsigned integer
representing the number of kilobits per second that Segment
Routing traffic is consuming on the interface.
    """
    return self.__last_sample_measured_sr_util
      
  def _set_last_sample_measured_sr_util(self, v, load=False):
    """
    Setter method for last_sample_measured_sr_util, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_measured_sr_util (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_sample_measured_sr_util is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_sample_measured_sr_util() directly.

    YANG Description: The measured Segment Routing bandwidth utilisation at the
last sample (whose time is indicated in last-sample-time).
This value is expressed as a 64-bit unsigned integer
representing the number of kilobits per second that Segment
Routing traffic is consuming on the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-sr-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_sample_measured_sr_util must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-sr-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)""",
        })

    self.__last_sample_measured_sr_util = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_sample_measured_sr_util(self):
    self.__last_sample_measured_sr_util = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-sr-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)


  def _get_last_calculated_time(self):
    """
    Getter method for last_calculated_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_calculated_time (oc-types:timeticks64)

    YANG Description: The time at which the last calculated value for bandwidth
utilisation was performed. The value is expressed relative
to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_calculated_time
      
  def _set_last_calculated_time(self, v, load=False):
    """
    Setter method for last_calculated_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_calculated_time (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_calculated_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_calculated_time() directly.

    YANG Description: The time at which the last calculated value for bandwidth
utilisation was performed. The value is expressed relative
to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_calculated_time must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_calculated_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_calculated_time(self):
    self.__last_calculated_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)


  def _get_last_calculated_sr_utilisation(self):
    """
    Getter method for last_calculated_sr_utilisation, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_calculated_sr_utilisation (uint64)

    YANG Description: The last calculated value of the Segment Routing  utilisation
(taken post any averaging or adjustment that occurs). This
value is updated regardless of whether the value was flooded
or not.
    """
    return self.__last_calculated_sr_utilisation
      
  def _set_last_calculated_sr_utilisation(self, v, load=False):
    """
    Setter method for last_calculated_sr_utilisation, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_calculated_sr_utilisation (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_calculated_sr_utilisation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_calculated_sr_utilisation() directly.

    YANG Description: The last calculated value of the Segment Routing  utilisation
(taken post any averaging or adjustment that occurs). This
value is updated regardless of whether the value was flooded
or not.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-sr-utilisation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_calculated_sr_utilisation must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-sr-utilisation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)""",
        })

    self.__last_calculated_sr_utilisation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_calculated_sr_utilisation(self):
    self.__last_calculated_sr_utilisation = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-sr-utilisation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)


  def _get_last_flooded_time(self):
    """
    Getter method for last_flooded_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_flooded_time (oc-types:timeticks64)

    YANG Description: The time, relative to the Unix Epoch (Jan 1 1970 00:00:00 UTC),
at which the bandwidth utilisation of non-RSVP-TE traffic resulted
in the value being flooded in the IGP. If the configuration of the
local system specifies a 0% change requires flooding, this leaf
will always reflect the value of the last-calculated-time. In
systems that have suppression due to a >0% delta being required
then it indicates the last time that the percentage threshold
was exceeded.
    """
    return self.__last_flooded_time
      
  def _set_last_flooded_time(self, v, load=False):
    """
    Setter method for last_flooded_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_flooded_time (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_flooded_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_flooded_time() directly.

    YANG Description: The time, relative to the Unix Epoch (Jan 1 1970 00:00:00 UTC),
at which the bandwidth utilisation of non-RSVP-TE traffic resulted
in the value being flooded in the IGP. If the configuration of the
local system specifies a 0% change requires flooding, this leaf
will always reflect the value of the last-calculated-time. In
systems that have suppression due to a >0% delta being required
then it indicates the last time that the percentage threshold
was exceeded.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-flooded-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_flooded_time must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-flooded-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_flooded_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_flooded_time(self):
    self.__last_flooded_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-flooded-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)

  last_sample_time = __builtin__.property(_get_last_sample_time)
  last_sample_measured_rsvp_util = __builtin__.property(_get_last_sample_measured_rsvp_util)
  last_sample_measured_sr_util = __builtin__.property(_get_last_sample_measured_sr_util)
  last_calculated_time = __builtin__.property(_get_last_calculated_time)
  last_calculated_sr_utilisation = __builtin__.property(_get_last_calculated_sr_utilisation)
  last_flooded_time = __builtin__.property(_get_last_flooded_time)


  _pyangbind_elements = OrderedDict([('last_sample_time', last_sample_time), ('last_sample_measured_rsvp_util', last_sample_measured_rsvp_util), ('last_sample_measured_sr_util', last_sample_measured_sr_util), ('last_calculated_time', last_calculated_time), ('last_calculated_sr_utilisation', last_calculated_sr_utilisation), ('last_flooded_time', last_flooded_time), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/mpls/te-interface-attributes/interface/bandwidth-measurement/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the containing
interface's bandwidth measurement.
  """
  __slots__ = ('_path_helper', '_extmethods', '__last_sample_time','__last_sample_measured_rsvp_util','__last_sample_measured_sr_util','__last_calculated_time','__last_calculated_sr_utilisation','__last_flooded_time',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__last_sample_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    self.__last_sample_measured_rsvp_util = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-rsvp-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    self.__last_sample_measured_sr_util = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-sr-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    self.__last_calculated_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    self.__last_calculated_sr_utilisation = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-sr-utilisation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    self.__last_flooded_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-flooded-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'te-interface-attributes', 'interface', 'bandwidth-measurement', 'state']

  def _get_last_sample_time(self):
    """
    Getter method for last_sample_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_time (oc-types:timeticks64)

    YANG Description: The time at which the last sample of bandwidth utilisation
for both RSVP-TE and non-RSVP-TE traffic was taken. This value
is relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_sample_time
      
  def _set_last_sample_time(self, v, load=False):
    """
    Setter method for last_sample_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_time (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_sample_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_sample_time() directly.

    YANG Description: The time at which the last sample of bandwidth utilisation
for both RSVP-TE and non-RSVP-TE traffic was taken. This value
is relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_sample_time must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_sample_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_sample_time(self):
    self.__last_sample_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)


  def _get_last_sample_measured_rsvp_util(self):
    """
    Getter method for last_sample_measured_rsvp_util, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_measured_rsvp_util (uint64)

    YANG Description: The measured RSVP-TE bandwidth utilisation at the last sample
(whose time is indicated in last-sample-time). This value is
expressed as a 64-bit unsigned integer representing the number
of kilobits per second that RSVP-TE traffic is consuming on
the interface.
    """
    return self.__last_sample_measured_rsvp_util
      
  def _set_last_sample_measured_rsvp_util(self, v, load=False):
    """
    Setter method for last_sample_measured_rsvp_util, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_measured_rsvp_util (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_sample_measured_rsvp_util is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_sample_measured_rsvp_util() directly.

    YANG Description: The measured RSVP-TE bandwidth utilisation at the last sample
(whose time is indicated in last-sample-time). This value is
expressed as a 64-bit unsigned integer representing the number
of kilobits per second that RSVP-TE traffic is consuming on
the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-rsvp-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_sample_measured_rsvp_util must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-rsvp-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)""",
        })

    self.__last_sample_measured_rsvp_util = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_sample_measured_rsvp_util(self):
    self.__last_sample_measured_rsvp_util = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-rsvp-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)


  def _get_last_sample_measured_sr_util(self):
    """
    Getter method for last_sample_measured_sr_util, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_measured_sr_util (uint64)

    YANG Description: The measured Segment Routing bandwidth utilisation at the
last sample (whose time is indicated in last-sample-time).
This value is expressed as a 64-bit unsigned integer
representing the number of kilobits per second that Segment
Routing traffic is consuming on the interface.
    """
    return self.__last_sample_measured_sr_util
      
  def _set_last_sample_measured_sr_util(self, v, load=False):
    """
    Setter method for last_sample_measured_sr_util, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_measured_sr_util (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_sample_measured_sr_util is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_sample_measured_sr_util() directly.

    YANG Description: The measured Segment Routing bandwidth utilisation at the
last sample (whose time is indicated in last-sample-time).
This value is expressed as a 64-bit unsigned integer
representing the number of kilobits per second that Segment
Routing traffic is consuming on the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-sr-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_sample_measured_sr_util must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-sr-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)""",
        })

    self.__last_sample_measured_sr_util = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_sample_measured_sr_util(self):
    self.__last_sample_measured_sr_util = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-sr-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)


  def _get_last_calculated_time(self):
    """
    Getter method for last_calculated_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_calculated_time (oc-types:timeticks64)

    YANG Description: The time at which the last calculated value for bandwidth
utilisation was performed. The value is expressed relative
to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_calculated_time
      
  def _set_last_calculated_time(self, v, load=False):
    """
    Setter method for last_calculated_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_calculated_time (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_calculated_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_calculated_time() directly.

    YANG Description: The time at which the last calculated value for bandwidth
utilisation was performed. The value is expressed relative
to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_calculated_time must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_calculated_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_calculated_time(self):
    self.__last_calculated_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)


  def _get_last_calculated_sr_utilisation(self):
    """
    Getter method for last_calculated_sr_utilisation, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_calculated_sr_utilisation (uint64)

    YANG Description: The last calculated value of the Segment Routing  utilisation
(taken post any averaging or adjustment that occurs). This
value is updated regardless of whether the value was flooded
or not.
    """
    return self.__last_calculated_sr_utilisation
      
  def _set_last_calculated_sr_utilisation(self, v, load=False):
    """
    Setter method for last_calculated_sr_utilisation, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_calculated_sr_utilisation (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_calculated_sr_utilisation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_calculated_sr_utilisation() directly.

    YANG Description: The last calculated value of the Segment Routing  utilisation
(taken post any averaging or adjustment that occurs). This
value is updated regardless of whether the value was flooded
or not.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-sr-utilisation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_calculated_sr_utilisation must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-sr-utilisation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)""",
        })

    self.__last_calculated_sr_utilisation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_calculated_sr_utilisation(self):
    self.__last_calculated_sr_utilisation = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-sr-utilisation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)


  def _get_last_flooded_time(self):
    """
    Getter method for last_flooded_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_flooded_time (oc-types:timeticks64)

    YANG Description: The time, relative to the Unix Epoch (Jan 1 1970 00:00:00 UTC),
at which the bandwidth utilisation of non-RSVP-TE traffic resulted
in the value being flooded in the IGP. If the configuration of the
local system specifies a 0% change requires flooding, this leaf
will always reflect the value of the last-calculated-time. In
systems that have suppression due to a >0% delta being required
then it indicates the last time that the percentage threshold
was exceeded.
    """
    return self.__last_flooded_time
      
  def _set_last_flooded_time(self, v, load=False):
    """
    Setter method for last_flooded_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_flooded_time (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_flooded_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_flooded_time() directly.

    YANG Description: The time, relative to the Unix Epoch (Jan 1 1970 00:00:00 UTC),
at which the bandwidth utilisation of non-RSVP-TE traffic resulted
in the value being flooded in the IGP. If the configuration of the
local system specifies a 0% change requires flooding, this leaf
will always reflect the value of the last-calculated-time. In
systems that have suppression due to a >0% delta being required
then it indicates the last time that the percentage threshold
was exceeded.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-flooded-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_flooded_time must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-flooded-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_flooded_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_flooded_time(self):
    self.__last_flooded_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-flooded-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)

  last_sample_time = __builtin__.property(_get_last_sample_time)
  last_sample_measured_rsvp_util = __builtin__.property(_get_last_sample_measured_rsvp_util)
  last_sample_measured_sr_util = __builtin__.property(_get_last_sample_measured_sr_util)
  last_calculated_time = __builtin__.property(_get_last_calculated_time)
  last_calculated_sr_utilisation = __builtin__.property(_get_last_calculated_sr_utilisation)
  last_flooded_time = __builtin__.property(_get_last_flooded_time)


  _pyangbind_elements = OrderedDict([('last_sample_time', last_sample_time), ('last_sample_measured_rsvp_util', last_sample_measured_rsvp_util), ('last_sample_measured_sr_util', last_sample_measured_sr_util), ('last_calculated_time', last_calculated_time), ('last_calculated_sr_utilisation', last_calculated_sr_utilisation), ('last_flooded_time', last_flooded_time), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/mpls/te-interface-attributes/interface/bandwidth-measurement/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the containing
interface's bandwidth measurement.
  """
  __slots__ = ('_path_helper', '_extmethods', '__last_sample_time','__last_sample_measured_rsvp_util','__last_sample_measured_sr_util','__last_calculated_time','__last_calculated_sr_utilisation','__last_flooded_time',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__last_sample_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    self.__last_sample_measured_rsvp_util = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-rsvp-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    self.__last_sample_measured_sr_util = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-sr-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    self.__last_calculated_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    self.__last_calculated_sr_utilisation = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-sr-utilisation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    self.__last_flooded_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-flooded-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'te-interface-attributes', 'interface', 'bandwidth-measurement', 'state']

  def _get_last_sample_time(self):
    """
    Getter method for last_sample_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_time (oc-types:timeticks64)

    YANG Description: The time at which the last sample of bandwidth utilisation
for both RSVP-TE and non-RSVP-TE traffic was taken. This value
is relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_sample_time
      
  def _set_last_sample_time(self, v, load=False):
    """
    Setter method for last_sample_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_time (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_sample_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_sample_time() directly.

    YANG Description: The time at which the last sample of bandwidth utilisation
for both RSVP-TE and non-RSVP-TE traffic was taken. This value
is relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_sample_time must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_sample_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_sample_time(self):
    self.__last_sample_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)


  def _get_last_sample_measured_rsvp_util(self):
    """
    Getter method for last_sample_measured_rsvp_util, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_measured_rsvp_util (uint64)

    YANG Description: The measured RSVP-TE bandwidth utilisation at the last sample
(whose time is indicated in last-sample-time). This value is
expressed as a 64-bit unsigned integer representing the number
of kilobits per second that RSVP-TE traffic is consuming on
the interface.
    """
    return self.__last_sample_measured_rsvp_util
      
  def _set_last_sample_measured_rsvp_util(self, v, load=False):
    """
    Setter method for last_sample_measured_rsvp_util, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_measured_rsvp_util (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_sample_measured_rsvp_util is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_sample_measured_rsvp_util() directly.

    YANG Description: The measured RSVP-TE bandwidth utilisation at the last sample
(whose time is indicated in last-sample-time). This value is
expressed as a 64-bit unsigned integer representing the number
of kilobits per second that RSVP-TE traffic is consuming on
the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-rsvp-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_sample_measured_rsvp_util must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-rsvp-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)""",
        })

    self.__last_sample_measured_rsvp_util = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_sample_measured_rsvp_util(self):
    self.__last_sample_measured_rsvp_util = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-rsvp-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)


  def _get_last_sample_measured_sr_util(self):
    """
    Getter method for last_sample_measured_sr_util, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_measured_sr_util (uint64)

    YANG Description: The measured Segment Routing bandwidth utilisation at the
last sample (whose time is indicated in last-sample-time).
This value is expressed as a 64-bit unsigned integer
representing the number of kilobits per second that Segment
Routing traffic is consuming on the interface.
    """
    return self.__last_sample_measured_sr_util
      
  def _set_last_sample_measured_sr_util(self, v, load=False):
    """
    Setter method for last_sample_measured_sr_util, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_measured_sr_util (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_sample_measured_sr_util is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_sample_measured_sr_util() directly.

    YANG Description: The measured Segment Routing bandwidth utilisation at the
last sample (whose time is indicated in last-sample-time).
This value is expressed as a 64-bit unsigned integer
representing the number of kilobits per second that Segment
Routing traffic is consuming on the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-sr-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_sample_measured_sr_util must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-sr-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)""",
        })

    self.__last_sample_measured_sr_util = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_sample_measured_sr_util(self):
    self.__last_sample_measured_sr_util = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-sr-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)


  def _get_last_calculated_time(self):
    """
    Getter method for last_calculated_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_calculated_time (oc-types:timeticks64)

    YANG Description: The time at which the last calculated value for bandwidth
utilisation was performed. The value is expressed relative
to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_calculated_time
      
  def _set_last_calculated_time(self, v, load=False):
    """
    Setter method for last_calculated_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_calculated_time (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_calculated_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_calculated_time() directly.

    YANG Description: The time at which the last calculated value for bandwidth
utilisation was performed. The value is expressed relative
to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_calculated_time must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_calculated_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_calculated_time(self):
    self.__last_calculated_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)


  def _get_last_calculated_sr_utilisation(self):
    """
    Getter method for last_calculated_sr_utilisation, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_calculated_sr_utilisation (uint64)

    YANG Description: The last calculated value of the Segment Routing  utilisation
(taken post any averaging or adjustment that occurs). This
value is updated regardless of whether the value was flooded
or not.
    """
    return self.__last_calculated_sr_utilisation
      
  def _set_last_calculated_sr_utilisation(self, v, load=False):
    """
    Setter method for last_calculated_sr_utilisation, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_calculated_sr_utilisation (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_calculated_sr_utilisation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_calculated_sr_utilisation() directly.

    YANG Description: The last calculated value of the Segment Routing  utilisation
(taken post any averaging or adjustment that occurs). This
value is updated regardless of whether the value was flooded
or not.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-sr-utilisation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_calculated_sr_utilisation must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-sr-utilisation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)""",
        })

    self.__last_calculated_sr_utilisation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_calculated_sr_utilisation(self):
    self.__last_calculated_sr_utilisation = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-sr-utilisation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)


  def _get_last_flooded_time(self):
    """
    Getter method for last_flooded_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_flooded_time (oc-types:timeticks64)

    YANG Description: The time, relative to the Unix Epoch (Jan 1 1970 00:00:00 UTC),
at which the bandwidth utilisation of non-RSVP-TE traffic resulted
in the value being flooded in the IGP. If the configuration of the
local system specifies a 0% change requires flooding, this leaf
will always reflect the value of the last-calculated-time. In
systems that have suppression due to a >0% delta being required
then it indicates the last time that the percentage threshold
was exceeded.
    """
    return self.__last_flooded_time
      
  def _set_last_flooded_time(self, v, load=False):
    """
    Setter method for last_flooded_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_flooded_time (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_flooded_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_flooded_time() directly.

    YANG Description: The time, relative to the Unix Epoch (Jan 1 1970 00:00:00 UTC),
at which the bandwidth utilisation of non-RSVP-TE traffic resulted
in the value being flooded in the IGP. If the configuration of the
local system specifies a 0% change requires flooding, this leaf
will always reflect the value of the last-calculated-time. In
systems that have suppression due to a >0% delta being required
then it indicates the last time that the percentage threshold
was exceeded.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-flooded-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_flooded_time must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-flooded-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_flooded_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_flooded_time(self):
    self.__last_flooded_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-flooded-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)

  last_sample_time = __builtin__.property(_get_last_sample_time)
  last_sample_measured_rsvp_util = __builtin__.property(_get_last_sample_measured_rsvp_util)
  last_sample_measured_sr_util = __builtin__.property(_get_last_sample_measured_sr_util)
  last_calculated_time = __builtin__.property(_get_last_calculated_time)
  last_calculated_sr_utilisation = __builtin__.property(_get_last_calculated_sr_utilisation)
  last_flooded_time = __builtin__.property(_get_last_flooded_time)


  _pyangbind_elements = OrderedDict([('last_sample_time', last_sample_time), ('last_sample_measured_rsvp_util', last_sample_measured_rsvp_util), ('last_sample_measured_sr_util', last_sample_measured_sr_util), ('last_calculated_time', last_calculated_time), ('last_calculated_sr_utilisation', last_calculated_sr_utilisation), ('last_flooded_time', last_flooded_time), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/mpls/te-interface-attributes/interface/bandwidth-measurement/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the containing
interface's bandwidth measurement.
  """
  __slots__ = ('_path_helper', '_extmethods', '__last_sample_time','__last_sample_measured_rsvp_util','__last_sample_measured_sr_util','__last_calculated_time','__last_calculated_sr_utilisation','__last_flooded_time',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__last_sample_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    self.__last_sample_measured_rsvp_util = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-rsvp-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    self.__last_sample_measured_sr_util = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-sr-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    self.__last_calculated_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    self.__last_calculated_sr_utilisation = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-sr-utilisation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    self.__last_flooded_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-flooded-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'te-interface-attributes', 'interface', 'bandwidth-measurement', 'state']

  def _get_last_sample_time(self):
    """
    Getter method for last_sample_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_time (oc-types:timeticks64)

    YANG Description: The time at which the last sample of bandwidth utilisation
for both RSVP-TE and non-RSVP-TE traffic was taken. This value
is relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_sample_time
      
  def _set_last_sample_time(self, v, load=False):
    """
    Setter method for last_sample_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_time (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_sample_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_sample_time() directly.

    YANG Description: The time at which the last sample of bandwidth utilisation
for both RSVP-TE and non-RSVP-TE traffic was taken. This value
is relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_sample_time must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_sample_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_sample_time(self):
    self.__last_sample_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)


  def _get_last_sample_measured_rsvp_util(self):
    """
    Getter method for last_sample_measured_rsvp_util, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_measured_rsvp_util (uint64)

    YANG Description: The measured RSVP-TE bandwidth utilisation at the last sample
(whose time is indicated in last-sample-time). This value is
expressed as a 64-bit unsigned integer representing the number
of kilobits per second that RSVP-TE traffic is consuming on
the interface.
    """
    return self.__last_sample_measured_rsvp_util
      
  def _set_last_sample_measured_rsvp_util(self, v, load=False):
    """
    Setter method for last_sample_measured_rsvp_util, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_measured_rsvp_util (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_sample_measured_rsvp_util is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_sample_measured_rsvp_util() directly.

    YANG Description: The measured RSVP-TE bandwidth utilisation at the last sample
(whose time is indicated in last-sample-time). This value is
expressed as a 64-bit unsigned integer representing the number
of kilobits per second that RSVP-TE traffic is consuming on
the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-rsvp-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_sample_measured_rsvp_util must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-rsvp-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)""",
        })

    self.__last_sample_measured_rsvp_util = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_sample_measured_rsvp_util(self):
    self.__last_sample_measured_rsvp_util = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-rsvp-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)


  def _get_last_sample_measured_sr_util(self):
    """
    Getter method for last_sample_measured_sr_util, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_measured_sr_util (uint64)

    YANG Description: The measured Segment Routing bandwidth utilisation at the
last sample (whose time is indicated in last-sample-time).
This value is expressed as a 64-bit unsigned integer
representing the number of kilobits per second that Segment
Routing traffic is consuming on the interface.
    """
    return self.__last_sample_measured_sr_util
      
  def _set_last_sample_measured_sr_util(self, v, load=False):
    """
    Setter method for last_sample_measured_sr_util, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_sample_measured_sr_util (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_sample_measured_sr_util is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_sample_measured_sr_util() directly.

    YANG Description: The measured Segment Routing bandwidth utilisation at the
last sample (whose time is indicated in last-sample-time).
This value is expressed as a 64-bit unsigned integer
representing the number of kilobits per second that Segment
Routing traffic is consuming on the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-sr-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_sample_measured_sr_util must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-sr-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)""",
        })

    self.__last_sample_measured_sr_util = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_sample_measured_sr_util(self):
    self.__last_sample_measured_sr_util = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-sample-measured-sr-util", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)


  def _get_last_calculated_time(self):
    """
    Getter method for last_calculated_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_calculated_time (oc-types:timeticks64)

    YANG Description: The time at which the last calculated value for bandwidth
utilisation was performed. The value is expressed relative
to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__last_calculated_time
      
  def _set_last_calculated_time(self, v, load=False):
    """
    Setter method for last_calculated_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_calculated_time (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_calculated_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_calculated_time() directly.

    YANG Description: The time at which the last calculated value for bandwidth
utilisation was performed. The value is expressed relative
to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_calculated_time must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_calculated_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_calculated_time(self):
    self.__last_calculated_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)


  def _get_last_calculated_sr_utilisation(self):
    """
    Getter method for last_calculated_sr_utilisation, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_calculated_sr_utilisation (uint64)

    YANG Description: The last calculated value of the Segment Routing  utilisation
(taken post any averaging or adjustment that occurs). This
value is updated regardless of whether the value was flooded
or not.
    """
    return self.__last_calculated_sr_utilisation
      
  def _set_last_calculated_sr_utilisation(self, v, load=False):
    """
    Setter method for last_calculated_sr_utilisation, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_calculated_sr_utilisation (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_calculated_sr_utilisation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_calculated_sr_utilisation() directly.

    YANG Description: The last calculated value of the Segment Routing  utilisation
(taken post any averaging or adjustment that occurs). This
value is updated regardless of whether the value was flooded
or not.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-sr-utilisation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_calculated_sr_utilisation must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-sr-utilisation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)""",
        })

    self.__last_calculated_sr_utilisation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_calculated_sr_utilisation(self):
    self.__last_calculated_sr_utilisation = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-calculated-sr-utilisation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='uint64', is_config=False)


  def _get_last_flooded_time(self):
    """
    Getter method for last_flooded_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_flooded_time (oc-types:timeticks64)

    YANG Description: The time, relative to the Unix Epoch (Jan 1 1970 00:00:00 UTC),
at which the bandwidth utilisation of non-RSVP-TE traffic resulted
in the value being flooded in the IGP. If the configuration of the
local system specifies a 0% change requires flooding, this leaf
will always reflect the value of the last-calculated-time. In
systems that have suppression due to a >0% delta being required
then it indicates the last time that the percentage threshold
was exceeded.
    """
    return self.__last_flooded_time
      
  def _set_last_flooded_time(self, v, load=False):
    """
    Setter method for last_flooded_time, mapped from YANG variable /network_instances/network_instance/mpls/te_interface_attributes/interface/bandwidth_measurement/state/last_flooded_time (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_flooded_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_flooded_time() directly.

    YANG Description: The time, relative to the Unix Epoch (Jan 1 1970 00:00:00 UTC),
at which the bandwidth utilisation of non-RSVP-TE traffic resulted
in the value being flooded in the IGP. If the configuration of the
local system specifies a 0% change requires flooding, this leaf
will always reflect the value of the last-calculated-time. In
systems that have suppression due to a >0% delta being required
then it indicates the last time that the percentage threshold
was exceeded.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-flooded-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_flooded_time must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-flooded-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__last_flooded_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_flooded_time(self):
    self.__last_flooded_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-flooded-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/rsvp-sr-ext', defining_module='openconfig-rsvp-sr-ext', yang_type='oc-types:timeticks64', is_config=False)

  last_sample_time = __builtin__.property(_get_last_sample_time)
  last_sample_measured_rsvp_util = __builtin__.property(_get_last_sample_measured_rsvp_util)
  last_sample_measured_sr_util = __builtin__.property(_get_last_sample_measured_sr_util)
  last_calculated_time = __builtin__.property(_get_last_calculated_time)
  last_calculated_sr_utilisation = __builtin__.property(_get_last_calculated_sr_utilisation)
  last_flooded_time = __builtin__.property(_get_last_flooded_time)


  _pyangbind_elements = OrderedDict([('last_sample_time', last_sample_time), ('last_sample_measured_rsvp_util', last_sample_measured_rsvp_util), ('last_sample_measured_sr_util', last_sample_measured_sr_util), ('last_calculated_time', last_calculated_time), ('last_calculated_sr_utilisation', last_calculated_sr_utilisation), ('last_flooded_time', last_flooded_time), ])


