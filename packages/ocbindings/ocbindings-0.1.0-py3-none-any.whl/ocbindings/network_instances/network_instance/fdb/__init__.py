# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import config
from . import state
from . import mac_table
from . import mac_mobility
from . import arp_proxy
from . import nd_proxy
from . import l2rib
class fdb(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/fdb. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state and configuration parameters relating to
the forwarding database of the network instance
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__mac_table','__mac_mobility','__arp_proxy','__nd_proxy','__l2rib',)

  _yang_name = 'fdb'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__mac_table = YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__mac_mobility = YANGDynClass(base=mac_mobility.mac_mobility, is_container='container', yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__arp_proxy = YANGDynClass(base=arp_proxy.arp_proxy, is_container='container', yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__nd_proxy = YANGDynClass(base=nd_proxy.nd_proxy, is_container='container', yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__l2rib = YANGDynClass(base=l2rib.l2rib, is_container='container', yang_name="l2rib", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /network_instances/network_instance/fdb/config (container)

    YANG Description: Configuration parameters relating to the FDB
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /network_instances/network_instance/fdb/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to the FDB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/fdb/state (container)

    YANG Description: Operational state parameters relating to the FDB
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/fdb/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the FDB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_mac_table(self):
    """
    Getter method for mac_table, mapped from YANG variable /network_instances/network_instance/fdb/mac_table (container)

    YANG Description: Table of learned or statically configured MAC addresses and
corresponding VLANs in the bridge domain
    """
    return self.__mac_table
      
  def _set_mac_table(self, v, load=False):
    """
    Setter method for mac_table, mapped from YANG variable /network_instances/network_instance/fdb/mac_table (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_table is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_table() directly.

    YANG Description: Table of learned or statically configured MAC addresses and
corresponding VLANs in the bridge domain
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_table must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__mac_table = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_table(self):
    self.__mac_table = YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_mac_mobility(self):
    """
    Getter method for mac_mobility, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility (container)

    YANG Description: Top grouping the configuration and state data related to mac
mobility.
    """
    return self.__mac_mobility
      
  def _set_mac_mobility(self, v, load=False):
    """
    Setter method for mac_mobility, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_mobility is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_mobility() directly.

    YANG Description: Top grouping the configuration and state data related to mac
mobility.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mac_mobility.mac_mobility, is_container='container', yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_mobility must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mac_mobility.mac_mobility, is_container='container', yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__mac_mobility = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_mobility(self):
    self.__mac_mobility = YANGDynClass(base=mac_mobility.mac_mobility, is_container='container', yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_arp_proxy(self):
    """
    Getter method for arp_proxy, mapped from YANG variable /network_instances/network_instance/fdb/arp_proxy (container)

    YANG Description: Top Container related to ARP-Proxy
    """
    return self.__arp_proxy
      
  def _set_arp_proxy(self, v, load=False):
    """
    Setter method for arp_proxy, mapped from YANG variable /network_instances/network_instance/fdb/arp_proxy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_arp_proxy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_arp_proxy() directly.

    YANG Description: Top Container related to ARP-Proxy
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=arp_proxy.arp_proxy, is_container='container', yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """arp_proxy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=arp_proxy.arp_proxy, is_container='container', yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__arp_proxy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_arp_proxy(self):
    self.__arp_proxy = YANGDynClass(base=arp_proxy.arp_proxy, is_container='container', yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_nd_proxy(self):
    """
    Getter method for nd_proxy, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy (container)

    YANG Description: Top Container related to ND-Proxy.
    """
    return self.__nd_proxy
      
  def _set_nd_proxy(self, v, load=False):
    """
    Setter method for nd_proxy, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nd_proxy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nd_proxy() directly.

    YANG Description: Top Container related to ND-Proxy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=nd_proxy.nd_proxy, is_container='container', yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nd_proxy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=nd_proxy.nd_proxy, is_container='container', yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__nd_proxy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nd_proxy(self):
    self.__nd_proxy = YANGDynClass(base=nd_proxy.nd_proxy, is_container='container', yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_l2rib(self):
    """
    Getter method for l2rib, mapped from YANG variable /network_instances/network_instance/fdb/l2rib (container)

    YANG Description: Operational state container for MAC address and MAC-IP address
information that is learned and installed into the MAC VRF Layer 2
Routing Information Base (L2RIB)
    """
    return self.__l2rib
      
  def _set_l2rib(self, v, load=False):
    """
    Setter method for l2rib, mapped from YANG variable /network_instances/network_instance/fdb/l2rib (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2rib is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2rib() directly.

    YANG Description: Operational state container for MAC address and MAC-IP address
information that is learned and installed into the MAC VRF Layer 2
Routing Information Base (L2RIB)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=l2rib.l2rib, is_container='container', yang_name="l2rib", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2rib must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=l2rib.l2rib, is_container='container', yang_name="l2rib", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__l2rib = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2rib(self):
    self.__l2rib = YANGDynClass(base=l2rib.l2rib, is_container='container', yang_name="l2rib", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  mac_table = __builtin__.property(_get_mac_table, _set_mac_table)
  mac_mobility = __builtin__.property(_get_mac_mobility, _set_mac_mobility)
  arp_proxy = __builtin__.property(_get_arp_proxy, _set_arp_proxy)
  nd_proxy = __builtin__.property(_get_nd_proxy, _set_nd_proxy)
  l2rib = __builtin__.property(_get_l2rib)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('mac_table', mac_table), ('mac_mobility', mac_mobility), ('arp_proxy', arp_proxy), ('nd_proxy', nd_proxy), ('l2rib', l2rib), ])


from . import config
from . import state
from . import mac_table
from . import mac_mobility
from . import arp_proxy
from . import nd_proxy
from . import l2rib
class fdb(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/fdb. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state and configuration parameters relating to
the forwarding database of the network instance
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__mac_table','__mac_mobility','__arp_proxy','__nd_proxy','__l2rib',)

  _yang_name = 'fdb'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__mac_table = YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__mac_mobility = YANGDynClass(base=mac_mobility.mac_mobility, is_container='container', yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__arp_proxy = YANGDynClass(base=arp_proxy.arp_proxy, is_container='container', yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__nd_proxy = YANGDynClass(base=nd_proxy.nd_proxy, is_container='container', yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__l2rib = YANGDynClass(base=l2rib.l2rib, is_container='container', yang_name="l2rib", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /network_instances/network_instance/fdb/config (container)

    YANG Description: Configuration parameters relating to the FDB
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /network_instances/network_instance/fdb/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to the FDB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/fdb/state (container)

    YANG Description: Operational state parameters relating to the FDB
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/fdb/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the FDB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_mac_table(self):
    """
    Getter method for mac_table, mapped from YANG variable /network_instances/network_instance/fdb/mac_table (container)

    YANG Description: Table of learned or statically configured MAC addresses and
corresponding VLANs in the bridge domain
    """
    return self.__mac_table
      
  def _set_mac_table(self, v, load=False):
    """
    Setter method for mac_table, mapped from YANG variable /network_instances/network_instance/fdb/mac_table (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_table is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_table() directly.

    YANG Description: Table of learned or statically configured MAC addresses and
corresponding VLANs in the bridge domain
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_table must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__mac_table = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_table(self):
    self.__mac_table = YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_mac_mobility(self):
    """
    Getter method for mac_mobility, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility (container)

    YANG Description: Top grouping the configuration and state data related to mac
mobility.
    """
    return self.__mac_mobility
      
  def _set_mac_mobility(self, v, load=False):
    """
    Setter method for mac_mobility, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_mobility is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_mobility() directly.

    YANG Description: Top grouping the configuration and state data related to mac
mobility.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mac_mobility.mac_mobility, is_container='container', yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_mobility must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mac_mobility.mac_mobility, is_container='container', yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__mac_mobility = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_mobility(self):
    self.__mac_mobility = YANGDynClass(base=mac_mobility.mac_mobility, is_container='container', yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_arp_proxy(self):
    """
    Getter method for arp_proxy, mapped from YANG variable /network_instances/network_instance/fdb/arp_proxy (container)

    YANG Description: Top Container related to ARP-Proxy
    """
    return self.__arp_proxy
      
  def _set_arp_proxy(self, v, load=False):
    """
    Setter method for arp_proxy, mapped from YANG variable /network_instances/network_instance/fdb/arp_proxy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_arp_proxy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_arp_proxy() directly.

    YANG Description: Top Container related to ARP-Proxy
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=arp_proxy.arp_proxy, is_container='container', yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """arp_proxy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=arp_proxy.arp_proxy, is_container='container', yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__arp_proxy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_arp_proxy(self):
    self.__arp_proxy = YANGDynClass(base=arp_proxy.arp_proxy, is_container='container', yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_nd_proxy(self):
    """
    Getter method for nd_proxy, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy (container)

    YANG Description: Top Container related to ND-Proxy.
    """
    return self.__nd_proxy
      
  def _set_nd_proxy(self, v, load=False):
    """
    Setter method for nd_proxy, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nd_proxy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nd_proxy() directly.

    YANG Description: Top Container related to ND-Proxy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=nd_proxy.nd_proxy, is_container='container', yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nd_proxy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=nd_proxy.nd_proxy, is_container='container', yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__nd_proxy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nd_proxy(self):
    self.__nd_proxy = YANGDynClass(base=nd_proxy.nd_proxy, is_container='container', yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_l2rib(self):
    """
    Getter method for l2rib, mapped from YANG variable /network_instances/network_instance/fdb/l2rib (container)

    YANG Description: Operational state container for MAC address and MAC-IP address
information that is learned and installed into the MAC VRF Layer 2
Routing Information Base (L2RIB)
    """
    return self.__l2rib
      
  def _set_l2rib(self, v, load=False):
    """
    Setter method for l2rib, mapped from YANG variable /network_instances/network_instance/fdb/l2rib (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2rib is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2rib() directly.

    YANG Description: Operational state container for MAC address and MAC-IP address
information that is learned and installed into the MAC VRF Layer 2
Routing Information Base (L2RIB)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=l2rib.l2rib, is_container='container', yang_name="l2rib", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2rib must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=l2rib.l2rib, is_container='container', yang_name="l2rib", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__l2rib = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2rib(self):
    self.__l2rib = YANGDynClass(base=l2rib.l2rib, is_container='container', yang_name="l2rib", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  mac_table = __builtin__.property(_get_mac_table, _set_mac_table)
  mac_mobility = __builtin__.property(_get_mac_mobility, _set_mac_mobility)
  arp_proxy = __builtin__.property(_get_arp_proxy, _set_arp_proxy)
  nd_proxy = __builtin__.property(_get_nd_proxy, _set_nd_proxy)
  l2rib = __builtin__.property(_get_l2rib)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('mac_table', mac_table), ('mac_mobility', mac_mobility), ('arp_proxy', arp_proxy), ('nd_proxy', nd_proxy), ('l2rib', l2rib), ])


from . import config
from . import state
from . import mac_table
from . import mac_mobility
from . import arp_proxy
from . import nd_proxy
from . import l2rib
class fdb(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/fdb. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state and configuration parameters relating to
the forwarding database of the network instance
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__mac_table','__mac_mobility','__arp_proxy','__nd_proxy','__l2rib',)

  _yang_name = 'fdb'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__mac_table = YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__mac_mobility = YANGDynClass(base=mac_mobility.mac_mobility, is_container='container', yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__arp_proxy = YANGDynClass(base=arp_proxy.arp_proxy, is_container='container', yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__nd_proxy = YANGDynClass(base=nd_proxy.nd_proxy, is_container='container', yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__l2rib = YANGDynClass(base=l2rib.l2rib, is_container='container', yang_name="l2rib", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /network_instances/network_instance/fdb/config (container)

    YANG Description: Configuration parameters relating to the FDB
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /network_instances/network_instance/fdb/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to the FDB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/fdb/state (container)

    YANG Description: Operational state parameters relating to the FDB
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/fdb/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the FDB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_mac_table(self):
    """
    Getter method for mac_table, mapped from YANG variable /network_instances/network_instance/fdb/mac_table (container)

    YANG Description: Table of learned or statically configured MAC addresses and
corresponding VLANs in the bridge domain
    """
    return self.__mac_table
      
  def _set_mac_table(self, v, load=False):
    """
    Setter method for mac_table, mapped from YANG variable /network_instances/network_instance/fdb/mac_table (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_table is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_table() directly.

    YANG Description: Table of learned or statically configured MAC addresses and
corresponding VLANs in the bridge domain
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_table must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__mac_table = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_table(self):
    self.__mac_table = YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_mac_mobility(self):
    """
    Getter method for mac_mobility, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility (container)

    YANG Description: Top grouping the configuration and state data related to mac
mobility.
    """
    return self.__mac_mobility
      
  def _set_mac_mobility(self, v, load=False):
    """
    Setter method for mac_mobility, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_mobility is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_mobility() directly.

    YANG Description: Top grouping the configuration and state data related to mac
mobility.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mac_mobility.mac_mobility, is_container='container', yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_mobility must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mac_mobility.mac_mobility, is_container='container', yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__mac_mobility = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_mobility(self):
    self.__mac_mobility = YANGDynClass(base=mac_mobility.mac_mobility, is_container='container', yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_arp_proxy(self):
    """
    Getter method for arp_proxy, mapped from YANG variable /network_instances/network_instance/fdb/arp_proxy (container)

    YANG Description: Top Container related to ARP-Proxy
    """
    return self.__arp_proxy
      
  def _set_arp_proxy(self, v, load=False):
    """
    Setter method for arp_proxy, mapped from YANG variable /network_instances/network_instance/fdb/arp_proxy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_arp_proxy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_arp_proxy() directly.

    YANG Description: Top Container related to ARP-Proxy
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=arp_proxy.arp_proxy, is_container='container', yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """arp_proxy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=arp_proxy.arp_proxy, is_container='container', yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__arp_proxy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_arp_proxy(self):
    self.__arp_proxy = YANGDynClass(base=arp_proxy.arp_proxy, is_container='container', yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_nd_proxy(self):
    """
    Getter method for nd_proxy, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy (container)

    YANG Description: Top Container related to ND-Proxy.
    """
    return self.__nd_proxy
      
  def _set_nd_proxy(self, v, load=False):
    """
    Setter method for nd_proxy, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nd_proxy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nd_proxy() directly.

    YANG Description: Top Container related to ND-Proxy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=nd_proxy.nd_proxy, is_container='container', yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nd_proxy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=nd_proxy.nd_proxy, is_container='container', yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__nd_proxy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nd_proxy(self):
    self.__nd_proxy = YANGDynClass(base=nd_proxy.nd_proxy, is_container='container', yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_l2rib(self):
    """
    Getter method for l2rib, mapped from YANG variable /network_instances/network_instance/fdb/l2rib (container)

    YANG Description: Operational state container for MAC address and MAC-IP address
information that is learned and installed into the MAC VRF Layer 2
Routing Information Base (L2RIB)
    """
    return self.__l2rib
      
  def _set_l2rib(self, v, load=False):
    """
    Setter method for l2rib, mapped from YANG variable /network_instances/network_instance/fdb/l2rib (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2rib is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2rib() directly.

    YANG Description: Operational state container for MAC address and MAC-IP address
information that is learned and installed into the MAC VRF Layer 2
Routing Information Base (L2RIB)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=l2rib.l2rib, is_container='container', yang_name="l2rib", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2rib must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=l2rib.l2rib, is_container='container', yang_name="l2rib", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__l2rib = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2rib(self):
    self.__l2rib = YANGDynClass(base=l2rib.l2rib, is_container='container', yang_name="l2rib", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  mac_table = __builtin__.property(_get_mac_table, _set_mac_table)
  mac_mobility = __builtin__.property(_get_mac_mobility, _set_mac_mobility)
  arp_proxy = __builtin__.property(_get_arp_proxy, _set_arp_proxy)
  nd_proxy = __builtin__.property(_get_nd_proxy, _set_nd_proxy)
  l2rib = __builtin__.property(_get_l2rib)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('mac_table', mac_table), ('mac_mobility', mac_mobility), ('arp_proxy', arp_proxy), ('nd_proxy', nd_proxy), ('l2rib', l2rib), ])


from . import config
from . import state
from . import mac_table
from . import mac_mobility
from . import arp_proxy
from . import nd_proxy
from . import l2rib
class fdb(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/fdb. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state and configuration parameters relating to
the forwarding database of the network instance
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__mac_table','__mac_mobility','__arp_proxy','__nd_proxy','__l2rib',)

  _yang_name = 'fdb'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__mac_table = YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__mac_mobility = YANGDynClass(base=mac_mobility.mac_mobility, is_container='container', yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__arp_proxy = YANGDynClass(base=arp_proxy.arp_proxy, is_container='container', yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__nd_proxy = YANGDynClass(base=nd_proxy.nd_proxy, is_container='container', yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__l2rib = YANGDynClass(base=l2rib.l2rib, is_container='container', yang_name="l2rib", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /network_instances/network_instance/fdb/config (container)

    YANG Description: Configuration parameters relating to the FDB
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /network_instances/network_instance/fdb/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to the FDB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/fdb/state (container)

    YANG Description: Operational state parameters relating to the FDB
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/fdb/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the FDB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_mac_table(self):
    """
    Getter method for mac_table, mapped from YANG variable /network_instances/network_instance/fdb/mac_table (container)

    YANG Description: Table of learned or statically configured MAC addresses and
corresponding VLANs in the bridge domain
    """
    return self.__mac_table
      
  def _set_mac_table(self, v, load=False):
    """
    Setter method for mac_table, mapped from YANG variable /network_instances/network_instance/fdb/mac_table (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_table is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_table() directly.

    YANG Description: Table of learned or statically configured MAC addresses and
corresponding VLANs in the bridge domain
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_table must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__mac_table = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_table(self):
    self.__mac_table = YANGDynClass(base=mac_table.mac_table, is_container='container', yang_name="mac-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_mac_mobility(self):
    """
    Getter method for mac_mobility, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility (container)

    YANG Description: Top grouping the configuration and state data related to mac
mobility.
    """
    return self.__mac_mobility
      
  def _set_mac_mobility(self, v, load=False):
    """
    Setter method for mac_mobility, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_mobility is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_mobility() directly.

    YANG Description: Top grouping the configuration and state data related to mac
mobility.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mac_mobility.mac_mobility, is_container='container', yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_mobility must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mac_mobility.mac_mobility, is_container='container', yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__mac_mobility = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_mobility(self):
    self.__mac_mobility = YANGDynClass(base=mac_mobility.mac_mobility, is_container='container', yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_arp_proxy(self):
    """
    Getter method for arp_proxy, mapped from YANG variable /network_instances/network_instance/fdb/arp_proxy (container)

    YANG Description: Top Container related to ARP-Proxy
    """
    return self.__arp_proxy
      
  def _set_arp_proxy(self, v, load=False):
    """
    Setter method for arp_proxy, mapped from YANG variable /network_instances/network_instance/fdb/arp_proxy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_arp_proxy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_arp_proxy() directly.

    YANG Description: Top Container related to ARP-Proxy
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=arp_proxy.arp_proxy, is_container='container', yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """arp_proxy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=arp_proxy.arp_proxy, is_container='container', yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__arp_proxy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_arp_proxy(self):
    self.__arp_proxy = YANGDynClass(base=arp_proxy.arp_proxy, is_container='container', yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_nd_proxy(self):
    """
    Getter method for nd_proxy, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy (container)

    YANG Description: Top Container related to ND-Proxy.
    """
    return self.__nd_proxy
      
  def _set_nd_proxy(self, v, load=False):
    """
    Setter method for nd_proxy, mapped from YANG variable /network_instances/network_instance/fdb/nd_proxy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nd_proxy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nd_proxy() directly.

    YANG Description: Top Container related to ND-Proxy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=nd_proxy.nd_proxy, is_container='container', yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nd_proxy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=nd_proxy.nd_proxy, is_container='container', yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__nd_proxy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nd_proxy(self):
    self.__nd_proxy = YANGDynClass(base=nd_proxy.nd_proxy, is_container='container', yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_l2rib(self):
    """
    Getter method for l2rib, mapped from YANG variable /network_instances/network_instance/fdb/l2rib (container)

    YANG Description: Operational state container for MAC address and MAC-IP address
information that is learned and installed into the MAC VRF Layer 2
Routing Information Base (L2RIB)
    """
    return self.__l2rib
      
  def _set_l2rib(self, v, load=False):
    """
    Setter method for l2rib, mapped from YANG variable /network_instances/network_instance/fdb/l2rib (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2rib is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2rib() directly.

    YANG Description: Operational state container for MAC address and MAC-IP address
information that is learned and installed into the MAC VRF Layer 2
Routing Information Base (L2RIB)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=l2rib.l2rib, is_container='container', yang_name="l2rib", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2rib must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=l2rib.l2rib, is_container='container', yang_name="l2rib", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__l2rib = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2rib(self):
    self.__l2rib = YANGDynClass(base=l2rib.l2rib, is_container='container', yang_name="l2rib", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  mac_table = __builtin__.property(_get_mac_table, _set_mac_table)
  mac_mobility = __builtin__.property(_get_mac_mobility, _set_mac_mobility)
  arp_proxy = __builtin__.property(_get_arp_proxy, _set_arp_proxy)
  nd_proxy = __builtin__.property(_get_nd_proxy, _set_nd_proxy)
  l2rib = __builtin__.property(_get_l2rib)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('mac_table', mac_table), ('mac_mobility', mac_mobility), ('arp_proxy', arp_proxy), ('nd_proxy', nd_proxy), ('l2rib', l2rib), ])


