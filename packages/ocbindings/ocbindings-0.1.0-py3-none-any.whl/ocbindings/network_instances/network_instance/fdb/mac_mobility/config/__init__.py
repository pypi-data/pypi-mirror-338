# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/fdb/mac-mobility/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data related to mac mobility.
  """
  __slots__ = ('_path_helper', '_extmethods', '__mac_mobility','__mac_mobility_window','__mac_mobility_threshold','__ip_mobility_threshold','__duplicate_ip_detection_interval',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mac_mobility = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    self.__mac_mobility_window = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..600']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(180), is_leaf=True, yang_name="mac-mobility-window", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    self.__mac_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..50']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="mac-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    self.__ip_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    self.__duplicate_ip_detection_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'mac-mobility', 'config']

  def _get_mac_mobility(self):
    """
    Getter method for mac_mobility, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its MAC address) to move from one
Ethernet segment to another; this is referred to as 'MAC Mobility'
or 'MAC move. The configuration attributes includes: mac-mobility-window
and mac-mobility-threshold
    """
    return self.__mac_mobility
      
  def _set_mac_mobility(self, v, load=False):
    """
    Setter method for mac_mobility, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_mobility is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_mobility() directly.

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its MAC address) to move from one
Ethernet segment to another; this is referred to as 'MAC Mobility'
or 'MAC move. The configuration attributes includes: mac-mobility-window
and mac-mobility-threshold
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_mobility must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)""",
        })

    self.__mac_mobility = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_mobility(self):
    self.__mac_mobility = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)


  def _get_mac_mobility_window(self):
    """
    Getter method for mac_mobility_window, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility_window (uint16)

    YANG Description: The time interval used in detecting a duplicate MAC address.
The value can be from 5 through 600 seconds.
The default is 180 seconds
    """
    return self.__mac_mobility_window
      
  def _set_mac_mobility_window(self, v, load=False):
    """
    Setter method for mac_mobility_window, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility_window (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_mobility_window is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_mobility_window() directly.

    YANG Description: The time interval used in detecting a duplicate MAC address.
The value can be from 5 through 600 seconds.
The default is 180 seconds
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..600']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(180), is_leaf=True, yang_name="mac-mobility-window", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_mobility_window must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..600']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(180), is_leaf=True, yang_name="mac-mobility-window", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__mac_mobility_window = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_mobility_window(self):
    self.__mac_mobility_window = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..600']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(180), is_leaf=True, yang_name="mac-mobility-window", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)


  def _get_mac_mobility_threshold(self):
    """
    Getter method for mac_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility_threshold (uint8)

    YANG Description: The number of MAC mobility events that are detected for a
given MAC address within the detection-window before it is identified
as a duplicate MAC address. Once the detection threshold is reached,
updates for the MAC address are suppressed.
    """
    return self.__mac_mobility_threshold
      
  def _set_mac_mobility_threshold(self, v, load=False):
    """
    Setter method for mac_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility_threshold (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_mobility_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_mobility_threshold() directly.

    YANG Description: The number of MAC mobility events that are detected for a
given MAC address within the detection-window before it is identified
as a duplicate MAC address. Once the detection threshold is reached,
updates for the MAC address are suppressed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..50']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="mac-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_mobility_threshold must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..50']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="mac-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)""",
        })

    self.__mac_mobility_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_mobility_threshold(self):
    self.__mac_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..50']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="mac-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)


  def _get_ip_mobility_threshold(self):
    """
    Getter method for ip_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/ip_mobility_threshold (uint16)

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its IP address) to move from one
Ethernet segment to another. The number of IP mobility events that
are detected for a given IP address within the detection-threshold
before it is identified as a duplicate IP address.
Once the detection threshold is reached, updates for the IP address
are suppressed.
    """
    return self.__ip_mobility_threshold
      
  def _set_ip_mobility_threshold(self, v, load=False):
    """
    Setter method for ip_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/ip_mobility_threshold (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_mobility_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_mobility_threshold() directly.

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its IP address) to move from one
Ethernet segment to another. The number of IP mobility events that
are detected for a given IP address within the detection-threshold
before it is identified as a duplicate IP address.
Once the detection threshold is reached, updates for the IP address
are suppressed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_mobility_threshold must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__ip_mobility_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_mobility_threshold(self):
    self.__ip_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)


  def _get_duplicate_ip_detection_interval(self):
    """
    Getter method for duplicate_ip_detection_interval, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/duplicate_ip_detection_interval (uint16)

    YANG Description: The time interval used in detecting a duplicate IP address.
Duplicate ip detection number of host moves
allowed within interval period
    """
    return self.__duplicate_ip_detection_interval
      
  def _set_duplicate_ip_detection_interval(self, v, load=False):
    """
    Setter method for duplicate_ip_detection_interval, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/duplicate_ip_detection_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_duplicate_ip_detection_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_duplicate_ip_detection_interval() directly.

    YANG Description: The time interval used in detecting a duplicate IP address.
Duplicate ip detection number of host moves
allowed within interval period
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """duplicate_ip_detection_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__duplicate_ip_detection_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_duplicate_ip_detection_interval(self):
    self.__duplicate_ip_detection_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)

  mac_mobility = __builtin__.property(_get_mac_mobility, _set_mac_mobility)
  mac_mobility_window = __builtin__.property(_get_mac_mobility_window, _set_mac_mobility_window)
  mac_mobility_threshold = __builtin__.property(_get_mac_mobility_threshold, _set_mac_mobility_threshold)
  ip_mobility_threshold = __builtin__.property(_get_ip_mobility_threshold, _set_ip_mobility_threshold)
  duplicate_ip_detection_interval = __builtin__.property(_get_duplicate_ip_detection_interval, _set_duplicate_ip_detection_interval)


  _pyangbind_elements = OrderedDict([('mac_mobility', mac_mobility), ('mac_mobility_window', mac_mobility_window), ('mac_mobility_threshold', mac_mobility_threshold), ('ip_mobility_threshold', ip_mobility_threshold), ('duplicate_ip_detection_interval', duplicate_ip_detection_interval), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/fdb/mac-mobility/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data related to mac mobility.
  """
  __slots__ = ('_path_helper', '_extmethods', '__mac_mobility','__mac_mobility_window','__mac_mobility_threshold','__ip_mobility_threshold','__duplicate_ip_detection_interval',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mac_mobility = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    self.__mac_mobility_window = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..600']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(180), is_leaf=True, yang_name="mac-mobility-window", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    self.__mac_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..50']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="mac-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    self.__ip_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    self.__duplicate_ip_detection_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'mac-mobility', 'config']

  def _get_mac_mobility(self):
    """
    Getter method for mac_mobility, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its MAC address) to move from one
Ethernet segment to another; this is referred to as 'MAC Mobility'
or 'MAC move. The configuration attributes includes: mac-mobility-window
and mac-mobility-threshold
    """
    return self.__mac_mobility
      
  def _set_mac_mobility(self, v, load=False):
    """
    Setter method for mac_mobility, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_mobility is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_mobility() directly.

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its MAC address) to move from one
Ethernet segment to another; this is referred to as 'MAC Mobility'
or 'MAC move. The configuration attributes includes: mac-mobility-window
and mac-mobility-threshold
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_mobility must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)""",
        })

    self.__mac_mobility = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_mobility(self):
    self.__mac_mobility = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)


  def _get_mac_mobility_window(self):
    """
    Getter method for mac_mobility_window, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility_window (uint16)

    YANG Description: The time interval used in detecting a duplicate MAC address.
The value can be from 5 through 600 seconds.
The default is 180 seconds
    """
    return self.__mac_mobility_window
      
  def _set_mac_mobility_window(self, v, load=False):
    """
    Setter method for mac_mobility_window, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility_window (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_mobility_window is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_mobility_window() directly.

    YANG Description: The time interval used in detecting a duplicate MAC address.
The value can be from 5 through 600 seconds.
The default is 180 seconds
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..600']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(180), is_leaf=True, yang_name="mac-mobility-window", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_mobility_window must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..600']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(180), is_leaf=True, yang_name="mac-mobility-window", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__mac_mobility_window = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_mobility_window(self):
    self.__mac_mobility_window = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..600']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(180), is_leaf=True, yang_name="mac-mobility-window", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)


  def _get_mac_mobility_threshold(self):
    """
    Getter method for mac_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility_threshold (uint8)

    YANG Description: The number of MAC mobility events that are detected for a
given MAC address within the detection-window before it is identified
as a duplicate MAC address. Once the detection threshold is reached,
updates for the MAC address are suppressed.
    """
    return self.__mac_mobility_threshold
      
  def _set_mac_mobility_threshold(self, v, load=False):
    """
    Setter method for mac_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility_threshold (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_mobility_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_mobility_threshold() directly.

    YANG Description: The number of MAC mobility events that are detected for a
given MAC address within the detection-window before it is identified
as a duplicate MAC address. Once the detection threshold is reached,
updates for the MAC address are suppressed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..50']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="mac-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_mobility_threshold must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..50']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="mac-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)""",
        })

    self.__mac_mobility_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_mobility_threshold(self):
    self.__mac_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..50']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="mac-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)


  def _get_ip_mobility_threshold(self):
    """
    Getter method for ip_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/ip_mobility_threshold (uint16)

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its IP address) to move from one
Ethernet segment to another. The number of IP mobility events that
are detected for a given IP address within the detection-threshold
before it is identified as a duplicate IP address.
Once the detection threshold is reached, updates for the IP address
are suppressed.
    """
    return self.__ip_mobility_threshold
      
  def _set_ip_mobility_threshold(self, v, load=False):
    """
    Setter method for ip_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/ip_mobility_threshold (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_mobility_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_mobility_threshold() directly.

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its IP address) to move from one
Ethernet segment to another. The number of IP mobility events that
are detected for a given IP address within the detection-threshold
before it is identified as a duplicate IP address.
Once the detection threshold is reached, updates for the IP address
are suppressed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_mobility_threshold must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__ip_mobility_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_mobility_threshold(self):
    self.__ip_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)


  def _get_duplicate_ip_detection_interval(self):
    """
    Getter method for duplicate_ip_detection_interval, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/duplicate_ip_detection_interval (uint16)

    YANG Description: The time interval used in detecting a duplicate IP address.
Duplicate ip detection number of host moves
allowed within interval period
    """
    return self.__duplicate_ip_detection_interval
      
  def _set_duplicate_ip_detection_interval(self, v, load=False):
    """
    Setter method for duplicate_ip_detection_interval, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/duplicate_ip_detection_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_duplicate_ip_detection_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_duplicate_ip_detection_interval() directly.

    YANG Description: The time interval used in detecting a duplicate IP address.
Duplicate ip detection number of host moves
allowed within interval period
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """duplicate_ip_detection_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__duplicate_ip_detection_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_duplicate_ip_detection_interval(self):
    self.__duplicate_ip_detection_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)

  mac_mobility = __builtin__.property(_get_mac_mobility, _set_mac_mobility)
  mac_mobility_window = __builtin__.property(_get_mac_mobility_window, _set_mac_mobility_window)
  mac_mobility_threshold = __builtin__.property(_get_mac_mobility_threshold, _set_mac_mobility_threshold)
  ip_mobility_threshold = __builtin__.property(_get_ip_mobility_threshold, _set_ip_mobility_threshold)
  duplicate_ip_detection_interval = __builtin__.property(_get_duplicate_ip_detection_interval, _set_duplicate_ip_detection_interval)


  _pyangbind_elements = OrderedDict([('mac_mobility', mac_mobility), ('mac_mobility_window', mac_mobility_window), ('mac_mobility_threshold', mac_mobility_threshold), ('ip_mobility_threshold', ip_mobility_threshold), ('duplicate_ip_detection_interval', duplicate_ip_detection_interval), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/fdb/mac-mobility/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data related to mac mobility.
  """
  __slots__ = ('_path_helper', '_extmethods', '__mac_mobility','__mac_mobility_window','__mac_mobility_threshold','__ip_mobility_threshold','__duplicate_ip_detection_interval',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mac_mobility = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    self.__mac_mobility_window = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..600']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(180), is_leaf=True, yang_name="mac-mobility-window", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    self.__mac_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..50']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="mac-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    self.__ip_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    self.__duplicate_ip_detection_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'mac-mobility', 'config']

  def _get_mac_mobility(self):
    """
    Getter method for mac_mobility, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its MAC address) to move from one
Ethernet segment to another; this is referred to as 'MAC Mobility'
or 'MAC move. The configuration attributes includes: mac-mobility-window
and mac-mobility-threshold
    """
    return self.__mac_mobility
      
  def _set_mac_mobility(self, v, load=False):
    """
    Setter method for mac_mobility, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_mobility is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_mobility() directly.

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its MAC address) to move from one
Ethernet segment to another; this is referred to as 'MAC Mobility'
or 'MAC move. The configuration attributes includes: mac-mobility-window
and mac-mobility-threshold
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_mobility must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)""",
        })

    self.__mac_mobility = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_mobility(self):
    self.__mac_mobility = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)


  def _get_mac_mobility_window(self):
    """
    Getter method for mac_mobility_window, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility_window (uint16)

    YANG Description: The time interval used in detecting a duplicate MAC address.
The value can be from 5 through 600 seconds.
The default is 180 seconds
    """
    return self.__mac_mobility_window
      
  def _set_mac_mobility_window(self, v, load=False):
    """
    Setter method for mac_mobility_window, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility_window (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_mobility_window is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_mobility_window() directly.

    YANG Description: The time interval used in detecting a duplicate MAC address.
The value can be from 5 through 600 seconds.
The default is 180 seconds
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..600']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(180), is_leaf=True, yang_name="mac-mobility-window", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_mobility_window must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..600']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(180), is_leaf=True, yang_name="mac-mobility-window", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__mac_mobility_window = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_mobility_window(self):
    self.__mac_mobility_window = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..600']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(180), is_leaf=True, yang_name="mac-mobility-window", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)


  def _get_mac_mobility_threshold(self):
    """
    Getter method for mac_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility_threshold (uint8)

    YANG Description: The number of MAC mobility events that are detected for a
given MAC address within the detection-window before it is identified
as a duplicate MAC address. Once the detection threshold is reached,
updates for the MAC address are suppressed.
    """
    return self.__mac_mobility_threshold
      
  def _set_mac_mobility_threshold(self, v, load=False):
    """
    Setter method for mac_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility_threshold (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_mobility_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_mobility_threshold() directly.

    YANG Description: The number of MAC mobility events that are detected for a
given MAC address within the detection-window before it is identified
as a duplicate MAC address. Once the detection threshold is reached,
updates for the MAC address are suppressed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..50']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="mac-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_mobility_threshold must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..50']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="mac-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)""",
        })

    self.__mac_mobility_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_mobility_threshold(self):
    self.__mac_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..50']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="mac-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)


  def _get_ip_mobility_threshold(self):
    """
    Getter method for ip_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/ip_mobility_threshold (uint16)

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its IP address) to move from one
Ethernet segment to another. The number of IP mobility events that
are detected for a given IP address within the detection-threshold
before it is identified as a duplicate IP address.
Once the detection threshold is reached, updates for the IP address
are suppressed.
    """
    return self.__ip_mobility_threshold
      
  def _set_ip_mobility_threshold(self, v, load=False):
    """
    Setter method for ip_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/ip_mobility_threshold (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_mobility_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_mobility_threshold() directly.

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its IP address) to move from one
Ethernet segment to another. The number of IP mobility events that
are detected for a given IP address within the detection-threshold
before it is identified as a duplicate IP address.
Once the detection threshold is reached, updates for the IP address
are suppressed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_mobility_threshold must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__ip_mobility_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_mobility_threshold(self):
    self.__ip_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)


  def _get_duplicate_ip_detection_interval(self):
    """
    Getter method for duplicate_ip_detection_interval, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/duplicate_ip_detection_interval (uint16)

    YANG Description: The time interval used in detecting a duplicate IP address.
Duplicate ip detection number of host moves
allowed within interval period
    """
    return self.__duplicate_ip_detection_interval
      
  def _set_duplicate_ip_detection_interval(self, v, load=False):
    """
    Setter method for duplicate_ip_detection_interval, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/duplicate_ip_detection_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_duplicate_ip_detection_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_duplicate_ip_detection_interval() directly.

    YANG Description: The time interval used in detecting a duplicate IP address.
Duplicate ip detection number of host moves
allowed within interval period
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """duplicate_ip_detection_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__duplicate_ip_detection_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_duplicate_ip_detection_interval(self):
    self.__duplicate_ip_detection_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)

  mac_mobility = __builtin__.property(_get_mac_mobility, _set_mac_mobility)
  mac_mobility_window = __builtin__.property(_get_mac_mobility_window, _set_mac_mobility_window)
  mac_mobility_threshold = __builtin__.property(_get_mac_mobility_threshold, _set_mac_mobility_threshold)
  ip_mobility_threshold = __builtin__.property(_get_ip_mobility_threshold, _set_ip_mobility_threshold)
  duplicate_ip_detection_interval = __builtin__.property(_get_duplicate_ip_detection_interval, _set_duplicate_ip_detection_interval)


  _pyangbind_elements = OrderedDict([('mac_mobility', mac_mobility), ('mac_mobility_window', mac_mobility_window), ('mac_mobility_threshold', mac_mobility_threshold), ('ip_mobility_threshold', ip_mobility_threshold), ('duplicate_ip_detection_interval', duplicate_ip_detection_interval), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/fdb/mac-mobility/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data related to mac mobility.
  """
  __slots__ = ('_path_helper', '_extmethods', '__mac_mobility','__mac_mobility_window','__mac_mobility_threshold','__ip_mobility_threshold','__duplicate_ip_detection_interval',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mac_mobility = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    self.__mac_mobility_window = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..600']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(180), is_leaf=True, yang_name="mac-mobility-window", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    self.__mac_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..50']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="mac-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    self.__ip_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    self.__duplicate_ip_detection_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'mac-mobility', 'config']

  def _get_mac_mobility(self):
    """
    Getter method for mac_mobility, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its MAC address) to move from one
Ethernet segment to another; this is referred to as 'MAC Mobility'
or 'MAC move. The configuration attributes includes: mac-mobility-window
and mac-mobility-threshold
    """
    return self.__mac_mobility
      
  def _set_mac_mobility(self, v, load=False):
    """
    Setter method for mac_mobility, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_mobility is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_mobility() directly.

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its MAC address) to move from one
Ethernet segment to another; this is referred to as 'MAC Mobility'
or 'MAC move. The configuration attributes includes: mac-mobility-window
and mac-mobility-threshold
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_mobility must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)""",
        })

    self.__mac_mobility = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_mobility(self):
    self.__mac_mobility = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-mobility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)


  def _get_mac_mobility_window(self):
    """
    Getter method for mac_mobility_window, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility_window (uint16)

    YANG Description: The time interval used in detecting a duplicate MAC address.
The value can be from 5 through 600 seconds.
The default is 180 seconds
    """
    return self.__mac_mobility_window
      
  def _set_mac_mobility_window(self, v, load=False):
    """
    Setter method for mac_mobility_window, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility_window (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_mobility_window is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_mobility_window() directly.

    YANG Description: The time interval used in detecting a duplicate MAC address.
The value can be from 5 through 600 seconds.
The default is 180 seconds
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..600']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(180), is_leaf=True, yang_name="mac-mobility-window", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_mobility_window must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..600']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(180), is_leaf=True, yang_name="mac-mobility-window", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__mac_mobility_window = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_mobility_window(self):
    self.__mac_mobility_window = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..600']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(180), is_leaf=True, yang_name="mac-mobility-window", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)


  def _get_mac_mobility_threshold(self):
    """
    Getter method for mac_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility_threshold (uint8)

    YANG Description: The number of MAC mobility events that are detected for a
given MAC address within the detection-window before it is identified
as a duplicate MAC address. Once the detection threshold is reached,
updates for the MAC address are suppressed.
    """
    return self.__mac_mobility_threshold
      
  def _set_mac_mobility_threshold(self, v, load=False):
    """
    Setter method for mac_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/mac_mobility_threshold (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_mobility_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_mobility_threshold() directly.

    YANG Description: The number of MAC mobility events that are detected for a
given MAC address within the detection-window before it is identified
as a duplicate MAC address. Once the detection threshold is reached,
updates for the MAC address are suppressed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..50']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="mac-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_mobility_threshold must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..50']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="mac-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)""",
        })

    self.__mac_mobility_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_mobility_threshold(self):
    self.__mac_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..50']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="mac-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint8', is_config=True)


  def _get_ip_mobility_threshold(self):
    """
    Getter method for ip_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/ip_mobility_threshold (uint16)

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its IP address) to move from one
Ethernet segment to another. The number of IP mobility events that
are detected for a given IP address within the detection-threshold
before it is identified as a duplicate IP address.
Once the detection threshold is reached, updates for the IP address
are suppressed.
    """
    return self.__ip_mobility_threshold
      
  def _set_ip_mobility_threshold(self, v, load=False):
    """
    Setter method for ip_mobility_threshold, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/ip_mobility_threshold (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_mobility_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_mobility_threshold() directly.

    YANG Description: Enable (TRUE) or disable (FALSE). It is possible for a given host
or end-station (as defined by its IP address) to move from one
Ethernet segment to another. The number of IP mobility events that
are detected for a given IP address within the detection-threshold
before it is identified as a duplicate IP address.
Once the detection threshold is reached, updates for the IP address
are suppressed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_mobility_threshold must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__ip_mobility_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_mobility_threshold(self):
    self.__ip_mobility_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ip-mobility-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)


  def _get_duplicate_ip_detection_interval(self):
    """
    Getter method for duplicate_ip_detection_interval, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/duplicate_ip_detection_interval (uint16)

    YANG Description: The time interval used in detecting a duplicate IP address.
Duplicate ip detection number of host moves
allowed within interval period
    """
    return self.__duplicate_ip_detection_interval
      
  def _set_duplicate_ip_detection_interval(self, v, load=False):
    """
    Setter method for duplicate_ip_detection_interval, mapped from YANG variable /network_instances/network_instance/fdb/mac_mobility/config/duplicate_ip_detection_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_duplicate_ip_detection_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_duplicate_ip_detection_interval() directly.

    YANG Description: The time interval used in detecting a duplicate IP address.
Duplicate ip detection number of host moves
allowed within interval period
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """duplicate_ip_detection_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)""",
        })

    self.__duplicate_ip_detection_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_duplicate_ip_detection_interval(self):
    self.__duplicate_ip_detection_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="duplicate-ip-detection-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=True)

  mac_mobility = __builtin__.property(_get_mac_mobility, _set_mac_mobility)
  mac_mobility_window = __builtin__.property(_get_mac_mobility_window, _set_mac_mobility_window)
  mac_mobility_threshold = __builtin__.property(_get_mac_mobility_threshold, _set_mac_mobility_threshold)
  ip_mobility_threshold = __builtin__.property(_get_ip_mobility_threshold, _set_ip_mobility_threshold)
  duplicate_ip_detection_interval = __builtin__.property(_get_duplicate_ip_detection_interval, _set_duplicate_ip_detection_interval)


  _pyangbind_elements = OrderedDict([('mac_mobility', mac_mobility), ('mac_mobility_window', mac_mobility_window), ('mac_mobility_threshold', mac_mobility_threshold), ('ip_mobility_threshold', ip_mobility_threshold), ('duplicate_ip_detection_interval', duplicate_ip_detection_interval), ])


