# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import state
from . import gre
from . import ipv4
from . import ipv6
from . import mpls
from . import udp_v4
from . import udp_v6
from . import vxlan
class encap_header(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A list of headers added on top of a packet ordered by the
index value.  The inner-most header is the 0th value and is
adjacent to the original packet.  Additional headers may be
added in index order.

For example, in an encapsulation stack for MPLS in UDPv4, the
first index in the list is the MPLS header and the second
index is a UDPv4 header.
  """
  __slots__ = ('_path_helper', '_extmethods', '__index','__state','__gre','__ipv4','__ipv6','__mpls','__udp_v4','__udp_v6','__vxlan',)

  _yang_name = 'encap-header'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__index = YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__gre = YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__ipv4 = YANGDynClass(base=ipv4.ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__ipv6 = YANGDynClass(base=ipv6.ipv6, is_container='container', yang_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__mpls = YANGDynClass(base=mpls.mpls, is_container='container', yang_name="mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__udp_v4 = YANGDynClass(base=udp_v4.udp_v4, is_container='container', yang_name="udp-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__udp_v6 = YANGDynClass(base=udp_v6.udp_v6, is_container='container', yang_name="udp-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__vxlan = YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'afts', 'next-hops', 'next-hop', 'encap-headers', 'encap-header']

  def _get_index(self):
    """
    Getter method for index, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/index (leafref)

    YANG Description: A unique index identifying an encapsulation header in a stack
of encapsulation headers.
    """
    return self.__index
      
  def _set_index(self, v, load=False):
    """
    Setter method for index, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_index() directly.

    YANG Description: A unique index identifying an encapsulation header in a stack
of encapsulation headers.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_index(self):
    self.__index = YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/state (container)

    YANG Description: State parameters relating to encapsulation headers.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters relating to encapsulation headers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_gre(self):
    """
    Getter method for gre, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/gre (container)

    YANG Description: Container of nodes for GRE encapsulation.
    """
    return self.__gre
      
  def _set_gre(self, v, load=False):
    """
    Setter method for gre, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/gre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_gre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_gre() directly.

    YANG Description: Container of nodes for GRE encapsulation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """gre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__gre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_gre(self):
    self.__gre = YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_ipv4(self):
    """
    Getter method for ipv4, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/ipv4 (container)

    YANG Description: Container of nodes for UDP in IPv4 encapsulation.  When this
container is used, an IPv4 packet with no transport header
is added to the encapsulation list.
    """
    return self.__ipv4
      
  def _set_ipv4(self, v, load=False):
    """
    Setter method for ipv4, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/ipv4 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv4() directly.

    YANG Description: Container of nodes for UDP in IPv4 encapsulation.  When this
container is used, an IPv4 packet with no transport header
is added to the encapsulation list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ipv4.ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv4 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ipv4.ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__ipv4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv4(self):
    self.__ipv4 = YANGDynClass(base=ipv4.ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_ipv6(self):
    """
    Getter method for ipv6, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/ipv6 (container)

    YANG Description: Container of nodes for UDP in IPv6 encapsulation.  When this
container is used, an IPv6 packet with no transport header
is added to the encapsulation list.
    """
    return self.__ipv6
      
  def _set_ipv6(self, v, load=False):
    """
    Setter method for ipv6, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/ipv6 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv6 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv6() directly.

    YANG Description: Container of nodes for UDP in IPv6 encapsulation.  When this
container is used, an IPv6 packet with no transport header
is added to the encapsulation list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ipv6.ipv6, is_container='container', yang_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv6 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ipv6.ipv6, is_container='container', yang_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__ipv6 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv6(self):
    self.__ipv6 = YANGDynClass(base=ipv6.ipv6, is_container='container', yang_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_mpls(self):
    """
    Getter method for mpls, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/mpls (container)

    YANG Description: Container of nodes for MPLS encapsulation.
    """
    return self.__mpls
      
  def _set_mpls(self, v, load=False):
    """
    Setter method for mpls, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/mpls (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls() directly.

    YANG Description: Container of nodes for MPLS encapsulation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mpls.mpls, is_container='container', yang_name="mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mpls.mpls, is_container='container', yang_name="mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__mpls = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls(self):
    self.__mpls = YANGDynClass(base=mpls.mpls, is_container='container', yang_name="mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_udp_v4(self):
    """
    Getter method for udp_v4, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/udp_v4 (container)

    YANG Description: Container of nodes for UDP in IPv4 encapsulation.  When this
container is used, an IPv4 header with a UDP header is added
to the encapsulation list.
    """
    return self.__udp_v4
      
  def _set_udp_v4(self, v, load=False):
    """
    Setter method for udp_v4, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/udp_v4 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_udp_v4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_udp_v4() directly.

    YANG Description: Container of nodes for UDP in IPv4 encapsulation.  When this
container is used, an IPv4 header with a UDP header is added
to the encapsulation list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=udp_v4.udp_v4, is_container='container', yang_name="udp-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """udp_v4 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=udp_v4.udp_v4, is_container='container', yang_name="udp-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__udp_v4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_udp_v4(self):
    self.__udp_v4 = YANGDynClass(base=udp_v4.udp_v4, is_container='container', yang_name="udp-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_udp_v6(self):
    """
    Getter method for udp_v6, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/udp_v6 (container)

    YANG Description: Container of nodes for UDP in IPv6 encapsulation.  When this
container is used, an IPv6 header with a UDP header is added
to the encapsulation list.
    """
    return self.__udp_v6
      
  def _set_udp_v6(self, v, load=False):
    """
    Setter method for udp_v6, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/udp_v6 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_udp_v6 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_udp_v6() directly.

    YANG Description: Container of nodes for UDP in IPv6 encapsulation.  When this
container is used, an IPv6 header with a UDP header is added
to the encapsulation list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=udp_v6.udp_v6, is_container='container', yang_name="udp-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """udp_v6 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=udp_v6.udp_v6, is_container='container', yang_name="udp-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__udp_v6 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_udp_v6(self):
    self.__udp_v6 = YANGDynClass(base=udp_v6.udp_v6, is_container='container', yang_name="udp-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_vxlan(self):
    """
    Getter method for vxlan, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/vxlan (container)

    YANG Description: Container of nodes for VXLAN encapsulation.
    """
    return self.__vxlan
      
  def _set_vxlan(self, v, load=False):
    """
    Setter method for vxlan, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/vxlan (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vxlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vxlan() directly.

    YANG Description: Container of nodes for VXLAN encapsulation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vxlan must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__vxlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vxlan(self):
    self.__vxlan = YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  index = __builtin__.property(_get_index)
  state = __builtin__.property(_get_state)
  gre = __builtin__.property(_get_gre)
  ipv4 = __builtin__.property(_get_ipv4)
  ipv6 = __builtin__.property(_get_ipv6)
  mpls = __builtin__.property(_get_mpls)
  udp_v4 = __builtin__.property(_get_udp_v4)
  udp_v6 = __builtin__.property(_get_udp_v6)
  vxlan = __builtin__.property(_get_vxlan)


  _pyangbind_elements = OrderedDict([('index', index), ('state', state), ('gre', gre), ('ipv4', ipv4), ('ipv6', ipv6), ('mpls', mpls), ('udp_v4', udp_v4), ('udp_v6', udp_v6), ('vxlan', vxlan), ])


from . import state
from . import gre
from . import ipv4
from . import ipv6
from . import mpls
from . import udp_v4
from . import udp_v6
from . import vxlan
class encap_header(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A list of headers added on top of a packet ordered by the
index value.  The inner-most header is the 0th value and is
adjacent to the original packet.  Additional headers may be
added in index order.

For example, in an encapsulation stack for MPLS in UDPv4, the
first index in the list is the MPLS header and the second
index is a UDPv4 header.
  """
  __slots__ = ('_path_helper', '_extmethods', '__index','__state','__gre','__ipv4','__ipv6','__mpls','__udp_v4','__udp_v6','__vxlan',)

  _yang_name = 'encap-header'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__index = YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__gre = YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__ipv4 = YANGDynClass(base=ipv4.ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__ipv6 = YANGDynClass(base=ipv6.ipv6, is_container='container', yang_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__mpls = YANGDynClass(base=mpls.mpls, is_container='container', yang_name="mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__udp_v4 = YANGDynClass(base=udp_v4.udp_v4, is_container='container', yang_name="udp-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__udp_v6 = YANGDynClass(base=udp_v6.udp_v6, is_container='container', yang_name="udp-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__vxlan = YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'afts', 'next-hops', 'next-hop', 'encap-headers', 'encap-header']

  def _get_index(self):
    """
    Getter method for index, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/index (leafref)

    YANG Description: A unique index identifying an encapsulation header in a stack
of encapsulation headers.
    """
    return self.__index
      
  def _set_index(self, v, load=False):
    """
    Setter method for index, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_index() directly.

    YANG Description: A unique index identifying an encapsulation header in a stack
of encapsulation headers.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_index(self):
    self.__index = YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/state (container)

    YANG Description: State parameters relating to encapsulation headers.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters relating to encapsulation headers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_gre(self):
    """
    Getter method for gre, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/gre (container)

    YANG Description: Container of nodes for GRE encapsulation.
    """
    return self.__gre
      
  def _set_gre(self, v, load=False):
    """
    Setter method for gre, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/gre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_gre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_gre() directly.

    YANG Description: Container of nodes for GRE encapsulation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """gre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__gre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_gre(self):
    self.__gre = YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_ipv4(self):
    """
    Getter method for ipv4, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/ipv4 (container)

    YANG Description: Container of nodes for UDP in IPv4 encapsulation.  When this
container is used, an IPv4 packet with no transport header
is added to the encapsulation list.
    """
    return self.__ipv4
      
  def _set_ipv4(self, v, load=False):
    """
    Setter method for ipv4, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/ipv4 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv4() directly.

    YANG Description: Container of nodes for UDP in IPv4 encapsulation.  When this
container is used, an IPv4 packet with no transport header
is added to the encapsulation list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ipv4.ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv4 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ipv4.ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__ipv4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv4(self):
    self.__ipv4 = YANGDynClass(base=ipv4.ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_ipv6(self):
    """
    Getter method for ipv6, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/ipv6 (container)

    YANG Description: Container of nodes for UDP in IPv6 encapsulation.  When this
container is used, an IPv6 packet with no transport header
is added to the encapsulation list.
    """
    return self.__ipv6
      
  def _set_ipv6(self, v, load=False):
    """
    Setter method for ipv6, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/ipv6 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv6 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv6() directly.

    YANG Description: Container of nodes for UDP in IPv6 encapsulation.  When this
container is used, an IPv6 packet with no transport header
is added to the encapsulation list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ipv6.ipv6, is_container='container', yang_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv6 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ipv6.ipv6, is_container='container', yang_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__ipv6 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv6(self):
    self.__ipv6 = YANGDynClass(base=ipv6.ipv6, is_container='container', yang_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_mpls(self):
    """
    Getter method for mpls, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/mpls (container)

    YANG Description: Container of nodes for MPLS encapsulation.
    """
    return self.__mpls
      
  def _set_mpls(self, v, load=False):
    """
    Setter method for mpls, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/mpls (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls() directly.

    YANG Description: Container of nodes for MPLS encapsulation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mpls.mpls, is_container='container', yang_name="mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mpls.mpls, is_container='container', yang_name="mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__mpls = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls(self):
    self.__mpls = YANGDynClass(base=mpls.mpls, is_container='container', yang_name="mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_udp_v4(self):
    """
    Getter method for udp_v4, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/udp_v4 (container)

    YANG Description: Container of nodes for UDP in IPv4 encapsulation.  When this
container is used, an IPv4 header with a UDP header is added
to the encapsulation list.
    """
    return self.__udp_v4
      
  def _set_udp_v4(self, v, load=False):
    """
    Setter method for udp_v4, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/udp_v4 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_udp_v4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_udp_v4() directly.

    YANG Description: Container of nodes for UDP in IPv4 encapsulation.  When this
container is used, an IPv4 header with a UDP header is added
to the encapsulation list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=udp_v4.udp_v4, is_container='container', yang_name="udp-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """udp_v4 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=udp_v4.udp_v4, is_container='container', yang_name="udp-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__udp_v4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_udp_v4(self):
    self.__udp_v4 = YANGDynClass(base=udp_v4.udp_v4, is_container='container', yang_name="udp-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_udp_v6(self):
    """
    Getter method for udp_v6, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/udp_v6 (container)

    YANG Description: Container of nodes for UDP in IPv6 encapsulation.  When this
container is used, an IPv6 header with a UDP header is added
to the encapsulation list.
    """
    return self.__udp_v6
      
  def _set_udp_v6(self, v, load=False):
    """
    Setter method for udp_v6, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/udp_v6 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_udp_v6 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_udp_v6() directly.

    YANG Description: Container of nodes for UDP in IPv6 encapsulation.  When this
container is used, an IPv6 header with a UDP header is added
to the encapsulation list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=udp_v6.udp_v6, is_container='container', yang_name="udp-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """udp_v6 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=udp_v6.udp_v6, is_container='container', yang_name="udp-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__udp_v6 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_udp_v6(self):
    self.__udp_v6 = YANGDynClass(base=udp_v6.udp_v6, is_container='container', yang_name="udp-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_vxlan(self):
    """
    Getter method for vxlan, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/vxlan (container)

    YANG Description: Container of nodes for VXLAN encapsulation.
    """
    return self.__vxlan
      
  def _set_vxlan(self, v, load=False):
    """
    Setter method for vxlan, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/vxlan (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vxlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vxlan() directly.

    YANG Description: Container of nodes for VXLAN encapsulation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vxlan must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__vxlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vxlan(self):
    self.__vxlan = YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  index = __builtin__.property(_get_index)
  state = __builtin__.property(_get_state)
  gre = __builtin__.property(_get_gre)
  ipv4 = __builtin__.property(_get_ipv4)
  ipv6 = __builtin__.property(_get_ipv6)
  mpls = __builtin__.property(_get_mpls)
  udp_v4 = __builtin__.property(_get_udp_v4)
  udp_v6 = __builtin__.property(_get_udp_v6)
  vxlan = __builtin__.property(_get_vxlan)


  _pyangbind_elements = OrderedDict([('index', index), ('state', state), ('gre', gre), ('ipv4', ipv4), ('ipv6', ipv6), ('mpls', mpls), ('udp_v4', udp_v4), ('udp_v6', udp_v6), ('vxlan', vxlan), ])


from . import state
from . import gre
from . import ipv4
from . import ipv6
from . import mpls
from . import udp_v4
from . import udp_v6
from . import vxlan
class encap_header(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A list of headers added on top of a packet ordered by the
index value.  The inner-most header is the 0th value and is
adjacent to the original packet.  Additional headers may be
added in index order.

For example, in an encapsulation stack for MPLS in UDPv4, the
first index in the list is the MPLS header and the second
index is a UDPv4 header.
  """
  __slots__ = ('_path_helper', '_extmethods', '__index','__state','__gre','__ipv4','__ipv6','__mpls','__udp_v4','__udp_v6','__vxlan',)

  _yang_name = 'encap-header'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__index = YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__gre = YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__ipv4 = YANGDynClass(base=ipv4.ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__ipv6 = YANGDynClass(base=ipv6.ipv6, is_container='container', yang_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__mpls = YANGDynClass(base=mpls.mpls, is_container='container', yang_name="mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__udp_v4 = YANGDynClass(base=udp_v4.udp_v4, is_container='container', yang_name="udp-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__udp_v6 = YANGDynClass(base=udp_v6.udp_v6, is_container='container', yang_name="udp-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__vxlan = YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'afts', 'next-hops', 'next-hop', 'encap-headers', 'encap-header']

  def _get_index(self):
    """
    Getter method for index, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/index (leafref)

    YANG Description: A unique index identifying an encapsulation header in a stack
of encapsulation headers.
    """
    return self.__index
      
  def _set_index(self, v, load=False):
    """
    Setter method for index, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_index() directly.

    YANG Description: A unique index identifying an encapsulation header in a stack
of encapsulation headers.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_index(self):
    self.__index = YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/state (container)

    YANG Description: State parameters relating to encapsulation headers.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters relating to encapsulation headers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_gre(self):
    """
    Getter method for gre, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/gre (container)

    YANG Description: Container of nodes for GRE encapsulation.
    """
    return self.__gre
      
  def _set_gre(self, v, load=False):
    """
    Setter method for gre, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/gre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_gre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_gre() directly.

    YANG Description: Container of nodes for GRE encapsulation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """gre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__gre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_gre(self):
    self.__gre = YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_ipv4(self):
    """
    Getter method for ipv4, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/ipv4 (container)

    YANG Description: Container of nodes for UDP in IPv4 encapsulation.  When this
container is used, an IPv4 packet with no transport header
is added to the encapsulation list.
    """
    return self.__ipv4
      
  def _set_ipv4(self, v, load=False):
    """
    Setter method for ipv4, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/ipv4 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv4() directly.

    YANG Description: Container of nodes for UDP in IPv4 encapsulation.  When this
container is used, an IPv4 packet with no transport header
is added to the encapsulation list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ipv4.ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv4 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ipv4.ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__ipv4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv4(self):
    self.__ipv4 = YANGDynClass(base=ipv4.ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_ipv6(self):
    """
    Getter method for ipv6, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/ipv6 (container)

    YANG Description: Container of nodes for UDP in IPv6 encapsulation.  When this
container is used, an IPv6 packet with no transport header
is added to the encapsulation list.
    """
    return self.__ipv6
      
  def _set_ipv6(self, v, load=False):
    """
    Setter method for ipv6, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/ipv6 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv6 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv6() directly.

    YANG Description: Container of nodes for UDP in IPv6 encapsulation.  When this
container is used, an IPv6 packet with no transport header
is added to the encapsulation list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ipv6.ipv6, is_container='container', yang_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv6 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ipv6.ipv6, is_container='container', yang_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__ipv6 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv6(self):
    self.__ipv6 = YANGDynClass(base=ipv6.ipv6, is_container='container', yang_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_mpls(self):
    """
    Getter method for mpls, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/mpls (container)

    YANG Description: Container of nodes for MPLS encapsulation.
    """
    return self.__mpls
      
  def _set_mpls(self, v, load=False):
    """
    Setter method for mpls, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/mpls (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls() directly.

    YANG Description: Container of nodes for MPLS encapsulation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mpls.mpls, is_container='container', yang_name="mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mpls.mpls, is_container='container', yang_name="mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__mpls = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls(self):
    self.__mpls = YANGDynClass(base=mpls.mpls, is_container='container', yang_name="mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_udp_v4(self):
    """
    Getter method for udp_v4, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/udp_v4 (container)

    YANG Description: Container of nodes for UDP in IPv4 encapsulation.  When this
container is used, an IPv4 header with a UDP header is added
to the encapsulation list.
    """
    return self.__udp_v4
      
  def _set_udp_v4(self, v, load=False):
    """
    Setter method for udp_v4, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/udp_v4 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_udp_v4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_udp_v4() directly.

    YANG Description: Container of nodes for UDP in IPv4 encapsulation.  When this
container is used, an IPv4 header with a UDP header is added
to the encapsulation list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=udp_v4.udp_v4, is_container='container', yang_name="udp-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """udp_v4 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=udp_v4.udp_v4, is_container='container', yang_name="udp-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__udp_v4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_udp_v4(self):
    self.__udp_v4 = YANGDynClass(base=udp_v4.udp_v4, is_container='container', yang_name="udp-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_udp_v6(self):
    """
    Getter method for udp_v6, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/udp_v6 (container)

    YANG Description: Container of nodes for UDP in IPv6 encapsulation.  When this
container is used, an IPv6 header with a UDP header is added
to the encapsulation list.
    """
    return self.__udp_v6
      
  def _set_udp_v6(self, v, load=False):
    """
    Setter method for udp_v6, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/udp_v6 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_udp_v6 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_udp_v6() directly.

    YANG Description: Container of nodes for UDP in IPv6 encapsulation.  When this
container is used, an IPv6 header with a UDP header is added
to the encapsulation list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=udp_v6.udp_v6, is_container='container', yang_name="udp-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """udp_v6 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=udp_v6.udp_v6, is_container='container', yang_name="udp-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__udp_v6 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_udp_v6(self):
    self.__udp_v6 = YANGDynClass(base=udp_v6.udp_v6, is_container='container', yang_name="udp-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_vxlan(self):
    """
    Getter method for vxlan, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/vxlan (container)

    YANG Description: Container of nodes for VXLAN encapsulation.
    """
    return self.__vxlan
      
  def _set_vxlan(self, v, load=False):
    """
    Setter method for vxlan, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/vxlan (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vxlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vxlan() directly.

    YANG Description: Container of nodes for VXLAN encapsulation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vxlan must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__vxlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vxlan(self):
    self.__vxlan = YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  index = __builtin__.property(_get_index)
  state = __builtin__.property(_get_state)
  gre = __builtin__.property(_get_gre)
  ipv4 = __builtin__.property(_get_ipv4)
  ipv6 = __builtin__.property(_get_ipv6)
  mpls = __builtin__.property(_get_mpls)
  udp_v4 = __builtin__.property(_get_udp_v4)
  udp_v6 = __builtin__.property(_get_udp_v6)
  vxlan = __builtin__.property(_get_vxlan)


  _pyangbind_elements = OrderedDict([('index', index), ('state', state), ('gre', gre), ('ipv4', ipv4), ('ipv6', ipv6), ('mpls', mpls), ('udp_v4', udp_v4), ('udp_v6', udp_v6), ('vxlan', vxlan), ])


from . import state
from . import gre
from . import ipv4
from . import ipv6
from . import mpls
from . import udp_v4
from . import udp_v6
from . import vxlan
class encap_header(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A list of headers added on top of a packet ordered by the
index value.  The inner-most header is the 0th value and is
adjacent to the original packet.  Additional headers may be
added in index order.

For example, in an encapsulation stack for MPLS in UDPv4, the
first index in the list is the MPLS header and the second
index is a UDPv4 header.
  """
  __slots__ = ('_path_helper', '_extmethods', '__index','__state','__gre','__ipv4','__ipv6','__mpls','__udp_v4','__udp_v6','__vxlan',)

  _yang_name = 'encap-header'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__index = YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__gre = YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__ipv4 = YANGDynClass(base=ipv4.ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__ipv6 = YANGDynClass(base=ipv6.ipv6, is_container='container', yang_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__mpls = YANGDynClass(base=mpls.mpls, is_container='container', yang_name="mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__udp_v4 = YANGDynClass(base=udp_v4.udp_v4, is_container='container', yang_name="udp-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__udp_v6 = YANGDynClass(base=udp_v6.udp_v6, is_container='container', yang_name="udp-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__vxlan = YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'afts', 'next-hops', 'next-hop', 'encap-headers', 'encap-header']

  def _get_index(self):
    """
    Getter method for index, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/index (leafref)

    YANG Description: A unique index identifying an encapsulation header in a stack
of encapsulation headers.
    """
    return self.__index
      
  def _set_index(self, v, load=False):
    """
    Setter method for index, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/index (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_index() directly.

    YANG Description: A unique index identifying an encapsulation header in a stack
of encapsulation headers.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """index must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_index(self):
    self.__index = YANGDynClass(base=str, is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/state (container)

    YANG Description: State parameters relating to encapsulation headers.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State parameters relating to encapsulation headers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_gre(self):
    """
    Getter method for gre, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/gre (container)

    YANG Description: Container of nodes for GRE encapsulation.
    """
    return self.__gre
      
  def _set_gre(self, v, load=False):
    """
    Setter method for gre, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/gre (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_gre is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_gre() directly.

    YANG Description: Container of nodes for GRE encapsulation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """gre must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__gre = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_gre(self):
    self.__gre = YANGDynClass(base=gre.gre, is_container='container', yang_name="gre", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_ipv4(self):
    """
    Getter method for ipv4, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/ipv4 (container)

    YANG Description: Container of nodes for UDP in IPv4 encapsulation.  When this
container is used, an IPv4 packet with no transport header
is added to the encapsulation list.
    """
    return self.__ipv4
      
  def _set_ipv4(self, v, load=False):
    """
    Setter method for ipv4, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/ipv4 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv4() directly.

    YANG Description: Container of nodes for UDP in IPv4 encapsulation.  When this
container is used, an IPv4 packet with no transport header
is added to the encapsulation list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ipv4.ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv4 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ipv4.ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__ipv4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv4(self):
    self.__ipv4 = YANGDynClass(base=ipv4.ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_ipv6(self):
    """
    Getter method for ipv6, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/ipv6 (container)

    YANG Description: Container of nodes for UDP in IPv6 encapsulation.  When this
container is used, an IPv6 packet with no transport header
is added to the encapsulation list.
    """
    return self.__ipv6
      
  def _set_ipv6(self, v, load=False):
    """
    Setter method for ipv6, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/ipv6 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv6 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv6() directly.

    YANG Description: Container of nodes for UDP in IPv6 encapsulation.  When this
container is used, an IPv6 packet with no transport header
is added to the encapsulation list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ipv6.ipv6, is_container='container', yang_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv6 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ipv6.ipv6, is_container='container', yang_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__ipv6 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv6(self):
    self.__ipv6 = YANGDynClass(base=ipv6.ipv6, is_container='container', yang_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_mpls(self):
    """
    Getter method for mpls, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/mpls (container)

    YANG Description: Container of nodes for MPLS encapsulation.
    """
    return self.__mpls
      
  def _set_mpls(self, v, load=False):
    """
    Setter method for mpls, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/mpls (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls() directly.

    YANG Description: Container of nodes for MPLS encapsulation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mpls.mpls, is_container='container', yang_name="mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mpls.mpls, is_container='container', yang_name="mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__mpls = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls(self):
    self.__mpls = YANGDynClass(base=mpls.mpls, is_container='container', yang_name="mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_udp_v4(self):
    """
    Getter method for udp_v4, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/udp_v4 (container)

    YANG Description: Container of nodes for UDP in IPv4 encapsulation.  When this
container is used, an IPv4 header with a UDP header is added
to the encapsulation list.
    """
    return self.__udp_v4
      
  def _set_udp_v4(self, v, load=False):
    """
    Setter method for udp_v4, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/udp_v4 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_udp_v4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_udp_v4() directly.

    YANG Description: Container of nodes for UDP in IPv4 encapsulation.  When this
container is used, an IPv4 header with a UDP header is added
to the encapsulation list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=udp_v4.udp_v4, is_container='container', yang_name="udp-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """udp_v4 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=udp_v4.udp_v4, is_container='container', yang_name="udp-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__udp_v4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_udp_v4(self):
    self.__udp_v4 = YANGDynClass(base=udp_v4.udp_v4, is_container='container', yang_name="udp-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_udp_v6(self):
    """
    Getter method for udp_v6, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/udp_v6 (container)

    YANG Description: Container of nodes for UDP in IPv6 encapsulation.  When this
container is used, an IPv6 header with a UDP header is added
to the encapsulation list.
    """
    return self.__udp_v6
      
  def _set_udp_v6(self, v, load=False):
    """
    Setter method for udp_v6, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/udp_v6 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_udp_v6 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_udp_v6() directly.

    YANG Description: Container of nodes for UDP in IPv6 encapsulation.  When this
container is used, an IPv6 header with a UDP header is added
to the encapsulation list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=udp_v6.udp_v6, is_container='container', yang_name="udp-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """udp_v6 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=udp_v6.udp_v6, is_container='container', yang_name="udp-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__udp_v6 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_udp_v6(self):
    self.__udp_v6 = YANGDynClass(base=udp_v6.udp_v6, is_container='container', yang_name="udp-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_vxlan(self):
    """
    Getter method for vxlan, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/vxlan (container)

    YANG Description: Container of nodes for VXLAN encapsulation.
    """
    return self.__vxlan
      
  def _set_vxlan(self, v, load=False):
    """
    Setter method for vxlan, mapped from YANG variable /network_instances/network_instance/afts/next_hops/next_hop/encap_headers/encap_header/vxlan (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vxlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vxlan() directly.

    YANG Description: Container of nodes for VXLAN encapsulation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vxlan must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__vxlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vxlan(self):
    self.__vxlan = YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  index = __builtin__.property(_get_index)
  state = __builtin__.property(_get_state)
  gre = __builtin__.property(_get_gre)
  ipv4 = __builtin__.property(_get_ipv4)
  ipv6 = __builtin__.property(_get_ipv6)
  mpls = __builtin__.property(_get_mpls)
  udp_v4 = __builtin__.property(_get_udp_v4)
  udp_v6 = __builtin__.property(_get_udp_v6)
  vxlan = __builtin__.property(_get_vxlan)


  _pyangbind_elements = OrderedDict([('index', index), ('state', state), ('gre', gre), ('ipv4', ipv4), ('ipv6', ipv6), ('mpls', mpls), ('udp_v4', udp_v4), ('udp_v6', udp_v6), ('vxlan', vxlan), ])


